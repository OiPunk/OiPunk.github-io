<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>异常及常用类知识点</title>
      <link href="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">throws:声明异常</span></span><br><span class="line"><span class="comment">* 在异常情况出现的时候，可以使用try...catch...finally的方式对异常进行处理，除此之外，可以将异常向外跑出，由外部的进行处理</span></span><br><span class="line"><span class="comment">*   1、在方法调用过程中，可以存在N多个方法之间的调用，此时假如每个方法中都包含了异常情况</span></span><br><span class="line"><span class="comment">*       那么就需要在每个方法中都进行try。。catch，另外一种比较简单的方式，就是在方法的最外层调用处理一次即可</span></span><br><span class="line"><span class="comment">*       使用throws的方法，对所有执行过程中的所有方法出现的异常进行统一集中处理</span></span><br><span class="line"><span class="comment">*   2、如何判断是使用throws还是使用try...catch..</span></span><br><span class="line"><span class="comment">*       最稳妥的方式是在每个方法中都进行异常的处理</span></span><br><span class="line"><span class="comment">*       偷懒的方式是判断在整个调用的过程中，外层的调用方法是否有对异常的处理，如果有，直接使用throws,如果没有</span></span><br><span class="line"><span class="comment">*           那么就要使用try...catch...</span></span><br><span class="line"><span class="comment">* throw：抛出异常</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140433429.png" alt="image-20200513140433429"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140502888.png" alt="image-20200513140502888"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140553620.png" alt="image-20200513140553620"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140731558.png" alt="image-20200513140731558"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140744790.png" alt="image-20200513140744790"></p><h6 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h6><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140825045.png" alt="image-20200513140825045"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140834429.png" alt="image-20200513140834429"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140904488.png" alt="image-20200513140904488"></p><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 注意：常量池在1.7之后放置在了堆空间之中</span></span><br><span class="line"><span class="comment">*       字符串的使用：</span></span><br><span class="line"><span class="comment">*           1、创建</span></span><br><span class="line"><span class="comment">*               String str = "abc";</span></span><br><span class="line"><span class="comment">*               String str2 = new String("abc");</span></span><br><span class="line"><span class="comment">*               两种方式都可以用，只不过第一种使用比较多</span></span><br><span class="line"><span class="comment">*           2、字符串的本质</span></span><br><span class="line"><span class="comment">*               字符串的本质是字符数组或者叫做字符序列</span></span><br><span class="line"><span class="comment">*               String类使用final修饰，不可以被继承</span></span><br><span class="line"><span class="comment">*               使用equals方法比较的是字符数组的每一个位置的值</span></span><br><span class="line"><span class="comment">*               String是一个不可变对象</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140925492.png" alt="image-20200513140925492"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140955701.png" alt="image-20200513140955701"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141008463.png" alt="image-20200513141008463"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141134567.png" alt="image-20200513141134567"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 可变字符串</span></span><br><span class="line"><span class="comment">*   StringBuffer：线程安全，效率低</span></span><br><span class="line"><span class="comment">*   StringBuilder: 线程不安全，效率高</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141153565.png" alt="image-20200513141153565"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141202381.png" alt="image-20200513141202381"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141242100.png" alt="image-20200513141242100"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141249790.png" alt="image-20200513141249790"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141258922.png" alt="image-20200513141258922"></p><h5 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h5><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141313248.png" alt="image-20200513141313248"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141321073.png" alt="image-20200513141321073"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141328008.png" alt="image-20200513141328008"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141333994.png" alt="image-20200513141333994"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141353294.png" alt="image-20200513141353294"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image/%E5%BC%82%E5%B8%B8%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20200513141358822.png" alt="image-20200513141358822"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架知识点整理</title>
      <link href="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* java集合框架：</span></span><br><span class="line"><span class="comment">*   Collection：存放的是单一值</span></span><br><span class="line"><span class="comment">*       特点：</span></span><br><span class="line"><span class="comment">*           1、可以存放不同类型的数据，而数组只能存放固定类型的数据</span></span><br><span class="line"><span class="comment">*           2、当使用arraylist子类实现的时候，初始化的长度是10，当长度不够的时候会自动进行扩容操作</span></span><br><span class="line"><span class="comment">*       api方法：</span></span><br><span class="line"><span class="comment">*           增加数据的方法</span></span><br><span class="line"><span class="comment">*           add：要求必须传入的参数是Object对象，因此当写入基本数据类型的时候，包含了自动拆箱和自动装箱的过程</span></span><br><span class="line"><span class="comment">*           addAll:添加另一个集合的元素到此集合中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           删除数据的方法</span></span><br><span class="line"><span class="comment">*           clear:只是清空集合中的元素，但是此集合对象并没有被回收</span></span><br><span class="line"><span class="comment">*           remove:删除指定元素</span></span><br><span class="line"><span class="comment">*           removeAll：删除集合元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           查询数据的方法</span></span><br><span class="line"><span class="comment">*           contains:判断集合中是否包含指定的元素值</span></span><br><span class="line"><span class="comment">*           containsAll:判断此集合中是否包含另一个集合</span></span><br><span class="line"><span class="comment">*           isEmpty:判断集合是否等于空</span></span><br><span class="line"><span class="comment">*           retainAll:若集合中拥有另一个集合的所有元素，返回true，否则返回false</span></span><br><span class="line"><span class="comment">*           size:返回当前集合的大小</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //集合转数组的操作</span></span><br><span class="line"><span class="comment">*           toArray:将集合转换成数组</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121720326.png" alt="image-20200514121720326"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121734482.png" alt="image-20200514121734482"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121747635.png" alt="image-20200514121747635"></p><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* java集合框架：</span></span><br><span class="line"><span class="comment">*   List：存放的是单一值</span></span><br><span class="line"><span class="comment">*       特点：</span></span><br><span class="line"><span class="comment">*           1、可以存放不同类型的数据，而数组只能存放固定类型的数据</span></span><br><span class="line"><span class="comment">*           2、当使用arraylist子类实现的时候，初始化的长度是10，当长度不够的时候会自动进行扩容操作</span></span><br><span class="line"><span class="comment">*       api方法：</span></span><br><span class="line"><span class="comment">*           增加数据的方法</span></span><br><span class="line"><span class="comment">*           add：要求必须传入的参数是Object对象，因此当写入基本数据类型的时候，包含了自动拆箱和自动装箱的过程</span></span><br><span class="line"><span class="comment">*           addAll:添加另一个集合的元素到此集合中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           删除数据的方法</span></span><br><span class="line"><span class="comment">*           clear:只是清空集合中的元素，但是此集合对象并没有被回收</span></span><br><span class="line"><span class="comment">*           remove:删除指定元素</span></span><br><span class="line"><span class="comment">*           removeAll：删除集合元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           查询数据的方法</span></span><br><span class="line"><span class="comment">*           contains:判断集合中是否包含指定的元素值</span></span><br><span class="line"><span class="comment">*           containsAll:判断此集合中是否包含另一个集合</span></span><br><span class="line"><span class="comment">*           isEmpty:判断集合是否等于空</span></span><br><span class="line"><span class="comment">*           retainAll:若集合中拥有另一个集合的所有元素，返回true，否则返回false</span></span><br><span class="line"><span class="comment">*           size:返回当前集合的大小</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //集合转数组的操作</span></span><br><span class="line"><span class="comment">*           toArray:将集合转换成数组</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121809284.png" alt="image-20200514121809284"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121818097.png" alt="image-20200514121818097"></p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 在java代码中包含三种循环的方式</span></span><br><span class="line"><span class="comment">*   do...while</span></span><br><span class="line"><span class="comment">*   while</span></span><br><span class="line"><span class="comment">*   for</span></span><br><span class="line"><span class="comment">* 还有一种增强for循环的方式，可以简化循环的编写</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   所有的集合类都默认实现了Iterable的接口，实现此接口意味着具备了增强for循环的能力，也就是for-each</span></span><br><span class="line"><span class="comment">*      增强for循环本质上使用的也是iterator的功能</span></span><br><span class="line"><span class="comment">*      方法：</span></span><br><span class="line"><span class="comment">*               iterator()</span></span><br><span class="line"><span class="comment">*               foreach()</span></span><br><span class="line"><span class="comment">*   在iterator的方法中，要求返回一个Iterator的接口子类实例对象</span></span><br><span class="line"><span class="comment">*       此接口中包含了</span></span><br><span class="line"><span class="comment">*               hasNext()</span></span><br><span class="line"><span class="comment">*               next()</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   在使用iterator进行迭代的过程中如果删除其中的某个元素会报错，并发操作异常，因此</span></span><br><span class="line"><span class="comment">*       如果遍历的同时需要修改元素，建议使用listIterator（），</span></span><br><span class="line"><span class="comment">*   ListIterator迭代器提供了向前和向后两种遍历的方式</span></span><br><span class="line"><span class="comment">*       始终是通过cursor和lastret的指针来获取元素值及向下的遍历索引</span></span><br><span class="line"><span class="comment">*       当使用向前遍历的时候必须要保证指针在迭代器的结果，否则无法获取结果值</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121910889.png" alt="image-20200514121910889"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121922127.png" alt="image-20200514121922127"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122001163.png" alt="image-20200514122001163"></p><h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122038056.png" alt="image-20200514122038056"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122050646.png" alt="image-20200514122050646"></p><h6 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      1、Vector也是List接口的一个子类实现</span></span><br><span class="line"><span class="comment"> *      2、Vector跟ArrayList一样，底层都是使用数组进行实现的</span></span><br><span class="line"><span class="comment"> *      3、面试经常问区别：</span></span><br><span class="line"><span class="comment"> *          （1）ArrayList是线程不安全的，效率高，Vector是线程安全的效率低</span></span><br><span class="line"><span class="comment"> *          （2）ArrayList在进行扩容的时候，是扩容1.5倍，Vector扩容的时候扩容原来的2倍</span></span><br><span class="line"><span class="comment"> *</span></span><br></pre></td></tr></table></figure><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   1、set中存放的是无序，唯一的数据</span></span><br><span class="line"><span class="comment">*   2、set不可以通过下标获取对应位置的元素的值，因为无序的特点</span></span><br><span class="line"><span class="comment">*   3、使用treeset底层的实现是treemap,利用红黑树来进行实现</span></span><br><span class="line"><span class="comment">*   4、设置元素的时候，如果是自定义对象，会查找对象中的equals和hashcode的方法，如果没有，比较的是地址</span></span><br><span class="line"><span class="comment">*   5、树中的元素是要默认进行排序操作的，如果是基本数据类型，自动比较，如果是引用类型的话，需要自定义比较器</span></span><br><span class="line"><span class="comment">*       比较器分类：</span></span><br><span class="line"><span class="comment">*         内部比较器</span></span><br><span class="line"><span class="comment">*               定义在元素的类中，通过实现comparable接口来进行实现</span></span><br><span class="line"><span class="comment">*         外部比较器</span></span><br><span class="line"><span class="comment">*               定义在当前类中，通过实现comparator接口来实现，但是要将该比较器传递到集合中</span></span><br><span class="line"><span class="comment">*         注意：外部比较器可以定义成一个工具类，此时所有需要比较的规则如果一致的话，可以复用，而</span></span><br><span class="line"><span class="comment">*               内部比较器只有在存储当前对象的时候才可以使用</span></span><br><span class="line"><span class="comment">*               如果两者同时存在，使用外部比较器</span></span><br><span class="line"><span class="comment">*               当使用比较器的时候，不会调用equals方法</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122123267.png" alt="image-20200514122123267"></p><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122143284.png" alt="image-20200514122143284"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122235681.png" alt="image-20200514122235681"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122252795.png" alt="image-20200514122252795"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122334514.png" alt="image-20200514122334514"></p><h6 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122417659.png" alt="image-20200514122417659"></p><h6 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*         内部比较器</span></span><br><span class="line"><span class="comment">*               定义在元素的类中，通过实现comparable接口来进行实现</span></span><br><span class="line"><span class="comment">*         外部比较器</span></span><br><span class="line"><span class="comment">*               定义在当前类中，通过实现comparator接口来实现，但是要将该比较器传递到集合中</span></span><br><span class="line"><span class="comment">*         注意：外部比较器可以定义成一个工具类，此时所有需要比较的规则如果一致的话，可以复用，而</span></span><br><span class="line"><span class="comment">*               内部比较器只有在存储当前对象的时候才可以使用</span></span><br><span class="line"><span class="comment">*               如果两者同时存在，使用外部比较器</span></span><br><span class="line"><span class="comment">*               当使用比较器的时候，不会调用equals方法</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122527240.png" alt="image-20200514122527240"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122557122.png" alt="image-20200514122557122"></p><h6 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514125045624.png" alt="image-20200514125045624"></p><h6 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h6><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514125258424.png" alt="image-20200514125258424" style="zoom:80%;"><h6 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h6><p>牺牲完全平衡的特点，部分平衡，换区插入和删除的效率</p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134304988.png" alt="image-20200514134304988"></p><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当做一些集合的统一操作的时候，需要保证集合的类型是统一的，此时需要泛型来进行限制</span></span><br><span class="line"><span class="comment"> *      优点：</span></span><br><span class="line"><span class="comment"> *          1、数据安全</span></span><br><span class="line"><span class="comment"> *          2、获取数据时效率比较高</span></span><br><span class="line"><span class="comment"> *      给集合中的元素设置相同的类型就是泛型的基本需求</span></span><br><span class="line"><span class="comment"> *       使用：</span></span><br><span class="line"><span class="comment"> *          在定义对象的时候，通过&lt;&gt;中设置合理的类型来进行实现</span></span><br><span class="line"><span class="comment"> *  泛型的高阶应用：</span></span><br><span class="line"><span class="comment"> *      1、泛型类</span></span><br><span class="line"><span class="comment"> *          在定义类的时候在类名的后面添加&lt;E,K,V,A,B&gt;,起到占位的作用，类中的方法的返回值类型和属性的类型都可以使用</span></span><br><span class="line"><span class="comment"> *      2、泛型接口</span></span><br><span class="line"><span class="comment"> *          在定义接口的时候，在接口的名称后添加&lt;E,K,V,A,B&gt;,</span></span><br><span class="line"><span class="comment"> *          1、子类在进行实现的时候，可以不填写泛型的类型，此时在创建具体的子类对象的时候才决定使用什么类型</span></span><br><span class="line"><span class="comment"> *          2、子类在实现泛型接口的时候，只在实现父类的接口的时候指定父类的泛型类型即可，此时，测试方法中的泛型类型必须要跟子类保持一致</span></span><br><span class="line"><span class="comment"> *      3、泛型方法</span></span><br><span class="line"><span class="comment"> *          在定义方法的时候，指定方法的返回值和参数是自定义的占位符，可以是类名中的T,也可以是自定义的Q，只不过在使用Q的时候需要使用&lt;</span></span><br><span class="line"><span class="comment"> *          Q&gt;定义在返回值的前面</span></span><br><span class="line"><span class="comment"> *      4、泛型的上限（工作中不用）</span></span><br><span class="line"><span class="comment"> *          如果父类确定了，所有的子类都可以直接使用</span></span><br><span class="line"><span class="comment"> *      5、泛型的下限（工作中不用）</span></span><br><span class="line"><span class="comment"> *          如果子类确定了，子类的所有父类都可以直接传递参数使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134340093.png" alt="image-20200514134340093"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134358177.png" alt="image-20200514134358177"></p><h6 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134659227.png" alt="image-20200514134659227"></p><h6 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514140620622.png" alt="image-20200514140620622"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514140636471.png" alt="image-20200514140636471"></p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173113121.png" alt="image-20200514173113121" style="zoom:67%;"><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173130393.png" alt="image-20200514173130393" style="zoom:67%;"><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173144162.png" alt="image-20200514173144162" style="zoom:67%;">]]></content>
      
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode题解--括号配对</title>
      <link href="/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/"/>
      <url>/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="括号配对"><a href="#括号配对" class="headerlink" title="括号配对"></a>括号配对</h4><p>括号有效配对是指：<br>1）任何一个左括号都能找到和其正确配对的右括号<br>2）任何一个右括号都能找到和其正确配对的左括号<br>有效的：    (())  ()()   (()())  等<br>无效的：     (()   )(     等</p><h5 id="问题1-怎么判断一个括号字符串有效？"><a href="#问题1-怎么判断一个括号字符串有效？" class="headerlink" title="问题1: 怎么判断一个括号字符串有效？"></a>问题1: 怎么判断一个括号字符串有效？</h5><p>思路:</p><ol><li>用栈: 麻烦</li><li>用单一变量, 遇到左括号count++, 遇到右括号count–, count&lt;0,返回false, 最后count==0, 返回true</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.tocharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 注意字符用单引号'('</span></span><br><span class="line">        count += str[i] == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题2-如果一个括号字符串无效，返回至少填几个字符能让其整体有效-LeetCode-921"><a href="#问题2-如果一个括号字符串无效，返回至少填几个字符能让其整体有效-LeetCode-921" class="headerlink" title="问题2: 如果一个括号字符串无效，返回至少填几个字符能让其整体有效 (LeetCode 921)"></a>问题2: 如果一个括号字符串无效，返回至少填几个字符能让其整体有效 (LeetCode 921)</h5><p>思路: </p><ol><li>遇到左括号, count++, 遇到右括号, count–</li><li>如果count == -1, need++, count恢复成0</li><li>返回count + need</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">needParenthese</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> need = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 遇到')'</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                need++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count + need; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minAddToMakeValid</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;S.length(); i++) &#123;</span><br><span class="line">            R += S.charAt(i) == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (R == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 缺左括号, 左右都要+1, 把R归0</span></span><br><span class="line">                L++;</span><br><span class="line">                R++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> L + R;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="问题3-返回一个括号字符串中，最长的括号有效子串的长度-动态规划-LeetCode-32"><a href="#问题3-返回一个括号字符串中，最长的括号有效子串的长度-动态规划-LeetCode-32" class="headerlink" title="问题3: 返回一个括号字符串中，最长的括号有效子串的长度 (动态规划) (LeetCode 32)"></a>问题3: 返回一个括号字符串中，最长的括号有效子串的长度 (动态规划) (LeetCode 32)</h5><p>思路:</p><ol><li><p>i位置是左括号, dp[i] = 0</p></li><li><p>i位置是右括号, dp[i] = dp[i - 1] + 2 + (pre &gt; 0 ? dp[pre -1] : 0);</p></li><li><p>i位置往前推dp[i-1]个数, 的前一个数</p><p><img src="/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/image-20200624125914653.png" alt="image-20200624125914653"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[str.length];</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认dp[0] = 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 左括号不管</span></span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="comment">// 与str[i] 配对的左括号位置pre</span></span><br><span class="line">            pre = i - dp[i - <span class="number">1</span>] -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// pre是有效的, 并且是左括号</span></span><br><span class="line">            <span class="keyword">if</span> (pre &gt;= <span class="number">0</span> &amp;&amp; str[pre] == <span class="string">'('</span>) &#123;</span><br><span class="line">                <span class="comment">// dp[i] = 前一个有效值 + 2 + 再前一个有效值(pre - 1要有效)</span></span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + <span class="number">2</span> + (pre &gt; <span class="number">0</span> ? dp[pre -<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题4-给定括号字符串-返回该字符串最大嵌套层数"><a href="#问题4-给定括号字符串-返回该字符串最大嵌套层数" class="headerlink" title="问题4: 给定括号字符串, 返回该字符串最大嵌套层数"></a>问题4: 给定括号字符串, 返回该字符串最大嵌套层数</h5><p>思路: 遇到左括号count++, 遇到右括号count–, 返回count最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="comment">// 辅助变量</span></span><br><span class="line">    <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">')'</span> &amp;&amp; str[i] != <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">')'</span> &amp;&amp; --status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            status++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!isValid(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            max = Math.max(max, ++count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
