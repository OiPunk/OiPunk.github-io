<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring原理讲解</title>
      <link href="/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/"/>
      <url>/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring原理讲解"><a href="#Spring原理讲解" class="headerlink" title="Spring原理讲解"></a>Spring原理讲解</h1><h3 id="1、什么是Spring框架，Spring框架主要包含哪些模块"><a href="#1、什么是Spring框架，Spring框架主要包含哪些模块" class="headerlink" title="1、什么是Spring框架，Spring框架主要包含哪些模块"></a>1、什么是Spring框架，Spring框架主要包含哪些模块</h3><p>​        Spring是一个开源框架，Spring是一个轻量级的Java 开发框架。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的full-stack(一站式) 轻量级开源框架。</p><p>主要包含的模块：</p><p><img src="/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/spring-overview.png" alt></p><h3 id="2、Spring框架的优势"><a href="#2、Spring框架的优势" class="headerlink" title="2、Spring框架的优势"></a>2、Spring框架的优势</h3><p>​        1、Spring通过DI、AOP和消除样板式代码来简化企业级Java开发</p><p>​        2、Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同的领域，如Web服务、REST、移动开发以及NoSQL</p><p>​        3、低侵入式设计，代码的污染极低</p><p>​        4、独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺</p><p>​        5、Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦</p><p>​        6、Spring的AOP允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的复用</p><p>​        7、Spring的ORM和DAO提供了与第三方持久层框架的的良好整合，并简化了底层的数据库访问</p><p>​        8、Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部</p><h3 id="3、IOC和DI是什么？"><a href="#3、IOC和DI是什么？" class="headerlink" title="3、IOC和DI是什么？"></a>3、IOC和DI是什么？</h3><p>​        控制反转是就是应用本身不负责依赖对象的创建和维护,依赖对象的创建及维护是由外部容器负责的,这样控制权就有应用转移到了外部容器,控制权的转移就是控制反转。</p><p>​        依赖注入是指:在程序运行期间,由外部容器动态地将依赖对象注入到组件中如：一般，通过构造函数注入或者setter注入。</p><h3 id="4、描述下Spring-IOC容器的初始化过程"><a href="#4、描述下Spring-IOC容器的初始化过程" class="headerlink" title="4、描述下Spring IOC容器的初始化过程"></a>4、描述下Spring IOC容器的初始化过程</h3><p>​        Spring IOC容器的初始化简单的可以分为三个过程：</p><p>​        第一个过程是Resource资源定位。这个Resouce指的是BeanDefinition的资源定位。这个过程就是容器找数据的过程，就像水桶装水需要先找到水一样。</p><p>​        第二个过程是BeanDefinition的载入过程。这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDefition。</p><p>​        第三个过程是向IOC容器注册这些BeanDefinition的过程，这个过程就是将前面的BeanDefition保存到HashMap中的过程。</p><h3 id="5、BeanFactory-和-FactoryBean的区别？"><a href="#5、BeanFactory-和-FactoryBean的区别？" class="headerlink" title="5、BeanFactory 和 FactoryBean的区别？"></a>5、BeanFactory 和 FactoryBean的区别？</h3><ul><li><p><strong>BeanFactory</strong>是个Factory，也就是IOC容器或对象工厂，在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的，提供了实例化对象和拿对象的功能。</p><p>使用场景：</p><ul><li>从Ioc容器中获取Bean(byName or byType)</li><li>检索Ioc容器中是否包含指定的Bean</li><li>判断Bean是否为单例</li></ul></li><li><p><strong>FactoryBean</strong>是个Bean，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p><p>使用场景</p><ul><li>ProxyFactoryBean</li></ul></li></ul><h3 id="6、BeanFactory和ApplicationContext的异同"><a href="#6、BeanFactory和ApplicationContext的异同" class="headerlink" title="6、BeanFactory和ApplicationContext的异同"></a>6、BeanFactory和ApplicationContext的异同</h3><p><img src="/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/ApplicationContext%E7%B1%BB%E5%9B%BE.png" alt></p><p>相同：</p><ul><li>Spring提供了两种不同的IOC 容器，一个是BeanFactory，另外一个是ApplicationContext，它们都是Java  interface，ApplicationContext继承于BeanFactory(ApplicationContext继承ListableBeanFactory。</li><li>它们都可以用来配置XML属性，也支持属性的自动注入。</li><li>而ListableBeanFactory继承BeanFactory)，BeanFactory 和 ApplicationContext 都提供了一种方式，使用getBean(“bean name”)获取bean。</li></ul><p>不同：</p><ul><li>当你调用getBean()方法时，BeanFactory仅实例化bean，而ApplicationContext 在启动容器的时候实例化单例bean，不会等待调用getBean()方法时再实例化。</li><li>BeanFactory不支持国际化，即i18n，但ApplicationContext提供了对它的支持。</li><li>BeanFactory与ApplicationContext之间的另一个区别是能够将事件发布到注册为监听器的bean。</li><li>BeanFactory 的一个核心实现是XMLBeanFactory 而ApplicationContext  的一个核心实现是ClassPathXmlApplicationContext，Web容器的环境我们使用WebApplicationContext并且增加了getServletContext 方法。</li><li>如果使用自动注入并使用BeanFactory，则需要使用API注册AutoWiredBeanPostProcessor，如果使用ApplicationContext，则可以使用XML进行配置。</li><li>简而言之，BeanFactory提供基本的IOC和DI功能，而ApplicationContext提供高级功能，BeanFactory可用于测试和非生产使用，但ApplicationContext是功能更丰富的容器实现，应该优于BeanFactory</li></ul><h3 id="7、Spring-Bean-的生命周期？"><a href="#7、Spring-Bean-的生命周期？" class="headerlink" title="7、Spring Bean 的生命周期？"></a>7、Spring Bean 的生命周期？</h3><p><img src="/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt></p><p>总结：</p><p><strong>（1）实例化Bean：</strong></p><p>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。</p><p><strong>（2）设置对象属性（依赖注入）：</strong></p><p>实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入。</p><p><strong>（3）处理Aware接口：</strong></p><p>接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：</p><p>①如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；</p><p>②如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。</p><p>③如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</p><p><strong>（4）BeanPostProcessor：</strong></p><p>如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。</p><p><strong>（5）InitializingBean 与 init-method：</strong></p><p>如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</p><p><strong>（6）如果这个Bean实现了BeanPostProcessor接口</strong>，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；</p><p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</p><p><strong>（7）DisposableBean：</strong></p><p>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</p><p><strong>（8）destroy-method：</strong></p><p>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p><h3 id="8、Spring-AOP的实现原理？"><a href="#8、Spring-AOP的实现原理？" class="headerlink" title="8、Spring AOP的实现原理？"></a>8、Spring AOP的实现原理？</h3><p>​        Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。</p><p>​        Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p><p>​        如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成某个类的子类，注意，CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</p><h3 id="9、Spring-是如何管理事务的？"><a href="#9、Spring-是如何管理事务的？" class="headerlink" title="9、Spring 是如何管理事务的？"></a>9、Spring 是如何管理事务的？</h3><p>​        Spring事务管理主要包括3个接口，Spring的事务主要是由它们(<strong>PlatformTransactionManager，TransactionDefinition，TransactionStatus</strong>)三个共同完成的。</p><p><strong>1. PlatformTransactionManager</strong>：事务管理器–主要用于平台相关事务的管理</p><p>主要有三个方法：</p><ul><li>commit 事务提交；</li><li>rollback 事务回滚；</li><li>getTransaction 获取事务状态。</li></ul><p><strong>2. TransactionDefinition</strong>：事务定义信息–用来定义事务相关的属性，给事务管理器PlatformTransactionManager使用</p><p>这个接口有下面四个主要方法：</p><ul><li>getIsolationLevel：获取隔离级别；</li><li>getPropagationBehavior：获取传播行为；</li><li>getTimeout：获取超时时间；</li><li>isReadOnly：是否只读（保存、更新、删除时属性变为false–可读写，查询时为true–只读）</li></ul><p>事务管理器能够根据这个返回值进行优化，这些事务的配置信息，都可以通过配置文件进行配置。</p><p><strong>3. TransactionStatus</strong>：事务具体运行状态–事务管理过程中，每个时间点事务的状态信息。</p><p>例如它的几个方法：</p><ul><li>hasSavepoint()：返回这个事务内部是否包含一个保存点，</li><li>isCompleted()：返回该事务是否已完成，也就是说，是否已经提交或回滚</li><li>isNewTransaction()：判断当前事务是否是一个新事务</li></ul><p><strong>声明式事务的优缺点</strong>：</p><ul><li><strong>优点</strong>：不需要在业务逻辑代码中编写事务相关代码，只需要在配置文件配置或使用注解（@Transaction），这种方式没有侵入性。</li><li><strong>缺点</strong>：声明式事务的最细粒度作用于方法上，如果像代码块也有事务需求，只能变通下，将代码块变为方法。</li></ul><h3 id="10、Spring-的不同事务传播行为有哪些，干什么用的？"><a href="#10、Spring-的不同事务传播行为有哪些，干什么用的？" class="headerlink" title="10、Spring 的不同事务传播行为有哪些，干什么用的？"></a>10、Spring 的不同事务传播行为有哪些，干什么用的？</h3><p><img src="/2020/08/24/Spring%E5%8E%9F%E7%90%86%E8%AE%B2%E8%A7%A3/%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7.jpg" alt></p><h3 id="11、Spring-中用到了那些设计模式？"><a href="#11、Spring-中用到了那些设计模式？" class="headerlink" title="11、Spring 中用到了那些设计模式？"></a>11、Spring 中用到了那些设计模式？</h3><ul><li>代理模式—在AOP中被用的比较多。</li><li>单例模式—在spring配置文件中定义的bean默认为单例模式。</li><li>模板方法—用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>工厂模式—BeanFactory用来创建对象的实例。</li><li>适配器–spring aop</li><li>装饰器–spring data hashmapper</li><li>观察者– spring 事件驱动模型</li><li>回调–Spring Aware回调接口</li></ul><h3 id="12、Spring如何解决循环依赖？"><a href="#12、Spring如何解决循环依赖？" class="headerlink" title="12、Spring如何解决循环依赖？"></a>12、Spring如何解决循环依赖？</h3><p><a href="https://blog.csdn.net/qq_36381855/article/details/79752689" target="_blank" rel="noopener">https://blog.csdn.net/qq_36381855/article/details/79752689</a></p><h3 id="13、bean的作用域"><a href="#13、bean的作用域" class="headerlink" title="13、bean的作用域"></a>13、bean的作用域</h3><p>（1）singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。</p><p>（2）prototype：为每一个bean请求提供一个实例。</p><p>（3）request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</p><p>（4）session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。</p><h3 id="14、Spring框架中有哪些不同类型的事件"><a href="#14、Spring框架中有哪些不同类型的事件" class="headerlink" title="14、Spring框架中有哪些不同类型的事件"></a>14、Spring框架中有哪些不同类型的事件</h3><p>（1）上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。</p><p>（2）上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。</p><p>（3）上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</p><p>（4）上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</p><p>（5）请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。</p><h3 id="15、Spring通知有哪些类型"><a href="#15、Spring通知有哪些类型" class="headerlink" title="15、Spring通知有哪些类型"></a>15、Spring通知有哪些类型</h3><p>（1）前置通知（Before advice）：在某连接点（join point）之前执行的通知，但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。</p><p>（2）返回后通知（After returning advice）：在某连接点（join point）正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。 </p><p>（3）抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知。 </p><p>（4）后通知（After (finally) advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。 </p><p>（5）环绕通知（Around Advice）：包围一个连接点（join point）的通知，如方法调用。这是最强大的一种通知类型。 环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。 环绕通知是最常用的一种通知类型。</p><h3 id="16、Spring的自动装配"><a href="#16、Spring的自动装配" class="headerlink" title="16、Spring的自动装配"></a>16、Spring的自动装配</h3><p>在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。</p><p>在Spring框架xml配置中共有5种自动装配：</p><p>（1）no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</p><p>（2）byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。 </p><p>（3）byType：通过参数的数据类型进行自动装配。</p><p>（4）constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</p><p>（5）autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</p><p>基于注解的方式：</p><p>使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config /&gt;。在启动spring IoC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：</p><p>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；</p><p>如果查询的结果不止一个，那么@Autowired会根据名称来查找；</p><p>如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。</p><p>@Autowired可用于：构造函数、成员变量、Setter方法</p><p>注：@Autowired和@Resource之间的区别</p><p>(1) @Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。</p><p>(2) @Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解TCP/IP协议</title>
      <link href="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><ol><li>TCP 基本认识</li></ol><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(1)" alt="img"></p><ol><li>TCP 连接建立</li></ol><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(2)" alt="img"></p><ol><li>TCP 连接断开</li></ol><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(3)" alt="img"></p><ol><li>Socket 编程</li></ol><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(4)" alt="img"></p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="01-TCP-基本认识"><a href="#01-TCP-基本认识" class="headerlink" title="01 TCP 基本认识"></a>01 TCP 基本认识</h3><blockquote><p>瞧瞧 TCP 头格式</p></blockquote><p>我们先来看看 TCP 头的格式，标注颜色的表示与本文关联比较大的字段，其他字段不做详细阐述。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(5)" alt="TCP 头格式">TCP 头格式</p><p><strong>序列号</strong>：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。<strong>用来解决网络包乱序问题。</strong></p><p><strong>确认应答号</strong>：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。<strong>用来解决不丢包的问题。</strong></p><p><strong>控制位：</strong></p><ul><li><em>ACK</em>：该位为 <code>1</code> 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 <code>SYN</code> 包之外该位必须设置为 <code>1</code> 。</li><li><em>RST</em>：该位为 <code>1</code> 时，表示 TCP 连接中出现异常必须强制断开连接。</li><li><em>SYC</em>：该位为 <code>1</code> 时，表示希望建立连，并在其「序列号」的字段进行序列号初始值的设定。</li><li><em>FIN</em>：该位为 <code>1</code> 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 <code>FIN</code> 位置为 1 的 TCP 段。</li></ul><blockquote><p>为什么需要 TCP 协议？TCP 工作在哪一层？</p></blockquote><p><code>IP</code> 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(6)" alt="OSI 参考模型与 TCP/IP 的关系">OSI 参考模型与 TCP/IP 的关系</p><p>如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 <code>TCP</code> 协议来负责。</p><p>因为 TCP 是一个工作在<strong>传输层</strong>的<strong>可靠</strong>数据传输的服务，它能确保接收端接收的网络包是<strong>无损坏、无间隔、非冗余和按序的。</strong></p><blockquote><p>什么是 TCP ？</p></blockquote><p>TCP 是<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(7)" alt="img"></p><ul><li><strong>面向连接</strong>：一定是「一对一」才能连接，不能像 UDP 协议 可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</li><li><strong>可靠的</strong>：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</li><li><strong>字节流</strong>：消息是「没有边界」的，所以无论我们消息有多大都可以进行传输。并且消息是「有序的」，当「前一个」消息没有收到的时候，即使它先收到了后面的字节已经收到，那么也不能扔给应用层去处理，同时对「重复」的报文会自动丢弃。</li></ul><blockquote><p>什么是 TCP 连接？</p></blockquote><p>我们来看看 RFC 793 是如何定义「连接」的：</p><p><em>Connections:</em> </p><p><em>The reliability and flow control mechanisms described above require that TCPs initialize and maintain certain status information for each data stream.</em>  </p><p><em>The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection.</em></p><p>简单来说就是，<strong>用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括Socket、序列号和窗口大小称为连接。</strong></p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(8)" alt="img"></p><p>所以我们可以知道，建立一个 TCP 连接是需要客户端与服务器端达成上述三个信息的共识。</p><ul><li><strong>Socket</strong>：由 IP 地址和端口号组成</li><li><strong>序列号</strong>：用来解决乱序问题等</li><li><strong>窗口大小</strong>：用来做流量控制</li></ul><blockquote><p>如何唯一确定一个 TCP 连接呢？</p></blockquote><p>TCP 四元组可以唯一的确定一个连接，四元组包括如下：</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(9)" alt="UDP 头部格式"></p><ul><li>源地址</li><li>源端口</li><li>目的地址</li><li>目的端口</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="TCP 四元组">TCP 四元组</p><p>源地址和目的地址的字段（32位）是在 IP 头部中，作用是通过 IP 协议发送报文给对方主机。</p><p>源端口和目的端口的字段（16位）是在 TCP 头部中，作用是告诉 TCP 协议应该把报文发给哪个进程。</p><blockquote><p>有一个 IP 的服务器监听了一个端口，它的 TCP 的最大连接数是多少？</p></blockquote><p>服务器通常固定在某个本地端口上监听，等待客户端的连接请求。</p><p>因此，客户端 IP 和 端口是可变的，其理论值计算公式如下:</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/image-20200603233609203.png" alt="image-20200603233609203"></p><p>对 IPv4，客户端的 IP 数最多为 <code>2</code> 的 <code>32</code> 次方，客户端的端口数最多为 <code>2</code> 的 <code>16</code> 次方，也就是服务端单机最大 TCP 连接数，约为 <code>2</code> 的 <code>48</code> 次方。</p><p>当然，服务端最大并发 TCP 连接数远不能达到理论上限。</p><ul><li>首先主要是<strong>文件描述符限制</strong>，Socket 都是文件，所以首先要通过 <code>ulimit</code> 配置文件描述符的数目；</li><li>另一个是<strong>内存限制</strong>，每个 TCP 连接都要占用一定内存，操作系统是有限的。</li></ul><blockquote><p>UDP 和 TCP 有什么区别呢？分别的应用场景是？</p></blockquote><p>UDP 不提供复杂的控制机制，利用 IP 提供面向「无连接」的通信服务。</p><p>UDP 协议真的非常简，头部只有 <code>8</code> 个字节（ 64 位），UDP 的头部格式如下：</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(11)" alt="UDP 头部格式">UDP 头部格式</p><ul><li>目标和源端口：主要是告诉 UDP 协议应该把报文发给哪个进程。</li><li>包长度：该字段保存了 UDP 首部的长度跟数据的长度之和。</li><li>校验和：校验和是为了提供可靠的 UDP 首部和数据而设计。</li></ul><p><strong>TCP 和 UDP 区别：</strong></p><p><em>1. 连接</em></p><ul><li>TCP 是面向连接的传输层协议，传输数据前先要建立连接。</li><li>UDP 是不需要连接，即刻传输数据。</li></ul><p><em>2. 服务对象</em></p><ul><li>TCP 是一对一的两点服务，即一条连接只有两个端点。</li><li>UDP 支持一对一、一对多、多对多的交互通信</li></ul><p><em>3. 可靠性</em></p><ul><li>TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。</li><li>UDP 是尽最大努力交付，不保证可靠交付数据。</li></ul><p><em>4. 拥塞控制、流量控制</em></p><ul><li>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。</li><li>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。</li></ul><p><em>5. 首部开销</em></p><ul><li>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 <code>20</code> 个字节，如果使用了「选项」字段则会变长的。</li><li>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。</li></ul><p><strong>TCP 和 UDP 应用场景：</strong></p><p>由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：</p><ul><li><code>FTP</code> 文件传输</li><li><code>HTTP</code> / <code>HTTPS</code></li></ul><p>由于 UDP 面向无连接，它可以随时发送数据，再加上UDP本身的处理既简单又高效，因此经常用于：</p><ul><li>包总量较少的通信，如 <code>DNS</code> 、<code>SNMP</code> 等</li><li>视频、音频等多媒体通信</li><li>广播通信</li></ul><blockquote><p>为什么 UDP 头部没有「首部长度」字段，而 TCP 头部有「首部长度」字段呢？</p></blockquote><p>原因是 TCP 有<strong>可变长</strong>的「选项」字段，而 UDP 头部长度则是<strong>不会变化</strong>的，无需多一个字段去记录 UDP 的首部长度。</p><blockquote><p>为什么 UDP 头部有「包长度」字段，而 TCP 头部则没有「包长度」字段呢？</p></blockquote><p>先说说 TCP 是如何计算负载数据长度：</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(12)" alt="TCP 三次握手"></p><p>其中 IP 总长度 和 IP 首部长度，在 IP 首部格式是已知的。TCP 首部长度，则是在 TCP 首部格式已知的，所以就可以求得 TCP 数据的长度。</p><p>大家这时就奇怪了问：“ UDP 也是基于 IP 层的呀，那 UDP 的数据长度也可以通过这个公式计算呀？为何还要有「包长度」呢？”</p><p>这么一问，确实感觉 UDP 「包长度」是冗余的。</p><p><strong>因为为了网络设备硬件设计和处理方便，首部长度需要是 <code>4</code>字节的整数倍。</strong></p><p>如果去掉 UDP 「包长度」字段，那 UDP 首部长度就不是 <code>4</code> 字节的整数倍了，所以小林觉得这可能是为了补全 UDP 首部长度是 <code>4</code> 字节的整数倍，才补充了「包长度」字段。</p><h3 id="02-TCP-连接建立"><a href="#02-TCP-连接建立" class="headerlink" title="02 TCP 连接建立"></a>02 TCP 连接建立</h3><blockquote><p>TCP 三次握手过程和状态变迁</p></blockquote><p>TCP 是面向连接的协议，所以使用 TCP 前必须先建立连接，而<strong>建立连接是通过三次握手而进行的。</strong></p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(13)" alt="第一个报文—— SYN 报文"></p><p>TCP 三次握手</p><ul><li>一开始，客户端和服务端都处于 <code>CLOSED</code> 状态。先是服务端主动监听某个端口，处于 <code>LISTEN</code> 状态</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(14)" alt="第二个报文 —— SYN + ACK 报文"></p><p>第一个报文—— SYN 报文</p><ul><li>客户端会随机初始化序号（<code>client_isn</code>），将此序号置于 TCP 首部的「序号」字段中，同时把 <code>SYN</code> 标志位置为 <code>1</code> ，表示 <code>SYN</code> 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 <code>SYN-SENT</code> 状态。</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(15)" alt="第二个报文 —— SYN + ACK 报文">第二个报文 —— SYN + ACK 报文</p><ul><li>服务端收到客户端的 <code>SYN</code> 报文后，首先服务端也随机初始化自己的序号（<code>server_isn</code>），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 <code>client_isn + 1</code>, 接着把 <code>SYN</code> 和 <code>ACK</code> 标志位置为 <code>1</code>。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 <code>SYN-RCVD</code> 状态。</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(16)" alt="第三个报文 —— ACK 报文">第三个报文 —— ACK 报文</p><ul><li>客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 <code>ACK</code> 标志位置为 <code>1</code> ，其次「确认应答号」字段填入 <code>server_isn + 1</code> ，最后把报文发送给服务端，这次报文可以携带客户到服务器的数据，之后客户端处于 <code>ESTABLISHED</code> 状态。</li><li>服务器收到客户端的应答报文后，也进入 <code>ESTABLISHED</code> 状态。</li></ul><p>从上面的过程可以发现<strong>第三次握手是可以携带数据的，前两次握手是不可以携带数据的</strong>，这也是面试常问的题。</p><p>一旦完成三次握手，双方都处于 <code>ESTABLISHED</code> 状态，此致连接就已建立完成，客户端和服务端就可以相互发送数据了。</p><blockquote><p>如何在 Linux 系统中查看 TCP 状态？</p></blockquote><p>TCP 的连接状态查看，在 Linux 可以通过 <code>netstat -napt</code> 命令查看。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(17)" alt="TCP 连接状态查看">TCP 连接状态查看</p><blockquote><p>为什么是三次握手？不是两次、四次？</p></blockquote><p>相信大家比较常回答的是：“因为三次握手才能保证双方具有接收和发送的能力。”</p><p>这回答是没问题，但这回答是片面的，并没有说出主要的原因。</p><p>在前面我们知道了什么是 <strong>TCP 连接</strong>：</p><ul><li>用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括<strong>Socket、序列号和窗口大小</strong>称为连接。</li></ul><p>所以，重要的是<strong>为什么三次握手才可以初始化Socket、序列号和窗口大小并建立 TCP 连接。</strong></p><p>接下来以三个方面分析三次握手的原因：</p><ul><li>三次握手才可以阻止历史重复连接的初始化（主要原因）</li><li>三次握手才可以同步双方的初始序列号</li><li>三次握手才可以避免资源浪费</li></ul><p><em>原因一：避免历史连接</em></p><p>我们来看看 RFC 793 指出的 TCP 连接使用三次握手的<strong>首要原因</strong>：</p><p><em>The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.</em></p><p>简单来说，三次握手的<strong>首要原因是为了防止旧的重复连接初始化造成混乱。</strong></p><p>网络环境是错综复杂的，往往并不是如我们期望的一样，先发送的数据包，就先到达目标主机，反而它很骚，可能会由于网络拥堵等乱七八糟的原因，会使得旧的数据包，先到达目标主机，那么这种情况下 TCP 三次握手是如何避免的呢？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(18)" alt="三次握手避免历史连接">三次握手避免历史连接</p><p>客户端连续发送多次 SYN 建立连接的报文，在网络拥堵等情况下：</p><ul><li>一个「旧 SYN 报文」比「最新的 SYN 」 报文早到达了服务端；</li><li>那么此时服务端就会回一个 <code>SYN + ACK</code> 报文给客户端；</li><li>客户端收到后可以根据自身的上下文，判断这是一个历史连接（序列号过期或超时），那么客户端就会发送 <code>RST</code> 报文给服务端，表示中止这一次连接。</li></ul><p>如果是两次握手连接，就不能判断当前连接是否是历史连接，三次握手则可以在客户端（发送方）准备发送第三次报文时，客户端因有足够的上下文来判断当前连接是否是历史连接：</p><ul><li>如果是历史连接（序列号过期或超时），则第三次握手发送的报文是 <code>RST</code> 报文，以此中止历史连接；</li><li>如果不是历史连接，则第三次发送的报文是 <code>ACK</code> 报文，通信双方就会成功建立连接；</li></ul><p>所以， TCP 使用三次握手建立连接的最主要原因是<strong>防止历史连接初始化了连接。</strong></p><p><em>原因二：同步双方初始序列号</em></p><p>TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：</p><ul><li>接收方可以去除重复的数据；</li><li>接收方可以根据数据包的序列号按序接收；</li><li>可以标识发送出去的数据包中， 哪些是已经被对方收到的；</li></ul><p>可见，序列号在 TCP 连接中占据着非常重要的作用，所以当客户端发送携带「初始序列号」的 <code>SYN</code> 报文的时候，需要服务端回一个 <code>ACK</code> 应答报文，表示客户端的 SYN 报文已被服务端成功接收，那当服务端发送「初始序列号」给客户端的时候，依然也要得到客户端的应答回应，<strong>这样一来一回，才能确保双方的初始序列号能被可靠的同步。</strong></p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(19)" alt="四次握手与三次握手">四次握手与三次握手</p><p>四次握手其实也能够可靠的同步双方的初始化序号，但由于<strong>第二步和第三步可以优化成一步</strong>，所以就成了「三次握手」。</p><p>而两次握手只保证了一方的初始序列号能被对方成功接收，没办法保证双方的初始序列号都能被确认接收。</p><p><em>原因三：避免资源浪费</em></p><p>如果只有「两次握手」，当客户端的 <code>SYN</code> 请求连接在网络中阻塞，客户端没有接收到 <code>ACK</code> 报文，就会重新发送 <code>SYN</code> ，由于没有第三次握手，服务器不清楚客户端是否收到了自己发送的建立连接的 <code>ACK</code> 确认信号，所以每收到一个 <code>SYN</code> 就只能先主动建立一个连接，这会造成什么情况呢？</p><p>如果客户端的 <code>SYN</code> 阻塞了，重复发送多次 <code>SYN</code> 报文，那么服务器在收到请求后就会<strong>建立多个冗余的无效链接，造成不必要的资源浪费。</strong></p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(20)" alt="两次握手会造成资源浪费">两次握手会造成资源浪费</p><p>即两次握手会造成消息滞留情况下，服务器重复接受无用的连接请求 <code>SYN</code> 报文，而造成重复分配资源。</p><p><em>小结</em></p><p>TCP 建立连接时，通过三次握手<strong>能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号</strong>。序列号能够保证数据包不重复、不丢弃和按序传输。</p><p>不使用「两次握手」和「四次握手」的原因：</p><ul><li>「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；</li><li>「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul><blockquote><p>为什么客户端和服务端的初始序列号 ISN 是不相同的？</p></blockquote><p>因为网络中的报文<strong>会延迟、会复制重发、也有可能丢失</strong>，这样会造成的不同连接之间产生互相影响，所以为了避免互相影响，客户端和服务端的初始序列号是随机且不同的。</p><blockquote><p>初始序列号 ISN 是如何随机产生的？</p></blockquote><p>起始 <code>ISN</code> 是基于时钟的，每 4 毫秒 + 1，转一圈要 4.55 个小时。</p><p>RFC1948 中提出了一个较好的初始化序列号 ISN 随机生成算法。</p><p><em>ISN = M + F (localhost, localport, remotehost, remoteport)</em></p><ul><li><code>M</code> 是一个计时器，这个计时器每隔 4 毫秒加 1。</li><li><code>F</code> 是一个 Hash 算法，根据源 IP、目的 IP、源端口、目的端口生成一个随机数值。要保证 Hash 算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择。</li></ul><blockquote><p>既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？</p></blockquote><p>我们先来认识下 MTU 和 MSS</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(21)" alt="MTU 与 MSS">MTU 与 MSS</p><ul><li><code>MTU</code>：一个网络包的最大长度，以太网中一般为 <code>1500</code> 字节；</li><li><code>MSS</code>：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度；</li></ul><p>如果TCP 的整个报文（头部 + 数据）交给 IP 层进行分片，会有什么异常呢？</p><p>当 IP 层有一个超过 <code>MTU</code> 大小的数据（TCP 头部 + TCP 数据）要发送，那么 IP 层就要进行分片，把数据分片成若干片，保证每一个分片都小于 MTU。把一份 IP 数据报进行分片以后，由目标主机的 IP 层来进行重新组装后，在交给上一层 TCP 传输层。</p><p>这看起来井然有序，但这存在隐患的，<strong>那么当如果一个 IP 分片丢失，整个 IP 报文的所有分片都得重传</strong>。</p><p>因为 IP 层本身没有超时重传机制，它由传输层的 TCP 来负责超时和重传。</p><p>当接收方发现 TCP 报文（头部 + 数据）的某一片丢失后，则不会响应 ACK 给对方，那么发送方的 TCP 在超时后，就会重发「整个 TCP 报文（头部 + 数据）」。</p><p>因此，可以得知由 IP 层进行分片传输，是非常没有效率的。</p><p>所以，为了达到最佳的传输效能 TCP 协议在<strong>建立连接的时候通常要协商双方的 MSS 值</strong>，当 TCP 层发现数据超过 MSS 时，则就先会进行分片，当然由它形成的 IP 包的长度也就不会大于 MTU ，自然也就不用 IP 分片了。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(22)" alt="握手阶段协商 MSS">握手阶段协商 MSS</p><p>经过 TCP 层分片后，如果一个 TCP 分片丢失后，<strong>进行重发时也是以 MSS 为单位</strong>，而不用重传所有的分片，大大增加了重传的效率。</p><blockquote><p>什么是 SYN 攻击？如何避免 SYN 攻击？</p></blockquote><p><em>SYN 攻击</em></p><p>我们都知道 TCP 连接建立是需要三次握手，假设攻击者短时间伪造不同 IP 地址的 <code>SYN</code> 报文，服务端每接收到一个 <code>SYN</code> 报文，就进入<code>SYN_RCVD</code> 状态，但服务端发送出去的 <code>ACK + SYN</code> 报文，无法得到未知 IP 主机的 <code>ACK</code> 应答，久而久之就会<strong>占满服务端的 SYN 接收队列（未连接队列）</strong>，使得服务器不能为正常用户服务。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(23)" alt="SYN 攻击">SYN 攻击</p><p><em>避免 SYN 攻击方式一</em></p><p>其中一种解决方式是通过修改 Linux 内核参数，控制队列大小和当队列满时应做什么处理。</p><ul><li>当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包。控制该队列的最大值如下参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.core.netdev_max_backlog</span><br></pre></td></tr></table></figure><ul><li>SYN_RCVD 状态连接的最大个数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_max_syn_backlog</span><br></pre></td></tr></table></figure><ul><li>超出处理能时，对新的 SYN 直接回 RST，丢弃连接：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_abort_on_overflow</span><br></pre></td></tr></table></figure><p><em>避免 SYN 攻击方式二</em></p><p>我们先来看下Linux 内核的 <code>SYN</code> （未完成连接建立）队列与 <code>Accpet</code> （已完成连接建立）队列是如何工作的？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(24)" alt="正常流程">正常流程</p><p>正常流程：</p><ul><li>当服务端接收到客户端的 SYN 报文时，会将其加入到内核的「 SYN 队列」；</li><li>接着发送 SYN + ACK 给客户端，等待客户端回应 ACK 报文；</li><li>服务端接收到 ACK 报文后，从「 SYN 队列」移除放入到「 Accept 队列」；</li><li>应用通过调用 <code>accpet()</code> socket 接口，从「 Accept 队列」取出的连接。</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(25)" alt="应用程序过慢">应用程序过慢</p><p>应用程序过慢：</p><ul><li>如果应用程序过慢时，就会导致「 Accept 队列」被占满。</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(26)" alt="受到 SVN 攻击">受到 SYN 攻击</p><p>受到 SYN 攻击：</p><ul><li>如果不断受到 SYN 攻击，就会导致「 SYN 队列」被占满。</li></ul><p><code>tcp_syncookies</code> 的方式可以应对 SYN 攻击的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br></pre></td></tr></table></figure><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(27)" alt="tcp_syncookies 应对 SYN 攻击">tcp_syncookies 应对 SYN 攻击</p><ul><li>当 「 SYN 队列」满之后，后续服务器收到 SYN 包，不进入「 SYN 队列」；</li><li>计算出一个 <code>cookie</code> 值，再以 SYN + ACK 中的「序列号」返回客户端，</li><li>服务端接收到客户端的应答报文时，服务器会检查这个 ACK 包的合法性。如果合法，直接放入到「 Accept 队列」。</li><li>最后应用通过调用 <code>accpet()</code> socket 接口，从「 Accept 队列」取出的连接。</li></ul><hr><h3 id="03-TCP-连接断开"><a href="#03-TCP-连接断开" class="headerlink" title="03 TCP 连接断开"></a>03 TCP 连接断开</h3><blockquote><p>TCP 四次挥手过程和状态变迁</p></blockquote><p>天下没有不散的宴席，对于 TCP 连接也是这样， TCP 断开连接是通过<strong>四次挥手</strong>方式。</p><p>双方都可以主动断开连接，断开连接后主机中的「资源」将被释放。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(28)" alt="客户端主动关闭连接 —— TCP 四次挥手">客户端主动关闭连接 —— TCP 四次挥手</p><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 <code>FIN</code> 标志位被置为 <code>1</code> 的报文，也即 <code>FIN</code> 报文，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</li><li>服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSED_WAIT</code> 状态。</li><li>客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。</li><li>等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</li><li>客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</li><li>服务器收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSE</code> 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 <code>2MSL</code> 一段时间后，自动进入 <code>CLOSE</code> 状态，至此客户端也完成连接的关闭。</li></ul><p>你可以看到，每个方向都需要<strong>一个 FIN 和一个 ACK</strong>，因此通常被称为<strong>四次挥手</strong>。</p><p>这里一点需要注意是：<strong>主动关闭连接的，才有 TIME_WAIT 状态。</strong></p><blockquote><p>为什么挥手需要四次？</p></blockquote><p>再来回顾下四次挥手双方发 <code>FIN</code> 包的过程，就能理解为什么需要四次了。</p><ul><li>关闭连接时，客户端向服务端发送 <code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务器收到客户端的 <code>FIN</code> 报文时，先回一个 <code>ACK</code> 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接。</li></ul><p>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，从而比三次握手导致多了一次。</p><blockquote><p>为什么 TIME_WAIT 等待的时间是 2MSL？</p></blockquote><p><code>MSL</code> 是 Maximum Segment Lifetime，<strong>报文最大生存时间</strong>，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为 TCP 报文基于是 IP 协议的，而 IP 头中有一个 <code>TTL</code> 字段，是 IP 数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。</p><p>MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 <strong>MSL 应该要大于等于 TTL 消耗为 0 的时间</strong>，以确保报文已被自然消亡。</p><p>TIME_WAIT 等待 2 倍的 MSL，比较合理的解释是：网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以<strong>一来一回需要等待 2 倍的时间</strong>。</p><p>比如，如果被动关闭方没有收到断开连接的最后的 ACK 报文，就会触发超时重发 Fin 报文，另一方接收到 FIN 后，会重发 ACK 给被动关闭方， 一来一去正好 2 个 MSL。</p><p><code>2MSL</code> 的时间是从<strong>客户端接收到 FIN 后发送 ACK 开始计时的</strong>。如果在 TIME-WAIT 时间内，因为客户端的 ACK 没有传输到服务端，客户端又接收到了服务端重发的 FIN 报文，那么 <strong>2MSL 时间将重新计时</strong>。</p><p>在 Linux 系统里 <code>2MSL</code> 默认是 <code>60</code> 秒，那么一个 <code>MSL</code> 也就是 <code>30</code> 秒。<strong>Linux 系统停留在 TIME_WAIT 的时间为固定的 60 秒</strong>。</p><p>其定义在 Linux 内核代码里的名称为 TCP_TIMEWAIT_LEN：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define TCP_TIMEWAIT_LEN (60*HZ) &#x2F;* how long to wait to destroy TIME-WAIT </span><br><span class="line">                                    state, about 60 seconds  *&#x2F;</span><br></pre></td></tr></table></figure><p>如果要修改 TIME_WAIT 的时间长度，只能修改 Linux 内核代码里 TCP_TIMEWAIT_LEN 的值，并重新编译 Linux 内核。</p><blockquote><p>为什么需要 TIME_WAIT 状态？</p></blockquote><p>主动发起关闭连接的一方，才会有 <code>TIME-WAIT</code> 状态。</p><p>需要 TIME-WAIT 状态，主要是两个原因：</p><ul><li>防止具有相同「四元组」的「旧」数据包被收到；</li><li>保证「被动关闭连接」的一方能被正确的关闭，即保证最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭；</li></ul><p><em>原因一：防止旧连接的数据包</em></p><p>假设 TIME-WAIT 没有等待时间或时间过短，被延迟的数据包抵达后会发生什么呢？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/image-20200603234350790.png" alt="image-20200603234350790"></p><p>接收到历史数据的异常</p><ul><li>如上图黄色框框服务端在关闭连接之前发送的 <code>SEQ = 301</code> 报文，被网络延迟了。</li><li>这时有相同端口的 TCP 连接被复用后，被延迟的 <code>SEQ = 301</code> 抵达了客户端，那么客户端是有可能正常接收这个过期的报文，这就会产生数据错乱等严重的问题。</li></ul><p>所以，TCP 就设计出了这么一个机制，经过 <code>2MSL</code> 这个时间，<strong>足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。</strong></p><p><em>原因二：保证连接正确关闭</em></p><p>在 RFC 793 指出 TIME-WAIT 另一个重要的作用是：</p><p><em>TIME-WAIT - represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.</em></p><p>也就是说，TIME-WAIT 作用是<strong>等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭。</strong></p><p>假设 TIME-WAIT 没有等待时间或时间过短，断开连接会造成什么问题呢？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(30)" alt="没有确保正常断开的异常">没有确保正常断开的异常</p><ul><li>如上图红色框框客户端四次挥手的最后一个 <code>ACK</code> 报文如果在网络中被丢失了，此时如果客户端 <code>TIME-WAIT</code> 过短或没有，则就直接进入了 <code>CLOSE</code> 状态了，那么服务端则会一直处在 <code>LASE-ACK</code> 状态。</li><li>当客户端发起建立连接的 <code>SYN</code> 请求报文后，服务端会发送 <code>RST</code> 报文给客户端，连接建立的过程就会被终止。</li></ul><p>如果 TIME-WAIT 等待足够长的情况就会遇到两种情况：</p><ul><li>服务端正常收到四次挥手的最后一个 <code>ACK</code> 报文，则服务端正常关闭连接。</li><li>服务端没有收到四次挥手的最后一个 <code>ACK</code> 报文时，则会重发 <code>FIN</code> 关闭连接报文并等待新的 <code>ACK</code> 报文。</li></ul><p>所以客户端在 <code>TIME-WAIT</code> 状态等待 <code>2MSL</code> 时间后，就可以<strong>保证双方的连接都可以正常的关闭。</strong></p><blockquote><p>TIME_WAIT 过多有什么危害？</p></blockquote><p>如果服务器有处于 TIME-WAIT 状态的 TCP，则说明是由服务器方主动发起的断开请求。</p><p>过多的 TIME-WAIT 状态主要的危害有两种：</p><ul><li>第一是内存资源占用；</li><li>第二是对端口资源的占用，一个 TCP 连接至少消耗一个本地端口；</li></ul><p>第二个危害是会造成严重的后果的，要知道，端口资源也是有限的，一般可以开启的端口为 <code>32768～61000</code>，也可以通过如下参数设置指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_local_port_range</span><br></pre></td></tr></table></figure><p><strong>如果服务端 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。</strong></p><blockquote><p>如何优化 TIME_WAIT？</p></blockquote><p>这里给出优化 TIME-WAIT 的几个方式，都是有利有弊：</p><ul><li>打开 net.ipv4.tcp_tw_reuse 和 net.ipv4.tcp_timestamps 选项；</li><li>net.ipv4.tcp_max_tw_buckets</li><li>程序中使用 SO_LINGER ，应用强制使用 RST 关闭。</li></ul><p><em>方式一：net.ipv4.tcp_tw_reuse 和 tcp_timestamps</em></p><p>如下的 Linux 内核参数开启后，则可以<strong>复用处于 TIME_WAIT 的 socket 为新的连接所用</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br></pre></td></tr></table></figure><p>使用这个选项，还有一个前提，需要打开对 TCP 时间戳的支持，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_timestamps&#x3D;1（默认即为 1）</span><br></pre></td></tr></table></figure><p>这个时间戳的字段是在 TCP 头部的「选项」里，用于记录 TCP 发送方的当前时间戳和从对端接收到的最新时间戳。</p><p>由于引入了时间戳，我们在前面提到的 <code>2MSL</code> 问题就不复存在了，因为重复的数据包会因为时间戳过期被自然丢弃。</p><p>温馨提醒：<code>net.ipv4.tcp_tw_reuse</code>要慎用，因为使用了它就必然要打开时间戳的支持 <code>net.ipv4.tcp_timestamps</code>，<strong>当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝掉</strong>。小林在工作中就遇到过。。。排查了非常的久</p><p><em>方式二：net.ipv4.tcp_max_tw_buckets</em></p><p>这个值默认为 18000，当系统中处于 TIME_WAIT 的连接<strong>一旦超过这个值时，系统就会将所有的 TIME_WAIT 连接状态重置。</strong></p><p>这个方法过于暴力，而且治标不治本，带来的问题远比解决的问题多，不推荐使用。</p><p><em>方式三：程序中使用 SO_LINGER</em></p><p>我们可以通过设置 socket 选项，来设置调用 close 关闭连接行为。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct linger so_linger;</span><br><span class="line">so_linger.l_onoff &#x3D; 1;</span><br><span class="line">so_linger.l_linger &#x3D; 0;</span><br><span class="line">setsockopt(s, SOL_SOCKET, SO_LINGER, &amp;so_linger,sizeof(so_linger));</span><br></pre></td></tr></table></figure><p>如果<code>l_onoff</code>为非 0， 且<code>l_linger</code>值为 0，那么调用<code>close</code>后，会立该发送一个<code>RST</code>标志给对端，该 TCP 连接将跳过四次挥手，也就跳过了<code>TIME_WAIT</code>状态，直接关闭。</p><p>但这为跨越<code>TIME_WAIT</code>状态提供了一个可能，不过是一个非常危险的行为，不值得提倡。</p><blockquote><p>如果已经建立了连接，但是客户端突然出现故障了怎么办？</p></blockquote><p>TCP 有一个机制是<strong>保活机制</strong>。这个机制的原理是这样的：</p><p>定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。</p><p>在 Linux 内核可以有对应的参数可以设置保活时间、保活探测的次数、保活探测的时间间隔，以下都为默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_keepalive_time&#x3D;7200</span><br><span class="line">net.ipv4.tcp_keepalive_intvl&#x3D;75  </span><br><span class="line">net.ipv4.tcp_keepalive_probes&#x3D;9</span><br></pre></td></tr></table></figure><ul><li>tcp_keepalive_time=7200：表示保活时间是 7200 秒（2小时），也就 2 小时内如果没有任何连接相关的活动，则会启动保活机制</li><li>tcp_keepalive_intvl=75：表示每次检测间隔 75 秒；</li><li>tcp_keepalive_probes=9：表示检测 9 次无响应，认为对方是不可达的，从而中断本次的连接。</li></ul><p>也就是说在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒才可以发现一个「死亡」连接。</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(31)" alt="img"></p><p>这个时间是有点长的，我们也可以根据实际的需求，对以上的保活相关的参数进行设置。</p><p>如果开启了 TCP 保活，需要考虑以下几种情况：</p><p>第一种，对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 <strong>TCP 保活时间会被重置</strong>，等待下一个 TCP 保活时间的到来。</p><p>第二种，对端程序崩溃并重启。当 TCP 保活的探测报文发送给对端后，对端是可以响应的，但由于没有该连接的有效信息，<strong>会产生一个 RST 报文</strong>，这样很快就会发现 TCP 连接已经被重置。</p><p>第三种，是对端程序崩溃，或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，<strong>TCP 会报告该 TCP 连接已经死亡</strong>。</p><hr><h3 id="03-Socket-编程"><a href="#03-Socket-编程" class="headerlink" title="03 Socket 编程"></a>03 Socket 编程</h3><blockquote><p>针对 TCP 应该如何 Socket 编程？</p></blockquote><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(32)" alt="基于 TCP 协议的客户端和服务器工作">基于 TCP 协议的客户端和服务器工作</p><ul><li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li><li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li><li>服务端调用 <code>listen</code>，进行监听；</li><li>服务端调用 <code>accept</code>，等待客户端连接；</li><li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li><li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li><li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li><li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li></ul><p>这里需要注意的是，服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p><p>所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p><p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p><blockquote><p>listen 时候参数 backlog 的意义？</p></blockquote><p>Linux内核中会维护两个队列：</p><ul><li>未完成连接队列（SYN 队列）：接收到一个 SYN 建立连接请求，处于 SYN_RCVD 状态；</li><li>已完成连接队列（Accpet 队列）：已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；</li></ul><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(33)" alt="SYN 队列 与 Accpet 队列">SYN 队列 与 Accpet 队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int listen (int socketfd, int backlog)</span><br></pre></td></tr></table></figure><ul><li>参数一 socketfd 为 socketfd 文件描述符</li><li>参数二 backlog，这参数在历史有一定的变化</li></ul><p>在早期 Linux 内核 backlog 是 SYN 队列大小，也就是未完成的队列大小。</p><p>在 Linux 内核 2.2 之后，backlog 变成 accept 队列，也就是已完成连接建立的队列长度，<strong>所以现在通常认为 backlog 是 accept 队列。</strong></p><blockquote><p>accept 发送在三次握手的哪一步？</p></blockquote><p>我们先看看客户端连接服务端时，发送了什么？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(34)" alt="客户端连接服务端">客户端连接服务端</p><ul><li>客户端的协议栈向服务器端发送了 SYN 包，并告诉服务器端当前发送序列号 client_isn，客户端进入 SYNC_SENT 状态；</li><li>服务器端的协议栈收到这个包之后，和客户端进行 ACK 应答，应答的值为 client_isn+1，表示对 SYN 包 client_isn 的确认，同时服务器也发送一个 SYN 包，告诉客户端当前我的发送序列号为 server_isn，服务器端进入 SYNC_RCVD 状态；</li><li>客户端协议栈收到 ACK 之后，使得应用程序从 <code>connect</code> 调用返回，表示客户端到服务器端的单向连接建立成功，客户端的状态为 ESTABLISHED，同时客户端协议栈也会对服务器端的 SYN 包进行应答，应答数据为 server_isn+1；</li><li>应答包到达服务器端后，服务器端协议栈使得 <code>accept</code> 阻塞调用返回，这个时候服务器端到客户端的单向连接也建立成功，服务器端也进入 ESTABLISHED 状态。</li></ul><p>从上面的描述过程，我们可以得知<strong>客户端 connect 成功返回是在第二次握手，服务端 accept 成功返回是在三次握手成功之后。</strong></p><blockquote><p>客户端调用 close 了，连接是断开的流程是什么？</p></blockquote><p>我们看看客户端主动调用了 <code>close</code>，会发生什么？</p><p><img src="/2020/08/23/%E8%AF%A6%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/640(35)" alt="客户端调用 close 过程">客户端调用 close 过程</p><ul><li>客户端调用 <code>close</code>，表明客户端没有数据需要发送了，则此时会向服务端发送 FIN 报文，进入 FIN_WAIT_1 状态；</li><li>服务端接收到了 FIN 报文，TCP 协议栈会为 FIN 包插入一个文件结束符 <code>EOF</code> 到接收缓冲区中，应用程序可以通过 <code>read</code> 调用来感知这个 FIN 包。这个 <code>EOF</code> 会被<strong>放在已排队等候的其他已接收的数据之后</strong>，这就意味着服务端需要处理这种异常情况，因为 EOF 表示在该连接上再无额外数据到达。此时，服务端进入 CLOSE_WAIT 状态；</li><li>接着，当处理完数据后，自然就会读到 <code>EOF</code>，于是也调用 <code>close</code> 关闭它的套接字，这会使得会发出一个 FIN 包，之后处于 LAST_ACK 状态；</li><li>客户端接收到服务端的 FIN 包，并发送 ACK 确认包给服务端，此时客户端将进入 TIME_WAIT 状态；</li><li>服务端收到 ACK 确认包后，就进入了最后的 CLOSE 状态；</li><li>客户端进过 <code>2MSL</code> 时间之后，也进入 CLOSED 状态；</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心详解;</title>
      <link href="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Eureka-单节点搭建"><a href="#1-Eureka-单节点搭建" class="headerlink" title="1 Eureka 单节点搭建"></a>1 Eureka 单节点搭建</h2><ol><li><p>pom.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">有的教程中还引入spring-boot-starter-web，其实不用。因为上面的依赖已经包含了它。在pom中点此依赖进去，一共点4次spring-cloud-netflix-eureka-server，发现web的依赖。</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#是否将自己注册到Eureka Server,默认为true，由于当前就是server，故而设置成false，表明该服务不会向eureka注册自己的信息</span></span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从eureka server获取注册信息，由于单节点，不需要同步其他节点数据，用false</span></span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置服务注册中心的URL，用于client和server端交流</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@eureka-7901:7901/eureka/</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动类上添加此注解标识该服务为配置中心</span><br><span class="line">@EnableEurekaServer</span><br></pre></td></tr></table></figure></li><li><p>PS：Eureka会暴露一些端点。端点用于Eureka Client注册自身，获取注册表，发送心跳。</p></li><li><p>简单看一下eureka server控制台，实例信息区，运行环境信息区，Eureka Server自身信息区。</p></li></ol><h2 id="2-整体介绍"><a href="#2-整体介绍" class="headerlink" title="2 整体介绍"></a>2 整体介绍</h2><ol><li>背景：在传统应用中，组件之间的调用，通过有规范的约束的接口来实现，从而实现不同模块间良好的协作。但是被拆分成微服务后，每个微服务实例的网络地址都可能动态变化，数量也会变化，使得原来硬编码的地址失去了作用。需要一个中心化的组件来进行服务的登记和管理。</li><li>概念：实现服务治理，即管理所有的服务信息和状态。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册中心相当于买票乘车，只看有没有票（有没有服务），有就去买票（获取注册列表），然后乘车（调用）。不必关心有多少火车在运行。</span><br></pre></td></tr></table></figure><ol start="3"><li><p>注册中心好处：不用关心有多少提供方。</p></li><li><p>注册中心有哪些:Eureka，Nacos，Consul，Zookeeper等。</p></li><li><p>服务注册与发现包括两部分，一个是服务器端，另一个是客户端。</p><p>Server是一个公共服务，为Client提供服务注册和发现的功能，维护注册到自身的Client的相关信息，同时提供接口给Client获取注册表中其他服务的信息，使得动态变化的Client能够进行服务间的相互调用。</p><p>Client将自己的服务信息通过一定的方式登记到Server上，并在正常范围内维护自己信息一致性，方便其他服务发现自己，同时可以通过Server获取到自己依赖的其他服务信息，完成服务调用，还内置了负载均衡器，用来进行基本的负载均衡。</p></li><li><p>我们课程的Spring Cloud是用Eureka作为服务注册中心。</p></li><li><p>Eureka：是一个RESTful风格的服务，是一个用于服务发现和注册的基础组件，是搭建Spring Cloud微服务的前提之一，它屏蔽了Server和client的交互细节，使得开发者将精力放到业务上。</p></li><li><p>serverA从serverB同步信息，则serverB是serverA的peer。</p></li><li><p>上面例子中如果service-url为空，且register-with-eureka，fetch-registry为true，则会报错，Cannot execute request on any known server，因为server同时也是一个client，他会尝试注册自己，所以要有一个注册中心url去注册。</p></li><li><p>Netflix开源的组件。包括server和client两部分。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Netflix/Eureka</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-注册中心和微服务间的关系"><a href="#3-注册中心和微服务间的关系" class="headerlink" title="3 注册中心和微服务间的关系"></a>3 注册中心和微服务间的关系</h2><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823173543002.png" alt="image-20200823173543002"></p><h3 id="11-3-1-client功能"><a href="#11-3-1-client功能" class="headerlink" title="11.3.1 client功能"></a>11.3.1 client功能</h3><ol><li>注册：每个微服务启动时，将自己的网络地址等信息注册到注册中心，注册中心会存储（内存中）这些信息。</li><li>获取服务注册表：服务消费者从注册中心，查询服务提供者的网络地址，并使用该地址调用服务提供者，为了避免每次都查注册表信息，所以client会定时去server拉取注册表信息到缓存到client本地。</li><li>心跳：各个微服务与注册中心通过某种机制（心跳）通信，若注册中心长时间和服务间没有通信，就会注销该实例。</li><li>调用：实际的服务调用，通过注册表，解析服务名和具体地址的对应关系，找到具体服务的地址，进行实际调用。</li></ol><h3 id="11-3-2-server注册中心功能"><a href="#11-3-2-server注册中心功能" class="headerlink" title="11.3.2 server注册中心功能"></a>11.3.2 server注册中心功能</h3><ol><li><p>服务注册表：记录各个微服务信息，例如服务名称，ip，端口等。</p><p>注册表提供 查询API（查询可用的微服务实例）和管理API（用于服务的注册和注销）。</p></li><li><p>服务注册与发现：注册：将微服务信息注册到注册中心。发现：查询可用微服务列表及其网络地址。</p></li><li><p>服务检查：定时检测已注册的服务，如发现某实例长时间无法访问，就从注册表中移除。</p></li></ol><p>组件：Eureka , Consul , ZooKeeper，nacos等。</p><h2 id="4-服务注册"><a href="#4-服务注册" class="headerlink" title="4 服务注册"></a>4 服务注册</h2><p>例子：api-listen-order</p><ol><li>pom.xml</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>application.yml</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心</span></span><br><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@localhost:7900/eureka/</span><br></pre></td></tr></table></figure><p>ps:不想注册，设置成false即可，实例演示结果：注册中心没有实例信息。找控制台204信息也没有找到。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">  cloud:</span><br><span class="line">    service-registry:</span><br><span class="line">      auto-registration:</span><br><span class="line">        enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注册成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiscoveryClient_API-LISTEN-ORDER/api-listen-order:30.136.133.9:port - registration status: 204</span><br></pre></td></tr></table></figure><p>后面源码讲手动注册。</p><p>PS:</p><p>Eureka Server与Eureka Client之间的联系主要通过心跳的方式实现。心跳(Heartbeat)即Eureka Client定时向Eureka Server汇报本服务实例当前的状态，维护本服务实例在注册表中租约的有效性。</p><p>Eureka Client将定时从Eureka Server中拉取注册表中的信息，并将这些信息缓存到本地，用于服务发现。</p><h2 id="5-Eureka高可用"><a href="#5-Eureka高可用" class="headerlink" title="5 Eureka高可用"></a>5 Eureka高可用</h2><p>高可用：可以通过运行多个Eureka server实例并相互注册的方式实现。Server节点之间会彼此增量地同步信息，从而确保节点中数据一致。</p><ol><li>注册中心改造</li></ol><p>application.yml</p><p>参考：#高可用2个节点的yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#高可用2个节点</span></span><br><span class="line"><span class="comment">#应用名称及验证账号</span></span><br><span class="line">spring: </span><br><span class="line">  application: </span><br><span class="line">    name: eureka</span><br><span class="line">    </span><br><span class="line">  security: </span><br><span class="line">    user: </span><br><span class="line">      name: root</span><br><span class="line">      password: root</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: debug</span><br><span class="line">    </span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: 7901</span><br><span class="line">server: </span><br><span class="line">  port: 7901</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka-7901  </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@eureka-7902:7902/eureka/</span><br><span class="line">---    </span><br><span class="line">spring:</span><br><span class="line">  profiles: 7902</span><br><span class="line">server: </span><br><span class="line">  port: 7902</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka-7902  </span><br><span class="line">  client:</span><br><span class="line">       <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@eureka-7901:7901/eureka/</span><br></pre></td></tr></table></figure><p>—将配置文件分成2段，每段指定spring.profiles。第一段没有指定，所以共用。</p><ol start="2"><li><p>服务注册改造</p><p>api-listen-order</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@eureka-7901:7901/eureka/,http://root:root@eureka-7902:7902/eureka/</span><br></pre></td></tr></table></figure><p>写一个地址也行（但是server得互相注册），EurekaServer会自动同步，但为了避免极端情况，还是写多个。</p><p>集群PS:</p><p>集群中各个server会从其他server同步注册表信息。</p><h2 id="6-Eureka-端点"><a href="#6-Eureka-端点" class="headerlink" title="6 Eureka 端点"></a>6 Eureka 端点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">看官网：</span><br><span class="line">https://github.com/Netflix/eureka/wiki/Eureka-REST-operations</span><br><span class="line"></span><br><span class="line">body:</span><br><span class="line">&lt;instance&gt;</span><br><span class="line">&lt;instanceId&gt;instanceid-2019&lt;/instanceId&gt;</span><br><span class="line">&lt;hostName&gt;eureka-7900&lt;/hostName&gt;</span><br><span class="line">&lt;app&gt;EUREKA-custom&lt;/app&gt;</span><br><span class="line">&lt;ipAddr&gt;127.0.0.1&lt;/ipAddr&gt;</span><br><span class="line">&lt;status&gt;UP&lt;/status&gt;</span><br><span class="line">&lt;overriddenstatus&gt;UNKNOWN&lt;/overriddenstatus&gt;</span><br><span class="line">&lt;port enabled=<span class="string">"true"</span>&gt;1900&lt;/port&gt;</span><br><span class="line">&lt;securePort enabled=<span class="string">"false"</span>&gt;443&lt;/securePort&gt;</span><br><span class="line">&lt;countryId&gt;1&lt;/countryId&gt;</span><br><span class="line">&lt;dataCenterInfo class=<span class="string">"com.netflix.appinfo.InstanceInfo<span class="variable">$DefaultDataCenterInfo</span>"</span>&gt;</span><br><span class="line">&lt;name&gt;MyOwn&lt;/name&gt;</span><br><span class="line">&lt;/dataCenterInfo&gt;</span><br><span class="line"></span><br><span class="line">&lt;/instance&gt;</span><br><span class="line"></span><br><span class="line">地址：localhost:7900/eureka/apps/&#123;applicaitonName&#125;</span><br><span class="line"></span><br><span class="line">yapi：http://yapi.demo.qunar.com/</span><br></pre></td></tr></table></figure><p>例子：手写注册服务</p><p>步骤：</p><ol><li>启动单节点eureka，7900。</li><li>打开yapi。yapi-&gt;Spring Cloud学习-&gt;测试集合-&gt;Eureka-&gt;向EurekaServer注册服务。</li><li>执行访问，查看eureka server控制台。</li></ol><p>ps：一些语言也有Eureka Client的开源实现，比如node.JS</p><hr><p>2020-01-12 第一节课完。</p><p>课下问题：</p><ol><li><p>eureka无用。其实只是2.0不更新了。1.0还在更新，也在大量的用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Netflix/eureka/wiki</span><br></pre></td></tr></table></figure><p>即使它以后都不用了 eureka 的思路也是值得学习的。毕竟服务注册中心，就这些东西。</p></li><li><p>lombok使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">ide安装插件</span><br><span class="line"></span><br><span class="line">getter/setter</span><br></pre></td></tr></table></figure></li><li><p>域名问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域名在 物理机的host文件配置，只是为了好区分，不是必须的。只要能访问到机器就行，用localhost，ip均可。</span><br></pre></td></tr></table></figure></li><li><p>多节点注意事项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">问题：eureka server间 设置peer。A-&gt;B,B-&gt;C,C-&gt;A，结果注册信息并不同步。</span><br><span class="line">看例子:</span><br><span class="line">依次启动7901,7902,7903。</span><br><span class="line">启动成功，注册api-driver -&gt;7901</span><br><span class="line">发现只有7901和7902有 api-driver而 7903没有。</span><br><span class="line"></span><br><span class="line">简单说：api-driver向 7901注册，7902将api-driver同步到7902，但是不会同步到7903。后面源码会讲到。</span><br><span class="line">多节点建议：设置A-&gt;B,A-&gt;C其他类似。尽量不要跨 eureka节点。一对多，面面对到。</span><br><span class="line"></span><br><span class="line">讲解下图。前置概念peer。清除流程。</span><br><span class="line"></span><br><span class="line">功能点：</span><br><span class="line">peer启动：</span><br><span class="line">1、拉取它的peer的注册表。</span><br><span class="line">2、把自己注册到peer上。</span><br><span class="line">3、完成2之后，2中的peer会把它同步到，2中peer的peer。</span><br></pre></td></tr></table></figure><blockquote><p>为什么有时候3个实例，后来都变成2个实例了。</p></blockquote><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823173700162.png" alt="image-20200823173700162"></p></li><li><p>yml配置文件分段。</p></li><li><p>可以独立使用，利用它的各种端点做开发，甚至可以自己做个服务注册中心。</p></li></ol><hr><h2 id="7-Eureka-原理"><a href="#7-Eureka-原理" class="headerlink" title="7 Eureka 原理"></a>7 Eureka 原理</h2><ol><li><p>本质：存储了每个客户端的注册信息。EurekaClient从EurekaServer同步获取服务注册列表。通过一定的规则选择一个服务进行调用。</p></li><li><p>Eureka架构图</p><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823173713961.png" alt="image-20200823173713961"></p></li><li><p>详解</p></li></ol><ul><li>服务提供者：是一个eureka client，向Eureka Server注册和更新自己的信息，同时能从Eureka Server注册表中获取到其他服务的信息。</li><li>服务注册中心：提供服务注册和发现的功能。每个Eureka Cient向Eureka Server注册自己的信息，也可以通过Eureka Server获取到其他服务的信息达到发现和调用其他服务的目的。</li><li>服务消费者：是一个eureka client，通过Eureka Server获取注册到其上其他服务的信息，从而根据信息找到所需的服务发起远程调用。</li><li>同步复制：Eureka Server之间注册表信息的同步复制，使Eureka Server集群中不同注册表中服务实例信息保持一致。</li><li>远程调用：服务客户端之间的远程调用。</li><li>注册：Client端向Server端注册自身的元数据以供服务发现。</li><li>续约：通过发送心跳到Server以维持和更新注册表中服务实例元数据的有效性。当在一定时长内，Server没有收到Client的心跳信息，将默认服务下线，会把服务实例的信息从注册表中删除。</li><li>下线：Client在关闭时主动向Server注销服务实例元数据，这时Client的服务实例数据将从Server的注册表中删除。</li><li>获取注册表：Client向Server请求注册表信息，用于服务发现，从而发起服务间远程调用。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">让我们自己做：如何做。？</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">拉取注册表</span><br><span class="line">从注册表选一个</span><br><span class="line">调用</span><br><span class="line"></span><br><span class="line">服务端：</span><br><span class="line">写个web server。</span><br><span class="line">功能：</span><br><span class="line">1、定义注册表：</span><br><span class="line">Map&lt;name,Map&lt;id,InstanceInfo&gt;&gt;。</span><br><span class="line">2、别人可以向我注册自己的信息。</span><br><span class="line">3、别人可以从我这里拉取他人的注册信息。</span><br><span class="line">4、我和我的同类可以共享注册表。</span><br><span class="line"></span><br><span class="line">eureka是用：jersey实现，也是个mvc框架。</span><br><span class="line">我们可以自己写个spring boot web实现。</span><br></pre></td></tr></table></figure><h2 id="8-Eureka-Client源码"><a href="#8-Eureka-Client源码" class="headerlink" title="8 Eureka Client源码"></a>8 Eureka Client源码</h2><ol><li><p>功能复习</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Netflix/eureka/wiki/Eureka-REST-operations</span><br><span class="line">注意地址中的v2 是没有的。</span><br><span class="line"></span><br><span class="line">查询所有实例信息：http://localhost:7900/eureka/apps</span><br><span class="line"></span><br><span class="line">注册服务：http://localhost:7900/eureka/apps/&#123;applicationName&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823173728290.png" alt="image-20200823173728290"></p></li><li><p>源码解读</p><p>下面的讲解按照顺序进行。</p><ul><li><p>spring boot项目引入eureka-client依赖，并注入spring 容器。</p><p>在spring-boot项目中pom文件里面添加的依赖中的bean。是如何注册到spring-boot项目的spring容器中的呢？spring.factories文件是帮助spring-boot项目包以外的bean（即在pom文件中添加依赖中的bean）注册到spring-boot项目的spring容器的。</p><p>由于@ComponentScan注解只能扫描spring-boot项目包内的bean并注册到spring容器中，因此需要@EnableAutoConfiguration（在SpringBootApplication下），注解来注册项目包外的bean。而spring.factories文件，则是用来记录项目包外需要注册的bean类名。</p></li></ul></li></ol><pre><code>点进去@SpringBootApplication注解，发现@EnableAutoConfiguration。点@EnableAutoConfiguration进去。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Import(AutoConfigurationImportSelector.class)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>点AutoConfigurationImportSelector进去<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">发现下面代码</span><br><span class="line">@Override</span><br><span class="line">public String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="built_in">return</span> NO_IMPORTS;</span><br><span class="line">&#125;</span><br><span class="line">AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">.loadMetadata(this.beanClassLoader);</span><br><span class="line">AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">annotationMetadata);</span><br><span class="line"><span class="built_in">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此方法时，向spring ioc容器注入bean。selectImports，返回bean全名。import将bean全名注入。而注入的bean都是些什么呢？点：getAutoConfigurationEntry进去，有一句<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure>点getCandidateConfigurations进去：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br></pre></td></tr></table></figure>点SpringFactoriesLoader进去：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>找eureka client 配置相关类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在api-listen-order(其他eureka client项目均可)项目中，找到</span><br><span class="line">spring-cloud-netflix-eureka-client-2.1.2.RELEASE下META-INF下spring.factories。此文件中，有如下配置信息：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EurekaClientAutoConfiguration（Eureka client自动配置类，负责Eureka client中关键beans的配置和初始化），</span><br><span class="line">RibbonEurekaAutoConfiguration（Ribbon负载均衡相关配置）</span><br><span class="line">EurekaDiscoveryClientConfiguration（配置自动注册和应用的健康检查器）。</span><br></pre></td></tr></table></figure></li><li><p>EurekaDiscoveryClientConfiguration介绍</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找到此类：org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration中的注解@ConditionalOnClass(EurekaClientConfig.class)，</span><br></pre></td></tr></table></figure></li><li><p>EurekaClientConfig介绍</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">点击进去查看EurekaClientConfig是个接口，查看其实现类EurekaClientConfigBean。此类里封装了Eureka Client和Eureka Server交互所需要的配置信息。看此类代码：</span><br><span class="line"></span><br><span class="line">  public static final String PREFIX = <span class="string">"eureka.client"</span>;</span><br><span class="line">     表示在配置文件中用eureka.client.属性名配置。</span><br></pre></td></tr></table></figure></li><li><p>Eureka 实例相关配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从org.springframework.cloud.client.discovery.DiscoveryClient顶级接口入手，前面介绍过spring common。看其在Eureka中的实现类org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient。有一个属性：</span><br><span class="line"> private final EurekaClient eurekaClient，查看其实现类：com.netflix.discovery.DiscoveryClient。</span><br><span class="line">有一个属性：</span><br><span class="line"> private final ApplicationInfoManager applicationInfoManager（应用信息管理器，点进去此类，发现此类总有两个属性:</span><br><span class="line"> private InstanceInfo instanceInfo;</span><br><span class="line">private EurekaInstanceConfig config;</span><br><span class="line"> 服务实例的信息类InstanceInfo和服务实例配置信息类EurekaInstanceConfig）。</span><br></pre></td></tr></table></figure></li><li><p>InstanceInfo介绍</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开InstanceInfo里面有instanceId等服务实例信息。</span><br><span class="line"> InstanceInfo封装了将被发送到Eureka Server进行注册的服务实例元数据。它在Eureka Server列表中代表一个服务实例，其他服务可以通过instanceInfo了解到该服务的实例相关信息，包括地址等，从而发起请求。</span><br></pre></td></tr></table></figure></li><li><p>EurekaInstanceConfig介绍</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EurekaInstanceConfig是个接口，找到它的实现类org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean。</span><br><span class="line"> 此类封装了EurekaClient自身服务实例的配置信息，主要用于构建InstanceInfo。看到此类有一段代码：@ConfigurationProperties(<span class="string">"eureka.instance"</span>)，</span><br><span class="line"> 在配置文件中用eureka.instance.属性配置。EurekaInstanceConfigBean提供了默认值。</span><br></pre></td></tr></table></figure></li><li><p>通过EurekaInstanceConfig构建instanceInfo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在ApplicationInfoManager中有一个方法</span><br><span class="line">public void initComponent(EurekaInstanceConfig config)中有一句：</span><br><span class="line">this.instanceInfo &#x3D; new EurekaConfigBasedInstanceInfoProvider(config).get();</span><br><span class="line">通过EurekaInstanceConfig构造instanceInfo。</span><br></pre></td></tr></table></figure></li><li><p>顶级接口DiscoveryClient介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">介绍一下spring-cloud-commons-2.2.1.realease包下，org.springframework.cloud.client.discovery.DiscoveryClient接口。定义用来服务发现的客户端接口，是客户端进行服务发现的核心接口，是spring cloud用来进行服务发现的顶级接口，在common中可以看到其地位。在Netflix Eureka和Consul中都有具体的实现类。</span><br><span class="line">org.springframework.cloud.client.discovery.DiscoveryClient的类注释:</span><br><span class="line">Represents read operations commonly available to discovery services such as Netflix Eureka or consul.io。</span><br><span class="line">代表通用于服务发现的读操作，例如在 eureka或consul中。</span><br><span class="line">有</span><br><span class="line">String description();&#x2F;&#x2F;获取实现类的描述。</span><br><span class="line">List&lt;String&gt; getServices();&#x2F;&#x2F;获取所有服务实例id。</span><br><span class="line">List&lt;ServiceInstance&gt; getInstances(String serviceId);&#x2F;&#x2F;通过服务id查询服务实例信息列表。</span><br></pre></td></tr></table></figure></li><li><p>Eureka 的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接下来我们找Eureka的实现类。org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient。</span><br><span class="line">查看方法。</span><br><span class="line">public List&lt;ServiceInstance&gt; getInstances(String serviceId)，</span><br><span class="line">组合了com.netflix.discovery.EurekaClient来实现。</span><br></pre></td></tr></table></figure></li><li><p>EurekaClient的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EurekaClient有一个注解@ImplementedBy(DiscoveryClient.class)，此类的默认实现类：com.netflix.discovery.DiscoveryClient。提供了:</span><br><span class="line">服务注册到server方法register().</span><br><span class="line">续约boolean renew().</span><br><span class="line">下线public synchronized void shutdown().</span><br><span class="line">查询服务列表 功能。</span><br><span class="line">想想前面的图中client的功能。提供了于Eureka Server交互的关键逻辑。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.discovery.DiscoveryClient实现了EurekaClient（继承了LookupService）</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.shared.LookupService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LookupService作用：发现活跃的服务实例。</span><br><span class="line">根据服务实例注册的appName来获取封装有相同appName的服务实例信息容器： </span><br><span class="line">Application getApplication(String appName)。</span><br><span class="line">获取所有的服务实例信息：</span><br><span class="line">Applications getApplications();</span><br><span class="line">根据实例id，获取服务实例信息：</span><br><span class="line">List&lt;InstanceInfo&gt; getInstancesById(String id);</span><br><span class="line"></span><br><span class="line">上面提到一个Application，它持有服务实例信息列表。它是同一个服务的集群信息。比如api-passenger的所有服务信息，这些服务都在api-passenger服务名下面。</span><br><span class="line"></span><br><span class="line">而instanceInfo代表一个服务实例的信息。为了保证原子性，比如对某个instanceInfo的操作，使用了大量同步的代码。比如下面代码：</span><br><span class="line">public void addInstance(InstanceInfo i) &#123;</span><br><span class="line">instancesMap.put(i.getId(), i);</span><br><span class="line">synchronized (instances) &#123;</span><br><span class="line">instances.remove(i);</span><br><span class="line">instances.add(i);</span><br><span class="line">isDirty &#x3D; true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Applications是注册表中，所有服务实例信息的集合。</span><br></pre></td></tr></table></figure></li><li><p>健康检测器和事件监听器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EurekaClient在LookupService上做了扩充。提供了更丰富的获取服务实例的方法。按住不表。我们看一下另外两个方法：</span><br><span class="line"></span><br><span class="line">public void registerHealthCheck(HealthCheckHandler healthCheckHandler),向client注册 健康检查处理器，client存在一个定时任务通过HealthCheckHandler检查当前client状态，当client状态发生变化时，将会触发新的注册事件，去更新eureka server的注册表中的服务实例信息。</span><br><span class="line">通过HealthCheckHandler 实现应用状态检测。HealthCheckHandler的实现类org.springframework.cloud.netflix.eureka.EurekaHealthCheckHandler，看其构造函数：</span><br><span class="line">public EurekaHealthCheckHandler(HealthAggregator healthAggregator) &#123;</span><br><span class="line">Assert.notNull(healthAggregator, &quot;HealthAggregator must not be null&quot;);</span><br><span class="line">this.healthIndicator &#x3D; new CompositeHealthIndicator(healthAggregator);</span><br><span class="line">&#125;</span><br><span class="line">private final CompositeHealthIndicator healthIndicator;此类事属于org.springframework.boot.actuate.health包下，可以得出，是通过actuator来实现对应用的检测的。</span><br><span class="line"></span><br><span class="line">public void registerEventListener(EurekaEventListener eventListener)注册事件监听器，当实例信息有变时，触发对应的处理事件。</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>找到com.netflix.discovery.DiscoveryClient</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在api-listen-order项目中，找到spring-cloud-netflix-eureka-client-2.1.2.RELEASE下META-INF下spring.factories。此文件中org.springframework.cloud.bootstrap.BootstrapConfiguration&#x3D;\</span><br><span class="line">org.springframework.cloud.netflix.eureka.config.EurekaDiscoveryClientConfigServiceBootstrapConfiguration，此类有个注解：</span><br><span class="line">@Import(&#123; EurekaDiscoveryClientConfiguration.class, &#x2F;&#x2F; this emulates</span><br><span class="line">&#x2F;&#x2F; @EnableDiscoveryClient, the import</span><br><span class="line">&#x2F;&#x2F; selector doesn&#39;t run before the</span><br><span class="line">&#x2F;&#x2F; bootstrap phase</span><br><span class="line">EurekaClientAutoConfiguration.class &#125;)</span><br><span class="line">注解中有个类：EurekaClientAutoConfiguration，此类中有如下代码：</span><br><span class="line">CloudEurekaClient cloudEurekaClient &#x3D; new CloudEurekaClient(appManager,</span><br><span class="line">config, this.optionalArgs, this.context);</span><br><span class="line">（debug可以调试到）</span><br><span class="line">通过CloudEurekaClient找到：public class CloudEurekaClient extends DiscoveryClient。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-不注册不拉取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DiscoveryClient的构造函数：</span><br><span class="line">DiscoveryClient(ApplicationInfoManager applicationInfoManager, EurekaClientConfig config, AbstractDiscoveryClientOptionalArgs args,Provider&lt;BackupRegistry&gt; backupRegistryProvider, EndpointRandomizer endpointRandomizer) </span><br><span class="line">此方法中依次执行了 从eureka server中拉取注册表，服务注册，初始化发送心跳，缓存刷新（定时拉取注册表信息），按需注册定时任务等，贯穿了Eureka Client启动阶段的各项工作。</span><br><span class="line"></span><br><span class="line">构造函数353行：</span><br><span class="line">if (config.shouldFetchRegistry()) &#123;</span><br><span class="line">  this.registryStalenessMonitor &#x3D; new ThresholdLevelsMetric(this, METRIC_REGISTRY_PREFIX + &quot;lastUpdateSec_&quot;, new long[]&#123;15L, 30L, 60L, 120L, 240L, 480L&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  this.registryStalenessMonitor &#x3D; ThresholdLevelsMetric.NO_OP_METRIC;</span><br><span class="line">&#125;</span><br><span class="line">  shouldFetchRegistry，点其实现类EurekaClientConfigBean，找到它其实对应于：eureka.client.fetch-register，true：表示client从server拉取注册表信息。</span><br><span class="line"></span><br><span class="line">下面：</span><br><span class="line">if (config.shouldRegisterWithEureka()) &#123;</span><br><span class="line">  this.heartbeatStalenessMonitor &#x3D; new ThresholdLevelsMetric(this, METRIC_REGISTRATION_PREFIX + &quot;lastHeartbeatSec_&quot;, new long[]&#123;15L, 30L, 60L, 120L, 240L, 480L&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  this.heartbeatStalenessMonitor &#x3D; ThresholdLevelsMetric.NO_OP_METRIC;</span><br><span class="line">&#125;</span><br><span class="line">  shouldRegisterWithEureka，点其实现类EurekaClientConfigBean，找到它其实对应于：</span><br><span class="line">  eureka.client.register-with-eureka：true：表示client将注册到server。</span><br><span class="line"></span><br><span class="line">  if (!config.shouldRegisterWithEureka() &amp;&amp; !config.shouldFetchRegistry()) &#123;</span><br><span class="line">  如果以上两个都为false，则直接返回，构造方法执行结束，既不服务注册，也不服务发现。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-两个定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">顺着上面代码往下看：</span><br><span class="line">  scheduler &#x3D; Executors.newScheduledThreadPool(2,</span><br><span class="line">                      new ThreadFactoryBuilder()</span><br><span class="line">                              .setNameFormat(&quot;DiscoveryClient-%d&quot;)</span><br><span class="line">                              .setDaemon(true)</span><br><span class="line">                              .build());</span><br><span class="line">  定义了一个基于线程池的定时器线程池，大小为2。</span><br><span class="line">  往下：</span><br><span class="line">  heartbeatExecutor：用于发送心跳，</span><br><span class="line">  cacheRefreshExecutor：用于刷新缓存。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-client和server交互的Jersey客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接着构建eurekaTransport &#x3D; new EurekaTransport();它是eureka Client和eureka server进行http交互jersey客户端。点开EurekaTransport，看到许多httpclient相关的属性。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-拉取注册信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (clientConfig.shouldFetchRegistry() &amp;&amp; !fetchRegistry(false)) &#123;</span><br><span class="line">            fetchRegistryFromBackup();</span><br><span class="line">&#125;</span><br><span class="line">如果判断的前部分为true，执行后半部分fetchRegistry。此时会从eureka server拉取注册表中的信息，将注册表缓存到本地，可以就近获取其他服务信息，减少于server的交互。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-服务注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (clientConfig.shouldRegisterWithEureka() &amp;&amp; clientConfig.shouldEnforceRegistrationAtInit()) &#123;</span><br><span class="line">             try &#123;</span><br><span class="line">                 if (!register() ) &#123;</span><br><span class="line">                     throw new IllegalStateException(&quot;Registration error at startup. Invalid server response.&quot;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; catch (Throwable th) &#123;</span><br><span class="line">                 logger.error(&quot;Registration error at startup: &#123;&#125;&quot;, th.getMessage());</span><br><span class="line">                 throw new IllegalStateException(th);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;注册失败抛异常。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-启动定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在构造方法的最后initScheduledTasks();此方法中，启动3个定时任务。方法内有statusChangeListener，按需注册是一个事件StatusChangeEvent，状态改变，则向server注册。</span><br></pre></td></tr></table></figure></li><li><p>com.netflix.discovery.DiscoveryClient构造函数-总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">总结DiscoveryClient构造关键过程：</span><br><span class="line">  初始化一堆信息。</span><br><span class="line">  从拉取注册表信息。</span><br><span class="line">  向server注册自己。</span><br><span class="line">  初始化3个任务。</span><br><span class="line">  详细后面继续讲。源码就是这样，得层层拨开。</span><br></pre></td></tr></table></figure></li><li><p>拉取注册表信息详解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">上面的fetchRegistry(false)，点进去，看注释：</span><br><span class="line">  &#x2F;&#x2F; If the delta is disabled or if it is the first time, get all  applications。</span><br><span class="line">  如果增量式拉取被禁止或第一次拉取注册表，则进行全量拉取：getAndStoreFullRegistry()。</span><br><span class="line">  否则进行增量拉取注册表信息getAndUpdateDelta(applications)。</span><br><span class="line">  一般情况，在Eureka client第一次启动，会进行全量拉取。之后的拉取都尽量尝试只进行增量拉取。</span><br><span class="line"></span><br><span class="line">  拉取服务注册表：</span><br><span class="line">  全量拉取：getAndStoreFullRegistry();</span><br><span class="line">  增量拉取：getAndUpdateDelta(applications);</span><br></pre></td></tr></table></figure></li><li><p>全量拉取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进入getAndStoreFullRegistry() 方法，有一方法：eurekaTransport.queryClient.getApplications。</span><br><span class="line">  通过debug发现 实现类是AbstractJerseyEurekaHttpClient，点开，debug出 </span><br><span class="line">  webResource地址为：http:&#x2F;&#x2F;root:root@eureka-7900:7900&#x2F;eureka&#x2F;apps&#x2F;，此端点用于获取server中所有的注册表信息。</span><br><span class="line">  getAndStoreFullRegistry()可能被多个线程同时调用，导致新拉取的注册表被旧的覆盖(如果新拉取的动作设置apps阻塞的情况下）。</span><br><span class="line">  此时用了AutomicLong来进行版本管理，如果更新时版本不一致，不保存apps。</span><br><span class="line">  通过这个判断fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1)，如果版本一致，并设置新版本（+1），</span><br><span class="line">  接着执行localRegionApps.set(this.filterAndShuffle(apps));过滤并洗牌apps。点开this.filterAndShuffle(apps)实现，继续点apps.shuffleAndIndexInstances，继续点shuffleInstances，继续点application.shuffleAndStoreInstances，继续点_shuffleAndStoreInstances，发现if (filterUpInstances &amp;&amp; InstanceStatus.UP !&#x3D; instanceInfo.getStatus())。只保留状态为UP的服务。</span><br></pre></td></tr></table></figure></li><li><p>增量拉取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">回到刚才的fetchRegistry方法中，getAndUpdateDelta，增量拉取。通过getDelta方法，看到实际拉取的地址是：apps&#x2F;delta，如果获取到的delta为空，则全量拉取。</span><br><span class="line">  通常来讲是3分钟之内注册表的信息变化（在server端判断），获取到delta后，会更新本地注册表。</span><br><span class="line">  增量式拉取是为了维护client和server端 注册表的一致性，防止本地数据过久，而失效，采用增量式拉取的方式，减少了client和server的通信量。</span><br><span class="line">  client有一个注册表缓存刷新定时器，专门负责维护两者之间的信息同步，但是当增量出现意外时，定时器将执行，全量拉取以更新本地缓存信息。更新本地注册表方法updateDelta，有一个细节。</span><br><span class="line">  if (ActionType.ADDED.equals(instance.getActionType())) ，public enum ActionType &#123;</span><br><span class="line">          ADDED, &#x2F;&#x2F; Added in the discovery server</span><br><span class="line">          MODIFIED, &#x2F;&#x2F; Changed in the discovery server</span><br><span class="line">          DELETED</span><br><span class="line">          &#x2F;&#x2F; Deleted from the discovery server</span><br><span class="line">      &#125;，</span><br><span class="line">  在InstanceInfo instance中有一个instance.getActionType()，ADDED和MODIFIED状态的将更新本地注册表applications.addApplication，DELETED将从本地剔除掉existingApp.removeInstance(instance)。</span><br></pre></td></tr></table></figure></li><li><p>服务注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">好了拉取完eureka server中的注册表了，接着进行服务注册。回到DiscoveryClient构造函数。</span><br><span class="line">  拉取fetchRegistry完后进行register注册。由于构造函数开始时已经将服务实例元数据封装好了instanceInfo，所以此处之间向server发送instanceInfo，</span><br><span class="line">  通过方法httpResponse &#x3D; eurekaTransport.registrationClient.register(instanceInfo);看到String urlPath &#x3D; &quot;apps&#x2F;&quot; + info.getAppName();又是一个server端点，退上去f7，httpResponse.getStatusCode() &#x3D;&#x3D; Status.NO_CONTENT.getStatusCode();204状态码，则注册成功。</span><br></pre></td></tr></table></figure></li><li><p>初始化3个定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">接着</span><br><span class="line">  &#x2F;&#x2F; finally, init the schedule tasks (e.g. cluster resolvers, heartbeat, instanceInfo replicator, fetch</span><br><span class="line">  initScheduledTasks();看注释初始化3个定时任务。</span><br><span class="line">  题外话：</span><br><span class="line">  client会定时向server发送心跳，维持自己服务租约的有效性，用心跳定时任务实现;</span><br><span class="line">  而server中会有不同的服务实例注册进来，一进一出，就需要数据的同步。所以client需要定时从server拉取注册表信息，用缓存定时任务实现;</span><br><span class="line">  client如果有变化，也会及时更新server中自己的信息，用按需注册定时任务实现。</span><br><span class="line"></span><br><span class="line">  就是这三个定时任务。</span><br><span class="line"></span><br><span class="line">进 initScheduledTasks()方法中，clientConfig.shouldFetchRegistry()，</span><br><span class="line">从server拉取注册表信息。</span><br><span class="line">int registryFetchIntervalSeconds &#x3D; clientConfig.getRegistryFetchIntervalSeconds()拉取的时间间隔，eureka.client.registry-fetch-interval-seconds进行设置。</span><br><span class="line"></span><br><span class="line">int renewalIntervalInSecs &#x3D; nstanceInfo.getLeaseInfo().getRenewalIntervalInSecs();心跳定时器，默认30秒。</span><br><span class="line"></span><br><span class="line">心跳定时任务和缓存刷新定时任务是有scheduler 的 schedule提交的，鼠标放到scheduler上，看到一句话 A scheduler to be used for the following 3 tasks:- updating service urls- scheduling a TimedSuperVisorTask。</span><br><span class="line">知道循环逻辑是由TimedSuperVisorTask实现的。</span><br><span class="line">  new TimedSupervisorTask(</span><br><span class="line">                              &quot;heartbeat&quot;,</span><br><span class="line">                              scheduler,</span><br><span class="line">                              heartbeatExecutor,</span><br><span class="line">                              renewalIntervalInSecs,</span><br><span class="line">                              TimeUnit.SECONDS,</span><br><span class="line">                              expBackOffBound,</span><br><span class="line">                              new HeartbeatThread()看到HeartbeatThread线程。</span><br><span class="line">点进去public void run() &#123;</span><br><span class="line">              if (renew()) &#123;</span><br><span class="line">                  lastSuccessfulHeartbeatTimestamp &#x3D; System.currentTimeMillis();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  里面是renew（）方法。</span><br><span class="line">  </span><br><span class="line">  scheduler.schedule(</span><br><span class="line">                      new TimedSupervisorTask(</span><br><span class="line">                              &quot;cacheRefresh&quot;,</span><br><span class="line">                              scheduler,</span><br><span class="line">                              cacheRefreshExecutor,</span><br><span class="line">                              registryFetchIntervalSeconds,</span><br><span class="line">                              TimeUnit.SECONDS,</span><br><span class="line">                              expBackOffBound,</span><br><span class="line">                              new CacheRefreshThread()</span><br><span class="line">                      ),</span><br><span class="line">  看到CacheRefreshThread，进去，发现 class CacheRefreshThread implements Runnable &#123;</span><br><span class="line">          public void run() &#123;</span><br><span class="line">              refreshRegistry();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;是用的refreshRegistry，进去发现fetchRegistry。回到原来讲过的地方。</span><br><span class="line">      </span><br><span class="line">  boolean renew() &#123;</span><br><span class="line">          EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse;</span><br><span class="line">          try &#123;</span><br><span class="line">              httpResponse &#x3D; eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, null);</span><br><span class="line">              logger.debug(PREFIX + &quot;&#123;&#125; - Heartbeat status: &#123;&#125;&quot;, appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">              if (httpResponse.getStatusCode() &#x3D;&#x3D; Status.NOT_FOUND.getStatusCode()) &#123;</span><br><span class="line">                  REREGISTER_COUNTER.increment();</span><br><span class="line">                  logger.info(PREFIX + &quot;&#123;&#125; - Re-registering apps&#x2F;&#123;&#125;&quot;, appPathIdentifier, instanceInfo.getAppName());</span><br><span class="line">                  long timestamp &#x3D; instanceInfo.setIsDirtyWithTime();</span><br><span class="line">                  boolean success &#x3D; register();</span><br><span class="line">                  if (success) &#123;</span><br><span class="line">                      instanceInfo.unsetIsDirty(timestamp);</span><br><span class="line">                  &#125;</span><br><span class="line">                  return success;</span><br><span class="line">              &#125;</span><br><span class="line">              return httpResponse.getStatusCode() &#x3D;&#x3D; Status.OK.getStatusCode();</span><br><span class="line">          &#125; catch (Throwable e) &#123;</span><br><span class="line">              logger.error(PREFIX + &quot;&#123;&#125; - was unable to send heartbeat!&quot;, appPathIdentifier, e);</span><br><span class="line">              return false;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;看到如果遇到404，server没有此实例，则重新发起注册。如果续约成功返回 200.</span><br><span class="line">      点sendHeartBeat进去String urlPath &#x3D; &quot;apps&#x2F;&quot; + appName + &#39;&#x2F;&#39; + id;</span><br><span class="line">      </span><br><span class="line">还有一个定时任务，按需注册。当instanceinfo和status发生变化时，需要向server同步，去更新自己在server中的实例信息。保证server注册表中服务实例信息的有效和可用。</span><br><span class="line">  &#x2F;&#x2F; InstanceInfo replicator</span><br><span class="line">          instanceInfoReplicator &#x3D; new InstanceInfoReplicator(</span><br><span class="line">                  this,</span><br><span class="line">                  instanceInfo,</span><br><span class="line">                  clientConfig.getInstanceInfoReplicationIntervalSeconds(),</span><br><span class="line">                  2); &#x2F;&#x2F; burstSize</span><br><span class="line">  </span><br><span class="line">          statusChangeListener &#x3D; new ApplicationInfoManager.StatusChangeListener() &#123;</span><br><span class="line">              @Override</span><br><span class="line">              public String getId() &#123;</span><br><span class="line">                  return &quot;statusChangeListener&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">  </span><br><span class="line">           @Override</span><br><span class="line">              public void notify(StatusChangeEvent statusChangeEvent) &#123;</span><br><span class="line">                  if (InstanceStatus.DOWN &#x3D;&#x3D; statusChangeEvent.getStatus() ||</span><br><span class="line">                          InstanceStatus.DOWN &#x3D;&#x3D; statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                      &#x2F;&#x2F; log at warn level if DOWN was involved</span><br><span class="line">                      logger.warn(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      logger.info(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125;</span><br><span class="line">                  instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          if (clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">              applicationInfoManager.registerStatusChangeListener(statusChangeListener);</span><br><span class="line">          &#125;</span><br><span class="line">      instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());    </span><br><span class="line">      </span><br><span class="line">此定时任务有2个部分，</span><br><span class="line">  1：定时刷新服务实例信息和检查应用状态的变化，在服务实例信息发生改变的情况下向server重新发起注册。InstanceInfoReplicator点进去。看到一个方法    </span><br><span class="line">  public void run() &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              discoveryClient.refreshInstanceInfo();&#x2F;&#x2F;刷新instanceinfo。</span><br><span class="line">  &#x2F;&#x2F;如果实例信息有变，返回数据更新时间。</span><br><span class="line">              Long dirtyTimestamp &#x3D; instanceInfo.isDirtyWithTime();</span><br><span class="line">              if (dirtyTimestamp !&#x3D; null) &#123;</span><br><span class="line">                  discoveryClient.register();&#x2F;&#x2F;注册服务实例。</span><br><span class="line">                  instanceInfo.unsetIsDirty(dirtyTimestamp);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; catch (Throwable t) &#123;</span><br><span class="line">              logger.warn(&quot;There was a problem with the instance info replicator&quot;, t);</span><br><span class="line">          &#125; finally &#123;</span><br><span class="line">          &#x2F;&#x2F;延时执行下一个检查任务。用于再次调用run方法，继续检查服务实例信息和状态的变化。</span><br><span class="line">              Future next &#x3D; scheduler.schedule(this, replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">              scheduledPeriodicRef.set(next);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;      </span><br><span class="line"></span><br><span class="line">refreshInstanceInfo点进去，看方法注释：如果有变化，在下次心跳时，同步向server。</span><br><span class="line"></span><br><span class="line">2.注册状态改变监听器，在应用状态发生变化时，刷新服务实例信息，在服务实例信息发生改变时向server注册。  看这段            </span><br><span class="line">   statusChangeListener &#x3D; new ApplicationInfoManager.StatusChangeListener() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public String getId() &#123;</span><br><span class="line">                      return &quot;statusChangeListener&quot;;</span><br><span class="line">                  &#125;</span><br><span class="line"> @Override</span><br><span class="line">              public void notify(StatusChangeEvent statusChangeEvent) &#123;</span><br><span class="line">                  if (InstanceStatus.DOWN &#x3D;&#x3D; statusChangeEvent.getStatus() ||</span><br><span class="line">                          InstanceStatus.DOWN &#x3D;&#x3D; statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                      &#x2F;&#x2F; log at warn level if DOWN was involved</span><br><span class="line">                      logger.warn(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                      logger.info(&quot;Saw local status change event &#123;&#125;&quot;, statusChangeEvent);</span><br><span class="line">                  &#125;</span><br><span class="line">                  instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;如果状态发生改变，调用onDemandUpdate（），点onDemandUpdate进去，看到InstanceInfoReplicator.this.run();     </span><br><span class="line">          </span><br><span class="line">总结：两部分，一部分自己去检查，一部分等待状态监听事件。</span><br><span class="line"></span><br><span class="line">初始化定时任务完成，最后一步启动步骤完成。接下来就是正常服务于业务。然后消亡。</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>服务下线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">服务下线：在应用关闭时，client会向server注销自己，在Discoveryclient销毁前，会执行下面清理方法。 </span><br><span class="line">@PreDestroy</span><br><span class="line">@Override</span><br><span class="line">public synchronized void shutdown() ，看此方法上有一个注解，表示：在销毁前执行此方法。unregisterStatusChangeListener注销监听器。cancelScheduledTasks取消定时任务。unregister服务下线。eurekaTransport.shutdown关闭jersy客户端 等。</span><br><span class="line"></span><br><span class="line">unregister点进去。cancel点进去。AbstractJerseyEurekaHttpClient。String urlPath &#x3D; &quot;apps&#x2F;&quot; + appName + &#39;&#x2F;&#39; + id;看到url和http请求delete方法。</span><br></pre></td></tr></table></figure><ul><li><p>client源码总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总结：源码其实两部分内容：</span><br><span class="line">1、client自身的操作。</span><br><span class="line">2、server的配合。（https:&#x2F;&#x2F;github.com&#x2F;Netflix&#x2F;eureka&#x2F;wiki&#x2F;Eureka-REST-operations）。</span><br><span class="line">  一切尽在：《Eureka Client工作流程图》</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="9-Eureka-Server源码"><a href="#9-Eureka-Server源码" class="headerlink" title="9 Eureka Server源码"></a>9 Eureka Server源码</h2><ol><li><p>Eureka Server功能复习</p><p>接受服务注册<br>接受服务心跳<br>服务剔除<br>服务下线<br>集群同步<br>获取注册表中服务实例信息</p></li></ol><p>   需要注意的是，Eureka Server同时也是一个Eureka Client，在不禁止Eureka Server的客户端行为时，它会向它配置文件中的其他Eureka Server进行拉取注册表、服务注册和发送心跳等操作。</p><ol start="2"><li><p>源码解读</p><ul><li><p>启动server注册相关bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">注册外部的配置类</span><br><span class="line">spring-cloud-netflix-eureka-server-2.1.2.REALEASE.jar</span><br><span class="line">中</span><br><span class="line">META-INF&#x2F;spring.factories</span><br><span class="line">中</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">  org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration</span><br><span class="line">启动时会自动加载：EurekaServerAutoConfiguration</span><br><span class="line">功能：向spring的bean工厂添加eureka-server相关功能的bean。</span><br><span class="line"> </span><br><span class="line">但是EurekaServerAutoConfiguration的生效时有条件的。</span><br><span class="line"> EurekaServerAutoConfiguration上有一个注解：@ConditionalOnBean(EurekaServerMarkerConfiguration.Marker.class)，意思是：只有在Spring容器里有Marker这个类的实例时，才会加载EurekaServerAutoConfiguration，这个就是控制是否开启Eureka Server的关键。</span><br></pre></td></tr></table></figure></li><li><p>开启eureka server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 开关：</span><br><span class="line">而在@EnableEurekaServer中，@Import(EurekaServerMarkerConfiguration.class)，意思是：动态注入此bean到spring 容器。引入了EurekaServerMarkerConfiguration.class。所以开启了Server服务。所以注册了前面说的：EurekaServerAutoConfiguration</span><br></pre></td></tr></table></figure></li><li><p>开启注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在EurekaServerMarkerConfiguration上有@Import(EurekaServerInitializerConfiguration.class)，导入了EurekaServerInitializerConfiguration，</span><br><span class="line">EurekaServerInitializerConfiguration</span><br><span class="line">implements ServletContextAware, SmartLifecycle，SmartLifecycle的作用是：初始化完之后，</span><br><span class="line">执行public void start()方法。</span><br></pre></td></tr></table></figure></li></ul><p>在public void start()中，启动一个线程。看注释：log.info(“Started Eureka Server”);发布事件：publish(new EurekaRegistryAvailableEvent(getEurekaServerConfig()))，<br>  告诉client，可以来注册了。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上面提到的 log.info(&quot;Started Eureka Server&quot;) 的上面一行。eurekaServerBootstrap.contextInitialized(EurekaServerInitializerConfiguration.this.servletContext);</span><br><span class="line">点contextInitialized进去，看到initEurekaServerContext，初始化eureka 上下文，点initEurekaServerContext进去，看到</span><br><span class="line">&#x2F;&#x2F; Copy registry from neighboring eureka node</span><br><span class="line">int registryCount &#x3D; this.registry.syncUp();从相邻的eureka 节点复制注册表，</span><br><span class="line">下一行openForTraffic（主要是和client 交换信息，traffic），查看实现，PeerAwareInstanceRegistryImpl，开启任务postInit，进去之后发现剔除功能（剔除 没有续约的服务）。postInit，点进去，发现new EvictionTask()，点进去，看到run方法中，evict(compensationTimeMs)，点进去就到了，具体剔除逻辑，下面剔除的时候讲。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- PeerAwareInstanceRegistry接口</span><br></pre></td></tr></table></figure><p>  在EurekaServerAutoConfiguration中 有 public EurekaServerContext eurekaServerContext，中有DefaultEurekaServerContext，点进去找到<br>      @PostConstruct<br>      @Override<br>      public void initialize() {<br>          logger.info(“Initializing …”);<br>       peerEurekaNodes.start();<br>          try {<br>           registry.init(peerEurekaNodes);<br>          } catch (Exception e) {<br>              throw new RuntimeException(e);<br>          }<br>          logger.info(“Initialized”);<br>      }，其中peerEurekaNodes.start();启动一个只拥有一个线程的线程池，第一次进去会更新一下集群其他节点信息。registry.init(peerEurekaNodes);鼠标放在registry上，发现是PeerAwareInstanceRegistryImpl ， 的 注册信息管理类里面的init方法。PeerAwareInstanceRegistry是个接口，实现类是：PeerAwareInstanceRegistryImpl。PeerAwareInstanceRegistry接口，实现了com.netflix.eureka.registry.InstanceRegistry。    </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 服务实例注册表</span><br></pre></td></tr></table></figure><p>  Server是围绕注册表管理的。有两个InstanceRegistry。<br>  com.netflix.eureka.registry.InstanceRegistry是euraka server中注册表管理的核心接口。职责是在内存中管理注册到Eureka Server中的服务实例信息。实现类有PeerAwareInstanceRegistryImpl。</p><p>  org.springframework.cloud.netflix.eureka.server.InstanceRegistry对PeerAwareInstanceRegistryImpl进行了继承和扩展，使其适配Spring cloud的使用环境，主要的实现由PeerAwareInstanceRegistryImpl提供。</p><p>  com.netflix.eureka.registry.InstanceRegistry extends LeaseManager<InstanceInfo>, LookupService<String> 。LeaseManager<InstanceInfo>是对注册到server中的服务实例租约进行管理。LookupService<String>是提供服务实例的检索查询功能。</String></InstanceInfo></String></InstanceInfo></p><p>  LeaseManager<InstanceInfo>接口的作用是对注册到Eureka Server中的服务实例租约进行管理，方法有：服务注册，下线，续约，剔除。此接口管理的类目前是InstanceInfo。InstanceInfo代表服务实例信息。</InstanceInfo></p><p>  PeerAwareInstanceRegistryImpl 增加了对peer节点的同步复制操作。使得eureka server集群中注册表信息保持一致。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 接受服务注册</span><br><span class="line"></span><br><span class="line">  &gt; 《eureka服务端注册》</span><br></pre></td></tr></table></figure><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823173914337.png" alt="image-20200823173914337"></p><p>  我们学过Eureka Client在发起服务注册时会将自身的服务实例元数据封装在InstanceInfo中，然后将InstanceInfo发送到Eureka Server。Eureka Server在接收到Eureka Client发送的InstanceInfo后将会尝试将其放到本地注册表中以供其他Eureka Client进行服务发现。<br>  我们学过：通过 eureka/apps/{服务名}注册</p><p>  在EurekaServerAutoConfiguration中定义了 public FilterRegistrationBean jerseyFilterRegistration ，表名了 表明eureka-server使用了Jersey实现 对外的 restFull接口。注册一个 Jersey 的 filter ，配置好相应的Filter 和 url映射。</p><hr>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>public javax.ws.rs.core.Application jerseyApplication(方法：中。<br> provider.addIncludeFilter(new AnnotationTypeFilter(Path.class));<br>        provider.addIncludeFilter(new AnnotationTypeFilter(Provider.class));<br> 添加一些过滤器，类似于过滤请求地址，Path类似于@RequestMapping，Provider类似于@Controller        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">------</span><br></pre></td></tr></table></figure><p> 在com.netflix.eureka.resources包下，是Eureka Server对于Eureka client的REST请求的定义。看ApplicationResource类（这是一类请求，应用类的请求），类似于应用@Controller注解：@Produces({“application/xml”, “application/json”})，接受xml和json。见名识意 public Response addInstance。添加实例instanceinfo。 方法中，有一句：<br> registry.register(info, “true”.equals(isReplication));鼠标放在registry上PeerAwareInstanceRegistry接口，点击void register方法。发现 是PeerAwareInstanceRegistryImpl 的方法：public void register(final InstanceInfo info, final boolean isReplication) ，中有一句：super.register(info, leaseDuration, isReplication);<br> 进入下面正题：<br> com.netflix.eureka.registry.AbstractInstanceRegistry<br> register方法</p><p> 在register中，服务实例的InstanceInfo保存在Lease中，Lease在AbstractInstanceRegistry中统一通过ConcurrentHashMap保存在内存中。在服务注册过程中，会先获取一个读锁，防止其他线程对registry注册表进行数据操作，避免数据的不一致。然后从resgitry查询对应的InstanceInfo租约是否已经存在注册表中，根据appName划分服务集群，使用InstanceId唯一标记服务实例。如果租约存在，比较两个租约中的InstanceInfo的最后更新时间lastDirtyTimestamp，保留时间戳大的服务实例信息InstanceInfo。如果租约不存在，意味这是一次全新的服务注册，将会进行自我保护的统计，创建新的租约保存InstanceInfo。接着将租约放到resgitry注册表中。<br> 之后将进行一系列缓存操作并根据覆盖状态规则设置服务实例的状态，缓存操作包括将InstanceInfo加入用于统计Eureka Client增量式获取注册表信息的recentlyChangedQueue和失效responseCache中对应的缓存。最后设置服务实例租约的上线时间用于计算租约的有效时间，释放读锁并完成服务注册。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     </span><br><span class="line"></span><br><span class="line">- 接受心跳 续租，renew</span><br><span class="line"></span><br><span class="line">  &gt; 《Eureka服务端接收心跳》</span><br></pre></td></tr></table></figure><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/../../../只要学不死 就往死里学/note/网约车/online-taxi-file-master/二期/课程md/按组件区分/03-服务注册与发现/image-20200823173937080.png" alt="image-20200823173937080"><p>  在Eureka Client完成服务注册之后，它需要定时向Eureka Server发送心跳请求(默认30秒一次)，维持自己在Eureka Server中租约的有效性。</p><p>  看另一类请求com.netflix.eureka.resources.InstanceResource。下public Response renewLease(方法。看到一行boolean isSuccess = registry.renew(app.getName(), id, isFromReplicaNode);<br>  点击renew的实现。<br>  进入下面正题：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Eureka Server处理心跳请求的核心逻辑位于AbstractInstanceRegistry#renew方法中。renew方法是对Eureka Client位于注册表中的租约的续租操作，不像register方法需要服务实例信息，仅根据服务实例的服务名和服务实例id即可更新对应租约的有效时间。<br> com.netflix.eureka.registry.AbstractInstanceRegistry<br>renew<br> //根据appName获取服务集群的租约集合<br>  Map&lt;String, Lease<InstanceInfo>&gt; gMap = registry.get(appName);<br>  //查看服务实例状态<br>   InstanceStatus overriddenInstanceStatus = this.getOverriddenInstanceStatus(<br>                         instanceInfo, leaseToRenew, isReplication);<br>                 if (overriddenInstanceStatus == InstanceStatus.UNKNOWN) {<br> //统计每分钟续租次数<br> renewsLastMin.increment();<br> //更新租约<br> leaseToRenew.renew();</InstanceInfo></p><p> 此方法中不关注InstanceInfo，仅关注于租约本身以及租约的服务实例状态。如果根据服务实例的appName和instanceInfoId查询出服务实例的租约，并且根据#getOverriddenInstanceStatus方法得到的instanceStatus不为InstanceStatus.UNKNOWN，那么更新租约中的有效时间，即更新租约Lease中的lastUpdateTimestamp，达到续约的目的；如果租约不存在，那么返回续租失败的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 服务剔除</span><br></pre></td></tr></table></figure><p>  如果Eureka Client在注册后，既没有续约，也没有下线(服务崩溃或者网络异常等原因)，那么服务的状态就处于不可知的状态，不能保证能够从该服务实例中获取到回馈，所以需要服务剔除此方法定时清理这些不稳定的服务，该方法会批量将注册表中所有过期租约剔除。</p><p>  剔除是定时任务，默认60秒执行一次。延时60秒，间隔60秒<br>          evictionTimer.schedule(evictionTaskRef.get(),<br>                  serverConfig.getEvictionIntervalTimerInMs(),<br>                  serverConfig.getEvictionIntervalTimerInMs());</p><p>  从上面eureka server启动来看，剔除的任务，是线程启动的，执行的是下面的方法。<br>  com.netflix.eureka.registry.AbstractInstanceRegistry<br>  evict</p><p>  判断是否开启自我保护<br>  if (!isLeaseExpirationEnabled()) {<br>  如果开启自我保护，不剔除。点进去isLeaseExpirationEnabled，查看实现类，有一个isSelfPreservationModeEnabled，点进去    @Override<br>      public boolean isSelfPreservationModeEnabled() {<br>          return serverConfig.shouldEnableSelfPreservation();<br>      }，发现EurekaServerConfig，的方法shouldEnableSelfPreservation，看其实现中有EurekaServerConfigBean，发现属性：enableSelfPreservation。</p><p>  紧接着一个大的for循环，便利注册表register，依次判断租约是否过期。一次性获取所有的过期租约。</p><p>  //获取注册表租约总数<br>  int registrySize = (int) getLocalRegistrySize();<br>  计算注册表租约的阈值 （总数乘以 续租百分比），得出要续租的数量<br>  int registrySizeThreshold = (int) (registrySize *    serverConfig.getRenewalPercentThreshold());</p><p>  总数减去要续租的数量，就是理论要剔除的数量<br>  int evictionLimit = registrySize - registrySizeThreshold;</p><p>  //求 上面理论剔除数量，和过期租约总数的最小值。就是最终要提出的数量。<br>  int toEvict = Math.min(expiredLeases.size(), evictionLimit);</p><p>  然后剔除。用internalCancel(appName, id, false);执行 服务下线将服务从注册表清除掉。</p><p>  剔除的限制：<br>  1.自我保护期间不清除。<br>  2.分批次清除。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.服务是逐个随机剔除，剔除均匀分布在所有应用中，防止在同一时间内同一服务集群中的服务全部过期被剔除，造成在大量剔除服务时，并在进行自我保护时，促使程序崩溃。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EurekaServerInitializerConfiguration的 eurekaServerBootstrap.contextInitialized(方法，中initEurekaServerContext();点进去this.registry.openForTraffic(this.applicationInfoManager, registryCount);点进去，super.postInit();点进去evictionTaskRef.set(new EvictionTask());</span><br><span class="line">           evictionTimer.schedule(evictionTaskRef.get(),</span><br><span class="line">                serverConfig.getEvictionIntervalTimerInMs(),</span><br><span class="line">                   serverConfig.getEvictionIntervalTimerInMs());</span><br><span class="line">   发现 定时任务。</span><br></pre></td></tr></table></figure><p> 剔除服务是个定时任务，用EvictionTask执行，默认60秒执行一次，延时60秒执行。定时剔除过期服务。</p><p> 服务剔除将会遍历registry注册表，找出其中所有的过期租约，然后根据配置文件中续租百分比阀值和当前注册表的租约总数量计算出最大允许的剔除租约的数量(当前注册表中租约总数量减去当前注册表租约阀值)，分批次剔除过期的服务实例租约。对过期的服务实例租约调用AbstractInstanceRegistry#internalCancel服务下线的方法将其从注册表中清除掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     自我保护机制主要在Eureka Client和Eureka Server之间存在网络分区的情况下发挥保护作用，在服务器端和客户端都有对应实现。假设在某种特定的情况下(如网络故障)，Eureka Client和Eureka Server无法进行通信，此时Eureka Client无法向Eureka Server发起注册和续约请求，Eureka Server中就可能因注册表中的服务实例租约出现大量过期而面临被剔除的危险，然而此时的Eureka Client可能是处于健康状态的(可接受服务访问)，如果直接将注册表中大量过期的服务实例租约剔除显然是不合理的。</span><br><span class="line">​     针对这种情况，Eureka设计了“自我保护机制”。在Eureka Server处，如果出现大量的服务实例过期被剔除的现象，那么该Server节点将进入自我保护模式，保护注册表中的信息不再被剔除，在通信稳定后再退出该模式；在Eureka Client处，如果向Eureka Server注册失败，将快速超时并尝试与其他的Eureka Server进行通信。“自我保护机制”的设计大大提高了Eureka的可用性。</span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">- 服务下线</span><br><span class="line"></span><br><span class="line">  &gt; 《Eureka服务下线》</span><br></pre></td></tr></table></figure><p><img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823174051490.png" alt="image-20200823174051490"></p><p>  Eureka Client在应用销毁时，会向Eureka Server发送服务下线请求，清除注册表中关于本应用的租约，避免无效的服务调用。在服务剔除的过程中，也是通过服务下线的逻辑完成对单个服务实例过期租约的清除工作。</p><p>  在InstanceResource中，    public Response cancelLease(<br>              @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication)<br>  一行代码：boolean isSuccess = registry.cancel(app.getName(), id,<br>                  “true”.equals(isReplication));点进去cancel，发现：internalCancel(appName, id, isReplication); 查看实现：        </p><p>  先获取读锁，防止被其他线程修改<br>  read.lock();<br>  根据appName获取服务实力集群。<br>  Map&lt;String, Lease<InstanceInfo>&gt; gMap = registry.get(appName);<br>  在内存中取消实例 id的服务<br>  if (gMap != null) {<br>                  leaseToCancel = gMap.remove(id);<br>              }</InstanceInfo></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加到最近下线服务的统计队列<br> synchronized (recentCanceledQueue) {<br>              recentCanceledQueue.add(new Pair&lt;Long, String&gt;(System.currentTimeMillis(), appName + “(“ + id + “)”));<br>             }</p><p> 往下判断leaseToCancel是否为空，租约不存在，返回false，<br> 如果存在，<br> 设置租约下线时间。 leaseToCancel.cancel();<br> InstanceInfo instanceInfo = leaseToCancel.getHolder();<br> 获取持有租约的服务信息，标记服务实例为instanceInfo.setActionType(ActionType.DELETED);<br> 添加到租约变更记录队列<br>  recentlyChangedQueue.add(new RecentlyChangedItem(leaseToCancel));用于eureka client的增量拉取注册表信息。<br> 释放锁。</p><p> 首先通过registry根据服务名和服务实例id查询关于服务实例的租约Lease是否存在，统计最近请求下线的服务实例用于Eureka Server主页展示。如果租约不存在，返回下线失败；如果租约存在，从registry注册表中移除，设置租约的下线时间，同时在最近租约变更记录队列中添加新的下线记录，以用于Eureka Client的增量式获取注册表信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 集群同步</span><br></pre></td></tr></table></figure><p>  如果Eureka Server是通过集群的方式进行部署，那么为了维护整个集群中Eureka Server注册表数据的一致性，势必需要一个机制同步Eureka Server集群中的注册表数据。</p><p>  Eureka Server集群同步包含两个部分，<br>  一部分是Eureka Server在启动过程中从它的peer节点中拉取注册表信息，并将这些服务实例的信息注册到本地注册表中；<br>  另一部分是Eureka Server每次对本地注册表进行操作时，同时会将操作同步到它的peer节点中，达到集群注册表数据统一的目的。</p><p>  1.启动拉取别的peer<br>  在Eureka Server启动类中：EurekaServerInitializerConfiguration位于EurekaServerAutoConfiguration 的import注解中。一行：eurekaServerBootstrap.contextInitialized(<br>  进去：initEurekaServerContext();，点进去，一行：int registryCount = this.registry.syncUp();<br>  看注释：拉取注册表从邻近节点。点击syncUp()的实现方法进去：<br>  看循环：意思是，如果是i第一次进来，为0，不够等待的代码，直接执行下面的拉取服务实例。<br>  将自己作为一个eureka client，拉取注册表。并通过register(instance, instance.getLeaseInfo().getDurationInSecs(), true)注册到自身的注册表中。</p><p>  Eureka Server也是一个Eureka Client，在启动的时候也会进行DiscoveryClient的初始化，会从其对应的Eureka Server中拉取全量的注册表信息。在Eureka Server集群部署的情况下，Eureka Server从它的peer节点中拉取到注册表信息后，将遍历这个Applications，将所有的服务实例通过AbstractRegistry#register方法注册到自身注册表中。</p><pre><code>int registryCount = this.registry.syncUp();this.registry.openForTraffic(this.applicationInfoManager, registryCount);</code></pre><p>  当执行完上面的syncUp逻辑后，在下面的openForTraffic，开启此server接受别的client注册，拉取注册表等操作。而在它首次拉取其他peer节点时，是不允许client的通信请求的。</p><p>  在openForTraffic中，初始化期望client发送过来的服务数量，即上面获取到的服务数量this.expectedNumberOfClientsSendingRenews = count;<br>  updateRenewsPerMinThreshold点进去，是计算自我保护的统计参数：<br>  this.numberOfRenewsPerMinThreshold = (int) (this.expectedNumberOfClientsSendingRenews<br>                  * (60.0 / serverConfig.getExpectedClientRenewalIntervalSeconds())<br>                  * serverConfig.getRenewalPercentThreshold());<br>  服务数<em>（每个服务每分钟续约次数）</em>阈值<br>  if (count &gt; 0) {<br>              this.peerInstancesTransferEmptyOnStartup = false;<br>          }<br>  如果count=0，没有拉取到注册表信息，将此值设为true，表示其他peer来取空的实例信息，意味着，将不允许client从此server获取注册表信息。如果count&gt;0，将此值设置为false，允许client来获取注册表。</p><p>  后面将服务置为上线，并开启剔除的定时任务。</p><p>  当Server的状态不为UP时，将拒绝所有的请求。在Client请求获取注册表信息时，Server会判断此时是否允许获取注册表中的信息。上述做法是为了避免Eureka Server在#syncUp方法中没有获取到任何服务实例信息时(Eureka Server集群部署的情况下)，Eureka Server注册表中的信息影响到Eureka Client缓存的注册表中的信息。因为是全量同步，如果server什么也没同步过来，会导致client清空注册表。导致服务调用出问题。</p><p>  2.Server之间注册表信息的同步复制<br>  为了保证Eureka Server集群运行时注册表信息的一致性，每个Eureka Server在对本地注册表进行管理操作时，会将相应的操作同步到所有peer节点中。</p><p>  在外部调用server的restful方法时，在com.netflix.eureka.resources包下的ApplicationResource资源中，查看每个服务的操作。比如服务注册public Response addInstance(，此方法中有<br>  registry.register(info, “true”.equals(isReplication));点进去实现类：replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, null, isReplication);这是一种情况。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在PeerAwareInstanceRegistryImpl类中，看其他操作，cancel，renew等中都有replicateToPeers，<br> 此方法中有个peerEurekaNodes，代表一个可同步数据的eureka Server的集合，如果注册表有变化，向此中的peer节点同步。</p><p> replicateToPeers方法，它将遍历Eureka Server中peer节点，向每个peer节点发送同步请求。<br>             for (final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {<br>                 // If the url represents this host, do not replicate to yourself.<br>                 if (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) {<br>                     continue;<br>                 }<br>                 replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);<br>             }<br> 此replicateInstanceActionsToPeers方法中，类PeerEurekaNode的实例node的各种方法，cancel，register，等，用了batchingDispatcher.process(，作用是将同一时间段内，相同服务实例的相同操作将使用相同的任务编号，在进行同步复制的时候，将根据任务编号合并操作，减少同步操作的数量和网络消耗，但是同时也造成了同步复制的延时性，不满足CAP中的C（强一致性）。<br> 所以Eureka，只满足AP。</p><p> 通过Eureka Server在启动过程中初始化本地注册表信息和Eureka Server集群间的同步复制操作，最终达到了集群中Eureka Server注册表信息一致的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 获取注册表中服务实例信息</span><br></pre></td></tr></table></figure><p>Eureka Server中获取注册表的服务实例信息主要通过两个方法实现：AbstractInstanceRegistry#getApplicationsFromMultipleRegions从多地区获取全量注册表数据，AbstractInstanceRegistry#getApplicationDeltasFromMultipleRegions从多地区获取增量式注册表数据。</p><p> 1、全量：<br> 上面讲到从节点复制注册信息的时候，用方法public int syncUp() ，一行Applications apps = eurekaClient.getApplications();点进去实现类，有一行getApplicationsFromAllRemoteRegions(); 下面getApplicationsFromMultipleRegions，作用从多个地区中获取全量注册表信息，并封装成Applications返回，它首先会将本地注册表registry中的所有服务实例信息提取出来封装到Applications中，再根据是否需要拉取Region的注册信息，将远程拉取过来的Application放到上面的Applications中。最后得到一个全量的Applications。<br> 2、在前面提到接受服务注册，接受心跳等方法中，都有recentlyChangedQueue.add(new RecentlyChangedItem(lease));作用是将新变动的服务放到最近变化的服务实例信息队列中，用于记录增量是注册表信息。getApplicationDeltasFromMultipleRegions，实现了从远处eureka server中获取增量式注册表信息的能力。</p><p> 在EurekaServer对外restful中，在com.netflix.eureka.resources下，<br> @GET<br>     public Response getApplication(@PathParam(“version”) String version,<br>                                    @HeaderParam(“Accept”) final String acceptHeader,<br>                                    @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept) {</p><p> 其中有一句：String payLoad = responseCache.get(cacheKey);在responseCache初始化的时候，它的构造方法ResponseCacheImpl(EurekaServerConfig serverConfig, ServerCodecs serverCodecs, AbstractInstanceRegistry registry) {中，Value value = generatePayload(key);点进去有一句：registry.getApplicationDeltasFromMultipleRegions(key.getRegions()));从远程获取delta增量注册信息。但是这个只是向client提供，不向server提供，因为server可以通过每次变更自动同步到peer。</p><p> 获取增量式注册表信息将会从recentlyChangedQueue中获取最近变化的服务实例信息。recentlyChangedQueue中统计了近3分钟内进行注册、修改和剔除的服务实例信息，在服务注册AbstractInstanceRegistry#registry、接受心跳请求AbstractInstanceRegistry#renew和服务下线AbstractInstanceRegistry#internalCancel等方法中均可见到recentlyChangedQueue对这些服务实例进行登记，用于记录增量式注册表信息。#getApplicationsFromMultipleRegions方法同样提供了从远程Region的Eureka Server获取增量式注册表信息的能力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">------</span><br><span class="line"></span><br><span class="line">2020-01-19 第二节课完。</span><br><span class="line"></span><br><span class="line">eureka源码总结：</span><br><span class="line"></span><br><span class="line">1. client</span><br><span class="line"></span><br><span class="line">- 拉取server注册表到本地。</span><br><span class="line">- 注册服务。</span><br><span class="line">- 初始化3个定时任务：心跳续约，定时拉取注册表，按需注册（InstanceInfoReplicator#run）。</span><br><span class="line">- 发送下线。</span><br><span class="line"></span><br><span class="line">2. server</span><br><span class="line"></span><br><span class="line">- 接受服务注册</span><br><span class="line">- 接受服务心跳</span><br><span class="line">- 服务剔除</span><br><span class="line">- 服务下线</span><br><span class="line">- 集群同步（1.启动时从peer拉取信息，2.将注册到自己的服务同步到peer）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">画了些图：</span><br><span class="line"></span><br><span class="line">《Eureka服务端注册》</span><br><span class="line">《Eureka服务端接收心跳》</span><br><span class="line">《Eureka服务下线》</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 11.9 Eureka元数据</span><br><span class="line"></span><br><span class="line">获取元数据信息</span><br><span class="line"></span><br><span class="line">1. 从Eureka Server获取：</span><br><span class="line"></span><br><span class="line">   启动eureka-7900。</span><br><span class="line"></span><br><span class="line">   启动一个service-sms（8002）</span><br><span class="line"></span><br><span class="line">   访问：http:&#x2F;&#x2F;localhost:7900&#x2F;eureka&#x2F;apps&#x2F;service-sms</span><br><span class="line">   看到如下结果：</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;sh</span><br><span class="line">   &lt;application&gt;</span><br><span class="line">   &lt;name&gt;SERVICE-SMS&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;instance&gt;</span><br><span class="line">   &lt;instanceId&gt;30.136.133.11:service-sms:8002&lt;&#x2F;instanceId&gt;</span><br><span class="line">   &lt;hostName&gt;30.136.133.11&lt;&#x2F;hostName&gt;</span><br><span class="line">   &lt;app&gt;SERVICE-SMS&lt;&#x2F;app&gt;</span><br><span class="line">   &lt;ipAddr&gt;30.136.133.11&lt;&#x2F;ipAddr&gt;</span><br><span class="line">   &lt;status&gt;UP&lt;&#x2F;status&gt;</span><br><span class="line">   &lt;overriddenstatus&gt;UNKNOWN&lt;&#x2F;overriddenstatus&gt;</span><br><span class="line">   &lt;port enabled&#x3D;&quot;true&quot;&gt;8002&lt;&#x2F;port&gt;</span><br><span class="line">   &lt;securePort enabled&#x3D;&quot;false&quot;&gt;443&lt;&#x2F;securePort&gt;</span><br><span class="line">   &lt;countryId&gt;1&lt;&#x2F;countryId&gt;</span><br><span class="line">   &lt;dataCenterInfo class&#x3D;&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;&gt;</span><br><span class="line">   &lt;name&gt;MyOwn&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;&#x2F;dataCenterInfo&gt;</span><br><span class="line">   &lt;leaseInfo&gt;</span><br><span class="line">   &lt;renewalIntervalInSecs&gt;1&lt;&#x2F;renewalIntervalInSecs&gt;</span><br><span class="line">   &lt;durationInSecs&gt;1&lt;&#x2F;durationInSecs&gt;</span><br><span class="line">   &lt;registrationTimestamp&gt;1579673388471&lt;&#x2F;registrationTimestamp&gt;</span><br><span class="line">   &lt;lastRenewalTimestamp&gt;1579673470319&lt;&#x2F;lastRenewalTimestamp&gt;</span><br><span class="line">   &lt;evictionTimestamp&gt;0&lt;&#x2F;evictionTimestamp&gt;</span><br><span class="line">   &lt;serviceUpTimestamp&gt;1579673387755&lt;&#x2F;serviceUpTimestamp&gt;</span><br><span class="line">   &lt;&#x2F;leaseInfo&gt;</span><br><span class="line">   &lt;metadata&gt;</span><br><span class="line">   &lt;user.password&gt;root&lt;&#x2F;user.password&gt;</span><br><span class="line">   &lt;management.port&gt;8002&lt;&#x2F;management.port&gt;</span><br><span class="line">   &lt;jmx.port&gt;62449&lt;&#x2F;jmx.port&gt;</span><br><span class="line">   &lt;user.name&gt;root&lt;&#x2F;user.name&gt;</span><br><span class="line">   &lt;&#x2F;metadata&gt;</span><br><span class="line">   &lt;homePageUrl&gt;http:&#x2F;&#x2F;30.136.133.11:8002&#x2F;&lt;&#x2F;homePageUrl&gt;</span><br><span class="line">   &lt;statusPageUrl&gt;http:&#x2F;&#x2F;30.136.133.11:8002&#x2F;actuator&#x2F;info&lt;&#x2F;statusPageUrl&gt;</span><br><span class="line">   &lt;healthCheckUrl&gt;http:&#x2F;&#x2F;30.136.133.11:8002&#x2F;actuator&#x2F;health&lt;&#x2F;healthCheckUrl&gt;</span><br><span class="line">   &lt;vipAddress&gt;service-sms&lt;&#x2F;vipAddress&gt;</span><br><span class="line">   &lt;secureVipAddress&gt;service-sms&lt;&#x2F;secureVipAddress&gt;</span><br><span class="line">   &lt;isCoordinatingDiscoveryServer&gt;false&lt;&#x2F;isCoordinatingDiscoveryServer&gt;</span><br><span class="line">   &lt;lastUpdatedTimestamp&gt;1579673388471&lt;&#x2F;lastUpdatedTimestamp&gt;</span><br><span class="line">   &lt;lastDirtyTimestamp&gt;1579673387301&lt;&#x2F;lastDirtyTimestamp&gt;</span><br><span class="line">   &lt;actionType&gt;ADDED&lt;&#x2F;actionType&gt;</span><br><span class="line">   &lt;&#x2F;instance&gt;</span><br><span class="line">   &lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>手写获取元数据。</p><p>在一个eureka client（api-listen-order）中，写一个controller</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(<span class="string">"/service-instance"</span>)</span><br><span class="line">public class ServiceInstanceController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">@GetMapping(<span class="string">"/query-by-application-name/&#123;applicationName&#125;"</span>)</span><br><span class="line">public List&lt;ServiceInstance&gt; getInstance(@PathVariable String applicationName)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> discoveryClient.getInstances(applicationName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示</p><p>启动eureka（7900）单节点</p><p>启动api-listen-order</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实例演示：</span><br><span class="line">获取服务元数据：</span><br><span class="line"></span><br><span class="line">访问地址：</span><br><span class="line">自己开发：</span><br><span class="line">http:&#x2F;&#x2F;localhost:8084&#x2F;service-instance&#x2F;query-by-application-name&#x2F;api-listen-order</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:8084&#x2F;service-instance&#x2F;query-by-application-name&#x2F;service-sms</span><br><span class="line"></span><br><span class="line">结果看到一堆json信息，</span><br><span class="line"></span><br><span class="line">表示api-listen-order在eureka server中的实例信息。</span><br></pre></td></tr></table></figure><ol><li><p>标准元数据和自定义元数据</p></li><li><p>标准元数据：主机名，ip，端口，健康检查等信息。会被发布到注册表中，用于服务间调用。</p></li><li><p>自定义元数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.metadata-map：</span><br><span class="line">  自定义key:自定义value</span><br></pre></td></tr></table></figure><p>远程客户端访问。自定义属性。</p><p>api-listen-order中ServiceInstanceController，读取instance信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">启动eureka，api-listen-order,</span><br><span class="line"></span><br><span class="line">http://localhost:8084/service-instance/query-by-application-name/api-listen-order</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"port"</span>: 8084,</span><br><span class="line"><span class="string">"metadata"</span>: &#123;</span><br><span class="line"><span class="string">"yueyi"</span>: <span class="string">"2019"</span>,</span><br><span class="line"><span class="string">"user.password"</span>: <span class="string">"root"</span>,</span><br><span class="line"><span class="string">"management.port"</span>: <span class="string">"8084"</span>,</span><br><span class="line"><span class="string">"jmx.port"</span>: <span class="string">"61378"</span>,</span><br><span class="line"><span class="string">"user.name"</span>: <span class="string">"root"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"secure"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"uri"</span>: <span class="string">"http://127.0.0.1:8084"</span>,</span><br><span class="line"><span class="string">"instanceId"</span>: <span class="string">"api-listen-order:30.136.133.11:port"</span>,</span><br><span class="line"><span class="string">"serviceId"</span>: <span class="string">"API-LISTEN-ORDER"</span>,</span><br><span class="line"><span class="string">"instanceInfo"</span>: &#123;</span><br><span class="line"><span class="string">"instanceId"</span>: <span class="string">"api-listen-order:30.136.133.11:port"</span>,</span><br><span class="line"><span class="string">"app"</span>: <span class="string">"API-LISTEN-ORDER"</span>,</span><br><span class="line"><span class="string">"appGroupName"</span>: null,</span><br><span class="line"><span class="string">"ipAddr"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"sid"</span>: <span class="string">"na"</span>,</span><br><span class="line"><span class="string">"homePageUrl"</span>: <span class="string">"http://127.0.0.1:8084/"</span>,</span><br><span class="line"><span class="string">"statusPageUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/info"</span>,</span><br><span class="line"><span class="string">"healthCheckUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/health"</span>,</span><br><span class="line"><span class="string">"secureHealthCheckUrl"</span>: null,</span><br><span class="line"><span class="string">"vipAddress"</span>: <span class="string">"api-listen-order"</span>,</span><br><span class="line"><span class="string">"secureVipAddress"</span>: <span class="string">"api-listen-order"</span>,</span><br><span class="line"><span class="string">"countryId"</span>: 1,</span><br><span class="line"><span class="string">"dataCenterInfo"</span>: &#123;</span><br><span class="line"><span class="string">"@class"</span>: <span class="string">"com.netflix.appinfo.InstanceInfo<span class="variable">$DefaultDataCenterInfo</span>"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"MyOwn"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"hostName"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line"><span class="string">"overriddenStatus"</span>: <span class="string">"UNKNOWN"</span>,</span><br><span class="line"><span class="string">"leaseInfo"</span>: &#123;</span><br><span class="line"><span class="string">"renewalIntervalInSecs"</span>: 1,</span><br><span class="line"><span class="string">"durationInSecs"</span>: 1,</span><br><span class="line"><span class="string">"registrationTimestamp"</span>: 1579489514655,</span><br><span class="line"><span class="string">"lastRenewalTimestamp"</span>: 1579489524146,</span><br><span class="line"><span class="string">"evictionTimestamp"</span>: 0,</span><br><span class="line"><span class="string">"serviceUpTimestamp"</span>: 1579489514147</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"isCoordinatingDiscoveryServer"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"metadata"</span>: &#123;</span><br><span class="line"><span class="string">"yueyi"</span>: <span class="string">"2019"</span>,</span><br><span class="line"><span class="string">"user.password"</span>: <span class="string">"root"</span>,</span><br><span class="line"><span class="string">"management.port"</span>: <span class="string">"8084"</span>,</span><br><span class="line"><span class="string">"jmx.port"</span>: <span class="string">"61378"</span>,</span><br><span class="line"><span class="string">"user.name"</span>: <span class="string">"root"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lastUpdatedTimestamp"</span>: 1579489514655,</span><br><span class="line"><span class="string">"lastDirtyTimestamp"</span>: 1579489514111,</span><br><span class="line"><span class="string">"actionType"</span>: <span class="string">"ADDED"</span>,</span><br><span class="line"><span class="string">"asgName"</span>: null</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"scheme"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义元数据，可以结合ribbon 分发规则使用。网关 做 分发规则 选择 服务时，可以作为依据。灰度发布。有作用。后面负载均衡有例子。此时只认识元数据。基于元数据做的例子，后面有。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">灰度发布例子：</span><br><span class="line"></span><br><span class="line">client端：</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    metadataMap:</span><br><span class="line">      tag: pre-prd</span><br><span class="line"></span><br><span class="line">调用方：</span><br><span class="line">List&lt;ServiceInstance&gt; instances =  discoveryClient.getInstances(applicationName);</span><br><span class="line"><span class="keyword">for</span> (ServiceInstance serviceInstance : instances) &#123;</span><br><span class="line">Map&lt;String, String&gt; metadata = serviceInstance.getMetadata();</span><br><span class="line">String metaValue = metadata.get(<span class="string">"yueyi"</span>);</span><br><span class="line">log.info(<span class="string">"元数据："</span>+metaValue);</span><br><span class="line">&#125;</span><br><span class="line">获取到元数据。</span><br><span class="line"></span><br><span class="line">分发的时候，根据app客户端传过来的参数：比如加tag=pre,只分发到pre-prd的eureka client。</span><br><span class="line">在新发布的app版本带tag参数。就可以实现灰度测试。</span><br></pre></td></tr></table></figure></li></ol><h2 id="10-自我保护计算"><a href="#10-自我保护计算" class="headerlink" title="10 自我保护计算"></a>10 自我保护计算</h2><ol><li><p>红色警告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY<span class="string">'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>默认情况下，Eureka Server在一定时间内，没有接收到某个微服务心跳，会将某个微服务注销（90S）。但是当网络故障时，微服务与Server之间无法正常通信，上述行为就非常危险，因为微服务正常，不应该注销。</p><p>Eureka Server通过自我保护模式来解决整个问题，当Server在短时间内丢失过多客户端时，那么Server会进入自我保护模式，会保护注册表中的微服务不被注销掉。当网络故障恢复后，退出自我保护模式。</p></li><li><p>思想：宁可保留健康的和不健康的，也不盲目注销任何健康的服务。</p></li><li><p>关闭自我保护。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server: </span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>自我保护触发</p><p>自我保护机制的触发条件：<br>（当每分钟心跳次数( renewsLastMin ) 小于 numberOfRenewsPerMinThreshold 时，并且开启自动保护模式开关( eureka.server.enable-self-preservation = true ) 时，触发自我保护机制，不再自动过期租约。）<br>numberOfRenewsPerMinThreshold = expectedNumberOfRenewsPerMin * 续租百分比( eureka.server.renewalPercentThreshold, 默认0.85 )<br>expectedNumberOfRenewsPerMin = 当前注册的应用实例数 x 2<br>为什么乘以 2：<br>默认情况下，注册的应用实例每半分钟续租一次，那么一分钟心跳两次，因此 x 2 。</p><p>服务实例数：10个，期望每分钟续约数：10 * 2=20，期望阈值：20*0.85=17，自我保护少于17时 触发。</p><p>剔除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AbstractInstanceRegistry</span><br><span class="line"></span><br><span class="line">public void evict(long additionalLeaseMs) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Running the evict task"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (!isLeaseExpirationEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"DS: lease expiration is currently disabled."</span>);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">此代码意思：<span class="keyword">if</span>中判断为<span class="literal">true</span>，不走此逻辑，走下面的剔除。如果<span class="keyword">if</span>为<span class="literal">false</span>。走此逻辑，不剔除。</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PeerAwareInstanceRegistryImpl</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean <span class="function"><span class="title">isLeaseExpirationEnabled</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSelfPreservationModeEnabled()) &#123;</span><br><span class="line">        //如果打开自我保护，不进入此逻辑。</span><br><span class="line">            // The self preservation mode is disabled, hence allowing the instances to expire.</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> numberOfRenewsPerMinThreshold &gt; 0 &amp;&amp; getNumOfRenewsInLastMin() &gt; numberOfRenewsPerMinThreshold;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>《自我保护流程图》</p></blockquote><p>   <img src="/2020/08/13/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%AF%A6%E8%A7%A3/image-20200823174202817.png" alt="image-20200823174202817"></p><h2 id="11-多网卡选择"><a href="#11-多网卡选择" class="headerlink" title="11 多网卡选择"></a>11 多网卡选择</h2><ol><li>ip注册</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: <span class="literal">true</span></span><br><span class="line">表示将自己的ip注册到EurekaServer上。不配置或<span class="literal">false</span>，表示将操作系统的hostname注册到server</span><br></pre></td></tr></table></figure><ol start="2"><li><p>服务器有多个网卡，eh0，eh1，eh2，只有eh0可以让外部其他服务访问进来，而Eureka client将eh1和eh2注册到Eureka server上，这样其他服务就无法访问该微服务了。</p></li><li><p>指定Ip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: <span class="literal">true</span></span><br><span class="line">    ip-address: 实际能访问到的Ip</span><br></pre></td></tr></table></figure><p>如果设置了此时的ip-address，在元数据查看到就是此ip，其他服务也通过此ip来调用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"host"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"port"</span>: 8084,</span><br><span class="line"><span class="string">"metadata"</span>: &#123;</span><br><span class="line"><span class="string">"yueyi"</span>: <span class="string">"2019"</span>,</span><br><span class="line"><span class="string">"user.password"</span>: <span class="string">"root"</span>,</span><br><span class="line"><span class="string">"management.port"</span>: <span class="string">"8084"</span>,</span><br><span class="line"><span class="string">"jmx.port"</span>: <span class="string">"61378"</span>,</span><br><span class="line"><span class="string">"user.name"</span>: <span class="string">"root"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"secure"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"uri"</span>: <span class="string">"http://127.0.0.1:8084"</span>,</span><br><span class="line"><span class="string">"instanceId"</span>: <span class="string">"api-listen-order:30.136.133.11:port"</span>,</span><br><span class="line"><span class="string">"serviceId"</span>: <span class="string">"API-LISTEN-ORDER"</span>,</span><br><span class="line"><span class="string">"instanceInfo"</span>: &#123;</span><br><span class="line"><span class="string">"instanceId"</span>: <span class="string">"api-listen-order:30.136.133.11:port"</span>,</span><br><span class="line"><span class="string">"app"</span>: <span class="string">"API-LISTEN-ORDER"</span>,</span><br><span class="line"><span class="string">"appGroupName"</span>: null,</span><br><span class="line"><span class="string">"ipAddr"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"sid"</span>: <span class="string">"na"</span>,</span><br><span class="line"><span class="string">"homePageUrl"</span>: <span class="string">"http://127.0.0.1:8084/"</span>,</span><br><span class="line"><span class="string">"statusPageUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/info"</span>,</span><br><span class="line"><span class="string">"healthCheckUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/health"</span>,</span><br><span class="line"><span class="string">"secureHealthCheckUrl"</span>: null,</span><br><span class="line"><span class="string">"vipAddress"</span>: <span class="string">"api-listen-order"</span>,</span><br><span class="line"><span class="string">"secureVipAddress"</span>: <span class="string">"api-listen-order"</span>,</span><br><span class="line"><span class="string">"countryId"</span>: 1,</span><br><span class="line"><span class="string">"dataCenterInfo"</span>: &#123;</span><br><span class="line"><span class="string">"@class"</span>: <span class="string">"com.netflix.appinfo.InstanceInfo<span class="variable">$DefaultDataCenterInfo</span>"</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"MyOwn"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"hostName"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line"><span class="string">"overriddenStatus"</span>: <span class="string">"UNKNOWN"</span>,</span><br><span class="line"><span class="string">"leaseInfo"</span>: &#123;</span><br><span class="line"><span class="string">"renewalIntervalInSecs"</span>: 1,</span><br><span class="line"><span class="string">"durationInSecs"</span>: 1,</span><br><span class="line"><span class="string">"registrationTimestamp"</span>: 1579489514655,</span><br><span class="line"><span class="string">"lastRenewalTimestamp"</span>: 1579489524146,</span><br><span class="line"><span class="string">"evictionTimestamp"</span>: 0,</span><br><span class="line"><span class="string">"serviceUpTimestamp"</span>: 1579489514147</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"isCoordinatingDiscoveryServer"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"metadata"</span>: &#123;</span><br><span class="line"><span class="string">"yueyi"</span>: <span class="string">"2019"</span>,</span><br><span class="line"><span class="string">"user.password"</span>: <span class="string">"root"</span>,</span><br><span class="line"><span class="string">"management.port"</span>: <span class="string">"8084"</span>,</span><br><span class="line"><span class="string">"jmx.port"</span>: <span class="string">"61378"</span>,</span><br><span class="line"><span class="string">"user.name"</span>: <span class="string">"root"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lastUpdatedTimestamp"</span>: 1579489514655,</span><br><span class="line"><span class="string">"lastDirtyTimestamp"</span>: 1579489514111,</span><br><span class="line"><span class="string">"actionType"</span>: <span class="string">"ADDED"</span>,</span><br><span class="line"><span class="string">"asgName"</span>: null</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"scheme"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="12-Eureka-健康检查"><a href="#12-Eureka-健康检查" class="headerlink" title="12 Eureka 健康检查"></a>12 Eureka 健康检查</h2><blockquote><p>《健康检查效果》</p></blockquote><p>由于server和client通过心跳保持 服务状态，而只有状态为UP的服务才能被访问。看eureka界面中的status。</p><p>比如心跳一直正常，服务一直UP，但是此服务DB连不上了，无法正常提供服务。</p><p>此时，我们需要将 微服务的健康状态也同步到server。只需要启动eureka的健康检查就行。这样微服务就会将自己的健康状态同步到eureka。配置如下即可。</p><p>在client端配置：将自己的健康状态传播到server。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    healthcheck:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>健康检查组件</p><h2 id="13-Eureka-配置"><a href="#13-Eureka-配置" class="headerlink" title="13 Eureka 配置"></a>13 Eureka 配置</h2><p>​    EurekaServerConfigBean：Eureka Server配置。</p><p>​    EurekaInstanceConfigBean：Eureka Client实例配置。</p><p>​    EurekaClientConfigBean：Eureka Client 客户端和服务端交互配置。</p><ol><li>instanceId。</li><li>通过ip注册。</li><li>配置服务快速下线。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">eureka:</span><br><span class="line">  server: </span><br><span class="line">  <span class="comment">#关闭自我保护</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#清理服务间隔时间，毫秒</span></span><br><span class="line">    eviction-interval-timer-in-ms: 5000</span><br><span class="line">    </span><br><span class="line">client：</span><br><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="comment">#开启健康检查，需要引入actuator</span></span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">  instance: </span><br><span class="line">    <span class="comment">#发送心跳给server的频率，每隔这个时间会主动心跳一次</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 1      </span><br><span class="line">    <span class="comment">#Server从收到client后，下一次收到心跳的间隔时间。超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 1</span><br></pre></td></tr></table></figure><p>其他配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homePageUrl"</span>: <span class="string">"http://127.0.0.1:8084/"</span>,</span><br><span class="line"><span class="string">"statusPageUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/info"</span>,</span><br><span class="line"><span class="string">"healthCheckUrl"</span>: <span class="string">"http://127.0.0.1:8084/actuator/health"</span>,</span><br><span class="line"></span><br><span class="line">如果设置了</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">    servlet:</span><br><span class="line">        path: /path</span><br><span class="line"></span><br><span class="line">需要：</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">    instance:</span><br><span class="line">        statusPageUrlPath: <span class="variable">$&#123;server.servlet.path&#125;</span>/actuator/info</span><br><span class="line">        healthCheckUrlPath: <span class="variable">$&#123;server.servlet.path&#125;</span>/actuator/health</span><br></pre></td></tr></table></figure><h2 id="14-Eureka监听事件"><a href="#14-Eureka监听事件" class="headerlink" title="14 Eureka监听事件"></a>14 Eureka监听事件</h2><p>EurekaInstanceCanceledEvent 服务下线事件</p><p>EurekaInstanceRegisteredEvent 服务注册事件</p><p>EurekaInstanceRenewedEvent 服务续约事件</p><p>EurekaRegistryAvailableEvent 注册中心可用事件</p><p>EurekaServerStartedEvent  注册中心启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.cloud.netflix.eureka.server.event.EurekaInstanceCanceledEvent;</span><br><span class="line">import org.springframework.context.event.EventListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class CustomEvent &#123;</span><br><span class="line"></span><br><span class="line">@EventListener</span><br><span class="line">public void listen(EurekaInstanceCanceledEvent e) &#123;</span><br><span class="line">System.out.println(e.getServerId()+<span class="string">"下线事件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">将Eureka Client停止后打印：</span><br><span class="line">api-listen-order:30.136.133.9:port下线事件</span><br></pre></td></tr></table></figure><h2 id="15-Eureka缺陷"><a href="#15-Eureka缺陷" class="headerlink" title="15 Eureka缺陷"></a>15 Eureka缺陷</h2><p>由于集群间的同步复制是通过HTTP的方式进行，基于网络的不可靠性，集群中的Eureka Server间的注册表信息难免存在不同步的时间节点，不满足CAP中的C(数据一致性)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL执行计划详解</title>
      <link href="/2020/08/13/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/13/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL执行计划详解"><a href="#MySQL执行计划详解" class="headerlink" title="MySQL执行计划详解"></a>MySQL执行计划详解</h1><p>​       在企业的应用场景中，为了知道优化SQL语句的执行，需要查看SQL语句的具体执行过程，以加快SQL语句的执行效率。</p><p>​       可以使用explain+SQL语句来模拟优化器执行SQL查询语句，从而知道mysql是如何处理sql语句的。</p><p>​       官网地址： <a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a> </p><p><strong>执行计划中的信息</strong></p><table><thead><tr><th align="center">Column</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">查询中执行select子句或者操作表的顺序</td></tr><tr><td align="center">select_type</td><td align="center">是普通查询还是联合查询还是子查询</td></tr><tr><td align="center">table</td><td align="center">访问的表名或者别名，可能是临时表或者union合并结果集</td></tr><tr><td align="center">type</td><td align="center">数据扫描形式</td></tr><tr><td align="center">possible_keys</td><td align="center">显示可能应用在这张表中的索引，一个或多个</td></tr><tr><td align="center">key</td><td align="center">实际使用的索引，如果为null，则没有使用索引</td></tr><tr><td align="center">key_len</td><td align="center">索引中使用的字节数，在不损失精度的情况下长度越短越好。</td></tr><tr><td align="center">ref</td><td align="center">显示索引的哪一列被使用了，如果可能的话，是一个常数</td></tr><tr><td align="center">rows</td><td align="center">大致估算出找出所需记录需要读取的行数</td></tr><tr><td align="center">filtered</td><td align="center">Percentage of rows filtered by table condition</td></tr><tr><td align="center">extra</td><td align="center">Additional information</td></tr></tbody></table><table><thead><tr><th align="center"><code>select_type</code> Value</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center">SIMPLE</td><td align="center">Simple SELECT (not using UNION or subqueries)</td></tr><tr><td align="center">PRIMARY</td><td align="center">Outermost SELECT</td></tr><tr><td align="center">UNION</td><td align="center">Second or later SELECT statement in a UNION</td></tr><tr><td align="center">DEPENDENT UNION</td><td align="center">Second or later SELECT statement in a UNION, dependent on outer query</td></tr><tr><td align="center">UNION RESULT</td><td align="center">Result of a UNION.</td></tr><tr><td align="center">SUBQUERY</td><td align="center">First SELECT in subquery</td></tr><tr><td align="center">DEPENDENT SUBQUERY</td><td align="center">First SELECT in subquery, dependent on outer query</td></tr><tr><td align="center">DERIVED</td><td align="center">Derived table</td></tr><tr><td align="center">UNCACHEABLE SUBQUERY</td><td align="center">A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query</td></tr><tr><td align="center">UNCACHEABLE UNION</td><td align="center">The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)</td></tr></tbody></table><p><strong>id</strong></p><p>select查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p><p>id号分为三种情况：</p><p>​        1、如果id相同，那么执行顺序从上到下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal;</span><br></pre></td></tr></table></figure><p>​        2、如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname = <span class="string">'SALES'</span>);</span><br></pre></td></tr></table></figure><p>​        3、id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno = d.deptno <span class="keyword">join</span> salgrade sg <span class="keyword">on</span> e.sal <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> d.deptno <span class="keyword">from</span> dept d <span class="keyword">where</span> d.dname = <span class="string">'SALES'</span>);</span><br></pre></td></tr></table></figure><p><strong>select_type</strong></p><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--sample:简单的查询，不包含子查询和union</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--primary:查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t <span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr=emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--union:若第二个select出现在union之后，则被标记为union</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent union:跟union类似，此处的depentent表示union或union all联合而成的结果会受外部表影响</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.empno  <span class="keyword">in</span> ( <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--union result:从union表获取结果的select</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt;<span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--subquery:在select或者where列表中包含子查询</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dependent subquery:subquery的子查询要受到外部表查询的影响</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"></span><br><span class="line"><span class="comment">--DERIVED: from子句中出现的子查询，也叫做派生类，</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> staname,ename supname <span class="keyword">from</span> (<span class="keyword">select</span> ename staname,mgr <span class="keyword">from</span> emp) t <span class="keyword">join</span> emp <span class="keyword">on</span> t.mgr=emp.empno ;</span><br><span class="line"></span><br><span class="line"><span class="comment">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span></span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = (<span class="keyword">select</span> empno <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=@@sort_buffer_size);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--uncacheable union:表示union的查询结果不能被缓存：sql语句未验证</span></span><br></pre></td></tr></table></figure><p><strong>table</strong></p><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集<br>        1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p><p>​        2、表名是derivedN的形式，表示使用了id为N的查询产生的衍生表</p><p>​        3、当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id</p><p><strong>type</strong></p><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下，访问的类型有很多，效率从最好到最坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p>一般情况下，得保证查询至少达到range级别，最好能达到ref</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--all:全表扫描，一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span></span><br><span class="line"><span class="keyword">explain</span>  <span class="keyword">select</span> empno <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符： =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">between</span> <span class="number">7000</span> <span class="keyword">and</span> <span class="number">7500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--index_subquery：利用索引来关联子查询，不再扫描全表</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> emp.job <span class="keyword">in</span> (<span class="keyword">select</span> job <span class="keyword">from</span> t_job);</span><br><span class="line"></span><br><span class="line"><span class="comment">--unique_subquery:该连接类型类似与index_subquery,使用的是唯一索引</span></span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span> e.deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"> </span><br><span class="line"><span class="comment">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--ref_or_null：对于某个字段即需要关联条件，也需要null值的情况下，查询优化器会选择这种访问方式</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e <span class="keyword">where</span>  e.mgr <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> e.mgr=<span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--ref：使用了非唯一性索引进行数据的查找</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">index</span> idx_3 <span class="keyword">on</span> emp(deptno);</span><br><span class="line"> <span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> e.deptno =d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--eq_ref ：使用唯一性索引进行数据查找</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,emp2 <span class="keyword">where</span> emp.empno = emp2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">--const：这个表至多有一个匹配行，</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7369</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">--system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</span></span><br></pre></td></tr></table></figure><p> <strong>possible_keys</strong> </p><p>​        显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>key</strong></p><p>​        实际使用的索引，如果为null，则没有使用索引，查询中若使用了覆盖索引，则该索引和查询的select字段重叠。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>key_len</strong></p><p>表示索引中使用的字节数，可以通过key_len计算查询中使用的索引长度，在不损失精度的情况下长度越短越好。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>ref</strong></p><p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno = dept.deptno <span class="keyword">and</span> emp.deptno = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>rows</strong></p><p>根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的sql找了多少数据，在完成目的的情况下越少越好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>extra</strong></p><p>包含额外的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--using filesort:说明mysql无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using temporary:建立临时表来保存中间结果，查询完成之后把临时表删除</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> ename,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> ename;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using index:这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> deptno,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using where:使用where进行条件过滤</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--using join buffer:使用连接缓存，情况没有模拟出来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--impossible where：where语句的结果总是false</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7469</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC的进阶使用-1</title>
      <link href="/2020/08/04/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-1/"/>
      <url>/2020/08/04/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC的进阶使用-1"><a href="#Spring-MVC的进阶使用-1" class="headerlink" title="Spring MVC的进阶使用-1"></a>Spring MVC的进阶使用-1</h1><h3 id="（1）SpringMVC的请求处理"><a href="#（1）SpringMVC的请求处理" class="headerlink" title="（1）SpringMVC的请求处理"></a>（1）SpringMVC的请求处理</h3><h5 id="1、SpringMVC对请求参数的处理"><a href="#1、SpringMVC对请求参数的处理" class="headerlink" title="1、SpringMVC对请求参数的处理"></a>1、SpringMVC对请求参数的处理</h5><p>​        在之前的servlet中我们可以通过request.getParameter()来获取请求中的参数，但是在我们编写的SpringMVC的应用程序中，在具体请求的方法中并不包含request参数，那么我们应该如何获取请求中的参数呢？</p><p>​        需要使用以下几个注解：</p><p>​        @RequestParam：获取请求的参数</p><p>​        @RequestHeader：获取请求头信息</p><p>​        @CookieValue：获取cookie中的值</p><p>@RequestParam的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如何获取SpringMVC中请求中的信息</span></span><br><span class="line"><span class="comment">     *  默认情况下，可以直接在方法的参数中填写跟请求一样的名称，此时会默认接受参数</span></span><br><span class="line"><span class="comment">     *      如果有值，直接赋值，如果没有，那么直接给空值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span>:获取请求中的参数值,使用此注解之后，参数的名称不需要跟请求的名称一致，但是必须要写</span></span><br><span class="line"><span class="comment">     *      public String request(<span class="doctag">@RequestParam</span>("user") String username)&#123;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      此注解还包含三个参数：</span></span><br><span class="line"><span class="comment">     *      value:表示要获取的参数值</span></span><br><span class="line"><span class="comment">     *      required：表示此参数是否必须，默认是true，如果不写参数那么会报错，如果值为false，那么不写参数不会有任何错误</span></span><br><span class="line"><span class="comment">     *      defaultValue:如果在使用的时候没有传递参数，那么定义默认值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">request</span><span class="params">(@RequestParam(value = <span class="string">"user"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"hehe"</span>)</span> String username)</span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestHeader的基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> sun.management.resources.agent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要获取请求头信息该如何处理呢？</span></span><br><span class="line"><span class="comment">     *  可以使用<span class="doctag">@RequestHeader</span>注解，</span></span><br><span class="line"><span class="comment">     *      public String header(<span class="doctag">@RequestHeader</span>("User-Agent") String agent)&#123;</span></span><br><span class="line"><span class="comment">     *      相当于  request.getHeader("User-Agent")</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *      如果要获取请求头中没有的信息，那么此时会报错，同样，此注解中也包含三个参数,跟<span class="doctag">@RequestParam</span>一样</span></span><br><span class="line"><span class="comment">     *          value</span></span><br><span class="line"><span class="comment">     *          required</span></span><br><span class="line"><span class="comment">     *          defalutValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/header"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">header</span><span class="params">(@RequestHeader(<span class="string">"User-Agent"</span>)</span> String agent)</span>&#123;</span><br><span class="line">        System.out.println(agent);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@CookieValue的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestHeader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> sun.management.resources.agent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要获取cookie信息该如何处理呢？</span></span><br><span class="line"><span class="comment">     *  可以使用<span class="doctag">@CookieValue</span>注解，</span></span><br><span class="line"><span class="comment">     *      public String cookie(<span class="doctag">@CookieValue</span>("JSESSIONID") String id)&#123;</span></span><br><span class="line"><span class="comment">     *      相当于</span></span><br><span class="line"><span class="comment">     *      Cookie[] cookies = request.getCookies();</span></span><br><span class="line"><span class="comment">     *      for(Cookie cookie : cookies)&#123;</span></span><br><span class="line"><span class="comment">     *          cookie.getValue();</span></span><br><span class="line"><span class="comment">     *      &#125;</span></span><br><span class="line"><span class="comment">     *      如果要获取cookie中没有的信息，那么此时会报错，同样，此注解中也包含三个参数,跟<span class="doctag">@RequestParam</span>一样</span></span><br><span class="line"><span class="comment">     *          value</span></span><br><span class="line"><span class="comment">     *          required</span></span><br><span class="line"><span class="comment">     *          defalutValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/cookie"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如果请求中传递的是某一个对象的各个属性值，此时如何在控制器的方法中获取对象的各个属性值呢？</p><p>​        在SpringMVC的控制中，能直接完成对象的属性赋值操作，不需要人为干预。</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", date="</span> + date +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTown</span><span class="params">(String town)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.town = town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Address&#123;"</span> +</span><br><span class="line">                <span class="string">"province='"</span> + province + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", town='"</span> + town + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">0</span>:<span class="number">11</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"addUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    编号:&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>/&gt;&lt;br&gt;</span><br><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br&gt;</span><br><span class="line">    日期:&lt;input type=<span class="string">"text"</span> name=<span class="string">"date"</span>/&gt;&lt;br&gt;</span><br><span class="line">    省份:&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.province"</span>/&gt;&lt;br&gt;</span><br><span class="line">    城市:&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.city"</span>/&gt;&lt;br&gt;</span><br><span class="line">    区域:&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.town"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、乱码问题的解决"><a href="#2、乱码问题的解决" class="headerlink" title="2、乱码问题的解决"></a>2、乱码问题的解决</h5><p>​        我们在表单或者发送请求的时候，经常会遇到中文乱码的问题，那么如何解决乱码问题呢？</p><p>​        GET请求：在server.xml文件中，添加URIEncoding=“UTF-8”</p><p>​        POST请求：编写过滤器进行实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        关联springmvc的配置文件：</span></span><br><span class="line"><span class="comment">        此配置文件的属性可以不添加，但是需要在WEB-INF的目录下创建 前端控制器名称-servlet.xml文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配servlet的请求，</span></span><br><span class="line"><span class="comment">    /：标识匹配所有请求，但是不会jsp页面</span></span><br><span class="line"><span class="comment">    /*：拦截所有请求，拦截jsp页面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     但是需要注意的是，当配置成index.html的时候，会发现请求不到</span></span><br><span class="line"><span class="comment">     原因在于，tomcat下也有一个web.xml文件，所有的项目下web.xml文件都需要继承此web.xml</span></span><br><span class="line"><span class="comment">     在服务器的web.xml文件中有一个DefaultServlet用来处理静态资源，但是url-pattern是/</span></span><br><span class="line"><span class="comment">     而我们在自己的配置文件中如果添加了url-pattern=/会覆盖父类中的url-pattern，此时在请求的时候</span></span><br><span class="line"><span class="comment">     DispatcherServlet会去controller中做匹配，找不到则直接报404</span></span><br><span class="line"><span class="comment">     而在服务器的web.xml文件中包含了一个JspServlet的处理，所以不过拦截jsp请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决post请求乱码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--解决响应乱码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果配置了多个过滤器，那么字符编码过滤器一定要在最前面，否则失效。</strong></p><h5 id="3、SpringMVC对原生API的支持"><a href="#3、SpringMVC对原生API的支持" class="headerlink" title="3、SpringMVC对原生API的支持"></a>3、SpringMVC对原生API的支持</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringMVC也可以在参数上使用原生的Servlet API</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  HttpSession</span></span><br><span class="line"><span class="comment">     *  HttpServletRequest</span></span><br><span class="line"><span class="comment">     *  HttpServletResponse</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  java.security.Principal 安全协议相关</span></span><br><span class="line"><span class="comment">     *  Locale：国际化相关的区域信息对象</span></span><br><span class="line"><span class="comment">     *  InputStream:</span></span><br><span class="line"><span class="comment">     *      ServletInputStream inputStream = request.getInputStream();</span></span><br><span class="line"><span class="comment">     *  OutputStream:</span></span><br><span class="line"><span class="comment">     *      ServletOutputStream outputStream = response.getOutputStream();</span></span><br><span class="line"><span class="comment">     *  Reader:</span></span><br><span class="line"><span class="comment">     *      BufferedReader reader = request.getReader();</span></span><br><span class="line"><span class="comment">     *  Writer:</span></span><br><span class="line"><span class="comment">     *      PrintWriter writer = response.getWriter();</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">api</span><span class="params">(HttpSession session, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">"requestParam"</span>,<span class="string">"request"</span>);</span><br><span class="line">        session.setAttribute(<span class="string">"sessionParam"</span>,<span class="string">"session"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、使用Model，Map，ModelMap传输数据到页面"><a href="#4、使用Model，Map，ModelMap传输数据到页面" class="headerlink" title="4、使用Model，Map，ModelMap传输数据到页面"></a>4、使用Model，Map，ModelMap传输数据到页面</h5><p>​        在刚开始的helloworld项目中，我们传递了参数回到我们页面，但是后续的操作都只是接受用户的请求，那么在SpringMVC中除了可以使用原生servlet的对象传递数据之外，还有什么其他的方式呢？</p><p>​        可以在方法的参数上传入Model，ModelMap,Map类型，此时都能够将数据传送回页面</p><p>OutputController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"output1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,Springmvc"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"output2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output2</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,Springmvc"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"output3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output1</span><span class="params">(Map map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"hello,Springmvc"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用此方式进行设置之后，会发现所有的参数值都设置到了request作用域中，那么这三个对象是什么关系呢？</p><p>![](Spring MVC的进阶使用-1/BindingAwareModelMap.png)</p><h5 id="5、使用ModelAndView对象传输数据到页面"><a href="#5、使用ModelAndView对象传输数据到页面" class="headerlink" title="5、使用ModelAndView对象传输数据到页面"></a>5、使用ModelAndView对象传输数据到页面</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"mv"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">mv</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"output"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"hello.modelAndView"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        发现当使用modelAndView对象的时候，返回值的类型也是此对象，可以将要跳转的页面设置成view的名称，来完成跳转的功能，同时数据也是放到request作用中。</p><h5 id="6、使用session传输数据到页面"><a href="#6、使用session传输数据到页面" class="headerlink" title="6、使用session传输数据到页面"></a>6、使用session传输数据到页面</h5><p>@SessionAttribute：此注解可以表示，当向request作用域设置数据的时候同时也要向session中保存一份,此注解有两个参数，一个value（表示将哪些值设置到session中），另外一个type（表示按照类型来设置数据，一般不用，因为有可能会将很多数据都设置到session中，导致session异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = <span class="string">"msg"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"output1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">output1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,Springmvc"</span>);</span><br><span class="line">        System.out.println(model.getClass());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、使用-ModelAttribute来获取请求中的数据"><a href="#7、使用-ModelAttribute来获取请求中的数据" class="headerlink" title="7、使用@ModelAttribute来获取请求中的数据"></a>7、使用@ModelAttribute来获取请求中的数据</h5><p>​        @ModelAttribute注解用于将方法的参数或者方法的返回值绑定到指定的模型属性上，并返回给web视图。首先来介绍一个业务场景，来帮助大家做理解，在实际工作中，有些时候我们在修改数据的时候可能只需要修改其中几个字段，而不是全部的属性字段都获取，那么当提交属性的时候，从form表单中获取的数据就有可能只包含了部分属性，此时再向数据库更新的时候，肯定会丢失属性，因为对象的封装是springmvc自动帮我们new的，所以此时需要先将从数据库获取的对象保存下来，当提交的时候不是new新的对象，而是在原来的对象上进行属性覆盖，此时就需要使用@ModelAttribute注解。</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object o1 = <span class="keyword">null</span>;</span><br><span class="line">    Object o2 = <span class="keyword">null</span>;</span><br><span class="line">    Object o3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user,Model model)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        o2 = model;</span><br><span class="line">        <span class="comment">//可以看到所有的model都是同一个对象</span></span><br><span class="line">        System.out.println(o1==o2);</span><br><span class="line">        <span class="comment">//可以看到存储的user对象也是同一个</span></span><br><span class="line">        System.out.println(user == o3);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyModelAttribute</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        o1 = model;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"张三"</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">        System.out.println(<span class="string">"modelAttribute:"</span>+user);</span><br><span class="line">        o3 = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">11</span></span><br><span class="line">  Time: <span class="number">13</span>:<span class="number">45</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">"update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> value=<span class="string">"1"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    姓名：张三&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>其实在使用的时候可以简化写法，也就是说，在方法的参数上不加@ModelAttribute也不会有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(User user,Model model)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    o2 = model;</span><br><span class="line">    <span class="comment">//可以看到所有的model都是同一个对象</span></span><br><span class="line">    System.out.println(o1==o2);</span><br><span class="line">    <span class="comment">//可以看到存储的user对象也是同一个</span></span><br><span class="line">    System.out.println(user == o3);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加的@ModelAttribute（“”）属性的值不对，那么也是获取不到值的。同时可以添加@SessionAttributes属性，但是注意，如果没有设置值的话，会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"u"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object o1 = <span class="keyword">null</span>;</span><br><span class="line">    Object o2 = <span class="keyword">null</span>;</span><br><span class="line">    Object o3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"u"</span>)</span> User user,Model model)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        o2 = model;</span><br><span class="line">        <span class="comment">//可以看到所有的model都是同一个对象</span></span><br><span class="line">        System.out.println(o1==o2);</span><br><span class="line">        <span class="comment">//可以看到存储的user对象也是同一个</span></span><br><span class="line">        System.out.println(user == o3);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyModelAttribute</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        o1 = model;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"张三"</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">        System.out.println(<span class="string">"modelAttribute:"</span>+user);</span><br><span class="line">        o3 = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：ModelAttribute除了可以使用设置值到model中之外，还可以利用返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Object o1 = <span class="keyword">null</span>;</span><br><span class="line">    Object o2 = <span class="keyword">null</span>;</span><br><span class="line">    Object o3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@ModelAttribute(<span class="string">"u"</span>)</span> User user,Model model)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        o2 = model;</span><br><span class="line">        <span class="comment">//可以看到所有的model都是同一个对象</span></span><br><span class="line">        System.out.println(o1==o2);</span><br><span class="line">        <span class="comment">//可以看到存储的user对象也是同一个</span></span><br><span class="line">        System.out.println(user == o3);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"output"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"u"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">MyModelAttribute</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        o1 = model;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"张三"</span>);</span><br><span class="line">        user.setAge(<span class="number">12</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line"><span class="comment">//        model.addAttribute("user",user);</span></span><br><span class="line">        System.out.println(<span class="string">"modelAttribute:"</span>+user);</span><br><span class="line">        o3 = user;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：通过刚刚的给参数赋值，大家应该能够发现，当给方法中的参数设置值的时候，如果添加了@ModelAttribute注解，那么在查找值的时候，是遵循以下方式：</p><p>1、方法的参数使用参数的类型首字母小写，或者使用@ModelAttribute(“”)的值</p><p>2、先看之前是否在model中设置过该属性值，如果设置过就直接获取</p><p>3、看@SessionAttributes注解标注类中的方法是否给session中赋值，如果有的话，也是直接获取，没有报异常</p><h5 id="8、使用forward实现页面转发"><a href="#8、使用forward实现页面转发" class="headerlink" title="8、使用forward实现页面转发"></a>8、使用forward实现页面转发</h5><p>​        在发送请求的时候，可以通过forward:来实现转发的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForWardController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当使用转发的时候可以添加前缀forward:index.jsp,此时是不会经过视图解析器的，所以要添加完整的名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * forward:也可以由一个请求跳转到另外一个请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/forward01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">forward</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/forward02"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">forward2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/forward01"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、使用redirect来实现重定向"><a href="#9、使用redirect来实现重定向" class="headerlink" title="9、使用redirect来实现重定向"></a>9、使用redirect来实现重定向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redirect :重定向的路径</span></span><br><span class="line"><span class="comment">     *      相当于 response.sendRedirect("index.jsp")</span></span><br><span class="line"><span class="comment">     *      跟视图解析器无关</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"redirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"redirect"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/redirect2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirect2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"redirect2"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/redirect"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在javaweb的时候大家应该都接触过重定向和转发的区别，下面再详细说一下：</p><p>转发：</p><p>​        由服务器的页面进行跳转，不需要客户端重新发送请求：</p><p>​        特点如下：</p><p>​        1、地址栏的请求不会发生变化，显示的还是第一次请求的地址</p><p>​        2、请求的次数，有且仅有一次请求</p><p>​        3、请求域中的数据不会丢失</p><p>​        4、根目录：localhost:8080/项目地址/,包含了项目的访问地址</p><p>![转发](Spring MVC的进阶使用-1/转发.png)</p><p>重定向：</p><p>​        在浏览器端进行页面的跳转，需要发送两次请求（第一次是人为的，第二次是自动的）</p><p>​        特点如下：</p><p>​        1、地址栏的地址发生变化，显示最新发送请求的地址</p><p>​        2、请求次数：2次</p><p>​        3、请求域中的数据会丢失，因为是不同的请求</p><p>​        4、根目录：localhost:8080/  不包含项目的名称</p><p>![](Spring MVC的进阶使用-1/重定向.png)</p><p>​    对比：</p><table><thead><tr><th><strong>区别</strong></th><th><strong>转发forward()</strong></th><th><strong>重定向sendRedirect()</strong></th></tr></thead><tbody><tr><td><strong>根目录</strong></td><td>包含项目访问地址</td><td>没有项目访问地址</td></tr><tr><td><strong>地址栏</strong></td><td>不会发生变化</td><td>会发生变化</td></tr><tr><td><strong>哪里跳转</strong></td><td>服务器端进行的跳转</td><td>浏览器端进行的跳转</td></tr><tr><td><strong>请求域中数据</strong></td><td>不会丢失</td><td>会丢失</td></tr></tbody></table><h5 id="10、静态资源的访问"><a href="#10、静态资源的访问" class="headerlink" title="10、静态资源的访问"></a>10、静态资源的访问</h5><p>​        当页面中包含静态资源的时候我们能够正确的获取到吗？</p><p>hello.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"ctx"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">hello springmvc</span><br><span class="line">&lt;img src=<span class="string">"$&#123;ctx&#125;/images/timg.jpg"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​        此时大家发现我们请求的图片根本访问不到，根据查看发现路径是没有问题的，那么为什么会找不到静态资源呢？</p><p>![image-20200312233843775](Spring MVC的进阶使用-1/静态资源.png)</p><p>​        大家发现此时是找不到对应的mapping映射的，此时是因为DispatcherServlet会拦截所有的请求，而此时我们没有对应图片的请求处理方法，所以此时报错了，想要解决的话非常简单，只需要添加一个配置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">此配置表示  我们自己配置的请求由controller来处理，但是不能请求的处理交由tomcat来处理</span><br><span class="line">静态资源可以访问，但是动态请求无法访问</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>​        但是加上此配置之后，大家又发现此时除了静态资源无法访问之外，我们正常的请求也无法获取了，因此还需要再添加另外的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--保证静态资源和动态请求都能够访问--&gt;</span><br><span class="line">&lt;mvc:annotation-driven&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）自定义视图解析器"><a href="#（2）自定义视图解析器" class="headerlink" title="（2）自定义视图解析器"></a>（2）自定义视图解析器</h3><p>​        我们在之前的操作中已经用了SpringMVC中提供的视图解析器，那么如果我们需要实现自己的视图解析器该如何操作呢？</p><p>![image-20200312211420457](Spring MVC的进阶使用-1/视图解析器.png)</p><p>![image-20200312211552245](Spring MVC的进阶使用-1/视图对象.png)</p><p>MyViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/myview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">myView</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msb"</span>,<span class="string">"马士兵"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"msb:/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyViewResolver.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果前缀是msb:开头的就进行解析</span></span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(<span class="string">"msb:"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"msb:"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyView();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果不是，则直接返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Integer order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">implements</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存的对象是："</span>+model);</span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"欢迎加入马士兵教育"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据内容的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"text/html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（3）自定义类型转换器"><a href="#（3）自定义类型转换器" class="headerlink" title="（3）自定义类型转换器"></a>（3）自定义类型转换器</h3><p>​        在日常的企业开发需求中，我们输入文本框的内容全部都是字符串类型，但是在后端处理的时候我们可以用其他基本类型来接受数据，也可以使用实体类来接受参数，这个是怎么完成的呢？就是通过SpringMVC提供的类型转换器，SpringMVC内部提供了非常丰富的类型转换器的支持，但是有些情况下有可能难以满足我们的需求，因此需要我们自己实现，如下：</p><p>![image-20200312211944841](Spring MVC的进阶使用-1/类型转换器.png)</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyConverter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        String[] split = source.split(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">if</span> (source!=<span class="keyword">null</span> &amp;&amp; split.length==<span class="number">4</span>)&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(Integer.parseInt(split[<span class="number">0</span>]));</span><br><span class="line">            user.setName(split[<span class="number">1</span>]);</span><br><span class="line">            user.setAge(Integer.parseInt(split[<span class="number">2</span>]));</span><br><span class="line">            user.setGender(split[<span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(User user, Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">12</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;requestScope.user&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（4）自定义日期格式化转换器"><a href="#（4）自定义日期格式化转换器" class="headerlink" title="（4）自定义日期格式化转换器"></a>（4）自定义日期格式化转换器</h3><p>​        有时候我们经常需要在页面添加日期等相关信息，此时需要制定日期格式化转换器，此操作非常简单：只需要在单独的属性上添加@DateTimeFormat注解即可，制定对应的格式</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"dateConvertion"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">  编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;&lt;br&gt;</span><br><span class="line">  姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br&gt;</span><br><span class="line">  年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">  性别：&lt;input type=<span class="string">"text"</span> name=<span class="string">"gender"</span>&gt;&lt;br&gt;</span><br><span class="line">  日期：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birth"</span>&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>DateConvertionController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConvertionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"dateConvertion"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dateConvertion</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此配置表示  我们自己配置的请求由controller来处理，但是不能请求的处理交由tomcat来处理</span></span><br><span class="line"><span class="comment">    静态资源可以访问，但是动态请求无法访问</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--保证静态资源和动态请求都能够访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        此时运行发现是没有问题的，但是需要注意的是，如果同时配置了自定义类型转换器之后，那么日期格式转化是有问题的。</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此配置表示  我们自己配置的请求由controller来处理，但是不能请求的处理交由tomcat来处理</span></span><br><span class="line"><span class="comment">    静态资源可以访问，但是动态请求无法访问</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--保证静态资源和动态请求都能够访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        原因就在于ConversionServiceFactoryBean对象中有且仅有一个属性converters，此时可以使用另外一个类来做替换FormattingConversionServiceFactoryBean</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此配置表示  我们自己配置的请求由controller来处理，但是不能请求的处理交由tomcat来处理</span></span><br><span class="line"><span class="comment">    静态资源可以访问，但是动态请求无法访问</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--保证静态资源和动态请求都能够访问--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="（5）数据校验"><a href="#（5）数据校验" class="headerlink" title="（5）数据校验"></a>（5）数据校验</h3><p>​        一般情况下我们会在前端页面实现数据的校验，但是大家需要注意的是前端校验会存在数据的不安全问题，因此一般情况下我们都会使用前端校验+后端校验的方式，这样的话既能够满足用户的体验度，同时也能保证数据的安全，下面来说一下在springmvc中如何进行后端数据校验。</p><p>​        JSR303是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 中 。JSR 303 (Java Specification Requests意思是Java 规范提案)通过<strong>在</strong> <strong>Bean</strong> <strong>属性上标注</strong>类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对 Bean 进行验证。</p><p>JSR303:</p><p>![](Spring MVC的进阶使用-1/JSR303.png)</p><p>Hibernate Validator 扩展注解:</p><p>![](Spring MVC的进阶使用-1/hibernate.png)</p><p>​        spring中拥有自己的数据校验框架，同时支持JSR303标准的校验框架，可以在通过添加注解的方式进行数据校验。在spring中本身没有提供JSR303的实现，需要导入依赖的包。</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_viewResolver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">12</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">23</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"dataValidate"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">  编号：&lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;&lt;br&gt;</span><br><span class="line">  姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br&gt;</span><br><span class="line">  年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>&gt;&lt;br&gt;</span><br><span class="line">  性别：&lt;input type=<span class="string">"text"</span> name=<span class="string">"gender"</span>&gt;&lt;br&gt;</span><br><span class="line">  日期：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birth"</span>&gt;&lt;br&gt;</span><br><span class="line">  邮箱：&lt;input type=<span class="string">"text"</span> name=<span class="string">"email"</span>&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>DataValidateController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataValidateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/dataValidate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">validate</span><span class="params">(@Valid User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Past;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">5</span>,max = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@Past</span></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时大家发现在报错的地方无法出现错误提示，可以换另外一种方式：</p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;a href="add"&gt;添加用户&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>add.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form:form action=<span class="string">"dataValidate"</span>  modelAttribute=<span class="string">"user"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    id:&lt;form:input path="id"&gt;&lt;/form:input&gt;&lt;form:errors path="id"&gt;&lt;/form:errors&gt; &lt;br/&gt;</span><br><span class="line">    name:&lt;form:input path="name"&gt;&lt;/form:input&gt;&lt;form:errors path="name"&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">    age:&lt;form:input path="age"&gt;&lt;/form:input&gt;&lt;form:errors path="age"&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">    gender:&lt;form:input path="gender"&gt;&lt;/form:input&gt;&lt;form:errors path="gender"&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">    birth:&lt;form:input path="birth"&gt;&lt;/form:input&gt;&lt;form:errors path="birth"&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">    email:&lt;form:input path="email"&gt;&lt;/form:input&gt;&lt;form:errors path="email"&gt;&lt;/form:errors&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>DataValidateController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataValidateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/dataValidate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">validate</span><span class="params">(@Valid User user, BindingResult bindingResult, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证失败"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="number">12</span>,<span class="string">"女"</span>,<span class="keyword">null</span>,<span class="string">"1234@qq.com"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原生的表单如何获取错误信息：</p><p>DataValidateController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataValidateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/dataValidate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">validate</span><span class="params">(@Valid User user, BindingResult bindingResult, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Map&lt;String,Object&gt; errorsMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证失败"</span>);</span><br><span class="line">            List&lt;FieldError&gt; fieldErrors = bindingResult.getFieldErrors();</span><br><span class="line">            <span class="keyword">for</span> (FieldError fieldError : fieldErrors) &#123;</span><br><span class="line">                System.out.println(fieldError.getDefaultMessage());</span><br><span class="line">                System.out.println(fieldError.getField());</span><br><span class="line">                errorsMap.put(fieldError.getField(),fieldError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            model.addAttribute(<span class="string">"errorInfo"</span>,errorsMap);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"验证成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="number">12</span>,<span class="string">"女"</span>,<span class="keyword">null</span>,<span class="string">"1234@qq.com"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form:form action=<span class="string">"dataValidate"</span>  modelAttribute=<span class="string">"user"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    编号:&lt;form:input path="id"&gt;&lt;/form:input&gt;&lt;form:errors path="id"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfo.id&#125; &lt;br/&gt;</span><br><span class="line">    姓名:&lt;form:input path="name"&gt;&lt;/form:input&gt;&lt;form:errors path="name"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfo.name&#125;&lt;br/&gt;</span><br><span class="line">    年龄:&lt;form:input path="age"&gt;&lt;/form:input&gt;&lt;form:errors path="age"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfo.age&#125;&lt;br/&gt;</span><br><span class="line">    性别:&lt;form:input path="gender"&gt;&lt;/form:input&gt;&lt;form:errors path="gender"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfo.gender&#125;&lt;br/&gt;</span><br><span class="line">    生日:&lt;form:input path="birth"&gt;&lt;/form:input&gt;&lt;form:errors path="birth"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfobirth&#125;&lt;br/&gt;</span><br><span class="line">    邮箱:&lt;form:input path="email"&gt;&lt;/form:input&gt;&lt;form:errors path="email"&gt;&lt;/form:errors&gt;---&gt;$&#123;errorInfo.email&#125;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC的介绍及使用</title>
      <link href="/2020/08/04/Spring%20MVC%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/04/Spring%20MVC%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC介绍及使用"><a href="#Spring-MVC介绍及使用" class="headerlink" title="Spring MVC介绍及使用"></a>Spring MVC介绍及使用</h1><h3 id="1、什么是MVC？"><a href="#1、什么是MVC？" class="headerlink" title="1、什么是MVC？"></a>1、什么是MVC？</h3><p>​        MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。就是将业务逻辑、数据、显示分离的方法来组织代码。MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</p><p>​        <strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p>​        <strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p>​        <strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p>​        其实在最早期的时候还有model1和model2的设计模型</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p>![mvc](Spring MVC的介绍及使用/mvc.png)</p><p>代码展示：</p><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = request.getParameter(<span class="string">"method"</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"add"</span>))&#123;</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"msg"</span>,<span class="string">"add"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.equals(<span class="string">"sub"</span>))&#123;</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"msg"</span>,<span class="string">"sub"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.oi.controller.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  $&#123;msg&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输入网址：<a href="http://localhost:8080/servlet_demo_war_exploded/user?method=add" target="_blank" rel="noopener">http://localhost:8080/servlet_demo_war_exploded/user?method=add</a></p><h3 id="2、SpringMVC"><a href="#2、SpringMVC" class="headerlink" title="2、SpringMVC"></a>2、SpringMVC</h3><h5 id="1、SpringMVC的介绍"><a href="#1、SpringMVC的介绍" class="headerlink" title="1、SpringMVC的介绍"></a>1、SpringMVC的介绍</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spring Web MVC is the original web framework built on the Servlet API and has been included in the Spring Framework from the very beginning. The formal name, “Spring Web MVC,” comes from the name of its source module (spring-webmvc), but it is more commonly known as “Spring MVC”.</span><br><span class="line">Spring Web MVC是构建在Servlet API上的原始Web框架，从一开始就包含在Spring Framework中。 正式名称 “Spring Web MVC,” 来自其源模块(spring-webmvc)的名称，但它通常被称为“Spring MVC”。</span><br></pre></td></tr></table></figure><p>​        简而言之，springMVC是Spring框架的一部分，是基于java实现的一个轻量级web框架。</p><p>​        学习SpringMVC框架最核心的就是DispatcherServlet的设计，掌握好DispatcherServlet是掌握SpringMVC的核心关键。</p><h5 id="2、SpringMVC的优点"><a href="#2、SpringMVC的优点" class="headerlink" title="2、SpringMVC的优点"></a>2、SpringMVC的优点</h5><p>​        1.清晰的角色划分：控制器(controller)、验证器(validator)、命令对象(command obect)、表单对象(form object)、模型对象(model object)、Servlet分发器(DispatcherServlet)、处理器映射(handler mapping)、试图解析器(view resoler)等等。每一个角色都可以由一个专门的对象来实现。</p><p>​        2.强大而直接的配置方式：将框架类和应用程序类都能作为JavaBean配置，支持跨多个context的引用，例如，在web控制器中对业务对象和验证器validator)的引用。<br>​        3.可适配、非侵入：可以根据不同的应用场景，选择何事的控制器子类(simple型、command型、from型、wizard型、multi-action型或者自定义)，而不是一个单一控制器(比如Action/ActionForm)继承。<br>​        4.可重用的业务代码：可以使用现有的业务对象作为命令或表单对象，而不需要去扩展某个特定框架的基类。<br>​        5.可定制的绑定(binding)和验证(validation)：比如将类型不匹配作为应用级的验证错误，这可以保证错误的值。再比如本地化的日期和数字绑定等等。在其他某些框架中，你只能使用字符串表单对象，需要手动解析它并转换到业务对象。<br>​        6.可定制的handler mapping和view resolution：Spring提供从最简单的URL映射，到复杂的、专用的定制策略。与某些web MVC框架强制开发人员使用单一特定技术相比，Spring显得更加灵活。<br>​        7.灵活的model转换：在Springweb框架中，使用基于Map的键/值对来达到轻易的与各种视图技术集成。<br>​        8.可定制的本地化和主题(theme)解析：支持在JSP中可选择地使用Spring标签库、支持JSTL、支持Velocity(不需要额外的中间层)等等。<br>​        9.简单而强大的JSP标签库(Spring Tag Library)：支持包括诸如数据绑定和主题(theme)之类的许多功能。他提供在标记方面的最大灵活性。<br>​        10.JSP表单标签库：在Spring2.0中引入的表单标签库，使用在JSP编写表单更加容易。<br>​        11.Spring Bean的生命周期：可以被限制在当前的HTTp Request或者HTTp Session。准确的说，这并非Spring MVC框架本身特性，而应归属于Spring MVC使用的WebApplicationContext容器。</p><h5 id="3、SpringMVC的实现原理"><a href="#3、SpringMVC的实现原理" class="headerlink" title="3、SpringMVC的实现原理"></a>3、SpringMVC的实现原理</h5><p>​        springmvc的mvc模式：</p><p>![](Spring MVC的介绍及使用/springmvc.png)</p><p>SpringMVC的具体执行流程：</p><p>​        当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p>![](Spring MVC的介绍及使用/springmvc运行流程.jpg)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</span><br><span class="line">2、HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</span><br><span class="line">3、返回处理器执行链，根据url查找控制器，并且将解析后的信息传递给DispatcherServlet</span><br><span class="line">4、HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</span><br><span class="line">5、执行handler找到具体的处理器</span><br><span class="line">6、Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</span><br><span class="line">7、HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</span><br><span class="line">8、DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</span><br><span class="line">9、视图解析器将解析的逻辑视图名传给DispatcherServlet。</span><br><span class="line">10、DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图，进行试图渲染</span><br><span class="line">11、将响应数据返回给客户端</span><br></pre></td></tr></table></figure><h3 id="3、基于XML的Hello-SpringMVC"><a href="#3、基于XML的Hello-SpringMVC" class="headerlink" title="3、基于XML的Hello_SpringMVC"></a>3、基于XML的Hello_SpringMVC</h3><p>1、添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联springmvc的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配servlet的请求，/标识匹配所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/*和/都是拦截所有请求，/会拦截的请求不包含*.jsp,而/*的范围更大，还会拦截*.jsp这些请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写springmvc需要的spring配置文件，applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.oi.controller.HelloController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建模型和视图对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//将需要的值传递到model中</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"helloSpringMVC"</span>);</span><br><span class="line">        <span class="comment">//设置要跳转的视图，</span></span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、创建hello.jsp页面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">5</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">25</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>6、配置tomcat，发送请求</p><p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h3 id="4、基于注解的Hello-SpringMVC"><a href="#4、基于注解的Hello-SpringMVC" class="headerlink" title="4、基于注解的Hello_SpringMVC"></a>4、基于注解的Hello_SpringMVC</h3><p>1、添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">关联springmvc的配置文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配servlet的请求，</span></span><br><span class="line"><span class="comment">    /：标识匹配所有请求，但是不会jsp页面</span></span><br><span class="line"><span class="comment">    /*：拦截所有请求，拦截jsp页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写applicationContext.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫描包，由IOC容器进行控制管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping就是用来标识此方法用来处理什么请求，其中的/可以取消</span></span><br><span class="line"><span class="comment">    * 取消后默认也是从当前项目的根目录开始查找，一般在编写的时候看个人习惯</span></span><br><span class="line"><span class="comment">    * 同时，@RequestMapping也可以用来加在类上，</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、编写hello.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>6、输入请求<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h3 id="5、注意细节"><a href="#5、注意细节" class="headerlink" title="5、注意细节"></a>5、注意细节</h3><h5 id="1、springmvc-helloworld运行流程："><a href="#1、springmvc-helloworld运行流程：" class="headerlink" title="1、springmvc_helloworld运行流程："></a>1、springmvc_helloworld运行流程：</h5><p>​        通过上述的代码，我们能够总结出具体的运行流程：</p><p>​        1、客户端发送请求<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><p>​        2、由tomcat接受到对应的请求</p><p>​        3、SpringMVC的前端控制器DispatcherServlet接收到所有的请求</p><p>​        4、查看请求地址和@RequestMapping注解的哪个匹配，来找到具体的类的处理方法</p><p>​        5、前端控制器找到目标处理类和方法之后，执行目标方法</p><p>​        6、方法执行完成之后会有一个返回值，SpringMVC会将这个返回值用视图解析器进行解析拼接成完整的页面地址</p><p>​        7、DispatcherServlet拿到页面地址之后，转发到具体的页面</p><h5 id="2、springmvc的配置文件"><a href="#2、springmvc的配置文件" class="headerlink" title="2、springmvc的配置文件"></a>2、springmvc的配置文件</h5><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">关联springmvc的配置文件</span></span><br><span class="line"><span class="comment">此配置文件的属性可以不添加，但是需要在WEB-INF的目录下创建 前端控制器名称-servlet.xml文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、DispatcherServlet的url-pattern"><a href="#3、DispatcherServlet的url-pattern" class="headerlink" title="3、DispatcherServlet的url-pattern"></a>3、DispatcherServlet的url-pattern</h5><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">关联springmvc的配置文件</span></span><br><span class="line"><span class="comment">此配置文件的属性可以不添加，但是需要在WEB-INF的目录下创建 前端控制器名称-servlet.xml文件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配servlet的请求，</span></span><br><span class="line"><span class="comment">    /：标识匹配所有请求，但是不会jsp页面</span></span><br><span class="line"><span class="comment">    /*：拦截所有请求，拦截jsp页面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     但是需要注意的是，当配置成index.html的时候，会发现请求不到</span></span><br><span class="line"><span class="comment">     原因在于，tomcat下也有一个web.xml文件，所有的项目下web.xml文件都需要继承此web.xml</span></span><br><span class="line"><span class="comment">     在服务器的web.xml文件中有一个DefaultServlet用来处理静态资源，但是url-pattern是/</span></span><br><span class="line"><span class="comment">     而我们在自己的配置文件中如果添加了url-pattern=/会覆盖父类中的url-pattern，此时在请求的时候</span></span><br><span class="line"><span class="comment">     DispatcherServlet会去controller中做匹配，找不到则直接报404</span></span><br><span class="line"><span class="comment">     而在服务器的web.xml文件中包含了一个JspServlet的处理，所以不过拦截jsp请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4、-RequestMapping"><a href="#4、-RequestMapping" class="headerlink" title="4、@RequestMapping"></a>4、@RequestMapping</h5><p>​        @RequestMapping用来匹配客户端发送的请求，可以在方法上使用，也可以在类上使用。</p><p>​        方法：表示用来匹配要处理的请求</p><p>​        类上：表示为当前类的所有方法的请求地址添加一个前置路径，访问的时候必须要添加此路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping就是用来标识此方法用来处理什么请求，其中的/可以取消</span></span><br><span class="line"><span class="comment">    * 取消后默认也是从当前项目的根目录开始查找，一般在编写的时候看个人习惯</span></span><br><span class="line"><span class="comment">    * 同时，@RequestMapping也可以用来加在类上，</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>注意：在整个项目的不同方法上不能包含相同的@RequestMapping值</strong></p><p>​        除此以外，@RequestMapping注解还可以添加很多额外的属性值，用来精确匹配请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping就是用来标识此方法用来处理什么请求，其中的/可以取消</span></span><br><span class="line"><span class="comment">    * 取消后默认也是从当前项目的根目录开始查找，一般在编写的时候看个人习惯</span></span><br><span class="line"><span class="comment">    * 同时，@RequestMapping也可以用来加在类上，</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Request的其他属性值</span></span><br><span class="line"><span class="comment">     *  value:要匹配的请求</span></span><br><span class="line"><span class="comment">     *  method:限制发送请求的方式： POST GET</span></span><br><span class="line"><span class="comment">     *  params:表示请求要接受的参数,如果定义了这个属性，那么发送的时候必须要添加参数</span></span><br><span class="line"><span class="comment">     *         params有几种匹配规则</span></span><br><span class="line"><span class="comment">     *          1、直接写参数的名称，param1,param2</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username"&#125;</span></span><br><span class="line"><span class="comment">     *          2、表示请求不能包含的参数，！param1</span></span><br><span class="line"><span class="comment">     *              params = &#123;"!username"&#125;</span></span><br><span class="line"><span class="comment">     *          3、表示请求中需要要包含的参数但是可以限制值 param1=values  param1!=value</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username=123","age"&#125;</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username!=123","age"&#125;</span></span><br><span class="line"><span class="comment">     *  headers:填写请求头信息</span></span><br><span class="line"><span class="comment">     *          chrome：User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36</span></span><br><span class="line"><span class="comment">     *          firefox:User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  consumers:只接受内容类型是哪种的请求，相当于指定Content-Type</span></span><br><span class="line"><span class="comment">     *  produces:返回的内容类型 Content-Type：text/html;charset=utf-8</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello2"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello3"</span>,params = &#123;<span class="string">"username!=123"</span>,<span class="string">"age"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello4"</span>,headers = &#123;<span class="string">"User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        @RequestMapping还包含了很多复杂的匹配功能，提供了通配符的支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @RequestMapping就是用来标识此方法用来处理什么请求，其中的/可以取消</span></span><br><span class="line"><span class="comment">    * 取消后默认也是从当前项目的根目录开始查找，一般在编写的时候看个人习惯</span></span><br><span class="line"><span class="comment">    * 同时，@RequestMapping也可以用来加在类上，</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Request的其他属性值</span></span><br><span class="line"><span class="comment">     *  value:要匹配的请求</span></span><br><span class="line"><span class="comment">     *  method:限制发送请求的方式： POST GET</span></span><br><span class="line"><span class="comment">     *  params:表示请求要接受的参数,如果定义了这个属性，那么发送的时候必须要添加参数</span></span><br><span class="line"><span class="comment">     *         params有几种匹配规则</span></span><br><span class="line"><span class="comment">     *          1、直接写参数的名称，param1,param2</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username"&#125;</span></span><br><span class="line"><span class="comment">     *          2、表示请求不能包含的参数，！param1</span></span><br><span class="line"><span class="comment">     *              params = &#123;"!username"&#125;</span></span><br><span class="line"><span class="comment">     *          3、表示请求中需要要包含的参数但是可以限制值 param1=values  param1!=value</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username=123","age"&#125;</span></span><br><span class="line"><span class="comment">     *              params = &#123;"username!=123","age"&#125;</span></span><br><span class="line"><span class="comment">     *  headers:填写请求头信息</span></span><br><span class="line"><span class="comment">     *          chrome：User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36</span></span><br><span class="line"><span class="comment">     *          firefox:User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  consumers:只接受内容类型是哪种的请求，相当于指定Content-Type</span></span><br><span class="line"><span class="comment">     *  produces:返回的内容类型 Content-Type：text/html;charset=utf-8</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello2"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello3"</span>,params = &#123;<span class="string">"username!=123"</span>,<span class="string">"age"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello4"</span>,headers = &#123;<span class="string">"User-Agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Request</span>包含三种模糊匹配的方式，分别是：</span></span><br><span class="line"><span class="comment">     *  ？：能替代任意一个字符</span></span><br><span class="line"><span class="comment">     *  *: 能替代任意多个字符和一层路径</span></span><br><span class="line"><span class="comment">     *  **：能代替多层路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/**/h*llo?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello5"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、-PathVariable"><a href="#6、-PathVariable" class="headerlink" title="6、@PathVariable"></a>6、@PathVariable</h3><p>​        如果需要在请求路径中的参数像作为参数应该怎么使用呢？可以使用@PathVariable注解，此注解就是提供了对占位符URL的支持，就是将URL中占位符参数绑定到控制器处理方法的参数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/oi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pathVariable/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pathVariable</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、REST"><a href="#7、REST" class="headerlink" title="7、REST"></a>7、REST</h3><p>​        REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种<a href="https://baike.baidu.com/item/软件架构" target="_blank" rel="noopener">软件架构</a>风格。它是一种针对<a href="https://baike.baidu.com/item/网络应用/2196523" target="_blank" rel="noopener">网络应用</a>的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p><p>​        在三种主流的<a href="https://baike.baidu.com/item/Web服务" target="_blank" rel="noopener">Web服务</a>实现方案中，因为REST模式的Web服务与复杂的<a href="https://baike.baidu.com/item/SOAP/4684413" target="_blank" rel="noopener">SOAP</a>和<a href="https://baike.baidu.com/item/XML-RPC" target="_blank" rel="noopener">XML-RPC</a>对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；<a href="https://baike.baidu.com/item/雅虎/108276" target="_blank" rel="noopener">雅虎</a>提供的Web服务也是REST风格的。</p><p>​        REST,翻译过来叫做表现层状态转化，是目前最流行的一个互联网软件架构，它架构清晰，符合标准，易于理解，扩展方便。</p><p>​        <strong>表现层（Representation）</strong>：把资源具体呈现出来的形式，因此叫做表现层。</p><p>​        <strong>资源（Resource）</strong>：网络上的一个具体信息，文本，图片，音频，视频都可以称之为资源，如果想要访问到互联网上的某一个资源，那么就必须要使用一个URL来唯一性的获取改资源，也可以这么说，URL是每一个资源的唯一标识符。</p><p>​        <strong>状态转化（State Transfer）</strong>：当客户端发出一个请求的时候，就代表客户端跟服务端的一次交互过程，HTTP是一种无状态协议，即所有的状态都保存在服务器端，因此，客户端如果想要操作服务器，必须通过某些手段，让服务器的状态发生转化，而这种转化是建立在表现层的，这就是名字的由来（非人话）</p><p>​        人话：我们在获取资源的时候就是进行增删改查的操作，如果是原来的架构风格，需要发送四个请求，分别是：</p><p>​        查询：localhost:8080/query?id=1</p><p>​        增加：localhost:8080/insert</p><p>​        删除：localhost:8080/delete?id=1</p><p>​        更新：localhost:8080/update?id=1</p><p>​        按照此方式发送请求的时候比较麻烦，需要定义多种请求，而在HTTP协议中，有不同的发送请求的方式，分别是GET、POST、PUT、DELETE等，我们如果能让不同的请求方式表示不同的请求类型就可以简化我们的查询</p><p>​        GET：获取资源               /book/1    </p><p>​        POST：新建资源             /book</p><p>​        PUT：更新资源                /book/1</p><p>​        DELETE：删除资源          /book/1</p><p>​        一切看起来都非常美好，但是大家需要注意了，我们在发送请求的时候只能发送post或者get，没有办法发送put和delete请求，那么应该如何处理呢？下面开始进入代码环节：</p><p>RestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        关联springmvc的配置文件：</span></span><br><span class="line"><span class="comment">        此配置文件的属性可以不添加，但是需要在WEB-INF的目录下创建 前端控制器名称-servlet.xml文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--匹配servlet的请求，</span></span><br><span class="line"><span class="comment">    /：标识匹配所有请求，但是不会jsp页面</span></span><br><span class="line"><span class="comment">    /*：拦截所有请求，拦截jsp页面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     但是需要注意的是，当配置成index.html的时候，会发现请求不到</span></span><br><span class="line"><span class="comment">     原因在于，tomcat下也有一个web.xml文件，所有的项目下web.xml文件都需要继承此web.xml</span></span><br><span class="line"><span class="comment">     在服务器的web.xml文件中有一个DefaultServlet用来处理静态资源，但是url-pattern是/</span></span><br><span class="line"><span class="comment">     而我们在自己的配置文件中如果添加了url-pattern=/会覆盖父类中的url-pattern，此时在请求的时候</span></span><br><span class="line"><span class="comment">     DispatcherServlet会去controller中做匹配，找不到则直接报404</span></span><br><span class="line"><span class="comment">     而在服务器的web.xml文件中包含了一个JspServlet的处理，所以不过拦截jsp请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rest.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">6</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">01</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/user"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"增加"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/user/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input name=<span class="string">"_method"</span> value=<span class="string">"delete"</span> type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"删除"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;form action=<span class="string">"/user/1"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input name=<span class="string">"_method"</span> value=<span class="string">"put"</span> type=<span class="string">"hidden"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"修改"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;a href="/user/1"&gt;查询&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="number">666</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种动态代理实现——JDK与CGLib</title>
      <link href="/2020/08/04/%E4%B8%A4%E7%A7%8D%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E2%80%94%E2%80%94JDK%E4%B8%8ECGLib/"/>
      <url>/2020/08/04/%E4%B8%A4%E7%A7%8D%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E2%80%94%E2%80%94JDK%E4%B8%8ECGLib/</url>
      
        <content type="html"><![CDATA[<h1 id="两种动态代理"><a href="#两种动态代理" class="headerlink" title="两种动态代理"></a>两种动态代理</h1><h3 id="1、jdk的动态代理"><a href="#1、jdk的动态代理" class="headerlink" title="1、jdk的动态代理"></a>1、jdk的动态代理</h3><p>​        讲一下动态代理的实现原理，说明白原理的话肯定是要看源码了，不要慌，干就完了！！！</p><p>​        其实在使用动态代理的时候最最核心的就是Proxy.newProxyInstance(loader, interfaces, h);废话不多说，直接干源码。</p><p><strong>动态代理的样例代码：</strong></p><p>Calculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CalculatorProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> Calculator calculator)</span></span>&#123;</span><br><span class="line">        ClassLoader loader = calculator.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = calculator.getClass().getInterfaces();</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = method.invoke(calculator, args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculator proxy = CalculatorProxy.getProxy(<span class="keyword">new</span> MyCalculator());</span><br><span class="line">        proxy.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(proxy.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态代理的源码：</strong></p><p>Proxy.java的newProxyInstance方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="comment">//判断InvocationHandler是否为空，若为空，抛出空指针异常</span></span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">         * 生成接口的代理类的字节码文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">         * 使用自定义的InvocationHandler作为参数，调用构造函数获取代理类对象实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//获取代理对象的构造方法</span></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成代理类的实例并把InvocationHandlerImpl的实例传给构造方法</span></span><br><span class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>getProxyClass0(ClassLoader loader,Class&lt;?&gt;… interfaces)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader,</span><br><span class="line">                                       Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">    <span class="comment">//限定代理的接口不能超过65535个</span></span><br><span class="line">    <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">    <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">    <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">    <span class="comment">// 如果缓存中已经存在相应接口的代理类，直接返回，否则，使用ProxyClassFactory创建代理类</span></span><br><span class="line">    <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a cache of proxy classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">    proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</span><br></pre></td></tr></table></figure><p>get()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">       Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">       expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">       Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// lazily install the 2nd level valuesMap for the particular cacheKey</span></span><br><span class="line">       ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">       <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">           ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">               = map.putIfAbsent(cacheKey,</span><br><span class="line">                                 valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">           <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">               valuesMap = oldValuesMap;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// create subKey and retrieve the possible Supplier&lt;V&gt; stored by that</span></span><br><span class="line">       <span class="comment">// subKey from valuesMap</span></span><br><span class="line">       Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">       Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">       Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// supplier might be a Factory or a CacheValue&lt;V&gt; instance</span></span><br><span class="line">               V value = supplier.get();</span><br><span class="line">               <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> value;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else no supplier in cache</span></span><br><span class="line">           <span class="comment">// or a supplier that returned null (could be a cleared CacheValue</span></span><br><span class="line">           <span class="comment">// or a Factory that wasn't successful in installing the CacheValue)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// lazily construct a Factory</span></span><br><span class="line">           <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">               factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">               supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">               <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// successfully installed Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// else retry with winning supplier</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                   <span class="comment">// successfully replaced</span></span><br><span class="line">                   <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                   <span class="comment">// with our Factory</span></span><br><span class="line">                   supplier = factory;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// retry with current supplier</span></span><br><span class="line">                   supplier = valuesMap.get(subKey);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在此方法中会调用suppier.get方法，suppier就是Factory,此类定义在WeakCache内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">// serialize access</span></span><br><span class="line">           <span class="comment">// re-check</span></span><br><span class="line">           Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">           <span class="keyword">if</span> (supplier != <span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="comment">// something changed while we were waiting:</span></span><br><span class="line">               <span class="comment">// might be that we were replaced by a CacheValue</span></span><br><span class="line">               <span class="comment">// or were removed because of failure -&gt;</span></span><br><span class="line">               <span class="comment">// return null to signal WeakCache.get() to retry</span></span><br><span class="line">               <span class="comment">// the loop</span></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// else still us (supplier == this)</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// create new value</span></span><br><span class="line">           V value = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               value = Objects.requireNonNull(valueFactory.apply(key, parameter));</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">// remove us on failure</span></span><br><span class="line">                   valuesMap.remove(subKey, <span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// the only path to reach here is with non-null value</span></span><br><span class="line">           <span class="keyword">assert</span> value != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// wrap value with CacheValue (WeakReference)</span></span><br><span class="line">           CacheValue&lt;V&gt; cacheValue = <span class="keyword">new</span> CacheValue&lt;&gt;(value);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// put into reverseMap</span></span><br><span class="line">           reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class="line">           <span class="keyword">if</span> (!valuesMap.replace(subKey, <span class="keyword">this</span>, cacheValue)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Should not reach here"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class="line">           <span class="comment">// wrapped by it</span></span><br><span class="line">           <span class="keyword">return</span> value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>发现在此方法中调用了valueFactory.apply(key, parameter)方法，此对象其实就是Proxy中的ProxyClassFactory，会调用其apply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// prefix for all proxy class names</span></span><br><span class="line"><span class="comment">//代理类的前缀</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line"><span class="comment">//生成代理类名称的计数器</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong(); </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">                 * interface to the same Class object.</span></span><br><span class="line"><span class="comment">                 * 家安眼泪加载器是否能通接口名称加载该类</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">                 * interface.</span></span><br><span class="line"><span class="comment">                 * 检测该类是否是接口类型</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">                 * 检验接口是否重复</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//代理类包名</span></span><br><span class="line">            String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">            <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">             * proxy class will be defined in the same package.  Verify that</span></span><br><span class="line"><span class="comment">             * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">             * 非public接口，代理类的包名与接口的包名相同</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">                <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">                <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                    accessFlags = Modifier.FINAL;</span><br><span class="line">                    String name = intf.getName();</span><br><span class="line">                    <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                    String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        proxyPkg = pkg;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                            <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">                <span class="comment">// public代理接口，使用com.sun.proxy包名</span></span><br><span class="line">                proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">             * 为代理类生成名字</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">            String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">             * 真正生成代理类的字节码文件的地方</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">                proxyName, interfaces, accessFlags);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//使用类加载器将代理类的字节码文件加载到JVM中</span></span><br><span class="line">                <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                    proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                 * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                 * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                 * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                 * exceeded).</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实际生成的方法是generateProxyClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">    ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</span><br><span class="line">    <span class="comment">//将要生成代理类的字节码文件保存在磁盘中</span></span><br><span class="line">    <span class="keyword">if</span> (saveGeneratedFiles) &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</span><br><span class="line">                    Path var2;</span><br><span class="line">                    <span class="keyword">if</span> (var1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar));</span><br><span class="line">                        Files.createDirectories(var3);</span><br><span class="line">                        var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        var2 = Paths.get(var0 + <span class="string">".class"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要生成的话可以添加如下参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><p>生成的代理类的反编译码为：</p><p>$Proxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.Calculator;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> var1, <span class="keyword">int</span> var2)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, <span class="keyword">new</span> Object[]&#123;var1, var2&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.oi.Calculator"</span>).getMethod(<span class="string">"add"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m4 = Class.forName(<span class="string">"com.oi.Calculator"</span>).getMethod(<span class="string">"sub"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m5 = Class.forName(<span class="string">"com.oi.Calculator"</span>).getMethod(<span class="string">"mult"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m6 = Class.forName(<span class="string">"com.oi.Calculator"</span>).getMethod(<span class="string">"div"</span>, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、cglib的动态代理"><a href="#2、cglib的动态代理" class="headerlink" title="2、cglib的动态代理"></a>2、cglib的动态代理</h3><p>​        CGLIB(Code Generation Library)是一个开源项目！是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。</p><p>​        CGLIB是一个强大的高性能的代码生成包。它广泛的被许多AOP的框架使用，例如Spring AOP为他们提供方法的interception（拦截）。CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。除了CGLIB包，脚本语言例如Groovy和BeanShell，也是使用ASM来生成java的字节码。当然不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p><p><strong>操作代码：</strong></p><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyCglib.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        <span class="keyword">return</span> o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.core.DebuggingClassWriter;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//动态代理创建的class文件存储到本地</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY,<span class="string">"d:\\code"</span>);</span><br><span class="line">        <span class="comment">//通过cglib动态代理获取代理对象的过程，创建调用的对象</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置enhancer对象的父类</span></span><br><span class="line">        enhancer.setSuperclass(MyCalculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//设置enhancer的回调对象</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyCglib());</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        MyCalculator myCalculator = (MyCalculator) enhancer.create();</span><br><span class="line">        <span class="comment">//通过代理对象调用目标方法</span></span><br><span class="line">        myCalculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(myCalculator.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现原理：</p><p>​        利用cglib实现动态代理的时候，必须要实现MethodInterceptor接口，此接口源码如下：</p><p>MethodInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.sf.cglib.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodInterceptor</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Callback</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 此方法用来实现方法的拦截，四个参数分别表示的含义：</span></span><br><span class="line"><span class="comment"> obj:表示增强的对象，即实现这个接口类的一个对象</span></span><br><span class="line"><span class="comment"> method：表示要拦截的方法</span></span><br><span class="line"><span class="comment"> args：表示被拦截的方法的参数</span></span><br><span class="line"><span class="comment"> proxy:表示要触发父类的方法对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, java.lang.reflect.Method method, Object[] args,</span></span></span><br><span class="line"><span class="function"><span class="params">                               MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在我们的测试类中，大家发现了，我们创建了一个cglib的Enhancer对象，并且设置了父类、回调函数等参数，最重要的入口函数是create()方法：</p><h4 id="1、Enhancer-create"><a href="#1、Enhancer-create" class="headerlink" title="1、Enhancer.create()"></a>1、Enhancer.create()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generate a new class if necessary and uses the specified</span></span><br><span class="line"><span class="comment"> * callbacks (if any) to create a new object instance.</span></span><br><span class="line"><span class="comment"> * Uses the no-arg constructor of the superclass.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a new instance</span></span><br><span class="line"><span class="comment"> * 如果必须要创建一个新类，那么就用指定的回调对象创建一个新的对象实例，使用的父类的参数的构造方法来实 * 例化父类的部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不作代理类限制</span></span><br><span class="line">    classOnly = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//没有构造参数类型</span></span><br><span class="line">    argumentTypes = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//执行创建</span></span><br><span class="line">    <span class="keyword">return</span> createHelper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、Enhancer-createHelper"><a href="#2、Enhancer-createHelper" class="headerlink" title="2、Enhancer.createHelper()"></a>2、Enhancer.createHelper()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//校验callbackTypes、filter是否为空，以及为空时的处理</span></span><br><span class="line">       preValidate();</span><br><span class="line">    <span class="comment">// 通过newInstance方法来创建EnhancerKey对象</span></span><br><span class="line">       Object key = KEY_FACTORY.newInstance((superclass != <span class="keyword">null</span>) ? superclass.getName() : <span class="keyword">null</span>,</span><br><span class="line">               ReflectUtils.getNames(interfaces),</span><br><span class="line">               filter == ALL_ZERO ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakCacheKey&lt;CallbackFilter&gt;(filter),</span><br><span class="line">               callbackTypes,</span><br><span class="line">               useFactory,</span><br><span class="line">               interceptDuringConstruction,</span><br><span class="line">               serialVersionUID);</span><br><span class="line">    <span class="comment">// 设置当前enhancer的代理类的key标识</span></span><br><span class="line">       <span class="keyword">this</span>.currentKey = key;</span><br><span class="line">    <span class="comment">// 调用父类即AbstractClassGenerator的创建代理类</span></span><br><span class="line">       Object result = <span class="keyword">super</span>.create(key);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>preValidate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preValidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (callbackTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//确定传入的callback类型</span></span><br><span class="line">           callbackTypes = CallbackInfo.determineTypes(callbacks, <span class="keyword">false</span>);</span><br><span class="line">           validateCallbackTypes = <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (filter == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (callbackTypes.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Multiple callback types possible but no filter specified"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           filter = ALL_ZERO;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CallbackInfo[] CALLBACKS = &#123;</span><br><span class="line">        <span class="keyword">new</span> CallbackInfo(NoOp<span class="class">.<span class="keyword">class</span>, <span class="title">NoOpGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">MethodInterceptor</span>.<span class="title">class</span>, <span class="title">MethodInterceptorGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">InvocationHandler</span>.<span class="title">class</span>, <span class="title">InvocationHandlerGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">LazyLoader</span>.<span class="title">class</span>, <span class="title">LazyLoaderGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">Dispatcher</span>.<span class="title">class</span>, <span class="title">DispatcherGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">FixedValue</span>.<span class="title">class</span>, <span class="title">FixedValueGenerator</span>.<span class="title">INSTANCE</span>),</span></span><br><span class="line"><span class="class">        <span class="title">new</span> <span class="title">CallbackInfo</span>(<span class="title">ProxyRefDispatcher</span>.<span class="title">class</span>, <span class="title">DispatcherGenerator</span>.<span class="title">PROXY_REF_INSTANCE</span>),</span></span><br><span class="line"><span class="class">    &#125;</span>;</span><br></pre></td></tr></table></figure><p>​        该方法主要是做验证并确定CallBack类型，我们使用的是MethodInterceptor,然后创建当前代理类的标识代理类，用这个标识代理类调用（AbstractClassGenerator）的create(key)方法创建，下面我们开始分析标识代理类创建逻辑 以及后面父类创建我们需要的代理类的逻辑。</p><p>​        标识代理类的创建类成员变量即KEY_FACTORY是创建代理类的核心</p><h4 id="3、标识代理类"><a href="#3、标识代理类" class="headerlink" title="3、标识代理类"></a>3、标识代理类</h4><h5 id="1、KEY-FACTORY"><a href="#1、KEY-FACTORY" class="headerlink" title="1、KEY_FACTORY"></a>1、KEY_FACTORY</h5><p>​        追踪源码可以看到，KEY_FACTORY在Enhancer的初始化即会创建一个final的静态变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EnhancerKey KEY_FACTORY =</span><br><span class="line">  (EnhancerKey)KeyFactory.create(EnhancerKey<span class="class">.<span class="keyword">class</span>, <span class="title">KeyFactory</span>.<span class="title">HASH_ASM_TYPE</span>, <span class="title">null</span>)</span>;</span><br></pre></td></tr></table></figure><h5 id="2、Keyfactory-create方法"><a href="#2、Keyfactory-create方法" class="headerlink" title="2、Keyfactory_create方法"></a>2、Keyfactory_create方法</h5><p>　    这儿可以看到使用key工厂创建出对应class的代理类，后面的KeyFactory_HASH_ASM_TYPE即代理类中创建HashCode方法的策略。我们接着点击源码查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyFactory <span class="title">create</span><span class="params">(ClassLoader loader, Class keyInterface, KeyFactoryCustomizer customizer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    List&lt;KeyFactoryCustomizer&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个最简易的代理类生成器 即只会生成HashCode equals toString newInstance方法</span></span><br><span class="line">        Generator gen = <span class="keyword">new</span> Generator();</span><br><span class="line">        <span class="comment">//设置接口为enhancerKey类型</span></span><br><span class="line">        gen.setInterface(keyInterface);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (customizer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//添加定制器</span></span><br><span class="line">            gen.addCustomizer(customizer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; !next.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (KeyFactoryCustomizer keyFactoryCustomizer : next) &#123;</span><br><span class="line">                <span class="comment">//添加定制器</span></span><br><span class="line">                gen.addCustomizer(keyFactoryCustomizer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置生成器的类加载器</span></span><br><span class="line">        gen.setClassLoader(loader);</span><br><span class="line">        <span class="comment">//生成enhancerKey的代理类</span></span><br><span class="line">        <span class="keyword">return</span> gen.create();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3、Generator的create方法"><a href="#3、Generator的create方法" class="headerlink" title="3、Generator的create方法"></a>3、Generator的create方法</h5><p>　　这儿创建了一个简易的代理类生成器(KeyFactory的内部类Generator ，与Enhancer一样继承自抽象类AbstractClassGenerator)来生成我们需要的标识代理类，我们接着看gen.create()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> KeyFactory <span class="title">create</span><span class="params">()</span> </span>&#123;　　　　　　　　</span><br><span class="line">    <span class="comment">//设置了该生成器生成代理类的名字前缀，即我们的接口名Enhancer.enhancerKey</span></span><br><span class="line">            setNamePrefix(keyInterface.getName());</span><br><span class="line">            <span class="keyword">return</span> (KeyFactory)<span class="keyword">super</span>.create(keyInterface.getName());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="4、AbstractClassGenerator的create-Key-方法"><a href="#4、AbstractClassGenerator的create-Key-方法" class="headerlink" title="4、AbstractClassGenerator的create(Key)方法"></a>4、AbstractClassGenerator的create(Key)方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">create</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取到当前生成器的类加载器</span></span><br><span class="line">            ClassLoader loader = getClassLoader();</span><br><span class="line">            <span class="comment">//当前类加载器对应的缓存  缓存key为类加载器，缓存的value为ClassLoaderData  这个类后面会再讲</span></span><br><span class="line">            Map&lt;ClassLoader, ClassLoaderData&gt; cache = CACHE;</span><br><span class="line">            <span class="comment">//先从缓存中获取下当前类加载器所有加载过的类</span></span><br><span class="line">            ClassLoaderData data = cache.get(loader);</span><br><span class="line">            <span class="comment">//如果为空</span></span><br><span class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (AbstractClassGenerator<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                    cache = CACHE;</span><br><span class="line">                    data = cache.get(loader);</span><br><span class="line">                    <span class="comment">//经典的防止并发修改 二次判断</span></span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//新建一个缓存Cache  并将之前的缓存Cache的数据添加进来 并将已经被gc回收的数据给清除掉</span></span><br><span class="line">                        Map&lt;ClassLoader, ClassLoaderData&gt; newCache = <span class="keyword">new</span> WeakHashMap&lt;ClassLoader, ClassLoaderData&gt;(cache);</span><br><span class="line">                        <span class="comment">//新建一个当前加载器对应的ClassLoaderData 并加到缓存中  但ClassLoaderData中此时还没有数据</span></span><br><span class="line">                        data = <span class="keyword">new</span> ClassLoaderData(loader);</span><br><span class="line">                        newCache.put(loader, data);</span><br><span class="line">                        <span class="comment">//刷新全局缓存</span></span><br><span class="line">                        CACHE = newCache;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置一个全局key </span></span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//在刚创建的data(ClassLoaderData)中调用get方法 并将当前生成器，</span></span><br><span class="line">            <span class="comment">//以及是否使用缓存的标识穿进去 系统参数 System.getProperty("cglib.useCache", "true")  </span></span><br><span class="line">            <span class="comment">//返回的是生成好的代理类的class信息</span></span><br><span class="line">            Object obj = data.get(<span class="keyword">this</span>, getUseCache());</span><br><span class="line">            <span class="comment">//如果为class则实例化class并返回  就是我们需要的代理类</span></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                <span class="keyword">return</span> firstInstance((Class) obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是则说明是实体  则直接执行另一个方法返回实体</span></span><br><span class="line">            <span class="keyword">return</span> nextInstance(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        这个方法可以看到主要为根据类加载器定义一个缓存，里面装载了缓存的类信息，然后调用这个ClassLoaderData的get方法获取到数据，如果为class信息 那么直接使用反射实例化，如果返回的是实体类，则解析实体类的信息，调用其newInstance方法重新生成一个实例(cglib的代理类都会生成newInstance方法)</p><h5 id="5、data-get-this-getUseCache"><a href="#5、data-get-this-getUseCache" class="headerlink" title="5、data.get(this,getUseCache)"></a>5、data.get(this,getUseCache)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(AbstractClassGenerator gen, <span class="keyword">boolean</span> useCache)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//如果不用缓存  (默认使用)</span></span><br><span class="line">            <span class="keyword">if</span> (!useCache) &#123;</span><br><span class="line">                <span class="comment">//则直接调用生成器的命令</span></span><br><span class="line">              <span class="keyword">return</span> gen.generate(ClassLoaderData.<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//从缓存中获取值</span></span><br><span class="line">              Object cachedValue = generatedClasses.get(gen);</span><br><span class="line">              <span class="comment">//解包装并返回</span></span><br><span class="line">              <span class="keyword">return</span> gen.unwrapCachedValue(cachedValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​        如果可以用缓存则调用缓存，不能调用缓存则直接生成， 这儿我们先看调用缓存的，在之前的步骤中，我们设置了一个key为ClassLoader，值为ClassLoaderData的缓存，这儿我们new了一个ClassLoaderData 并将类加载器传了进去 ，并且设置了这个Generator的key，我们看下new的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassLoaderData</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//判断类加载器不能为空 </span></span><br><span class="line">            <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"classLoader == null is not yet supported"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置类加载器   弱引用 即在下次垃圾回收时就会进行回收</span></span><br><span class="line">            <span class="keyword">this</span>.classLoader = <span class="keyword">new</span> WeakReference&lt;ClassLoader&gt;(classLoader);</span><br><span class="line">            <span class="comment">//新建一个回调函数  这个回调函数的作用在于缓存中没获取到值时  调用传入的生成的生成代理类并返回</span></span><br><span class="line">            Function&lt;AbstractClassGenerator, Object&gt; load =</span><br><span class="line">                    <span class="keyword">new</span> Function&lt;AbstractClassGenerator, Object&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">apply</span><span class="params">(AbstractClassGenerator gen)</span> </span>&#123;</span><br><span class="line">                            Class klass = gen.generate(ClassLoaderData.<span class="keyword">this</span>);</span><br><span class="line">                            <span class="keyword">return</span> gen.wrapCachedClass(klass);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">            <span class="comment">//为这个ClassLoadData新建一个缓存类   这个loadingcache稍后会讲        </span></span><br><span class="line">            generatedClasses = <span class="keyword">new</span> LoadingCache&lt;AbstractClassGenerator, Object, Object&gt;(GET_KEY, load);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Function&lt;AbstractClassGenerator, Object&gt; GET_KEY = <span class="keyword">new</span> Function&lt;AbstractClassGenerator, Object&gt;() &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">apply</span><span class="params">(AbstractClassGenerator gen)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> gen.key;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​        可以看到每个类加载器都对应着一个代理类缓存对象 ，这里面定义了类加载器，缓存调用没查询到的调用函数，以及新建了一个LoadingCache来缓存这个类加载器对应的缓存，这儿传入的两个参数，load代表缓存查询失败时的回调函数，而GET_KEY则是回调时获取调用生成器的key 即4中传入的key 也即是我们的代理类标识符。 然后我们接着看generatedClasses.get(gen);的方法</p><h5 id="6、generatedClasses-get-gen"><a href="#6、generatedClasses-get-gen" class="headerlink" title="6、generatedClasses.get(gen);"></a>6、generatedClasses.get(gen);</h5><p>​        这个方法主要传入代理类生成器 并根据代理类生成器获取值返回。这儿主要涉及到的类就是LoadingCache，这个类可以看做是某个CLassLoader对应的所有代理类缓存库，是真正缓存东西的地方。我们分析下这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.sf.cglib.core.internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadingCache</span>&lt;<span class="title">K</span>, <span class="title">KK</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ConcurrentMap&lt;KK, Object&gt; map;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Function&lt;K, V&gt; loader;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Function&lt;K, KK&gt; keyMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Function IDENTITY = <span class="keyword">new</span> Function() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">apply</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//初始化类  kemapper代表获取某个代理类生成器的标识，loader即缓存查找失败后的回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadingCache</span><span class="params">(Function&lt;K, KK&gt; keyMapper, Function&lt;K, V&gt; loader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyMapper = keyMapper;</span><br><span class="line">        <span class="keyword">this</span>.loader = loader;</span><br><span class="line">        <span class="comment">//这个map是缓存代理类的地方</span></span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> ConcurrentHashMap&lt;KK, Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">Function&lt;K, K&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IDENTITY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这儿key是代理类生成器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到代理类生成器的标识</span></span><br><span class="line">        <span class="keyword">final</span> KK cacheKey = keyMapper.apply(key);</span><br><span class="line">        <span class="comment">//根据缓代理类生成器的标识获取代理类</span></span><br><span class="line">        Object v = map.get(cacheKey);</span><br><span class="line">        <span class="comment">//如果结果不为空且不是FutureTask 即线程池中用于获取返回结果的接口</span></span><br><span class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span> &amp;&amp; !(v <span class="keyword">instanceof</span> FutureTask)) &#123;</span><br><span class="line">            <span class="comment">//直接返回</span></span><br><span class="line">            <span class="keyword">return</span> (V) v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则就是没查询到  或者还未处理完</span></span><br><span class="line">        <span class="keyword">return</span> createEntry(key, cacheKey, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> V <span class="title">createEntry</span><span class="params">(<span class="keyword">final</span> K key, KK cacheKey, Object v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化任务task</span></span><br><span class="line">        FutureTask&lt;V&gt; task;</span><br><span class="line">        <span class="comment">//初始化创建标识</span></span><br><span class="line">        <span class="keyword">boolean</span> creator = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 则说明这是一个FutureTask </span></span><br><span class="line">            task = (FutureTask&lt;V&gt;) v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否则还没开始创建这个代理类  直接创建任务  </span></span><br><span class="line">            task = <span class="keyword">new</span> FutureTask&lt;V&gt;(<span class="keyword">new</span> Callable&lt;V&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">//这儿会直接调用生成器的generate方法</span></span><br><span class="line">                    <span class="keyword">return</span> loader.apply(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//将这个任务推入缓存Map  如果对应key已经有则返回已经有的task，</span></span><br><span class="line">            Object prevTask = map.putIfAbsent(cacheKey, task);</span><br><span class="line">            <span class="comment">//如果为null则代表还没有创建  标识更新为true 且运行这个任务</span></span><br><span class="line">            <span class="keyword">if</span> (prevTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// creator does the load</span></span><br><span class="line">                creator = <span class="keyword">true</span>;</span><br><span class="line">                task.run();</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//如果是task  说明另一个线程已经创建了task</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (prevTask <span class="keyword">instanceof</span> FutureTask) &#123;</span><br><span class="line">                task = (FutureTask&lt;V&gt;) prevTask;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//到这儿说明另一个线程已经执行完了  直接返回</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (V) prevTask;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//上面的一堆判断主要是为了防止并发出现的问题</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        V result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//到这儿说明任务执行完并拿到对应的代理类了</span></span><br><span class="line">            result = task.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Interrupted while loading cache item"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((RuntimeException) cause);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unable to load cache item"</span>, cause);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这次执行是新建的</span></span><br><span class="line">        <span class="keyword">if</span> (creator) &#123;</span><br><span class="line">            <span class="comment">//将之前的FutureTask缓存直接覆盖为实际的代理类信息</span></span><br><span class="line">            map.put(cacheKey, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　通过上面的分析可以得知，这个类主要作用是传入代理类生成器，根据这个代理类生成器以及代理类生成器的key来获取缓存，如果没有获取到则构建一个FutureTask来回调我们之前初始化时传入的 回调函数，并调用其中的apply方法，而具体调用的则是我们传入的代理类生成器的generate(LoadClassData)方法，将返回值覆盖之前的FutureTask成为真正的缓存。所以这个类的主要作用还是缓存。 这样则和5中不使用缓存时调用了一样的方法。所以我们接着来分析生成方法 generate(ClassLoadData),这儿因为我们使用的代理类生成器是Genrator，该类没有重写generate方法，所以回到了父类AbstractClassGenerator的generate方法</p><h5 id="7、AbstractClassGenerator-generate-方法"><a href="#7、AbstractClassGenerator-generate-方法" class="headerlink" title="7、AbstractClassGenerator.generate 方法"></a>7、AbstractClassGenerator.generate 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Class <span class="title">generate</span><span class="params">(ClassLoaderData data)</span> </span>&#123;</span><br><span class="line">        Class gen;</span><br><span class="line">        Object save = CURRENT.get();</span><br><span class="line">        <span class="comment">//当前的代理类生成器存入ThreadLocal中</span></span><br><span class="line">        CURRENT.set(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取到ClassLoader</span></span><br><span class="line">            ClassLoader classLoader = data.getClassLoader();</span><br><span class="line">            <span class="comment">//判断不能为空</span></span><br><span class="line">            <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ClassLoader is null while trying to define class "</span> +</span><br><span class="line">                        getClassName() + <span class="string">". It seems that the loader has been expired from a weak reference somehow. "</span> +</span><br><span class="line">                        <span class="string">"Please file an issue at cglib's issue tracker."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (classLoader) &#123;</span><br><span class="line">             <span class="comment">//生成代理类名字</span></span><br><span class="line">              String name = generateClassName(data.getUniqueNamePredicate()); </span><br><span class="line">             <span class="comment">//缓存中存入这个名字</span></span><br><span class="line">              data.reserveName(name);</span><br><span class="line">              <span class="comment">//当前代理类生成器设置类名</span></span><br><span class="line">              <span class="keyword">this</span>.setClassName(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//尝试从缓存中获取类</span></span><br><span class="line">            <span class="keyword">if</span> (attemptLoad) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//要是能获取到就直接返回了  即可能出现并发 其他线程已经加载</span></span><br><span class="line">                    gen = classLoader.loadClass(getClassName());</span><br><span class="line">                    <span class="keyword">return</span> gen;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// 发现异常说明没加载到 不管了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成字节码</span></span><br><span class="line">            <span class="keyword">byte</span>[] b = strategy.generate(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//获取到字节码代表的class的名字</span></span><br><span class="line">            String className = ClassNameReader.getClassName(<span class="keyword">new</span> ClassReader(b));</span><br><span class="line">            <span class="comment">//核实是否为protect</span></span><br><span class="line">            ProtectionDomain protectionDomain = getProtectionDomain();</span><br><span class="line">            <span class="keyword">synchronized</span> (classLoader) &#123; <span class="comment">// just in case</span></span><br><span class="line">                <span class="comment">//如果不是protect</span></span><br><span class="line">                <span class="keyword">if</span> (protectionDomain == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//根据字节码 类加载器 以及类名字  将class加载到内存中</span></span><br><span class="line">                    gen = ReflectUtils.defineClass(className, b, classLoader);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//根据字节码 类加载器 以及类名字 以及找到的Protect级别的实体 将class加载到内存中</span></span><br><span class="line">                    gen = ReflectUtils.defineClass(className, b, classLoader, protectionDomain);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">　　　　　　　 <span class="comment">//返回生成的class信息</span></span><br><span class="line">            <span class="keyword">return</span> gen;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CodeGenerationException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CURRENT.set(save);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        这个方法主要设置了下当前类生成器的类名，然后调用stratege的generate方法返回字节码，根据字节码 类名 类加载器将字节码所代表的类加载到内存中，这个功能看一下大概就懂，我们接下来主要分析字节码生成方法</p><h5 id="8、DefaultGeneratorStrategy-generate-ClassGenerator-cg"><a href="#8、DefaultGeneratorStrategy-generate-ClassGenerator-cg" class="headerlink" title="8、DefaultGeneratorStrategy.generate(ClassGenerator cg)"></a>8、DefaultGeneratorStrategy.generate(ClassGenerator cg)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] generate(ClassGenerator cg) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建一个写入器</span></span><br><span class="line">        DebuggingClassWriter cw = getClassVisitor();</span><br><span class="line">        <span class="comment">//加入自己的转换逻辑后执行代理类生成器的generateClass方法</span></span><br><span class="line">        transform(cg).generateClass(cw);</span><br><span class="line">        <span class="comment">//将cw写入的东西转换为byte数组返回</span></span><br><span class="line">        <span class="keyword">return</span> transform(cw.toByteArray());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        这里面主要是新建一个写入器，然后执行我们代理类生成器的generateClass方法将class信息写入这个ClassWriter 最后将里面的东西转换为byte数组返回，所以又回到了我们的代理类生成器的generateClass方法，这儿进入的是Generator的generateClass方法</p><h5 id="9、Generator-generateClass（ClassVisitor-v）"><a href="#9、Generator-generateClass（ClassVisitor-v）" class="headerlink" title="9、Generator.generateClass（ClassVisitor v）"></a>9、Generator.generateClass（ClassVisitor v）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法为字节码写入方法 为最后一步</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateClass</span><span class="params">(ClassVisitor v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//创建类写入聚合对象</span></span><br><span class="line">            ClassEmitter ce = <span class="keyword">new</span> ClassEmitter(v);</span><br><span class="line">            <span class="comment">//找到被代理类的newInstance方法 如果没有会报异常  由此可知 如果想用Generator代理类生成器  必须要有newInstance方法</span></span><br><span class="line">            Method newInstance = ReflectUtils.findNewInstance(keyInterface);</span><br><span class="line">            <span class="comment">//如果被代理类的newInstance不为Object则报异常  此处我们代理的Enchaer.EnhancerKey newInstance方法返回值为Object</span></span><br><span class="line">            <span class="keyword">if</span> (!newInstance.getReturnType().equals(Object<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"newInstance method must return Object"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到newInstance方法的所有参数类型 并当做成员变量 </span></span><br><span class="line">            Type[] parameterTypes = TypeUtils.getTypes(newInstance.getParameterTypes());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//1.创建类开始写入类头   版本号  访问权限  类名等通用信息</span></span><br><span class="line">            ce.begin_class(Constants.V1_8,</span><br><span class="line">                           Constants.ACC_PUBLIC,</span><br><span class="line">                           getClassName(), </span><br><span class="line">                           KEY_FACTORY,</span><br><span class="line">                           <span class="keyword">new</span> Type[]&#123; Type.getType(keyInterface) &#125;,</span><br><span class="line">                           Constants.SOURCE_FILE);</span><br><span class="line">            <span class="comment">//2.写入无参构造方法               </span></span><br><span class="line">            EmitUtils.null_constructor(ce);</span><br><span class="line">            <span class="comment">//3.写入newInstance方法</span></span><br><span class="line">            EmitUtils.factory_method(ce, ReflectUtils.getSignature(newInstance));</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> seed = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//4.开始构造 有参构造方法</span></span><br><span class="line">            CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC,</span><br><span class="line">                                            TypeUtils.parseConstructor(parameterTypes),</span><br><span class="line">                                            <span class="keyword">null</span>);</span><br><span class="line">            e.load_this();</span><br><span class="line">            <span class="comment">//4.1有参构造中调用父类构造方法  即super.构造方法() </span></span><br><span class="line">            e.super_invoke_constructor();</span><br><span class="line">            e.load_this();</span><br><span class="line">            <span class="comment">//4.2找到传入的定制器 例如一开始传入的hashCode方法定制器</span></span><br><span class="line">            List&lt;FieldTypeCustomizer&gt; fieldTypeCustomizers = getCustomizers(FieldTypeCustomizer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//4.3遍历成员变量即newInstance方法的所有参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">                Type parameterType = parameterTypes[i];</span><br><span class="line">                Type fieldType = parameterType;</span><br><span class="line">                <span class="keyword">for</span> (FieldTypeCustomizer customizer : fieldTypeCustomizers) &#123;</span><br><span class="line">                    fieldType = customizer.getOutType(i, fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">                seed += fieldType.hashCode();</span><br><span class="line">                <span class="comment">//4.3将这些参数全部声明到写入类中</span></span><br><span class="line">                ce.declare_field(Constants.ACC_PRIVATE | Constants.ACC_FINAL,</span><br><span class="line">                                 getFieldName(i),</span><br><span class="line">                                 fieldType,</span><br><span class="line">                                 <span class="keyword">null</span>);</span><br><span class="line">                e.dup();</span><br><span class="line">                e.load_arg(i);</span><br><span class="line">                <span class="keyword">for</span> (FieldTypeCustomizer customizer : fieldTypeCustomizers) &#123;</span><br><span class="line">                    customizer.customize(e, i, parameterType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//4.4设置每个成员变量的值  即我们常见的有参构造中的this.xx = xx</span></span><br><span class="line">                e.putfield(getFieldName(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置返回值</span></span><br><span class="line">            e.return_value();</span><br><span class="line">            <span class="comment">//有参构造及成员变量写入完成</span></span><br><span class="line">            e.end_method();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*************************到此已经在class中写入了成员变量  写入实现了newInstance方法  写入无参构造  写入了有参构造 *************************/</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 5.写入hashcode方法</span></span><br><span class="line">            e = ce.begin_method(Constants.ACC_PUBLIC, HASH_CODE, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">int</span> hc = (constant != <span class="number">0</span>) ? constant : PRIMES[(<span class="keyword">int</span>)(Math.abs(seed) % PRIMES.length)];</span><br><span class="line">            <span class="keyword">int</span> hm = (multiplier != <span class="number">0</span>) ? multiplier : PRIMES[(<span class="keyword">int</span>)(Math.abs(seed * <span class="number">13</span>) % PRIMES.length)];</span><br><span class="line">            e.push(hc);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">                e.load_this();</span><br><span class="line">                e.getfield(getFieldName(i));</span><br><span class="line">                EmitUtils.hash_code(e, parameterTypes[i], hm, customizers);</span><br><span class="line">            &#125;</span><br><span class="line">            e.return_value();</span><br><span class="line">            <span class="comment">//hashcode方法结束</span></span><br><span class="line">            e.end_method();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.写入equals方法</span></span><br><span class="line">            e = ce.begin_method(Constants.ACC_PUBLIC, EQUALS, <span class="keyword">null</span>);</span><br><span class="line">            Label fail = e.make_label();</span><br><span class="line">            e.load_arg(<span class="number">0</span>);</span><br><span class="line">            e.instance_of_this();</span><br><span class="line">            e.if_jump(e.EQ, fail);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">                e.load_this();</span><br><span class="line">                e.getfield(getFieldName(i));</span><br><span class="line">                e.load_arg(<span class="number">0</span>);</span><br><span class="line">                e.checkcast_this();</span><br><span class="line">                e.getfield(getFieldName(i));</span><br><span class="line">                EmitUtils.not_equals(e, parameterTypes[i], fail, customizers);</span><br><span class="line">            &#125;</span><br><span class="line">            e.push(<span class="number">1</span>);</span><br><span class="line">            e.return_value();</span><br><span class="line">            e.mark(fail);</span><br><span class="line">            e.push(<span class="number">0</span>);</span><br><span class="line">            e.return_value();</span><br><span class="line">            <span class="comment">//equals方法结束</span></span><br><span class="line">            e.end_method();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.写入toString方法</span></span><br><span class="line">            e = ce.begin_method(Constants.ACC_PUBLIC, TO_STRING, <span class="keyword">null</span>);</span><br><span class="line">            e.new_instance(Constants.TYPE_STRING_BUFFER);</span><br><span class="line">            e.dup();</span><br><span class="line">            e.invoke_constructor(Constants.TYPE_STRING_BUFFER);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    e.push(<span class="string">", "</span>);</span><br><span class="line">                    e.invoke_virtual(Constants.TYPE_STRING_BUFFER, APPEND_STRING);</span><br><span class="line">                &#125;</span><br><span class="line">                e.load_this();</span><br><span class="line">                e.getfield(getFieldName(i));</span><br><span class="line">                EmitUtils.append_string(e, parameterTypes[i], EmitUtils.DEFAULT_DELIMITERS, customizers);</span><br><span class="line">            &#125;</span><br><span class="line">            e.invoke_virtual(Constants.TYPE_STRING_BUFFER, TO_STRING);</span><br><span class="line">            e.return_value();</span><br><span class="line">            <span class="comment">//toString方法结束</span></span><br><span class="line">            e.end_method();</span><br><span class="line">            <span class="comment">//类写入结束  至此类信息收集完成 并全部写入ClassVisitor</span></span><br><span class="line">            ce.end_class();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​        这个方法主要将一个完整的类信息写入ClassVisitor中，例如目前实现的Enhancer.EnhancerKey代理，即实现了newInstance方法， 重写了HashCode,toSting,equals方法，并将newInstance的所有参数作为了成员变量，这儿我们也可以看下具体实现newInstance方法的逻辑 即这个代码 EmitUtils.factory_method(ce, ReflectUtils.getSignature(newInstance)); 如果有兴趣可以去研究asm字节码写入的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">factory_method</span><span class="params">(ClassEmitter ce, Signature sig)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//开始写入方法</span></span><br><span class="line">        CodeEmitter e = ce.begin_method(Constants.ACC_PUBLIC, sig, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//写入 一个创建对象命令  即new命令</span></span><br><span class="line">        e.new_instance_this();</span><br><span class="line">        e.dup();</span><br><span class="line">        <span class="comment">//加载参数命令</span></span><br><span class="line">        e.load_args();</span><br><span class="line">        <span class="comment">//执行该类的有参构造命令</span></span><br><span class="line">        e.invoke_constructor_this(TypeUtils.parseConstructor(sig.getArgumentTypes()));</span><br><span class="line">        <span class="comment">//将上面指令执行的值返回</span></span><br><span class="line">        e.return_value();</span><br><span class="line">        <span class="comment">//结束写入方法</span></span><br><span class="line">        e.end_method();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        可以得知 我们通过Generator创建的代理类大致内容应该如下，Enhancer.EhancerKey代理类字节码的class内容应该是把参数换为newInstance中的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancerKeyProxy</span> <span class="keyword">extends</span> <span class="title">xxx</span> <span class="keyword">implements</span> <span class="title">xxx</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> paramA;</span><br><span class="line"> <span class="keyword">private</span> paramB;</span><br><span class="line"> <span class="keyword">private</span> paramC;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">EnhancerKeyProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.xxx();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">EnhancerKeyProxy</span><span class="params">(paramA, paramB,paramC)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.xxx();</span><br><span class="line">       <span class="keyword">this</span>.paramA = paramA</span><br><span class="line">       <span class="keyword">this</span>.paramB = paramB</span><br><span class="line">       <span class="keyword">this</span>.paramC = paramC</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(paramA,paramB,paramC)</span></span>&#123;</span><br><span class="line">        EnhancerKeyProxy param = <span class="keyword">new</span> EnhancerKeyProxy(o);</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        最后执行传入的ClassVisitor 即我们传入的实例DebuggingClassWriter的toByteArray即可以将写入的内容转换为byte[]返回</p><p>​        至此 我们的成功的生成了Enhancer.EnhancerKey的代理类，也就是我们需要的代理类标识类 用来标识被代理的类，这个代理类主要用来作为被代理类的标识，在进行缓存时作为判断相等的依据。可以看到 cglib代理主要也是利用我们传入的被代理类信息来生成对应的代理类字节码，然后用类加载器加载到内存中。虽然我们的实际的代理任务才刚刚开始，但是要了解的东西已经基本上差不多了，对具体的我们案例中的ProxyFactory代理时，只是生成器Enhancer对比生成器Generator在生成过程中重写了一些操作而已。</p><h4 id="4、回到步骤2，接着向下看执行的过程"><a href="#4、回到步骤2，接着向下看执行的过程" class="headerlink" title="4、回到步骤2，接着向下看执行的过程"></a>4、回到步骤2，接着向下看执行的过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preValidate();</span><br><span class="line">        <span class="comment">//获取到了代理类标识类</span></span><br><span class="line">        Object key = KEY_FACTORY.newInstance((superclass != <span class="keyword">null</span>) ? superclass.getName() : <span class="keyword">null</span>,</span><br><span class="line">                ReflectUtils.getNames(interfaces),</span><br><span class="line">                filter == ALL_ZERO ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakCacheKey&lt;CallbackFilter&gt;(filter),</span><br><span class="line">                callbackTypes,</span><br><span class="line">                useFactory,</span><br><span class="line">                interceptDuringConstruction,</span><br><span class="line">                serialVersionUID);</span><br><span class="line">        <span class="comment">//设置当前enhancer正在代理生成的类信息</span></span><br><span class="line">        <span class="keyword">this</span>.currentKey = key;</span><br><span class="line">        <span class="comment">//调用父类的create(key方法)</span></span><br><span class="line">        Object result = <span class="keyword">super</span>.create(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        可以看到获取到代理类标志类后 将其设置为当前代理类生成器的正在代理的类 并同样调用父类AbstractClassGenerator中create(key)的方法,下面开始分析Ehancer生成器的逻辑，由于部分逻辑和Generator生成器一致</p><h4 id="5、AbstractClassGenerator-create方法"><a href="#5、AbstractClassGenerator-create方法" class="headerlink" title="5、AbstractClassGenerator.create方法"></a>5、AbstractClassGenerator.create方法</h4><p>​        这个逻辑和上述步骤一致，查询当前key即代理类标志类对应的ClassLoadData缓存，如果没有则建一个空的缓存并初始化一个对应的ClassLoadData,传入相应的生成器，生成失败回调函数等</p><p>　　按照同样的逻辑一直走到generate(ClassLoadData)方法时，由于Enhancer生成器重写了这个方法 所以我们分析Enahncer的生成逻辑</p><h4 id="6、Enhancer-generate-ClassLoadData-data"><a href="#6、Enhancer-generate-ClassLoadData-data" class="headerlink" title="6、Enhancer.generate(ClassLoadData data)"></a>6、Enhancer.generate(ClassLoadData data)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">generate</span><span class="params">(ClassLoaderData data)</span> </span>&#123;</span><br><span class="line">        validate();</span><br><span class="line">        <span class="keyword">if</span> (superclass != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setNamePrefix(superclass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interfaces != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setNamePrefix(interfaces[ReflectUtils.findPackageProtected(interfaces)].getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.generate(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​        可以发现ehancer生成器只是做了个检查命名操作 在上面的Generator中也是做了个命名操作，然后继续执行父类的generate(data)方法，这个和上述步骤一致，我们主要看其中生成字节码的方法，即最后调用的Enhancer.generatorClass(ClassVisitor c)方法，</p><h4 id="7、Enhancer-generatorClass-ClassVisitor-c"><a href="#7、Enhancer-generatorClass-ClassVisitor-c" class="headerlink" title="7、Enhancer.generatorClass(ClassVisitor c)"></a>7、Enhancer.generatorClass(ClassVisitor c)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateClass</span><span class="params">(ClassVisitor v)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//声明需代理的类 或者接口</span></span><br><span class="line">        Class sc = (superclass == null) ? Object.class : superclass;</span><br><span class="line">        <span class="comment">//检查 final类无法被继承</span></span><br><span class="line">        <span class="keyword">if</span> (TypeUtils.isFinal(sc.getModifiers()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot subclass final class "</span> + sc.getName());</span><br><span class="line">        <span class="comment">//找到该类所有声明了的构造函数</span></span><br><span class="line">        List constructors = <span class="keyword">new</span> ArrayList(Arrays.asList(sc.getDeclaredConstructors()));</span><br><span class="line">        <span class="comment">//去掉private之类的不能被继承的构造函数</span></span><br><span class="line">        filterConstructors(sc, constructors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Order is very important: must add superclass, then</span></span><br><span class="line">        <span class="comment">// its superclass chain, then each interface and</span></span><br><span class="line">        <span class="comment">// its superinterfaces.</span></span><br><span class="line">        <span class="comment">//这儿顺序非常重要  上面是源码的注释  直接留着  相信大家都能看懂 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//声明代理类方法集合</span></span><br><span class="line">        List actualMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//声明代理接口接口方法集合</span></span><br><span class="line">        List interfaceMethods = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//声明所有必须为public的方法集合  这儿主要是代理接口接口的方法</span></span><br><span class="line">        <span class="keyword">final</span> Set forcePublic = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">//即通过传入的代理类 代理接口，遍历所有的方法并放入对应的集合</span></span><br><span class="line">        getMethods(sc, interfaces, actualMethods, interfaceMethods, forcePublic);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对所有代理类方法修饰符做处理 </span></span><br><span class="line">        List methods = CollectionUtils.transform(actualMethods, <span class="keyword">new</span> Transformer() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">                Method method = (Method)value;</span><br><span class="line">                <span class="keyword">int</span> modifiers = Constants.ACC_FINAL</span><br><span class="line">                    | (method.getModifiers()</span><br><span class="line">                       &amp; ~Constants.ACC_ABSTRACT</span><br><span class="line">                       &amp; ~Constants.ACC_NATIVE</span><br><span class="line">                       &amp; ~Constants.ACC_SYNCHRONIZED);</span><br><span class="line">                <span class="keyword">if</span> (forcePublic.contains(MethodWrapper.create(method))) &#123;</span><br><span class="line">                    modifiers = (modifiers &amp; ~Constants.ACC_PROTECTED) | Constants.ACC_PUBLIC;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ReflectUtils.getMethodInfo(method, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//创建类写入器</span></span><br><span class="line">        ClassEmitter e = <span class="keyword">new</span> ClassEmitter(v);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.开始创建类  并写入基本信息  如java版本，类修饰符 类名等</span></span><br><span class="line">        <span class="keyword">if</span> (currentData == <span class="keyword">null</span>) &#123;</span><br><span class="line">        e.begin_class(Constants.V1_8,</span><br><span class="line">                      Constants.ACC_PUBLIC,</span><br><span class="line">                      getClassName(),</span><br><span class="line">                      Type.getType(sc),</span><br><span class="line">                      (useFactory ?</span><br><span class="line">                       TypeUtils.add(TypeUtils.getTypes(interfaces), FACTORY) :</span><br><span class="line">                       TypeUtils.getTypes(interfaces)),</span><br><span class="line">                      Constants.SOURCE_FILE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e.begin_class(Constants.V1_8,</span><br><span class="line">                    Constants.ACC_PUBLIC,</span><br><span class="line">                    getClassName(),</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> Type[]&#123;FACTORY&#125;,</span><br><span class="line">                    Constants.SOURCE_FILE);</span><br><span class="line">        &#125;</span><br><span class="line">        List constructorInfo = CollectionUtils.transform(constructors, MethodInfoTransformer.getInstance());</span><br><span class="line">        <span class="comment">//2. 声明一个private boolean 类型的属性：CGLIB$BOUND</span></span><br><span class="line">        e.declare_field(Constants.ACC_PRIVATE, BOUND_FIELD, Type.BOOLEAN_TYPE, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//3. 声明一个public static Object 类型的属性：CGLIB$FACTORY_DATA</span></span><br><span class="line">        e.declare_field(Constants.ACC_PUBLIC | Constants.ACC_STATIC, FACTORY_DATA_FIELD, OBJECT_TYPE, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 这个默认为true  如果为false则会声明一个private boolean 类型的属性：CGLIB$CONSTRUCTED</span></span><br><span class="line">        <span class="keyword">if</span> (!interceptDuringConstruction) &#123;</span><br><span class="line">            e.declare_field(Constants.ACC_PRIVATE, CONSTRUCTED_FIELD, Type.BOOLEAN_TYPE, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 声明一个public static final 的ThreadLocal：ThreadLocal</span></span><br><span class="line">        e.declare_field(Constants.PRIVATE_FINAL_STATIC, THREAD_CALLBACKS_FIELD, THREAD_LOCAL, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5. 声明一个public static final 的CallBack类型的数组：CGLIB$STATIC_CALLBACKS</span></span><br><span class="line">        e.declare_field(Constants.PRIVATE_FINAL_STATIC, STATIC_CALLBACKS_FIELD, CALLBACK_ARRAY, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//如果serialVersionUID不为null  则设置一个public static final 的Long类型 serialVersionUID</span></span><br><span class="line">        <span class="keyword">if</span> (serialVersionUID != <span class="keyword">null</span>) &#123;</span><br><span class="line">            e.declare_field(Constants.PRIVATE_FINAL_STATIC, Constants.SUID_FIELD_NAME, Type.LONG_TYPE, serialVersionUID);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历CallBackTypes 即我们构建Enhancer是setCallBack的所有类的类型  本案例中是methodInterceptor 并且只传入了一个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; callbackTypes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//6.声明一个private 的传入的CallBack类型的属性：CGLIB$CALLBACK_0 (从0开始编号，)</span></span><br><span class="line">            e.declare_field(Constants.ACC_PRIVATE, getCallbackField(i), callbackTypes[i], <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7声明一个private static 的传入的Object类型的属性：CGLIB$CALLBACK_FILTER</span></span><br><span class="line">        e.declare_field(Constants.ACC_PRIVATE | Constants.ACC_STATIC, CALLBACK_FILTER_FIELD, OBJECT_TYPE, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断currentData</span></span><br><span class="line">        <span class="keyword">if</span> (currentData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//8.为null则开始声明所有的代理类方法的变量 以及其具体的重写实现方法，还有static初始化执行代码块</span></span><br><span class="line">            emitMethods(e, methods, actualMethods);</span><br><span class="line">            <span class="comment">//9.声明构造函数</span></span><br><span class="line">            emitConstructors(e, constructorInfo);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//声明默认构造函数</span></span><br><span class="line">            emitDefaultConstructor(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        emitSetThreadCallbacks(e);</span><br><span class="line">        emitSetStaticCallbacks(e);</span><br><span class="line">        emitBindCallbacks(e);</span><br><span class="line">        <span class="comment">//如果currentData不为null</span></span><br><span class="line">        <span class="keyword">if</span> (useFactory || currentData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到所有CallBack索引数组</span></span><br><span class="line">            <span class="keyword">int</span>[] keys = getCallbackKeys();</span><br><span class="line">            <span class="comment">//10.声明三个newInstance方法</span></span><br><span class="line">            <span class="comment">//只有一个callback参数</span></span><br><span class="line">            emitNewInstanceCallbacks(e);</span><br><span class="line">            <span class="comment">//参数为callback数组</span></span><br><span class="line">            emitNewInstanceCallback(e);</span><br><span class="line">            <span class="comment">//参数为callback数组 以及附带的一些参数</span></span><br><span class="line">            emitNewInstanceMultiarg(e, constructorInfo);</span><br><span class="line">            <span class="comment">//11.声明getCallBack方法</span></span><br><span class="line">            emitGetCallback(e, keys);</span><br><span class="line">            <span class="comment">//12.声明setCallBack方法</span></span><br><span class="line">            emitSetCallback(e, keys);</span><br><span class="line">            <span class="comment">//12.声明setCallBacks方法</span></span><br><span class="line">            emitGetCallbacks(e);</span><br><span class="line">            <span class="comment">//12.声明setCallBacks方法</span></span><br><span class="line">            emitSetCallbacks(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类声明结束</span></span><br><span class="line">        e.end_class();</span><br></pre></td></tr></table></figure><p>​        可以看到这儿也是声明一个写入类 然后按照Ehancer的代理生成策略写入符合的class信息然后返回，最红依旧会执行toByteArray方法返回byte[]数组，这样则又回到了步骤中 根据类加载器 字节码数组来动态将代理类加载进内存中的方法了。最后我们回到根据class获取实例的代码即可返回被代理实例。 而我们执行方法时执行的是代理类中对应的方法，然后调用我们传入的callback执行 原理和jdk动态代理类似，至此 cglib动态代理源码分析到此结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态代理 </tag>
            
            <tag> CGLib </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP应用之——声明式事务</title>
      <link href="/2020/08/04/Spring%20AOP%E5%BA%94%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/08/04/Spring%20AOP%E5%BA%94%E7%94%A8%E4%B9%8B%E2%80%94%E2%80%94%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP的应用配置"><a href="#Spring-AOP的应用配置" class="headerlink" title="Spring AOP的应用配置"></a>Spring AOP的应用配置</h1><h3 id="1、Spring-JdbcTemplate"><a href="#1、Spring-JdbcTemplate" class="headerlink" title="1、Spring JdbcTemplate"></a>1、Spring JdbcTemplate</h3><p>​        在spring中为了更加方便的操作JDBC，在JDBC的基础之上定义了一个抽象层，此设计的目的是为不同类型的JDBC操作提供模板方法，每个模板方法都能控制整个过程，并允许覆盖过程中的特定任务，通过这种方式，可以尽可能保留灵活性，将数据库存取的工作量讲到最低。</p><h5 id="1、配置并测试数据源"><a href="#1、配置并测试数据源" class="headerlink" title="1、配置并测试数据源"></a>1、配置并测试数据源</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dbconfig.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root123</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        DruidDataSource dataSource = context.getBean(<span class="string">"dataSource"</span>, DruidDataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、给spring容器添加JdbcTemplate"><a href="#2、给spring容器添加JdbcTemplate" class="headerlink" title="2、给spring容器添加JdbcTemplate"></a>2、给spring容器添加JdbcTemplate</h5><p>​        spring容器提供了一个JdbcTemplate类，用来方便操作数据库。</p><p>1、添加pom依赖</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdbcTemplate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(jdbcTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、插入数据"><a href="#3、插入数据" class="headerlink" title="3、插入数据"></a>3、插入数据</h5><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"insert into emp(empno,ename) values(?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> result = jdbcTemplate.update(sql, <span class="number">1111</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、批量插入数据"><a href="#4、批量插入数据" class="headerlink" title="4、批量插入数据"></a>4、批量插入数据</h5><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"insert into emp(empno,ename) values(?,?)"</span>;</span><br><span class="line">        List&lt;Object[]&gt; list = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="number">1</span>,<span class="string">"zhangsan1"</span>&#125;);</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="number">2</span>,<span class="string">"zhangsan2"</span>&#125;);</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="number">3</span>,<span class="string">"zhangsan3"</span>&#125;);</span><br><span class="line">        <span class="keyword">int</span>[] result = jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : result) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、查询某个值，并以对象的方式返回"><a href="#5、查询某个值，并以对象的方式返回" class="headerlink" title="5、查询某个值，并以对象的方式返回"></a>5、查询某个值，并以对象的方式返回</h5><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"select * from emp where empno = ?"</span>;</span><br><span class="line">        Emp emp = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Emp<span class="class">.<span class="keyword">class</span>), 7369)</span>;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、查询返回集合对象"><a href="#6、查询返回集合对象" class="headerlink" title="6、查询返回集合对象"></a>6、查询返回集合对象</h5><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"select * from emp where sal &gt; ?"</span>;</span><br><span class="line">        List&lt;Emp&gt; query = jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Emp<span class="class">.<span class="keyword">class</span>), 1500)</span>;</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : query) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、返回组合函数的值"><a href="#7、返回组合函数的值" class="headerlink" title="7、返回组合函数的值"></a>7、返回组合函数的值</h5><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        JdbcTemplate jdbcTemplate = context.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"select max(sal) from emp"</span>;</span><br><span class="line">        Double aDouble = jdbcTemplate.queryForObject(sql, Double<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(aDouble);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、使用具备具名函数的JdbcTemplate"><a href="#8、使用具备具名函数的JdbcTemplate" class="headerlink" title="8、使用具备具名函数的JdbcTemplate"></a>8、使用具备具名函数的JdbcTemplate</h5><p>jdbcTemplate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"namedParameterJdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        NamedParameterJdbcTemplate jdbcTemplate = context.getBean(<span class="string">"namedParameterJdbcTemplate"</span>, NamedParameterJdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String sql = <span class="string">"insert into emp(empno,ename) values(:empno,:ename)"</span>;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"empno"</span>,<span class="number">2222</span>);</span><br><span class="line">        map.put(<span class="string">"ename"</span>,<span class="string">"sili"</span>);</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, map);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、整合EmpDao"><a href="#9、整合EmpDao" class="headerlink" title="9、整合EmpDao"></a>9、整合EmpDao</h5><p>jdbcTemplate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Emp emp)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into emp(empno,ename) values(?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, emp.getEmpno(), emp.getEname());</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> com.oi.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        EmpDao empDao = context.getBean(<span class="string">"empDao"</span>, EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        empDao.save(<span class="keyword">new</span> Emp(<span class="number">3333</span>,<span class="string">"wangwu"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、声明式事务"><a href="#2、声明式事务" class="headerlink" title="2、声明式事务"></a>2、声明式事务</h3><h5 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h5><p>tx.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : localhost</span></span><br><span class="line"><span class="comment">Source Server Version : 50528</span></span><br><span class="line"><span class="comment">Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment">Source Database       : tx</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50528</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2020-02-13 19:19:32</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `account`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`account`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`balance`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of account</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span> (<span class="string">'lisi'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="string">'1000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `book`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`book`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`book_name`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'西游记'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'水浒传'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'三国演义'</span>, <span class="string">'100'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'红楼梦'</span>, <span class="string">'100'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `book_stock`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`book_stock`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book_stock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`stock`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of book_stock</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book_stock <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book_stock <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book_stock <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book_stock <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'1000'</span>);</span><br></pre></td></tr></table></figure><p>BookDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减去某个用户的余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBalance</span><span class="params">(String userName,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set balance=balance-? where username=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,price,userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照图书的id来获取图书的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select price from book where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,Integer<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存，减去某本书的库存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"update book_stock set stock=stock-1 where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        BookService bookService = context.getBean(<span class="string">"bookService"</span>, BookService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bookService.checkout(<span class="string">"zhangsan"</span>,<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：在事务控制方面，主要有两个分类：</p><p>编程式事务：在代码中直接加入处理事务的逻辑，可能需要在代码中显式调用beginTransaction()、commit()、rollback()等事务管理相关的方法</p><p>声明式事务：在方法的外部添加注解或者直接在配置文件中定义，将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。spring的AOP恰好可以完成此功能：事务管理代码的固定模式作为一种横切关注点，通过AOP方法模块化，进而实现声明式事务。</p><h5 id="2、声明式事务的简单配置"><a href="#2、声明式事务的简单配置" class="headerlink" title="2、声明式事务的简单配置"></a>2、声明式事务的简单配置</h5><p>​        Spring从不同的事务管理API中抽象出了一整套事务管理机制，让事务管理代码从特定的事务技术中独立出来。开发人员通过配置的方式进行事务管理，而不必了解其底层是如何实现的。</p><p>​        Spring的核心事务管理抽象是PlatformTransactionManager。它为事务管理封装了一组独立于技术的方法。无论使用Spring的哪种事务管理策略(编程式或声明式)，事务管理器都是必须的。</p><p>​        事务管理器可以以普通的bean的形式声明在Spring IOC容器中。下图是spring提供的事务管理器<br>![事务管理器](Spring AOP应用之——声明式事务/事务管理器.png)</p><p>1、在配置文件中添加事务管理器</p><p>jdbcTemplate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务控制--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的事务控制模式，依赖tx名称空间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、事务配置的属性"><a href="#3、事务配置的属性" class="headerlink" title="3、事务配置的属性"></a>3、事务配置的属性</h5><p>​        isolation：设置事务的隔离级别</p><p>​        propagation：事务的传播行为</p><p>​        noRollbackFor：那些异常事务可以不回滚</p><p>​        noRollbackForClassName：填写的参数是全类名</p><p>​        rollbackFor：哪些异常事务需要回滚</p><p>​        rollbackForClassName：填写的参数是全类名</p><p>​        readOnly：设置事务是否为只读事务        </p><p>​        timeout：事务超出指定执行时长后自动终止并回滚,单位是秒</p><h5 id="4、测试超时属性"><a href="#4、测试超时属性" class="headerlink" title="4、测试超时属性"></a>4、测试超时属性</h5><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、设置事务只读"><a href="#5、设置事务只读" class="headerlink" title="5、设置事务只读"></a>5、设置事务只读</h5><p>​        如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；</p><p>​        如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。</p><p>​        对于只读查询，可以指定事务类型为readonly，即只读事务。由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段</p><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>,readOnly = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、设置哪些异常不回滚"><a href="#6、设置哪些异常不回滚" class="headerlink" title="6、设置哪些异常不回滚"></a>6、设置哪些异常不回滚</h5><p>​        注意：运行时异常默认回滚，编译时异常默认不回滚</p><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>,noRollbackFor = &#123;ArithmeticException<span class="class">.<span class="keyword">class</span>,<span class="title">NullPointerException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">checkout</span>(<span class="title">String</span> <span class="title">username</span>,<span class="title">int</span> <span class="title">id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>,noRollbackForClassName = &#123;<span class="string">"java.lang.ArithmeticException"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、设置哪些异常回滚"><a href="#7、设置哪些异常回滚" class="headerlink" title="7、设置哪些异常回滚"></a>7、设置哪些异常回滚</h5><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>,rollbackFor = &#123;FileNotFoundException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">checkout</span>(<span class="title">String</span> <span class="title">username</span>,<span class="title">int</span> <span class="title">id</span>) <span class="title">throws</span> <span class="title">FileNotFoundException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line"><span class="comment">//        int i = 1/0;</span></span><br><span class="line">        <span class="keyword">new</span> FileInputStream(<span class="string">"aaa.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、设置隔离级别"><a href="#8、设置隔离级别" class="headerlink" title="8、设置隔离级别"></a>8、设置隔离级别</h5><p>​        隔离级别没有接触的同学可以看我之前的事务视频，里面有详细讲解，此处不再赘述。</p><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">3</span>,isolation = Isolation.READ_COMMITTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line"><span class="comment">//        int i = 1/0;</span></span><br><span class="line">        <span class="keyword">new</span> FileInputStream(<span class="string">"aaa.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、事务的传播特性"><a href="#9、事务的传播特性" class="headerlink" title="9、事务的传播特性"></a>9、事务的传播特性</h5><p>事务的传播特性指的是当一个事务方法被</p><p>+另一个事务方法调用时，这个事务方法应该如何进行？</p><p>spring的事务传播行为一共有7种：</p><p>![传播特性](Spring AOP应用之——声明式事务/传播特性.jpg)</p><h5 id="10、测试事务的传播特性"><a href="#10、测试事务的传播特性" class="headerlink" title="10、测试事务的传播特性"></a>10、测试事务的传播特性</h5><p>BookDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减去某个用户的余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBalance</span><span class="params">(String userName,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set balance=balance-? where username=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,price,userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照图书的id来获取图书的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select price from book where id=?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql,Integer<span class="class">.<span class="keyword">class</span>,<span class="title">id</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减库存，减去某本书的库存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"update book_stock set stock=stock-1 where id=?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改图书价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"update book set price=? where id =?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,price,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.File;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        bookDao.updatePrice(id,price);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MulService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bookService.checkout(<span class="string">"zhangsan"</span>,<span class="number">1</span>);</span><br><span class="line">        bookService.updatePrice(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.service.MulService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbcTemplate.xml"</span>);</span><br><span class="line">        MulService mulService = context.getBean(<span class="string">"mulService"</span>, MulService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mulService.mulTx();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过上图的结果发现，如果设置的传播特性是Required，那么所有的事务都会统一成一个事务，一旦发生错误，所有的数据都要进行回滚。</p><hr><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.File;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        bookDao.updatePrice(id,price);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过修改checkout方法的传播特性为Required_new,发现价格进行了回滚，而其他的数据没有进行回滚。</p><hr><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.File;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        bookDao.updatePrice(id,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MulService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bookService.checkout(<span class="string">"zhangsan"</span>,<span class="number">1</span>);</span><br><span class="line">        bookService.updatePrice(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        将bookservice方法的传播行为为Required，并且将报错设置在MulService中，发现会都进行回滚。</p><hr><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.File;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        bookDao.updatePrice(id,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MulService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bookService.checkout(<span class="string">"zhangsan"</span>,<span class="number">1</span>);</span><br><span class="line">        bookService.updatePrice(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        将bookservice方法的传播行为为Requires_new，并且将报错设置在MulService中，发现都不会进行回滚。</p><hr><p>BookService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> com.oi.dao.BookDao;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line">        <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.File;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结账：传入哪个用户买了哪本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkout</span><span class="params">(String username,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        bookDao.updateStock(id);</span><br><span class="line">        <span class="keyword">int</span> price = bookDao.getPrice(id);</span><br><span class="line">        bookDao.updateBalance(username,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        bookDao.updatePrice(id,price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        checkout(<span class="string">"zhangsan"</span>,<span class="number">1</span>);</span><br><span class="line">        updatePrice(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如果在bookservice执行的话，会发现刚刚的效果就没有了，原因是外层调用的时候使用的AOP，但是本类方法自己的调用就是最最普通的调用，就是同一个事务。</p><p>总结：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、事务传播级别是REQUIRED，当checkout()被调用时（假定被另一类中commit()调用），如果checkout()中的代码抛出异常，即便被捕获，commit()中的其他代码都会roll back</span><br><span class="line"></span><br><span class="line">2、是REQUIRES_NEW，如果checkout()中的代码抛出异常，并且被捕获，commit()中的其他代码不会roll back；如果commit()中的其他代码抛出异常，而且没有捕获，不会导致checkout()回滚</span><br><span class="line"></span><br><span class="line">3、是NESTED，如果checkout()中的代码抛出异常，并且被捕获，commit()中的其他代码不会roll back；如果commit()中的其他代码抛出异常，而且没有捕获，会导致checkout()回滚</span><br><span class="line"></span><br><span class="line">    PROPAGATION_REQUIRES_NEW 启动一个新的, 不依赖于环境的 "内部" 事务. 这个事务将被完全 commited 或 rolled back 而不依赖于外部事务, 它拥有自己的隔离范围, 自己的锁, 等等. 当内部事务开始执行时, 外部事务将被挂起, 内务事务结束时, 外部事务将继续执行. </span><br><span class="line">    另一方面, PROPAGATION_NESTED 开始一个 "嵌套的" 事务,  它是已经存在事务的一个真正的子事务. 嵌套事务开始执行时,  它将取得一个 savepoint. 如果这个嵌套事务失败, 我们将回滚到此 savepoint. 潜套事务是外部事务的一部分, 只有外部事务结束后它才会被提交. </span><br><span class="line">    由此可见, PROPAGATION_REQUIRES_NEW 和 PROPAGATION_NESTED 的最大区别在于, PROPAGATION_REQUIRES_NEW 完全是一个新的事务, 而 PROPAGATION_NESTED 则是外部事务的子事务, 如果外部事务 commit, 嵌套事务也会被 commit, 这个规则同样适用于 roll back.</span><br></pre></td></tr></table></figure><h3 id="3、基于xml的事务配置"><a href="#3、基于xml的事务配置" class="headerlink" title="3、基于xml的事务配置"></a>3、基于xml的事务配置</h3><p>jdbcTemplate.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"namedParameterJdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务控制--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    基于xml配置的事务：依赖tx名称空间和aop名称空间</span></span><br><span class="line"><span class="comment">        1、spring中提供事务管理器（切面），配置这个事务管理器</span></span><br><span class="line"><span class="comment">        2、配置出事务方法</span></span><br><span class="line"><span class="comment">        3、告诉spring哪些方法是事务方法（事务切面按照我们的切入点表达式去切入事务方法）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">class</span>=<span class="string">"com.oi.service.BookService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPoint"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.oi.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务建议：advice-ref:指向事务管理器的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"myAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"myAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指明哪些方法是事务方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"checkout"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 声明式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix原理及使用</title>
      <link href="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1 概念："></a>1 概念：</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​        在分布式系统下，微服务之间不可避免地会发生相互调用，但每个系统都无法百分之百保证自身运行不出问题。在服务调用中，很可能面临依赖服务失效的问题（网络延时，服务异常，负载过大无法及时响应）。因此需要一个组件，能提供强大的容错能力，为服务间调用提供保护和控制。</p><p>我们的目的：<strong><em>当我自身 依赖的服务不可用时，服务自身不会被拖垮。防止微服务级联异常</em></strong>。</p><p>图。</p><p>本质：就是隔离坏的服务，不让坏服务拖垮其他服务（调用坏服务的服务）。</p><p>比如：武汉发生疫情，隔离它，不让依赖于武汉的地方感染。</p><p>和我们课程中熔断降级更贴切一点：北京从武汉招聘大学生，武汉有疫情了，当北京去武汉请求大学生来的时候，武汉熔断，然后北京启动自身的备用逻辑：去上海找大学生（降级）。</p><h3 id="舱壁模式"><a href="#舱壁模式" class="headerlink" title="舱壁模式"></a>舱壁模式</h3><p>舱壁模式（Bulkhead）隔离了每个工作负载或服务的关键资源，如连接池、内存和CPU，硬盘。每个工作单元都有独立的 连接池，内存，CPU。</p><p>使用舱壁避免了单个服务消耗掉所有资源，从而导致其他服务出现故障的场景。<br>这种模式主要是通过防止由一个服务引起的级联故障来增加系统的弹性。</p><p>据说泰坦尼克原因：泰坦尼克号上有16个防水舱，设计可以保障如果只有4个舱进水，密闭和隔离可以阻止水继续进入下一个防水舱，从而保证船的基本浮力。</p><p>但是当时冰山从侧面划破了船体，从而导致有5个防水舱同时进水，而为了建造豪华的头等舱大厅，也就是电影里杰克和罗斯约会的地方，5号舱的顶部并未达到密闭所需要的高度，水就一层层进入了船体，隔离的失败导致了泰坦尼克的沉没。</p><blockquote><p>舱壁模式<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/%E8%88%B1%E5%A3%81%E6%A8%A1%E5%BC%8F.png" alt="舱壁模式"></p></blockquote><p>给我们的思路：可以对每个请求设置，单独的连接池，配置连接数，不要影响 别的请求。就像一个一个的防水舱。</p><p>对在公司中的管理也一样：给每个独立的 小组，分配独立的资源，比如产品，开发，测试。在小公司，大多数情况 这些资源都是共享的，有一个好处是充分利用资源，坏处是，如果一个项目延期，会影响别的项目推进。自己权衡利弊。</p><p>最近比较火的一句话： 真正的知识，是 产品提高一个等级和成本提高0.2元的 痛苦抉择。</p><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><p>​        每个服务 发出一个HTTP请求都会 在 服务中 开启一个新线程。而下游服务挂了或者网络不可达，通常线程会阻塞住，直到Timeout。如果并发量多一点，这些阻塞的线程就会占用大量的资源，很有可能把自己本身这个微服务所在的机器资源耗尽，导致自己也挂掉。</p><p>​        如果服务提供者响应非常缓慢，那么服务消费者调用此提供者就会一直等待，直到提供者响应或超时。在高并发场景下，此种情况，如果不做任何处理，就会导致服务消费者的资源耗竭甚至整个系统的崩溃。一层一层的崩溃，导致所有的系统崩溃。</p><blockquote><p>《雪崩示意图》<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/%E9%9B%AA%E5%B4%A9%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="雪崩示意图"></p></blockquote><p>​        雪崩：由基础服务故障导致级联故障的现象。描述的是：提供者不可用 导致消费者不可用，并将不可用逐渐放大的过程。像滚雪球一样，不可用的服务越来越多。影响越来越恶劣。</p><p>雪崩三个流程：</p><p>服务提供者不可用</p><p>重试会导致网络流量加大，更影响服务提供者。</p><p>导致服务调用者不可用，由于服务调用者 一直等待返回，一直占用系统资源。</p><p>（不可用的范围 被逐步放大）</p><p>服务不可用原因：</p><p>服务器宕机</p><p>网络故障</p><p>宕机</p><p>程序异常</p><p>负载过大，导致服务提供者响应慢</p><p>缓存击穿导致服务超负荷运行</p><p>总之 ： 基础服务故障  导致 级联故障   就是  雪崩。</p><h3 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h3><ol><li><p>为网络请求设置超时。</p><p>必须为网络请求设置超时。一般的调用一般在几十毫秒内响应。如果服务不可用，或者网络有问题，那么响应时间会变很长。长到几十秒。</p><p>每一次调用，对应一个线程或进程，如果响应时间长，那么线程就长时间得不到释放，而线程对应着系统资源，包括CPU,内存，得不到释放的线程越多，资源被消耗的越多，最终导致系统崩溃。</p><p>因此必须设置超时时间，让资源尽快释放。</p></li><li><p>使用断路器模式。</p><p>想一下家里的保险丝，跳闸。如果家里有短路或者大功率电器使用，超过电路负载时，就会跳闸，如果不跳闸，电路烧毁，波及到其他家庭，导致其他家庭也不可用。通过跳闸保护电路安全，当短路问题，或者大功率问题被解决，在合闸。</p><p>自己家里电路，不影响整个小区每家每户的电路。</p></li></ol><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><pre><code>如果对某个微服务请求有大量超时（说明该服务不可用），再让新的请求访问该服务就没有意义，只会无谓的消耗资源。例如设置了超时时间1s，如果短时间内有大量的请求无法在1s内响应，就没有必要去请求依赖的服务了。</code></pre><ol><li><p>断路器是对容易导致错误的操作的代理。这种代理能统计一段时间内的失败次数，并依据次数决定是正常请求依赖的服务还是直接返回。</p></li><li><p>断路器可以实现快速失败，如果它在一段时间内检测到许多类似的错误（超时），就会在之后的一段时间，强迫对该服务的调用快速失败，即不再请求所调用的服务。这样对于消费者就无须再浪费CPU去等待长时间的超时。</p></li><li><p>断路器也可自动诊断依赖的服务是否恢复正常。如果发现依赖的服务已经恢复正常，那么就会恢复请求该服务。通过重置时间来决定断路器的重新闭合。</p><p>这样就实现了微服务的“自我修复”：当依赖的服务不可用时，打开断路器，让服务快速失败，从而防止雪崩。当依赖的服务恢复正常时，又恢复请求。</p></li></ol><blockquote><p>断路器开关时序图<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/%E6%96%AD%E8%B7%AF%E5%99%A8%E5%BC%80%E5%85%B3%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="断路器开关时序图"></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一次正常</span><br><span class="line"></span><br><span class="line">第二次提供者异常</span><br><span class="line"></span><br><span class="line">提供者多次异常后，断路器打开</span><br><span class="line"></span><br><span class="line">后续请求，则直接降级，走备用逻辑。</span><br></pre></td></tr></table></figure><p>​    断路器状态转换的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">关闭状态：正常情况下，断路器关闭，可以正常请求依赖的服务。</span><br><span class="line"></span><br><span class="line">打开状态：当一段时间内，请求失败率达到一定阈值，断路器就会打开。服务请求不会去请求依赖的服务。调用方直接返回。不发生真正的调用。重置时间过后，进入半开模式。</span><br><span class="line"></span><br><span class="line">半开状态：断路器打开一段时间后，会自动进入“半开模式”，此时，断路器允许一个服务请求访问依赖的服务。如果此请求成功(或者成功达到一定比例)，则关闭断路器，恢复正常访问。否则，则继续保持打开状态。</span><br><span class="line"></span><br><span class="line">断路器的打开，能保证服务调用者在调用异常服务时，快速返回结果，避免大量的同步等待，减少服务调用者的资源消耗。并且断路器能在打开一段时间后继续侦测请求执行结果，判断断路器是否能关闭，恢复服务的正常调用。</span><br></pre></td></tr></table></figure><blockquote><p>《熔断.doc》《断路器开关时序图》《状态转换》</p></blockquote><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>为了在整体资源不够的时候，适当放弃部分服务，将主要的资源投放到核心服务中，待渡过难关之后，再重启已关闭的服务，保证了系统核心服务的稳定。当服务停掉后，自动进入fallback替换主方法。</p><p>用fallback方法代替主方法执行并返回结果，对失败的服务进行降级。当调用服务失败次数在一段时间内超过了断路器的阈值时，断路器将打开，不再进行真正的调用，而是快速失败，直接执行fallback逻辑。服务降级保护了服务调用者的逻辑。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">熔断和降级：</span><br><span class="line">共同点：</span><br><span class="line">1、为了防止系统崩溃，保证主要功能的可用性和可靠性。</span><br><span class="line">2、用户体验到某些功能不能用。</span><br><span class="line">不同点：</span><br><span class="line">1、熔断由下级故障触发，主动惹祸。</span><br><span class="line">2、降级由调用方从负荷角度触发，无辜被抛弃。</span><br></pre></td></tr></table></figure><p>19年春晚 百度 红包，凤巢的5万台机器熄火4小时，让给了红包。</p><h3 id="Hystrix-1"><a href="#Hystrix-1" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>spring cloud 用的是 hystrix，是一个容错组件。</p><p>Hystrix实现了 超时机制和断路器模式。</p><p>Hystrix是Netflix开源的一个类库，用于隔离远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。主要有以下几点功能：</p><ol><li>为系统提供保护机制。在依赖的服务出现高延迟或失败时，为系统提供保护和控制。</li><li>防止雪崩。</li><li>包裹请求：使用HystrixCommand（或HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中运行。</li><li>跳闸机制：当某服务失败率达到一定的阈值时，Hystrix可以自动跳闸，停止请求该服务一段时间。</li><li>资源隔离：Hystrix为每个请求都的依赖都维护了一个小型线程池，如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速失败判定。防止级联失败。</li><li>快速失败：Fail Fast。同时能快速恢复。侧重点是：（不去真正的请求服务，发生异常再返回），而是直接失败。</li><li>监控：Hystrix可以实时监控运行指标和配置的变化，提供近实时的监控、报警、运维控制。</li><li>回退机制：fallback，当请求失败、超时、被拒绝，或当断路器被打开时，执行回退逻辑。回退逻辑我们自定义，提供优雅的服务降级。</li><li>自我修复：断路器打开一段时间后，会自动进入“半开”状态，可以进行打开，关闭，半开状态的转换。前面有介绍。</li></ol><h2 id="2-Hystrix-使用"><a href="#2-Hystrix-使用" class="headerlink" title="2 Hystrix 使用"></a>2 Hystrix 使用</h2><h3 id="hystrix独立使用脱离spring-cloud"><a href="#hystrix独立使用脱离spring-cloud" class="headerlink" title="hystrix独立使用脱离spring cloud"></a>hystrix独立使用脱离spring cloud</h3><p>代码：study-hystrix项目，HelloWorldHystrixCommand类。看着类讲解。</p><p>关注点：</p><p>继承hystrixCommand</p><p>重写run</p><p>fallback（程序发生非HystrixBadRequestException异常，运行超时，熔断开关打开，线程池/信号量满了）</p><p>熔断（熔断机制相当于电路的跳闸功能，我们可以配置熔断策略为当请求错误比例在10s内&gt;50%时，该服务将进入熔断状态，后续请求都会进入fallback。）</p><p>结果缓存（支持将一个请求结果缓存起来，下一个具有相同key的请求将直接从缓存中取出结果，减少请求开销。）</p><p>这个例子，只是独立使用hystrix，  通过这个例子，了解 hystrix 的运行逻辑。</p><h3 id="和restTemplate结合"><a href="#和restTemplate结合" class="headerlink" title="和restTemplate结合"></a>和restTemplate结合</h3><p>在api-driver（服务消费端）中：</p><p>pom.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入hystrix依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure><p>调用的方法上，通过使用@HystrixCommand，将方法纳入到hystrix监控中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod = <span class="string">"sendFail"</span>)</span><br><span class="line"></span><br><span class="line">下面的service，功能只是：调用service-sms服务。</span><br><span class="line">RestTemplateRequestServiceImpl中的smsSend</span><br></pre></td></tr></table></figure><p>sendFail，此处需要注意：此方法的 请求参数和 返回参数 要和原方法一致。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private ResponseResult sendFail(SmsSendRequest smsSendRequest) &#123;</span><br><span class="line"></span><br><span class="line">//备用逻辑</span><br><span class="line"><span class="built_in">return</span> ResponseResult.fail(-3, <span class="string">"熔断"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常调用：启动eureka-7900，service-sms 8002，api-driver。</p><p>测试点：</p><ol><li>访问sms是否正常。</li><li>访问yapi：api-driver下：司机获取验证码。是否正常。</li><li>停止service-sms。访问司机获取验证码，是否走备用逻辑。</li></ol><p>两个注解@EnableCircuitBreaker，@EnableHystrix点进去看，其实一样。</p><p>点@EnableHystrix进去。</p><p>ps：配置：HystrixCommandProperties</p><p>写好方法封装restTemplate 请求的service。一般将HystrixCommand，写在此service。也可以扩大范围。</p><p>上面的例子中，如果不走熔断的备用方法，则，停止提供者时，会抛出500错误。</p><p>更多的配置：</p><p>点击@HystrixCommand 进去。可以看到很多配置项。</p><p>下面说一下：commandProperties。</p><p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p><p>打开官网，对比着看一下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1、Execution：</span><br><span class="line">用来控制HystrixCommand.run()的执行</span><br><span class="line">具体意义：</span><br><span class="line">execution.isolation.strategy：该属性用来设置HystrixCommand.run()执行的隔离策略。默认为THREAD。</span><br><span class="line">execution.isolation.thread.timeoutInMilliseconds：该属性用来配置HystrixCommand执行的超时时间，单位为毫秒。</span><br><span class="line">execution.timeout.enabled：该属性用来配置HystrixCommand.run()的执行是否启用超时时间。默认为<span class="literal">true</span>。</span><br><span class="line">execution.isolation.thread.interruptOnTimeout：该属性用来配置当HystrixCommand.run()执行超时的时候是否要它中断。</span><br><span class="line">execution.isolation.thread.interruptOnCancel：该属性用来配置当HystrixCommand.run()执行取消时是否要它中断。</span><br><span class="line">execution.isolation.semaphore.maxConcurrentRequests：当HystrixCommand命令的隔离策略使用信号量时，该属性用来配置信号量的大小。当最大并发请求达到该设置值时，后续的请求将被拒绝。</span><br><span class="line"></span><br><span class="line">2、Fallback：</span><br><span class="line">用来控制HystrixCommand.getFallback()的执行</span><br><span class="line">fallback.isolation.semaphore.maxConcurrentRequests：该属性用来设置从调用线程中允许HystrixCommand.getFallback()方法执行的最大并发请求数。当达到最大并发请求时，后续的请求将会被拒绝并抛出异常。</span><br><span class="line">fallback.enabled：该属性用来设置服务降级策略是否启用，默认是<span class="literal">true</span>。如果设置为<span class="literal">false</span>，当请求失败或者拒绝发生时，将不会调用HystrixCommand.getFallback()来执行服务降级逻辑。</span><br><span class="line"></span><br><span class="line">mock。</span><br><span class="line"></span><br><span class="line">3、Circuit Breaker：用来控制HystrixCircuitBreaker的行为。</span><br><span class="line">circuitBreaker.enabled：确定当服务请求命令失败时，是否使用断路器来跟踪其健康指标和熔断请求。默认为<span class="literal">true</span>。</span><br><span class="line">circuitBreaker.requestVolumeThreshold：用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20的时候，如果滚动时间窗（默认10秒）内仅收到19个请求，即使这19个请求都失败了，断路器也不会打开。</span><br><span class="line">circuitBreaker.sleepWindowInMilliseconds：用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后，会将断路器设置为“半开”状态，尝试熔断的请求命令，如果依然时候就将断路器继续设置为“打开”状态，如果成功，就设置为“关闭”状态。</span><br><span class="line">circuitBreaker.errorThresholdPercentage：该属性用来设置断路器打开的错误百分比条件。默认值为50，表示在滚动时间窗中，在请求值超过requestVolumeThreshold阈值的前提下，如果错误请求数百分比超过50，就把断路器设置为“打开”状态，否则就设置为“关闭”状态。</span><br><span class="line">circuitBreaker.forceOpen：该属性默认为<span class="literal">false</span>。如果该属性设置为<span class="literal">true</span>，断路器将强制进入“打开”状态，它会拒绝所有请求。该属性优于forceClosed属性。</span><br><span class="line">circuitBreaker.forceClosed：该属性默认为<span class="literal">false</span>。如果该属性设置为<span class="literal">true</span>，断路器强制进入“关闭”状态，它会接收所有请求。如果forceOpen属性为<span class="literal">true</span>，该属性不生效。</span><br><span class="line"></span><br><span class="line">4、Metrics：该属性与HystrixCommand和HystrixObservableCommand执行中捕获的指标相关。</span><br><span class="line">metrics.rollingStats.timeInMilliseconds：该属性用来设置滚动时间窗的长度，单位为毫秒。该时间用于断路器判断健康度时需要收集信息的持续时间。断路器在收集指标信息时会根据设置的时间窗长度拆分成多个桶来累计各度量值，每个桶记录了一段时间的采集指标。例如，当为默认值10000毫秒时，断路器默认将其分成10个桶，每个桶记录1000毫秒内的指标信息。</span><br><span class="line">metrics.rollingStats.numBuckets：用来设置滚动时间窗统计指标信息时划分“桶”的数量。默认值为10。</span><br><span class="line">metrics.rollingPercentile.enabled：用来设置对命令执行延迟是否使用百分位数来跟踪和计算。默认为<span class="literal">true</span>，如果设置为<span class="literal">false</span>，那么所有的概要统计都将返回-1。</span><br><span class="line">metrics.rollingPercentile.timeInMilliseconds：用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</span><br><span class="line">metrics.rollingPercentile.numBuckets：用来设置百分位统计滚动窗口中使用桶的数量。</span><br><span class="line">metrics.rollingPercentile.bucketSize：用来设置每个“桶”中保留的最大执行数。</span><br><span class="line">metrics.healthSnapshot.intervalInMilliseconds：用来设置采集影响断路器状态的健康快照的间隔等待时间。</span><br><span class="line"></span><br><span class="line">5、Request Context：涉及HystrixCommand使用HystrixRequestContext的设置。</span><br><span class="line">requestCache.enabled：用来配置是否开启请求缓存。</span><br><span class="line">requestLog.enabled：用来设置HystrixCommand的执行和事件是否打印到日志的HystrixRequestLog中。</span><br></pre></td></tr></table></figure><p>通过下面例子，说一下配置方法。大家下去可以参考上面 看需要试试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">将下面  值  写成<span class="literal">false</span></span><br><span class="line">@HystrixCommand(fallbackMethod = <span class="string">"sendFail"</span>,ignoreExceptions = &#123;HystrixIgnoreException.class&#125;,</span><br><span class="line">commandProperties = &#123;</span><br><span class="line">@HystrixProperty(name = <span class="string">"fallback.enabled"</span>,value = <span class="string">"false"</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">则请求，如果熔断，报500，</span><br><span class="line"></span><br><span class="line">改成<span class="literal">true</span>，则走熔断逻辑。</span><br><span class="line"></span><br><span class="line">测试点：</span><br><span class="line">1.默认熔断走降级逻辑。</span><br><span class="line">2.false后，报500.</span><br><span class="line">3.改成<span class="literal">true</span>后，走降级逻辑。</span><br></pre></td></tr></table></figure><h3 id="和feign结合"><a href="#和feign结合" class="headerlink" title="和feign结合"></a>和feign结合</h3><p>api-passenger</p><p>上面的pom一样。</p><p>feign自带Hystrix，但是默认没有打开，首先打开Hystrix。(从Spring Cloud Dalston开始，feign的Hystrix 默认关闭，如果要用feign，必须开启)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注解添加feignclient</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name = <span class="string">"service-sms"</span>,fallback = SmsClientFallback.class)</span><br></pre></td></tr></table></figure><p>类，实现feignClient接口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.online.taxi.common.dto.ResponseResult;</span><br><span class="line">import com.online.taxi.common.dto.sms.SmsSendRequest;</span><br><span class="line">import com.online.taxi.passenger.service.SmsClient;</span><br><span class="line">/**</span><br><span class="line"> * @author yueyi2019</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SmsClientFallback implements SmsClient &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ResponseResult sendSms(SmsSendRequest smsSendRequest) &#123;</span><br><span class="line">System.out.println(<span class="string">"不好意思，我熔断了"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> ResponseResult.fail(-3, <span class="string">"feign熔断"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure><p>正常调用：启动eureka-7900，service-sms 8002，api-passenger。</p><p>测试点：</p><ol><li><p>访问sms是否正常。</p></li><li><p>访问yapi：api-passenger下：乘客获取验证码。是否正常。</p></li><li><p>停止service-sms。访问乘客获取验证码，是否走备用逻辑。</p></li><li><p>去掉yml中熔断改成false。  熔断是否生效。</p><p>feign:</p><p>  hystrix:</p><pre><code>enabled: false </code></pre></li></ol><h3 id="所有（restTemplate和feign）配置默认值"><a href="#所有（restTemplate和feign）配置默认值" class="headerlink" title="所有（restTemplate和feign）配置默认值"></a>所有（restTemplate和feign）配置默认值</h3><p>HystrixCommandProperties</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/* --------------统计相关------------------*/ </span><br><span class="line">// 统计滚动的时间窗口,默认:5000毫秒（取自circuitBreakerSleepWindowInMilliseconds）   </span><br><span class="line">private final HystrixProperty metricsRollingStatisticalWindowInMilliseconds;   </span><br><span class="line">// 统计窗口的Buckets的数量,默认:10个,每秒一个Buckets统计   </span><br><span class="line">private final HystrixProperty metricsRollingStatisticalWindowBuckets; // number of buckets <span class="keyword">in</span> the statisticalWindow   </span><br><span class="line">// 是否开启监控统计功能,默认:<span class="literal">true</span>   </span><br><span class="line">private final HystrixProperty metricsRollingPercentileEnabled;   </span><br><span class="line">/* --------------熔断器相关------------------*/ </span><br><span class="line">// 熔断器在整个统计时间内是否开启的阀值，默认20。也就是在metricsRollingStatisticalWindowInMilliseconds（默认10s）内至少请求20次，熔断器才发挥起作用   </span><br><span class="line">private final HystrixProperty circuitBreakerRequestVolumeThreshold;   </span><br><span class="line">// 熔断时间窗口，默认:5秒.熔断器中断请求5秒后会进入半打开状态,放下一个请求进来重试，如果该请求成功就关闭熔断器，否则继续等待一个熔断时间窗口</span><br><span class="line">private final HystrixProperty circuitBreakerSleepWindowInMilliseconds;   </span><br><span class="line">//是否启用熔断器,默认<span class="literal">true</span>. 启动   </span><br><span class="line">private final HystrixProperty circuitBreakerEnabled;   </span><br><span class="line">//默认:50%。当出错率超过50%后熔断器启动</span><br><span class="line">private final HystrixProperty circuitBreakerErrorThresholdPercentage;  </span><br><span class="line">//是否强制开启熔断器阻断所有请求,默认:<span class="literal">false</span>,不开启。置为<span class="literal">true</span>时，所有请求都将被拒绝，直接到fallback </span><br><span class="line">private final HystrixProperty circuitBreakerForceOpen;   </span><br><span class="line">//是否允许熔断器忽略错误,默认<span class="literal">false</span>, 不开启   </span><br><span class="line">private final HystrixProperty circuitBreakerForceClosed; </span><br><span class="line">/* --------------信号量相关------------------*/ </span><br><span class="line">//使用信号量隔离时，命令调用最大的并发数,默认:10   </span><br><span class="line">private final HystrixProperty executionIsolationSemaphoreMaxConcurrentRequests;   </span><br><span class="line">//使用信号量隔离时，命令fallback(降级)调用最大的并发数,默认:10   </span><br><span class="line">private final HystrixProperty fallbackIsolationSemaphoreMaxConcurrentRequests; </span><br><span class="line">/* --------------其他------------------*/ </span><br><span class="line">//使用命令调用隔离方式,默认:采用线程隔离,ExecutionIsolationStrategy.THREAD   </span><br><span class="line">private final HystrixProperty executionIsolationStrategy;   </span><br><span class="line">//使用线程隔离时，调用超时时间，默认:1秒   </span><br><span class="line">private final HystrixProperty executionIsolationThreadTimeoutInMilliseconds;   </span><br><span class="line">//线程池的key,用于决定命令在哪个线程池执行   </span><br><span class="line">private final HystrixProperty executionIsolationThreadPoolKeyOverride;   </span><br><span class="line">//是否开启fallback降级策略 默认:<span class="literal">true</span>   </span><br><span class="line">private final HystrixProperty fallbackEnabled;   </span><br><span class="line">// 使用线程隔离时，是否对命令执行超时的线程调用中断（Thread.interrupt()）操作.默认:<span class="literal">true</span>   </span><br><span class="line">private final HystrixProperty executionIsolationThreadInterruptOnTimeout; </span><br><span class="line">// 是否开启请求日志,默认:<span class="literal">true</span>   </span><br><span class="line">private final HystrixProperty requestLogEnabled;   </span><br><span class="line">//是否开启请求缓存,默认:<span class="literal">true</span>   </span><br><span class="line">private final HystrixProperty requestCacheEnabled; // Whether request caching is enabled.</span><br></pre></td></tr></table></figure><p>HystrixThreadPoolProperties</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 配置线程池大小,默认值10个 */ </span><br><span class="line">private final HystrixProperty corePoolSize; </span><br><span class="line">/* 配置线程值等待队列长度,默认值:-1 建议值:-1表示不等待直接拒绝,测试表明线程池使用直接决绝策略+ 合适大小的非回缩线程池效率最高.所以不建议修改此值。 当使用非回缩线程池时，queueSizeRejectionThreshold,keepAliveTimeMinutes 参数无效 */</span><br><span class="line">private final HystrixProperty maxQueueSize;</span><br></pre></td></tr></table></figure><h3 id="捕获熔断的异常信息"><a href="#捕获熔断的异常信息" class="headerlink" title="捕获熔断的异常信息"></a>捕获熔断的异常信息</h3><ol><li>restTemplate中：</li></ol><p>在备用方法中 api-driver</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ResponseResult sendFail(ShortMsgRequest shortMsgRequest,Throwable throwable) &#123;</span><br><span class="line">log.info(<span class="string">"异常信息："</span>+throwable);</span><br><span class="line">//备用逻辑</span><br><span class="line"><span class="built_in">return</span> ResponseResult.fail(-1, <span class="string">"熔断"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上一个Throwable，就Ok。</p><p>上面例子跑一便。停止服务提供者，测试结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-02-01 23:00:44.182  INFO [api-driver,f1100452d8b33b08,874b9cac5fe20385,<span class="literal">true</span>] 18088 --- [SmsController-1] c.o.t.driver.controller.SmsController    : 异常信息：java.lang.IllegalStateException: No instances available <span class="keyword">for</span> SERVICE-SMS</span><br></pre></td></tr></table></figure><p>不走异常，就走500方法。</p><ol start="2"><li>feign中：</li></ol><p>注解</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name = <span class="string">"service-sms"</span>,fallbackFactory = SmsClientFallbackFactory.class)</span><br></pre></td></tr></table></figure><p>factory类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.online.taxi.passenger.fallback;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import com.online.taxi.common.dto.ResponseResult;</span><br><span class="line">import com.online.taxi.common.dto.sms.SmsSendRequest;</span><br><span class="line">import com.online.taxi.passenger.feign.SmsClient;</span><br><span class="line"></span><br><span class="line">import feign.hystrix.FallbackFactory;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class SmsClientFallbackFactory implements FallbackFactory&lt;SmsClient&gt; &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public SmsClient create(Throwable cause) &#123;</span><br><span class="line"><span class="built_in">return</span> new <span class="function"><span class="title">SmsClient</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ResponseResult sendSms(SmsSendRequest smsSendRequest) &#123;</span><br><span class="line">System.out.println(<span class="string">"feign异常："</span>+cause);</span><br><span class="line"><span class="built_in">return</span> ResponseResult.fail(-3, <span class="string">"feign fallback factory熔断"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">参数和返回值一样。匿名内部类。</span><br></pre></td></tr></table></figure><p>测试点：</p><ol><li>启动eureka 7900，api-driver,是否走降级方法。</li></ol><hr><ol start="3"><li>忽略异常</li></ol><p>有些情况下，提供者是好的，但在消费者发生业务异常时，我们不希望走熔断的备用方法。则用以下两个办法。</p><ol><li>第一种方式：继承HystrixBadRequestException</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">自定义异常，继承HystrixBadRequestException，当发生此异常时，不走备用方法。</span><br><span class="line"></span><br><span class="line">public class BusinessException extends HystrixBadRequestException &#123;</span><br><span class="line"></span><br><span class="line">private String message;</span><br><span class="line"></span><br><span class="line">public BusinessException(String message) &#123;</span><br><span class="line">super(message);</span><br><span class="line">this.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在调用的地方前：</span><br><span class="line">// 下面是故意跑出异常代码</span><br><span class="line">try &#123;</span><br><span class="line">int i = 1/0;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">throw new BusinessException(<span class="string">"熔断忽略的异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二种方式：Hystrix属性配置。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">配置属性：</span><br><span class="line">@HystrixCommand(fallbackMethod = <span class="string">"sendFail"</span>,</span><br><span class="line">   ignoreExceptions = &#123;HystrixIgnoreException.class&#125;)</span><br><span class="line"></span><br><span class="line">自定义异常：</span><br><span class="line"></span><br><span class="line">public class HystrixIgnoreException extends RuntimeException &#123;</span><br><span class="line"></span><br><span class="line">private String message;</span><br><span class="line"></span><br><span class="line">public HystrixIgnoreException(String message) &#123;</span><br><span class="line">this.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">此异常也不走备用逻辑。</span><br></pre></td></tr></table></figure><h3 id="禁用feign客户端的hystrix"><a href="#禁用feign客户端的hystrix" class="headerlink" title="禁用feign客户端的hystrix"></a>禁用feign客户端的hystrix</h3><p>为@feignclient单独配置Feign.Builder</p><p>配置类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ExcudeFeignConfig</span><br><span class="line">public class FeignDisableHystrixConfiguration &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@Scope(<span class="string">"prototype"</span>)</span><br><span class="line">public Feign.Builder <span class="function"><span class="title">feignBuilder</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> Feign.builder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@FeignClient(name = <span class="string">"service-sms"</span>,configuration = FeignDisableHystrixConfiguration.class)</span><br></pre></td></tr></table></figure><p>测试点：</p><p>启动eureka，api-passenger。测试发送验证码，是否走熔断。没走是正确，报500.</p><p>hystrix command 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@HystrixCommand(fallbackMethod = <span class="string">"sendFail"</span>,ignoreExceptions = &#123;HystrixIgnoreException.class&#125;,</span><br><span class="line">commandProperties = &#123;</span><br><span class="line">@HystrixProperty(name = <span class="string">"fallback.enabled"</span>,value = <span class="string">"true"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>操作步骤：</p><ol><li>启动eureka7900，service-sms 8002，api-driver 9002，</li><li>正常访问 yapi-&gt;api-driver-&gt;司机获取验证码。正常。查看开关，UP。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9002/actuator/health</span><br><span class="line"></span><br><span class="line">hystrix: &#123;</span><br><span class="line">status: <span class="string">"UP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭 service-sms 8002。</li><li>打开jemeter，（检查jmeter设置，api-driver设置日志为info。）设置1秒访问25次(默认10秒 20次，才开始熔断计算)。错误，熔断。查看开关.</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9002/actuator/health</span><br><span class="line"></span><br><span class="line">hystrix: &#123;</span><br><span class="line">status: <span class="string">"CIRCUIT_OPEN"</span>,</span><br><span class="line">details: &#123;</span><br><span class="line">openCircuitBreakers: [</span><br><span class="line"><span class="string">"RestTemplateRequestServiceImpl::smsSend"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>恢复UP。启动service-sms 8002,成功请求一次yapi中 司机发送验证码。查看开关。又变成了UP。</li></ol><p>熔断计算：先10秒20次，再算错误次数超过阈值 50%。</p><p>小结：</p><ol><li>注意上面发生的异常信息：有下面不同的2种。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">异常信息：java.lang.IllegalStateException: No instances available <span class="keyword">for</span> service-sms</span><br><span class="line"></span><br><span class="line">异常信息：java.lang.RuntimeException: Hystrix circuit short-circuited and is OPEN</span><br></pre></td></tr></table></figure><ol start="2"><li><p>上节课开关不生效.</p><p>原因：我最后讲 熔断忽略的异常时，走了忽略的异常，不走熔断。所以开关没打开。</p><p>此次熔断触发的条件：1、走熔断处理，2、依赖服务停止。</p><p>熔断恢复：1、底层服务启动，2、成功请求一次。</p></li></ol><p>课下问题:</p><ol><li>两个eureka，彼此注册，为什么 连个eureka里面都有 彼此。1向2注册，2将1信息同步给1,2向1注册。</li><li>eureka server中的url和eureka client 中的url没关系。没必要一致。</li></ol><h3 id="断路器开关演示"><a href="#断路器开关演示" class="headerlink" title="断路器开关演示"></a>断路器开关演示</h3><p>在项目中引入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>访问健康地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9002/actuator/health</span><br><span class="line">最开始：</span><br><span class="line">hystrix: &#123;</span><br><span class="line">status: <span class="string">"UP"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HystrixCommandProperties   default_circuitBreakerRequestVolumeThreshold（在hyxtrix的properties中设置）</span><br><span class="line">10秒内，20次失败（20 requests <span class="keyword">in</span> 10 seconds），则断路器打开。</span><br><span class="line">hystrix: &#123;</span><br><span class="line">status: <span class="string">"CIRCUIT_OPEN"</span>,</span><br><span class="line">details: &#123;</span><br><span class="line">openCircuitBreakers: [</span><br><span class="line"><span class="string">"SmsController::verifyCodeSend"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的配置，主要是10秒20次，失败率超过 50%。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Execution相关的属性的配置：</span><br><span class="line">hystrix.command.default.execution.isolation.strategy 隔离策略，默认是Thread, 可选Thread｜Semaphore</span><br><span class="line">thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</span><br><span class="line">semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求</span><br><span class="line">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds 命令执行超时时间，默认1000ms</span><br><span class="line">hystrix.command.default.execution.timeout.enabled 执行是否启用超时，默认启用<span class="literal">true</span></span><br><span class="line">hystrix.command.default.execution.isolation.thread.interruptOnTimeout 发生超时是是否中断，默认<span class="literal">true</span></span><br><span class="line">hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。</span><br><span class="line">semaphore应该占整个容器（tomcat）的线程池的一小部分。</span><br><span class="line"></span><br><span class="line">Fallback相关的属性</span><br><span class="line">这些参数可以应用于Hystrix的THREAD和SEMAPHORE策略</span><br><span class="line">hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests 如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。默认10</span><br><span class="line">hystrix.command.default.fallback.enabled 当执行失败或者请求被拒绝，是否会尝试调用hystrixCommand.getFallback() 。默认<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Circuit Breaker相关的属性</span><br><span class="line">hystrix.command.default.circuitBreaker.enabled 用来跟踪circuit的健康性，如果未达标则让request短路。默认<span class="literal">true</span></span><br><span class="line">hystrix.command.default.circuitBreaker.requestVolumeThreshold 一个rolling window内最小的请求数。如果设为20，那么当一个rolling window的时间内（比如说1个rolling window是10秒）收到19个请求，即使19个请求都失败，也不会触发circuit <span class="built_in">break</span>。默认20</span><br><span class="line">hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds 触发短路的时间值，当该值设为5000时，则当触发circuit <span class="built_in">break</span>后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit。默认5000</span><br><span class="line">hystrix.command.default.circuitBreaker.errorThresholdPercentage错误比率阀值，如果错误率&gt;=该值，circuit会被打开，并短路所有请求触发fallback。默认50，即为50%。</span><br><span class="line">hystrix.command.default.circuitBreaker.forceOpen 强制打开熔断器，如果打开这个开关，那么拒绝所有request，默认<span class="literal">false</span></span><br><span class="line">hystrix.command.default.circuitBreaker.forceClosed 强制关闭熔断器 如果这个开关打开，circuit将一直关闭且忽略circuitBreaker.errorThresholdPercentage</span><br><span class="line"></span><br><span class="line">Metrics相关参数</span><br><span class="line">hystrix.command.default.metrics.rollingStats.timeInMilliseconds 设置统计的时间窗口值的，毫秒值，circuit <span class="built_in">break</span> 的打开会根据1个rolling window的统计来计算。若rolling window被设为10000毫秒，则rolling window会被分成n个buckets，每个bucket包含success，failure，timeout，rejection的次数的统计信息。默认10000</span><br><span class="line">hystrix.command.default.metrics.rollingStats.numBuckets 设置一个rolling window被划分的数量，若numBuckets＝10，rolling window＝10000，那么一个bucket的时间即1秒。必须符合rolling window % numberBuckets == 0。默认10</span><br><span class="line">hystrix.command.default.metrics.rollingPercentile.enabled 执行时是否<span class="built_in">enable</span>指标的计算和跟踪，默认<span class="literal">true</span></span><br><span class="line">hystrix.command.default.metrics.rollingPercentile.timeInMilliseconds 设置rolling percentile window的时间，默认60000</span><br><span class="line">hystrix.command.default.metrics.rollingPercentile.numBuckets 设置rolling percentile window的numberBuckets。逻辑同上。默认6</span><br><span class="line">hystrix.command.default.metrics.rollingPercentile.bucketSize 如果bucket size＝100，window＝10s，若这10s里有500次执行，只有最后100次执行会被统计到bucket里去。增加该值会增加内存开销以及排序的开销。默认100</span><br><span class="line">hystrix.command.default.metrics.healthSnapshot.intervalInMilliseconds 记录health 快照（用来统计成功和错误绿）的间隔，默认500ms</span><br></pre></td></tr></table></figure><h3 id="熔断强制配置"><a href="#熔断强制配置" class="headerlink" title="熔断强制配置"></a>熔断强制配置</h3><p>此处配置强制走熔断方法。。</p><p>api-driver中RestTemplateRequestServiceImpl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">@HystrixCommand(fallbackMethod = <span class="string">"sendFail"</span>,ignoreExceptions = &#123;HystrixIgnoreException.class&#125;,</span><br><span class="line">commandProperties = &#123;</span><br><span class="line">@HystrixProperty(name = <span class="string">"fallback.enabled"</span>,value = <span class="string">"true"</span>),</span><br><span class="line">@HystrixProperty(name = <span class="string">"circuitBreaker.forceOpen"</span>,value = <span class="string">"true"</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">演示一下。</span><br></pre></td></tr></table></figure><p>测试点：启动eureka，service-sms，api-driver</p><ol><li><p>访问直接熔断。</p></li><li><p>将circuitBreaker.forceOpen改成false，正常返回，（默认为false）</p></li><li><p>观察异常信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异常信息：java.lang.RuntimeException: Hystrix circuit short-circuited and is OPEN</span><br></pre></td></tr></table></figure></li></ol><h3 id="开关例子"><a href="#开关例子" class="headerlink" title="开关例子"></a>开关例子</h3><p>HelloWorldHystrixCommand2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">调用次数:1   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:2   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:3   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:4   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:5   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:6   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:7   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:8   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:9   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:10   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:11   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:12   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:13   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:14   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:15   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:16   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:17   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:18   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:19   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:20   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:21   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:22   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:23   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:24   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:25   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:26   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:27   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:28   结果:正常调用 Hello testCircuitBreaker 开关是否打开: <span class="literal">false</span></span><br><span class="line">调用次数:29   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br><span class="line">调用次数:30   结果:熔断：fallback,name:testCircuitBreaker 开关是否打开: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>细看日志从里面找规律</p><ol><li>第10次，熔断开关才打开。之前的 异常 虽然也报错，但是开关没开。（10秒，9次）默认：10秒，20次。</li><li>后面有10-19次，总计5秒钟，因为我们设置程序 500毫秒执行。开关一直打开，都走的熔断。（开关打开）</li><li>第20次，距离第一次熔断过去了 5秒钟。断路器尝试放开一部分请求过去，正常了就关闭开关。（如果正常，开关关闭，否则，不关闭）</li><li>第29次，开关又打开。又到了下一个周期。</li></ol><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>在服务消费端 api-driver，配置actuator,jar</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过event-stream暴露出来的。hystrix的jar包已经包含了下面这个jar包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">没必要配。</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.netflix.hystrix&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hystrix-metrics-event-stream&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="variable">$&#123;hystrix.version&#125;</span>&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>启动 eureka 7900，api-driver 9002，service-sms 8002。</p><p>地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">api-driver</span><br><span class="line">http://localhost:9002/actuator/hystrix.stream</span><br><span class="line"></span><br><span class="line">访问，会看到页面一直在ping。</span><br><span class="line"></span><br><span class="line">ping: </span><br><span class="line"></span><br><span class="line">data: &#123;<span class="string">"type"</span>:<span class="string">"HystrixCommand"</span>,<span class="string">"name"</span>:<span class="string">"SmsClient#sendSms(SmsSendRequest)"</span>,<span class="string">"group"</span>:<span class="string">"service-sms"</span>,<span class="string">"currentTime"</span>:1581931881830,<span class="string">"isCircuitBreakerOpen"</span>:<span class="literal">false</span>,<span class="string">"errorPercentage"</span>:0,<span class="string">"errorCount"</span>:0,<span class="string">"requestCount"</span>:1,<span class="string">"rollingCountBadRequests"</span>:0,<span class="string">"rollingCountCollapsedRequests"</span>:0,<span class="string">"rollingCountEmit"</span>:0,<span class="string">"rollingCountExceptionsThrown"</span>:0,<span class="string">"rollingCountFailure"</span>:0,<span class="string">"rollingCountFallbackEmit"</span>:0,<span class="string">"rollingCountFallbackFailure"</span>:0,<span class="string">"rollingCountFallbackMissing"</span>:0,<span class="string">"rollingCountFallbackRejection"</span>:0,<span class="string">"rollingCountFallbackSuccess"</span>:0,<span class="string">"rollingCountResponsesFromCache"</span>:0,<span class="string">"rollingCountSemaphoreRejected"</span>:0,<span class="string">"rollingCountShortCircuited"</span>:0,<span class="string">"rollingCountSuccess"</span>:0,<span class="string">"rollingCountThreadPoolRejected"</span>:0,<span class="string">"rollingCountTimeout"</span>:0,<span class="string">"currentConcurrentExecutionCount"</span>:0,<span class="string">"rollingMaxConcurrentExecutionCount"</span>:0,<span class="string">"latencyExecute_mean"</span>:0,<span class="string">"latencyExecute"</span>:&#123;<span class="string">"0"</span>:0,<span class="string">"25"</span>:0,<span class="string">"50"</span>:0,<span class="string">"75"</span>:0,<span class="string">"90"</span>:0,<span class="string">"95"</span>:0,<span class="string">"99"</span>:0,<span class="string">"99.5"</span>:0,<span class="string">"100"</span>:0&#125;,<span class="string">"latencyTotal_mean"</span>:0,<span class="string">"latencyTotal"</span>:&#123;<span class="string">"0"</span>:0,<span class="string">"25"</span>:0,<span class="string">"50"</span>:0,<span class="string">"75"</span>:0,<span class="string">"90"</span>:0,<span class="string">"95"</span>:0,<span class="string">"99"</span>:0,<span class="string">"99.5"</span>:0,<span class="string">"100"</span>:0&#125;,<span class="string">"propertyValue_circuitBreakerRequestVolumeThreshold"</span>:20,<span class="string">"propertyValue_circuitBreakerSleepWindowInMilliseconds"</span>:5000,<span class="string">"propertyValue_circuitBreakerErrorThresholdPercentage"</span>:50,<span class="string">"propertyValue_circuitBreakerForceOpen"</span>:<span class="literal">false</span>,<span class="string">"propertyValue_circuitBreakerForceClosed"</span>:<span class="literal">false</span>,<span class="string">"propertyValue_circuitBreakerEnabled"</span>:<span class="literal">true</span>,<span class="string">"propertyValue_executionIsolationStrategy"</span>:<span class="string">"THREAD"</span>,<span class="string">"propertyValue_executionIsolationThreadTimeoutInMilliseconds"</span>:1000,<span class="string">"propertyValue_executionTimeoutInMilliseconds"</span>:1000,<span class="string">"propertyValue_executionIsolationThreadInterruptOnTimeout"</span>:<span class="literal">true</span>,<span class="string">"propertyValue_executionIsolationThreadPoolKeyOverride"</span>:null,<span class="string">"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests"</span>:10,<span class="string">"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests"</span>:10,<span class="string">"propertyValue_metricsRollingStatisticalWindowInMilliseconds"</span>:10000,<span class="string">"propertyValue_requestCacheEnabled"</span>:<span class="literal">true</span>,<span class="string">"propertyValue_requestLogEnabled"</span>:<span class="literal">true</span>,<span class="string">"reportingHosts"</span>:1,<span class="string">"threadPool"</span>:<span class="string">"service-sms"</span>&#125;</span><br><span class="line"></span><br><span class="line">data: &#123;<span class="string">"type"</span>:<span class="string">"HystrixThreadPool"</span>,<span class="string">"name"</span>:<span class="string">"service-sms"</span>,<span class="string">"currentTime"</span>:1581931881830,<span class="string">"currentActiveCount"</span>:0,<span class="string">"currentCompletedTaskCount"</span>:1,<span class="string">"currentCorePoolSize"</span>:10,<span class="string">"currentLargestPoolSize"</span>:1,<span class="string">"currentMaximumPoolSize"</span>:10,<span class="string">"currentPoolSize"</span>:1,<span class="string">"currentQueueSize"</span>:0,<span class="string">"currentTaskCount"</span>:1,<span class="string">"rollingCountThreadsExecuted"</span>:0,<span class="string">"rollingMaxActiveThreads"</span>:0,<span class="string">"rollingCountCommandRejections"</span>:0,<span class="string">"propertyValue_queueSizeRejectionThreshold"</span>:5,<span class="string">"propertyValue_metricsRollingStatisticalWindowInMilliseconds"</span>:10000,<span class="string">"reportingHosts"</span>:1&#125;</span><br></pre></td></tr></table></figure><p>测试点：</p><p>重新 启动eureka7900，service-sms,api-driver</p><p>api-driver方。（此时注意，如果熔断了，查看forceOpen）</p><ol><li>访问<a href="http://localhost:9002/actuator/hystrix.stream。" target="_blank" rel="noopener">http://localhost:9002/actuator/hystrix.stream。</a></li><li>不发起任何请求，观察页面。一直ping。</li><li>发起正常请求（发送验证码），观察页面。ping回来data。查看data。</li><li>关闭service-sms，访问（jemeter）。查看data。在页面中搜索：”isCircuitBreakerOpen”:true</li></ol><p>feign和ribbon在这个点上是一样的操作。</p><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>上面的操作有点原始，刀耕火种。下面可视化。</p><p>项目：hystrix-dashboard</p><p>pom</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableHystrixDashboard</span><br></pre></td></tr></table></figure><p>使用 重新启动eureka7900，service-sms,api-driver</p><p>访问：<a href="http://localhost:6101/hystrix" target="_blank" rel="noopener">http://localhost:6101/hystrix</a></p><p>输入：上面的地址：<a href="http://localhost:9002/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:9002/actuator/hystrix.stream</a></p><p>停止 service-sms 8002 只留 eureka 7900和api-driver 9002</p><p>再发一次25次 jmeter。</p><p>查看面板，注意面板变化。</p><p>面板说明：</p><p>github：<a href="https://github.com/Netflix-Skunkworks/hystrix-dashboard" target="_blank" rel="noopener">https://github.com/Netflix-Skunkworks/hystrix-dashboard</a></p><p>解释：<a href="https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki" target="_blank" rel="noopener">https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki</a></p><blockquote><p>《熔断》</p></blockquote><p>无需纠结它只能监控10秒的信息，因为如果出问题，会一直报问题。</p><h3 id="集中可视化"><a href="#集中可视化" class="headerlink" title="集中可视化"></a>集中可视化</h3><p>上面的方法只能监控一个服务。实际生产中不方便。</p><blockquote><p>《Turbine原理》<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/Turbine%E5%8E%9F%E7%90%86.png" alt="Turbine原理"></p></blockquote><p>下面接着改造。</p><p>创建study-hystrix-turbine</p><p>pom</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-turbine&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- eureka客户端 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">turbine:</span><br><span class="line">  app-config: api-driver,api-passenger</span><br><span class="line">  cluster-name-expression: <span class="string">"'default'"</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableTurbine</span><br></pre></td></tr></table></figure><p>地址：<a href="http://localhost:6102/turbine.stream,也是一直ping，相当于原来的hystrix.stream,不过此处是综合了所有的项目。" target="_blank" rel="noopener">http://localhost:6102/turbine.stream,也是一直ping，相当于原来的hystrix.stream,不过此处是综合了所有的项目。</a></p><p>启动hystrix-dashboard。</p><p>访问：<a href="http://localhost:6101/hystrix" target="_blank" rel="noopener">http://localhost:6101/hystrix</a></p><p>填上上面的地址：<a href="http://localhost:6102/turbine.stream" target="_blank" rel="noopener">http://localhost:6102/turbine.stream</a></p><p>此时注意测试api-driver,api-passenger两个服务。在《熔断中有效果》</p><p>停一下service-sms，看界面。</p><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3 原理"></a>3 原理</h2><p>了解前面一些概念：舱壁模式，命令模式（下面），雪崩，容错，断路器，降级。</p><p>熔断降级：北京去武汉招大学生的例子。</p><p>资源隔离：类似于高铁高架桥，并不是一个整体，而是一块一块的拼装的，一段路坏了，不会影响整条路。</p><h3 id="隔离策略"><a href="#隔离策略" class="headerlink" title="隔离策略"></a>隔离策略</h3><p>概念中的舱壁模式。想一下货船上，每个货仓中间的隔离。两个好处：</p><ol><li>服务提供者高延迟或异常，不会影响到整个系统的失败。</li><li>能够控制每个调用者的并发度。因为有独立的线程池。</li></ol><p>两种线程隔离策略：线程池（默认）、信号量。</p><blockquote><p>《Hystrix隔离策略》<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/Hystrix%E9%9A%94%E7%A6%BB%E7%AD%96%E7%95%A5.png" alt="Hystrix隔离策略"></p></blockquote><p>@HystrixCommand注释修饰一个服务时，HystrixCommand的运行逻辑有可能是在该请求的主线程上一并执行，也有可能是单独起一个线程来执行，这取决于我们如何设置Hystrix线程的隔离策略。<br>execution.isolation.strategy属性就是用来设置HystrixCommand.run()执行的隔离策略的。（回忆上面讲过的配置，设置线程策略的）</p><p>两种隔离策略：线程隔离和信号量隔离，即“THREAD”和“SEMAPHORE”，系统默认为“THREAD”。<br>它们的含义是：</p><p>THREAD(线程隔离）：使用该方式，HystrixCommand将会在单独的线程上执行，并发请求受线程池中线程数量的限制。不同服务通过使用不同线程池，彼此间将不受影响，达到隔离效果。</p><p>此种隔离方式：将调用服务线程与服务访问的执行线程分割开来，调用线程能够空出来去做其他工作，而不至于因为服务调用的执行，阻塞过长时间。</p><p>hystrix将使用独立的线程池对应每一个服务提供者，用于隔离和限制这些服务。于是某个服务提供者的高延迟或者资源受限只会发生在该服务提供者对应的线程池中。</p><p>SEMAPHORE（信号量隔离）：其实就是个计数器，使用该方式，HystrixCommand将会在调用线程上执行，通过信号量限制单个服务提供者的并发量，开销相对较小（因为不用那么多线程池），并发请求受到信号量个数的限制。 线程隔离会带来线程开销，有些场景（比如无网络请求场景）可能会因为用开销换隔离得不偿失，为此hystrix提供了信号量隔离，当服务的并发数大于信号量阈值时将进入fallback。</p><p>Hystrix中默认并且推荐使用线程隔离（THREAD)，<br>一般来说，只有当调用负载异常高时（例如每个实例每秒调用数百次）才需要信号量隔离，因为这种场景下使用THREAD开销会比较高。信号量隔离一般仅适用于非网络调用的隔离。 </p><p>正常情况下，默认为线程隔离, 保持默认即可。</p><p>取舍：</p><p>线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。线程池模式下，当超过指定时间未响应的服务，Hystrix会通过响应中断的方式通知线程立即结束并返回。</p><h3 id="Hystrix实现思路"><a href="#Hystrix实现思路" class="headerlink" title="Hystrix实现思路"></a>Hystrix实现思路</h3><ol><li><p>请求过来时，将请求的远程调用逻辑，封装到HystrixCommand或者HystrixObservableCommand对象（并在构造方法配置请求被执行需要的参数）中，这些远程调用将会在独立的线程中执行。（资源隔离、命令模式）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">https://www.runoob.com/design-pattern/<span class="built_in">command</span>-pattern.html</span><br><span class="line">介绍</span><br><span class="line">意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</span><br><span class="line"></span><br><span class="line">主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</span><br><span class="line"></span><br><span class="line">何时使用：在某些场合，比如要对行为进行<span class="string">"记录、撤销/重做、事务"</span>等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将<span class="string">"行为请求者"</span>与<span class="string">"行为实现者"</span>解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</span><br><span class="line"></span><br><span class="line">如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</span><br><span class="line"></span><br><span class="line">关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</span><br><span class="line"></span><br><span class="line">应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</span><br><span class="line"></span><br><span class="line">优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</span><br><span class="line"></span><br><span class="line">缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</span><br><span class="line"></span><br><span class="line">使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</span><br><span class="line"></span><br><span class="line">注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Hystrix对访问耗时超过设置阈值的请求采用自动超时的策略。该策略对所有的命令都有效。（如果是信号量隔离方式，则此特性失效），超时的阈值可以通过命令配置进行自定义。</p></li><li><p>为每个服务提供者维护一个线程池（信号量），当线程池（信号量）被占满时，对于该服务提供者的请求将会被直接拒绝（快速失败，走回滚）而不是排队等待，减少系统等待资源。</p></li><li><p>针对请求服务提供者划分出成功、失效、超时和线程池被占满等情况。</p></li><li><p>断路器将在请求服务提供者失败次数超过一定阈值后手动或自动切断服务一段时间。</p></li><li><p>当请求服务提供者出现服务拒绝、超时和 短路（多个服务提供者依次顺序请求，前面的服务提供者请求失败，后面的请求将不再发出）等情况，执行器fallback方法，服务降级。</p></li><li><p>提供近乎实时的监控和配置变更服务。</p></li></ol><h3 id="hystrix实现流程"><a href="#hystrix实现流程" class="headerlink" title="hystrix实现流程"></a>hystrix实现流程</h3><ol><li><p>构建HystrixCommand或者HystrixObservableCommand对象，用于封装请求，并在构造方法配置请求被执行需要的参数。</p></li><li><p>执行命令，Hystrix提供了4种执行命令的方法。</p></li><li><p>检查是否有相同命令执行的缓存，若启用了缓存，且缓存可用，直接使用缓存响应请求。Hystrix支持请求缓存，但需要用户自定义启动。</p></li><li><p>检查断路器是否打开，如果打开走 第8步。</p></li><li><p>检查线程池或者信号量是否被消耗完，如果已满，走第8步。</p></li><li><p>调用HystrixCommand的run 或者 HystrixObservableCommand的construct 执行被封装的调用逻辑，如果执行失败或超时，走第8步。</p></li><li><p>计算链路的健康情况</p></li><li><p>在命令执行失败时获取fallback逻辑。</p></li><li><p>返回响应。</p><blockquote><p>《断路器整体流程》<img src="/2020/08/03/Hystrix%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/%E6%96%AD%E8%B7%AF%E5%99%A8%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.png" alt="断路器整体流程"></p></blockquote></li></ol><h2 id="4-源码"><a href="#4-源码" class="headerlink" title="4 源码"></a>4 源码</h2><p>debug时，注意上面类名的变化。</p><h3 id="包裹请求"><a href="#包裹请求" class="headerlink" title="包裹请求"></a>包裹请求</h3><p>@HystrixCommand，用此注解来包装需要保护的远程调用方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">public @interface HystrixCommand &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The <span class="built_in">command</span> group key is used <span class="keyword">for</span> grouping together commands such as <span class="keyword">for</span> reporting,</span><br><span class="line">     * alerting, dashboards or team/library ownership.</span><br><span class="line">     * &lt;p/&gt;</span><br><span class="line">     * default =&gt; the runtime class name of annotated method</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> group key</span><br><span class="line">     */</span><br><span class="line">     命令分组键：被此注解修饰的命令被归为一组，默认组名：类名。用于报告，预警，面板展示</span><br><span class="line">    String groupKey() default <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Hystrix <span class="built_in">command</span> key.</span><br><span class="line">     * &lt;p/&gt;</span><br><span class="line">     * default =&gt; the name of annotated method. <span class="keyword">for</span> example:</span><br><span class="line">     * &lt;code&gt;</span><br><span class="line">     *     ...</span><br><span class="line">     *     @HystrixCommand</span><br><span class="line">     *     public User getUserById(...)</span><br><span class="line">     *     ...</span><br><span class="line">     *     the <span class="built_in">command</span> name will be: <span class="string">'getUserById'</span></span><br><span class="line">     * &lt;/code&gt;</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> <span class="built_in">command</span> key</span><br><span class="line">     */</span><br><span class="line">     命令键：默认为注解的方法名，用于区分不同的方法。</span><br><span class="line">    String commandKey() default <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The thread-pool key is used to represent a</span><br><span class="line">     * HystrixThreadPool <span class="keyword">for</span> monitoring, metrics publishing, caching and other such uses.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> thread pool key</span><br><span class="line">     */</span><br><span class="line">     线程池键，用来指定执行命令的 hystrixThreadPool</span><br><span class="line">    String threadPoolKey() default <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies a method to process fallback logic.</span><br><span class="line">     * A fallback method should be defined <span class="keyword">in</span> the same class <span class="built_in">where</span> is HystrixCommand.</span><br><span class="line">     * Also a fallback method should have same signature to a method <span class="built_in">which</span> was invoked as hystrix <span class="built_in">command</span>.</span><br><span class="line">     * <span class="keyword">for</span> example:</span><br><span class="line">     * &lt;code&gt;</span><br><span class="line">     *      @HystrixCommand(fallbackMethod = <span class="string">"getByIdFallback"</span>)</span><br><span class="line">     *      public String getById(String id) &#123;...&#125;</span><br><span class="line">     *</span><br><span class="line">     *      private String getByIdFallback(String id) &#123;...&#125;</span><br><span class="line">     * &lt;/code&gt;</span><br><span class="line">     * Also a fallback method can be annotated with &#123;@link HystrixCommand&#125;</span><br><span class="line">     * &lt;p/&gt;</span><br><span class="line">     * default =&gt; see &#123;@link com.netflix.hystrix.contrib.javanica.command.GenericCommand<span class="comment">#getFallback()&#125;</span></span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> method name</span><br><span class="line">     */</span><br><span class="line">     回调方法名</span><br><span class="line">    String fallbackMethod() default <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies <span class="built_in">command</span> properties.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> <span class="built_in">command</span> properties</span><br><span class="line">     */</span><br><span class="line">     自定义命令相关配置。我们前面讲过有例子</span><br><span class="line">    HystrixProperty[] commandProperties() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies thread pool properties.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> thread pool properties</span><br><span class="line">     */</span><br><span class="line">     自定义线程池相关配置，</span><br><span class="line">    HystrixProperty[] threadPoolProperties() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Defines exceptions <span class="built_in">which</span> should be ignored.</span><br><span class="line">     * Optionally these can be wrapped <span class="keyword">in</span> HystrixRuntimeException <span class="keyword">if</span> raiseHystrixExceptions contains RUNTIME_EXCEPTION.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> exceptions to ignore</span><br><span class="line">     */</span><br><span class="line">     自定义忽略的异常</span><br><span class="line">    Class&lt;? extends Throwable&gt;[] ignoreExceptions() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies the mode that should be used to execute hystrix observable <span class="built_in">command</span>.</span><br><span class="line">     * For more information see &#123;@link ObservableExecutionMode&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> observable execution mode</span><br><span class="line">     */</span><br><span class="line">    ObservableExecutionMode observableExecutionMode() default ObservableExecutionMode.EAGER;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * When includes RUNTIME_EXCEPTION, any exceptions that are not ignored are wrapped <span class="keyword">in</span> HystrixRuntimeException.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> exceptions to wrap</span><br><span class="line">     */</span><br><span class="line">    HystrixException[] raiseHystrixExceptions() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Specifies default fallback method <span class="keyword">for</span> the <span class="built_in">command</span>. If both &#123;@link <span class="comment">#fallbackMethod&#125; and &#123;@link #defaultFallback&#125;</span></span><br><span class="line">     * methods are specified <span class="keyword">then</span> specific one is used.</span><br><span class="line">     * note: default fallback method cannot have parameters, <span class="built_in">return</span> <span class="built_in">type</span> should be compatible with <span class="built_in">command</span> <span class="built_in">return</span> <span class="built_in">type</span>.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> the name of default fallback method</span><br><span class="line">     */</span><br><span class="line">    String defaultFallback() default <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置，我们大部分情况仅需要关注fallbackMethod，看注释中关于fallback方法的说明，如果需要对线程池和和命令有特殊要求，可进行额外配置，其实99%不需要配置。</p><p>HystrixCommandAspect切面</p><p>被注解@HystrixCommand修饰的方法，会被HystrixCommand包装执行，通过切面来实现。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.hystrix.contrib.javanica.aop.aspectj.HystrixCommandAspect</span><br><span class="line"></span><br><span class="line">定义切面</span><br><span class="line">@Around(<span class="string">"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()"</span>)</span><br><span class="line">    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">    </span><br><span class="line">主要地方：</span><br><span class="line">备注：</span><br><span class="line">（</span><br><span class="line">@Pointcut(<span class="string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)"</span>)</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">hystrixCommandAnnotationPointcut</span></span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> ）   </span><br><span class="line">    </span><br><span class="line">此方法主要：构建了MetaHolder（请求必要的信息）,在此方法第一行（Method method = getMethodFromTarget(joinPoint);）打断点。 </span><br><span class="line">鼠标放到joinPoint上面看内容：execution(ResponseResult com.online.taxi.driver.service.impl.RestTemplateRequestServiceImpl.smsSend(SmsSendRequest))</span><br><span class="line"></span><br><span class="line">鼠标放上去，查看metaHolder</span><br><span class="line">观察hystrixCommand。</span><br><span class="line"></span><br><span class="line">构建MetaHolder</span><br><span class="line">根据MetaHolder构建合适的HystrixCommand</span><br><span class="line">委托CommandExecutor执行HystrixCommand</span><br><span class="line">得到结果</span><br><span class="line"></span><br><span class="line">此方法中：</span><br><span class="line">Object result;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class="line">                result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = executeObservable(invokable, executionType, metaHolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (HystrixBadRequestException e) &#123;</span><br><span class="line">            throw e.getCause();</span><br><span class="line">        &#125; catch (HystrixRuntimeException e) &#123;</span><br><span class="line">            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);</span><br><span class="line">        &#125;</span><br><span class="line">此处判断是用HystrixCommand还是HystrixObservableCommand，执行HystrixCommand命令执行。</span><br><span class="line">HystrixCommand：同步，异步执行。</span><br><span class="line">HystrixObservableCommand: 异步回调执行（响应式）。</span><br></pre></td></tr></table></figure><p>MetaHolder 持有用于构建HystrixCommand和与被包装方法相关的必要信息，如被注解的方法，失败回滚执行的方法等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.hystrix.contrib.javanica.command.MetaHolder</span><br><span class="line"></span><br><span class="line">    private final HystrixCollapser hystrixCollapser;</span><br><span class="line">    private final HystrixCommand hystrixCommand;</span><br><span class="line">    private final DefaultProperties defaultProperties;</span><br><span class="line"></span><br><span class="line">    private final Method method;被注解的方法。</span><br><span class="line">    private final Method cacheKeyMethod;</span><br><span class="line">    private final Method ajcMethod;</span><br><span class="line">    private final Method fallbackMethod;失败回滚执行的方法。</span><br><span class="line">    private final Object obj;</span><br><span class="line">    private final Object proxyObj;</span><br><span class="line">    private final Object[] args;</span><br><span class="line">    private final Closure closure;</span><br><span class="line">    private final String defaultGroupKey;默认的group键</span><br><span class="line">    private final String defaultCommandKey;默认的命令键</span><br><span class="line">    private final String defaultCollapserKey;合并请求键</span><br><span class="line">    private final String defaultThreadPoolKey;线程池 键</span><br><span class="line">    private final ExecutionType executionType;执行类型</span><br><span class="line">    private final boolean extendedFallback;</span><br><span class="line">    private final ExecutionType collapserExecutionType;</span><br><span class="line">    private final ExecutionType fallbackExecutionType;</span><br><span class="line">    private final boolean fallback;</span><br><span class="line">    private boolean extendedParentFallback;</span><br><span class="line">    private final boolean defaultFallback;</span><br><span class="line">    private final JoinPoint joinPoint;</span><br><span class="line">    private final boolean observable;</span><br><span class="line">    private final ObservableExecutionMode observableExecutionMode;</span><br></pre></td></tr></table></figure><p>创建HystrixCommand方法如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory</span><br><span class="line"></span><br><span class="line">    public HystrixInvokable create(MetaHolder metaHolder) &#123;</span><br><span class="line">        HystrixInvokable executable;</span><br><span class="line">        <span class="keyword">if</span> (metaHolder.isCollapserAnnotationPresent()) &#123;</span><br><span class="line">            executable = new CommandCollapser(metaHolder);</span><br><span class="line">            根据metaHolder.isObservable()来判断，是生成HystrixCommand还是HystrixObservableCommand。</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (metaHolder.isObservable()) &#123;</span><br><span class="line">            executable = new GenericObservableCommand(HystrixCommandBuilderFactory.getInstance().create(metaHolder));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            executable = new GenericCommand(HystrixCommandBuilderFactory.getInstance().create(metaHolder));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> executable;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> 点击GenericObservableCommand（异步回调执行，也就是响应式）和GenericCommand（同步，异步执行）进去，查看父类发现HystrixObservableCommand和HystrixCommand。</span><br></pre></td></tr></table></figure><p>ExecutionType</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Used <span class="keyword">for</span> asynchronous execution of <span class="built_in">command</span>.</span><br><span class="line">     */</span><br><span class="line">    ASYNCHRONOUS,异步</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Used <span class="keyword">for</span> synchronous execution of <span class="built_in">command</span>.</span><br><span class="line">     */</span><br><span class="line">    SYNCHRONOUS,同步</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Reactive execution (asynchronous callback).</span><br><span class="line">     */</span><br><span class="line">    OBSERVABLE;异步回调</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Gets execution <span class="built_in">type</span> <span class="keyword">for</span> specified class <span class="built_in">type</span>.</span><br><span class="line">     * @param <span class="built_in">type</span> the <span class="built_in">type</span></span><br><span class="line">     * @<span class="built_in">return</span> the execution <span class="built_in">type</span> &#123;@link ExecutionType&#125;</span><br><span class="line">     */</span><br><span class="line">    public static ExecutionType getExecutionType(Class&lt;?&gt; <span class="built_in">type</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Future.class.isAssignableFrom(<span class="built_in">type</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> ExecutionType.ASYNCHRONOUS;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Observable.class.isAssignableFrom(<span class="built_in">type</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> ExecutionType.OBSERVABLE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> ExecutionType.SYNCHRONOUS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">根据被包装方法的返回值类型觉得命令执行的ExecutionType，从而（通过上面代码块中的一步）决定构建HystrixCommand   还是 HystrixObservableCommand。 </span><br><span class="line">方法的返回值为Future：异步执行，rx类型：异步回调，其他类型：同步执行。</span><br><span class="line"></span><br><span class="line">@HystrixCommand</span><br><span class="line">public Future&lt;T&gt; <span class="function"><span class="title">find</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure><p>debug到：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HystrixCommandAspect类中。</span><br><span class="line">create方法。</span><br><span class="line"></span><br><span class="line">HystrixCommand hystrixCommand = method.getAnnotation(HystrixCommand.class);</span><br><span class="line">            ExecutionType executionType = ExecutionType.getExecutionType(method.getReturnType());</span><br><span class="line">            </span><br><span class="line">可以看到命令是同步还是异步，又方法的返回值决定。</span><br></pre></td></tr></table></figure><p>命令模式在此的应用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixInvokable是被HystrixCommand标记的接口，继承了它的类，都是可以被执行的HystrixCommand。提供具体方法的为HystrixExecutable。</span><br></pre></td></tr></table></figure><p>主要的2个类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class HystrixCommand&lt;R&gt; extends AbstractCommand&lt;R&gt;</span><br><span class="line"></span><br><span class="line">public abstract class HystrixObservableCommand&lt;R&gt; extends AbstractCommand&lt;R&gt;</span><br></pre></td></tr></table></figure><p>queue和execute</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class HystrixCommand&lt;R&gt; extends AbstractCommand&lt;R&gt;的下面的方法，</span><br><span class="line"> public Future&lt;R&gt; <span class="function"><span class="title">queue</span></span>() &#123;</span><br><span class="line"> </span><br><span class="line"> 回想study-hystrix中queue的说明，异步执行。execute同步执行。</span><br></pre></td></tr></table></figure><h3 id="断路器-1"><a href="#断路器-1" class="headerlink" title="断路器"></a>断路器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">断路器核心接口：</span><br><span class="line">com.netflix.hystrix.HystrixCircuitBreaker</span><br><span class="line"></span><br><span class="line">一个Command key （也就是method）对应一个HystrixCircuitBreaker。</span><br><span class="line"></span><br><span class="line">public boolean allowRequest();//是否允许命令执行</span><br><span class="line"></span><br><span class="line">public boolean isOpen();//断路器是否打开（开关）</span><br><span class="line"></span><br><span class="line">void markSuccess();//在半开状态时，执行成功反馈。将半开转为关闭。</span><br><span class="line"></span><br><span class="line">void markNonSuccess();//在半开状态时，执行失败反馈。将半开转为打开。</span><br><span class="line"></span><br><span class="line">实现类：HystrixCircuitBreakerImpl</span><br><span class="line">@Override</span><br><span class="line">        public boolean <span class="function"><span class="title">allowRequest</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceOpen().get()) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceClosed().get()) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (circuitOpened.get() == -1) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (status.get().equals(Status.HALF_OPEN)) &#123;</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">return</span> isAfterSleepWindow();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">此处有强制打开，强制关闭，可以通过配置更改。</span><br><span class="line"></span><br><span class="line">上面有测试例子（断路器开关强制配置）。</span><br></pre></td></tr></table></figure><h3 id="统计命令"><a href="#统计命令" class="headerlink" title="统计命令"></a>统计命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.hystrix.HystrixMetrics</span><br><span class="line"></span><br><span class="line">HystrixCommandMetrics是上面的子类</span><br><span class="line">在断路器的isOpen等方法中，均有对HealthCount的数量的计算，来判断断路器状态：</span><br><span class="line">public boolean <span class="function"><span class="title">isOpen</span></span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">                // <span class="keyword">if</span> we<span class="string">'re open we immediately return true and don'</span>t bother attempting to <span class="string">'close'</span> ourself as that is left to allowSingleTest and a subsequent successful <span class="built_in">test</span> to close</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // we<span class="string">'re closed, so let'</span>s see <span class="keyword">if</span> errors have made us so we should trip the circuit open</span><br><span class="line">            HealthCounts health = metrics.getHealthCounts();</span><br><span class="line"></span><br><span class="line">            // check <span class="keyword">if</span> we are past the statisticalWindowVolumeThreshold</span><br><span class="line">            <span class="keyword">if</span> (health.getTotalRequests() &lt; properties.circuitBreakerRequestVolumeThreshold().get()) &#123;</span><br><span class="line">                // we are not past the minimum volume threshold <span class="keyword">for</span> the statisticalWindow so we<span class="string">'ll return false immediately and not calculate anything</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            if (health.getErrorPercentage() &lt; properties.circuitBreakerErrorThresholdPercentage().get()) &#123;</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125; else &#123;</span></span><br><span class="line"><span class="string">                // our failure rate is too high, trip the circuit</span></span><br><span class="line"><span class="string">                if (circuitOpen.compareAndSet(false, true)) &#123;</span></span><br><span class="line"><span class="string">                    // if the previousValue was false then we want to set the currentTime</span></span><br><span class="line"><span class="string">                    circuitOpenedOrLastTestedTime.set(System.currentTimeMillis());</span></span><br><span class="line"><span class="string">                    return true;</span></span><br><span class="line"><span class="string">                &#125; else &#123;</span></span><br><span class="line"><span class="string">                    // How could previousValue be true? If another thread was going through this code at the same time a race-condition could have</span></span><br><span class="line"><span class="string">                    // caused another thread to set it to true already even though we were in the process of doing the same</span></span><br><span class="line"><span class="string">                    // In this case, we know the circuit is open, so let the other thread set the currentTime and report back that the circuit is open</span></span><br><span class="line"><span class="string">                    return true;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">统计数据：</span></span><br><span class="line"><span class="string">public static class HealthCounts &#123;</span></span><br><span class="line"><span class="string">        private final long totalCount;执行总数</span></span><br><span class="line"><span class="string">        private final long errorCount;失败数</span></span><br><span class="line"><span class="string">        private final int errorPercentage;失败百分比</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用滑动窗口的方式统计，一个滑动窗口又划分为几个bucket（滑动窗口时间和bucket成整数倍关系），滑动窗口的移动，以bucket为单位，每个bucket仅统计该时间间隔内的请求数据。，最后将所有窗口中的bucket进行聚合。</span></span><br></pre></td></tr></table></figure><p>失败回滚</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractCommand的方法executeCommandAndObserve的局部变量：handleFallback（final Func1&lt;Throwable, Observable&lt;R&gt;&gt; handleFallback）</span><br><span class="line">如果失败，走失败逻辑。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制原理及配置</title>
      <link href="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h1><h3 id="0、为什么需要主从复制？"><a href="#0、为什么需要主从复制？" class="headerlink" title="0、为什么需要主从复制？"></a>0、为什么需要主从复制？</h3><p>1、在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样，即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运作。</p><p>2、做数据的热备</p><p>3、架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能。</p><h3 id="1、什么是MySQL的主从复制？"><a href="#1、什么是MySQL的主从复制？" class="headerlink" title="1、什么是MySQL的主从复制？"></a>1、什么是MySQL的主从复制？</h3><p>​        MySQL 主从复制是指数据可以从一个MySQL数据库服务器主节点复制到一个或多个从节点。MySQL 默认采用异步复制方式，这样从节点不用一直访问主服务器来更新自己的数据，数据的更新可以在远程连接上进行，从节点可以复制主数据库中的所有数据库或者特定的数据库，或者特定的表。</p><h3 id="2、MySQL复制原理"><a href="#2、MySQL复制原理" class="headerlink" title="2、MySQL复制原理"></a>2、MySQL复制原理</h3><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><p>​        （1）master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；        </p><p>​        （2）slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/OThread请求master二进制事件</p><p>​        （3）同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。</p><h5 id="也就是说："><a href="#也就是说：" class="headerlink" title="也就是说："></a>也就是说：</h5><ul><li>从库会生成两个线程,一个I/O线程,一个SQL线程;</li><li>I/O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li><li>主库会生成一个log dump线程,用来给从库I/O线程传binlog;</li><li>SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</li></ul><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>1–master将操作语句记录到binlog日志中，然后授予slave远程连接的权限（master一定要开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）。<br>2–slave开启两个线程：IO线程和SQL线程。其中：IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志里读出binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了。<br>3–Mysql复制至少需要两个Mysql的服务，当然Mysql服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。<br>4–Mysql复制最好确保master和slave服务器上的Mysql版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）<br>5–master和slave两节点间时间需同步</p><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/%E4%B8%BB%E4%BB%8E%E5%8E%9F%E7%90%86.png" alt></p><h5 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h5><p>1、从库通过手工执行change  master to 语句连接主库，提供了连接的用户一切条件（user 、password、port、ip），并且让从库知道，二进制日志的起点位置（file名 position 号）；    start  slave</p><p>2、从库的IO线程和主库的dump线程建立连接。</p><p>3、从库根据change  master  to 语句提供的file名和position号，IO线程向主库发起binlog的请求。</p><p>4、主库dump线程根据从库的请求，将本地binlog以events的方式发给从库IO线程。</p><p>5、从库IO线程接收binlog  events，并存放到本地relay-log中，传送过来的信息，会记录到master.info中</p><p>6、从库SQL线程应用relay-log，并且把应用过的记录到relay-log.info中，默认情况下，已经应用过的relay 会自动被清理purge</p><h3 id="3、MySQL主从形式"><a href="#3、MySQL主从形式" class="headerlink" title="3、MySQL主从形式"></a>3、MySQL主从形式</h3><h5 id="（一）一主一从"><a href="#（一）一主一从" class="headerlink" title="（一）一主一从"></a>（一）一主一从</h5><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570714549624.png" alt="1570714549624"></p><h5 id="（二）主主复制"><a href="#（二）主主复制" class="headerlink" title="（二）主主复制"></a>（二）主主复制</h5><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570714565647.png" alt="1570714565647"></p><h5 id="（三）一主多从"><a href="#（三）一主多从" class="headerlink" title="（三）一主多从"></a>（三）一主多从</h5><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570714576819.png" alt="1570714576819"></p><h5 id="（四）多主一从"><a href="#（四）多主一从" class="headerlink" title="（四）多主一从"></a>（四）多主一从</h5><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570714615915.png" alt="1570714615915"></p><h5 id="（五）联级复制"><a href="#（五）联级复制" class="headerlink" title="（五）联级复制"></a>（五）联级复制</h5><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570714660961-1594043182444.png" alt="1570714660961"></p><h3 id="4、MySQL主从同步延时分析"><a href="#4、MySQL主从同步延时分析" class="headerlink" title="4、MySQL主从同步延时分析"></a>4、MySQL主从同步延时分析</h3><p>​        mysql的主从复制都是单线程的操作，主库对所有DDL和DML产生的日志写进binlog，由于binlog是顺序写，所以效率很高，slave的sql thread线程将主库的DDL和DML操作事件在slave中重放。DML和DDL的IO操作是随机的，不是顺序，所以成本要高很多，另一方面，由于sql thread也是单线程的，当主库的并发较高时，产生的DML数量超过slave的SQL thread所能处理的速度，或者当slave中有大型query语句产生了锁等待，那么延时就产生了。</p><p>​        解决方案：</p><p>​        1.业务的持久化层的实现采用分库架构，mysql服务可平行扩展，分散压力。</p><p>​        2.单个库读写分离，一主多从，主写从读，分散压力。这样从库压力比主库高，保护主库。</p><p>​        3.服务的基础架构在业务和mysql之间加入memcache或者redis的cache层。降低mysql的读压力。</p><p>​        4.不同业务的mysql物理上放在不同机器，分散压力。</p><p>​        5.使用比主库更好的硬件设备作为slave，mysql压力小，延迟自然会变小。</p><p>​        6.使用更加强劲的硬件设备</p><h1 id="MySQL主从复制安装配置"><a href="#MySQL主从复制安装配置" class="headerlink" title="MySQL主从复制安装配置"></a>MySQL主从复制安装配置</h1><h3 id="1、基础设置准备"><a href="#1、基础设置准备" class="headerlink" title="1、基础设置准备"></a>1、基础设置准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">操作系统：</span></span><br><span class="line">centos6.5</span><br><span class="line"><span class="meta">#</span><span class="bash">mysql版本：</span></span><br><span class="line">5.7</span><br><span class="line"><span class="meta">#</span><span class="bash">两台虚拟机：</span></span><br><span class="line">node1:192.168.85.111（主）</span><br><span class="line">node2:192.168.85.112（从）</span><br></pre></td></tr></table></figure><h3 id="2、安装MySQL数据库"><a href="#2、安装MySQL数据库" class="headerlink" title="2、安装MySQL数据库"></a>2、安装MySQL数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">详细安装和卸载的步骤参考对应的文档</span></span><br></pre></td></tr></table></figure><h3 id="3、在两台数据库中分别创建数据库"><a href="#3、在两台数据库中分别创建数据库" class="headerlink" title="3、在两台数据库中分别创建数据库"></a>3、在两台数据库中分别创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--注意两台必须全部执行</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> msb;</span><br></pre></td></tr></table></figure><h3 id="4、在主（node1）服务器进行如下配置："><a href="#4、在主（node1）服务器进行如下配置：" class="headerlink" title="4、在主（node1）服务器进行如下配置："></a>4、在主（node1）服务器进行如下配置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置文件，执行以下命令打开mysql配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash">在mysqld模块中添加如下配置信息</span></span><br><span class="line">log-bin=master-bin #二进制文件名称</span><br><span class="line">binlog-format=ROW  #二进制日志格式，有row、statement、mixed三种格式，row指的是把改变的内容复制过去，而不是把命令在从服务器上执行一遍，statement指的是在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。mixed指的是默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</span><br><span class="line">server-id=1   #要求各个服务器的id必须不一样</span><br><span class="line">binlog-do-db=msb   #同步的数据库名称</span><br></pre></td></tr></table></figure><h3 id="5、配置从服务器登录主服务器的账号授权"><a href="#5、配置从服务器登录主服务器的账号授权" class="headerlink" title="5、配置从服务器登录主服务器的账号授权"></a>5、配置从服务器登录主服务器的账号授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--授权操作</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">--刷新权限</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h3 id="6、从服务器的配置"><a href="#6、从服务器的配置" class="headerlink" title="6、从服务器的配置"></a>6、从服务器的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置文件，执行以下命令打开mysql配置文件</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash">在mysqld模块中添加如下配置信息</span></span><br><span class="line">log-bin=master-bin#二进制文件的名称</span><br><span class="line">binlog-format=ROW#二进制文件的格式</span><br><span class="line">server-id=2#服务器的id</span><br></pre></td></tr></table></figure><h3 id="7、重启主服务器的mysqld服务"><a href="#7、重启主服务器的mysqld服务" class="headerlink" title="7、重启主服务器的mysqld服务"></a>7、重启主服务器的mysqld服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启mysql服务</span></span><br><span class="line">service mysqld restart</span><br><span class="line"><span class="meta">#</span><span class="bash">登录mysql数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash">查看master的状态</span></span><br><span class="line">show master status；</span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE/1570703264912.png" alt="1570703264912"></p><h3 id="8、重启从服务器并进行相关配置"><a href="#8、重启从服务器并进行相关配置" class="headerlink" title="8、重启从服务器并进行相关配置"></a>8、重启从服务器并进行相关配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启mysql服务</span></span><br><span class="line">service mysqld restart</span><br><span class="line"><span class="meta">#</span><span class="bash">登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash">连接主服务器</span></span><br><span class="line">change master to master_host='192.168.85.11',master_user='root',master_password='123456',master_port=3306,master_log_file='master-bin.000001',master_log_pos=154;</span><br><span class="line"><span class="meta">#</span><span class="bash">启动slave</span></span><br><span class="line">start slave</span><br><span class="line"><span class="meta">#</span><span class="bash">查看slave的状态</span></span><br><span class="line">show slave status\G(注意没有分号)</span><br></pre></td></tr></table></figure><h3 id="9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态"><a href="#9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态" class="headerlink" title="9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态"></a>9、此时可以在主服务器进行相关的数据添加删除工作，在从服务器看相关的状态</h3>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL练习题</title>
      <link href="/2020/08/03/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2020/08/03/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL练习题"><a href="#MySQL练习题" class="headerlink" title="MySQL练习题"></a>MySQL练习题</h2><h3 id="1、表结构"><a href="#1、表结构" class="headerlink" title="1、表结构"></a>1、表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">–1.学生表 </span><br><span class="line">Student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别 </span><br><span class="line">–2.课程表 </span><br><span class="line">Course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号 </span><br><span class="line">–3.教师表 </span><br><span class="line">Teacher(t_id,t_name) –教师编号,教师姓名 </span><br><span class="line">–4.成绩表 </span><br><span class="line">Score(s_id,c_id,s_score) –学生编号,课程编号,分数</span><br></pre></td></tr></table></figure><h3 id="2、测试数据"><a href="#2、测试数据" class="headerlink" title="2、测试数据"></a>2、测试数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--建表</span></span><br><span class="line"><span class="comment">--学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Student`</span>(</span><br><span class="line">    <span class="string">`s_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="string">`s_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    <span class="string">`s_birth`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    <span class="string">`s_sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`s_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--课程表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Course`</span>(</span><br><span class="line">    <span class="string">`c_id`</span>  <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="string">`c_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    <span class="string">`t_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`c_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--教师表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Teacher`</span>(</span><br><span class="line">    <span class="string">`t_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="string">`t_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`t_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--成绩表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Score`</span>(</span><br><span class="line">    <span class="string">`s_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="string">`c_id`</span>  <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="string">`s_score`</span> <span class="built_in">INT</span>(<span class="number">3</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">`s_id`</span>,<span class="string">`c_id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">--插入学生表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="string">'1990-01-01'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="string">'1990-12-21'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="string">'1990-05-20'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="string">'1990-08-06'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="string">'1991-12-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="string">'1992-03-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="string">'1989-07-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'08'</span> , <span class="string">'王菊'</span> , <span class="string">'1990-01-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="comment">--课程表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>);</span><br><span class="line"><span class="comment">--教师表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>);</span><br><span class="line"><span class="comment">--成绩表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure><h3 id="3、测试题"><a href="#3、测试题" class="headerlink" title="3、测试题"></a>3、测试题</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数  </span></span><br><span class="line"><span class="keyword">select</span> a.* ,b.s_score <span class="keyword">as</span> <span class="number">01</span>_score,c.s_score <span class="keyword">as</span> <span class="number">02</span>_score <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">and</span> b.c_id=<span class="string">'01'</span></span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> score c <span class="keyword">on</span> a.s_id=c.s_id <span class="keyword">and</span> c.c_id=<span class="string">'02'</span> <span class="keyword">or</span> c.c_id = <span class="literal">NULL</span> <span class="keyword">where</span> b.s_score&gt;c.s_score</span><br><span class="line"><span class="comment">-- 2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数 </span></span><br><span class="line"><span class="keyword">select</span> a.* ,b.s_score <span class="keyword">as</span> <span class="number">01</span>_score,c.s_score <span class="keyword">as</span> <span class="number">02</span>_score <span class="keyword">from</span> </span><br><span class="line">    student a <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">and</span> b.c_id=<span class="string">'01'</span> <span class="keyword">or</span> b.c_id=<span class="literal">NULL</span> </span><br><span class="line">     <span class="keyword">join</span> score c <span class="keyword">on</span> a.s_id=c.s_id <span class="keyword">and</span> c.c_id=<span class="string">'02'</span> <span class="keyword">where</span> b.s_score&lt;c.s_score</span><br><span class="line"><span class="comment">-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</span></span><br><span class="line"><span class="keyword">select</span> b.s_id,b.s_name,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">    student b </span><br><span class="line">    <span class="keyword">join</span> score a <span class="keyword">on</span> b.s_id = a.s_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> b.s_id,b.s_name <span class="keyword">HAVING</span> <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(a.s_score),<span class="number">2</span>)&gt;=<span class="number">60</span>; </span><br><span class="line"><span class="comment">-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</span></span><br><span class="line">        <span class="comment">-- (包括有成绩的和无成绩的) </span></span><br><span class="line"><span class="keyword">select</span> b.s_id,b.s_name,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">    student b </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> score a <span class="keyword">on</span> b.s_id = a.s_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> b.s_id,b.s_name <span class="keyword">HAVING</span> <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(a.s_score),<span class="number">2</span>)&lt;<span class="number">60</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,<span class="number">0</span> <span class="keyword">as</span> avg_score <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">where</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">                <span class="keyword">select</span> <span class="keyword">distinct</span> s_id <span class="keyword">from</span> score);</span><br><span class="line"><span class="comment">-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,<span class="keyword">count</span>(b.c_id) <span class="keyword">as</span> sum_course,<span class="keyword">sum</span>(b.s_score) <span class="keyword">as</span> sum_score <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id=b.s_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name;</span><br><span class="line"><span class="comment">-- 6、查询"李"姓老师的数量 </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(t_id) <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name <span class="keyword">like</span> <span class="string">'李%'</span>;</span><br><span class="line"><span class="comment">-- 7、查询学过"张三"老师授课的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">where</span> b.c_id <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id =(</span><br><span class="line">            <span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name = <span class="string">'张三'</span>));</span><br><span class="line"><span class="comment">-- 8、查询没学过"张三"老师授课的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">    student c </span><br><span class="line">    <span class="keyword">where</span> c.s_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> a.s_id <span class="keyword">from</span> student a <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">where</span> b.c_id <span class="keyword">in</span>(</span><br><span class="line">            <span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id =(</span><br><span class="line">                <span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name = <span class="string">'张三'</span>)));</span><br><span class="line"><span class="comment">-- 9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> </span><br><span class="line">    student a,score b,score c </span><br><span class="line">    <span class="keyword">where</span> a.s_id = b.s_id  <span class="keyword">and</span> a.s_id = c.s_id <span class="keyword">and</span> b.c_id=<span class="string">'01'</span> <span class="keyword">and</span> c.c_id=<span class="string">'02'</span>; </span><br><span class="line"><span class="comment">-- 10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息</span></span><br><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">where</span> a.s_id <span class="keyword">in</span> (<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id=<span class="string">'01'</span> ) <span class="keyword">and</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id=<span class="string">'02'</span>)</span><br><span class="line"><span class="comment">-- 11、查询没有学全所有课程的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> s.* <span class="keyword">from</span> </span><br><span class="line">    student s <span class="keyword">where</span> s.s_id <span class="keyword">in</span>(</span><br><span class="line">        <span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> s_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">            <span class="keyword">select</span> a.s_id <span class="keyword">from</span> score a </span><br><span class="line">                <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id = b.s_id <span class="keyword">and</span> b.c_id=<span class="string">'02'</span></span><br><span class="line">                <span class="keyword">join</span> score c <span class="keyword">on</span> a.s_id = c.s_id <span class="keyword">and</span> c.c_id=<span class="string">'03'</span></span><br><span class="line">            <span class="keyword">where</span> a.c_id=<span class="string">'01'</span>))</span><br><span class="line"><span class="comment">-- 12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> a.s_id <span class="keyword">from</span> score a <span class="keyword">where</span> a.c_id <span class="keyword">in</span>(<span class="keyword">select</span> a.c_id <span class="keyword">from</span> score a <span class="keyword">where</span> a.s_id=<span class="string">'01'</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="comment">-- 13、查询和"01"号的同学学习的课程完全相同的其他同学的信息  </span></span><br><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> student a <span class="keyword">where</span> a.s_id <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> s_id!=<span class="string">'01'</span> <span class="keyword">and</span> c_id <span class="keyword">in</span>(<span class="keyword">select</span> c_id <span class="keyword">from</span> score <span class="keyword">where</span> s_id=<span class="string">'01'</span>)</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> s_id </span><br><span class="line">    <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>)=(<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> score <span class="keyword">where</span> s_id=<span class="string">'01'</span>));</span><br><span class="line"><span class="comment">-- 14、查询没学过"张三"老师讲授的任一门课程的学生姓名 </span></span><br><span class="line"><span class="keyword">select</span> a.s_name <span class="keyword">from</span> student a <span class="keyword">where</span> a.s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id = </span><br><span class="line">                (<span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id =(</span><br><span class="line">                    <span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span> t_name = <span class="string">'张三'</span>)) </span><br><span class="line">                <span class="keyword">group</span> <span class="keyword">by</span> s_id);</span><br><span class="line"><span class="comment">-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </span></span><br><span class="line"><span class="keyword">select</span> a.s_id,a.s_name,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(b.s_score)) <span class="keyword">from</span> </span><br><span class="line">    student a </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id = b.s_id</span><br><span class="line">    <span class="keyword">where</span> a.s_id <span class="keyword">in</span>(</span><br><span class="line">            <span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> s_score&lt;<span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span>  s_id <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>)&gt;=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name </span><br><span class="line"><span class="comment">-- 16、检索"01"课程分数小于60，按分数降序排列的学生信息</span></span><br><span class="line"><span class="keyword">select</span> a.*,b.c_id,b.s_score <span class="keyword">from</span> </span><br><span class="line">    student a,score b </span><br><span class="line">    <span class="keyword">where</span> a.s_id = b.s_id <span class="keyword">and</span> b.c_id=<span class="string">'01'</span> <span class="keyword">and</span> b.s_score&lt;<span class="number">60</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> b.s_score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,(<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id=a.s_id <span class="keyword">and</span> c_id=<span class="string">'01'</span>) <span class="keyword">as</span> 语文,</span><br><span class="line">                (<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id=a.s_id <span class="keyword">and</span> c_id=<span class="string">'02'</span>) <span class="keyword">as</span> 数学,</span><br><span class="line">                (<span class="keyword">select</span> s_score <span class="keyword">from</span> score <span class="keyword">where</span> s_id=a.s_id <span class="keyword">and</span> c_id=<span class="string">'03'</span>) <span class="keyword">as</span> 英语,</span><br><span class="line">            <span class="keyword">round</span>(<span class="keyword">avg</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> 平均分 <span class="keyword">from</span> score a  <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均分 <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span></span><br><span class="line"><span class="comment">--及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</span></span><br><span class="line"><span class="keyword">select</span> a.c_id,b.c_name,<span class="keyword">MAX</span>(s_score),<span class="keyword">MIN</span>(s_score),<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score&gt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 及格率,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score&gt;=<span class="number">70</span> <span class="keyword">and</span> a.s_score&lt;=<span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 中等率,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score&gt;=<span class="number">80</span> <span class="keyword">and</span> a.s_score&lt;=<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 优良率,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score&gt;=<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> a.s_score <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)),<span class="number">2</span>) <span class="keyword">as</span> 优秀率</span><br><span class="line">    <span class="keyword">from</span> score a <span class="keyword">left</span> <span class="keyword">join</span> course b <span class="keyword">on</span> a.c_id = b.c_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.c_id,b.c_name</span><br><span class="line"><span class="comment">-- 19、按各科成绩进行排序，并显示排名(实现不完全)</span></span><br><span class="line"><span class="comment">-- mysql没有rank函数</span></span><br><span class="line">    <span class="keyword">select</span> a.s_id,a.c_id,</span><br><span class="line">        @i:=@i +<span class="number">1</span> <span class="keyword">as</span> i保留排名,</span><br><span class="line">        @k:=(<span class="keyword">case</span> <span class="keyword">when</span> @score=a.s_score <span class="keyword">then</span> @k <span class="keyword">else</span> @i <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">rank</span>不保留排名,</span><br><span class="line">        @score:=a.s_score <span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> s_id,c_id,s_score <span class="keyword">from</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id,c_id,s_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span></span><br><span class="line">)a,(<span class="keyword">select</span> @k:=<span class="number">0</span>,@i:=<span class="number">0</span>,@score:=<span class="number">0</span>)s</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> a.s_id,a.c_id,</span><br><span class="line">        @i:=@i +<span class="number">1</span> <span class="keyword">as</span> i,</span><br><span class="line">        @k:=(<span class="keyword">case</span> <span class="keyword">when</span> @score=a.s_score <span class="keyword">then</span> @k <span class="keyword">else</span> @i <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">        @score:=a.s_score <span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> s_id,c_id,s_score <span class="keyword">from</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id,c_id,s_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span></span><br><span class="line">)a,(<span class="keyword">select</span> @k:=<span class="number">0</span>,@i:=<span class="number">0</span>,@score:=<span class="number">0</span>)s</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    <span class="keyword">select</span> a.s_id,a.c_id,</span><br><span class="line">        @i:=@i +<span class="number">1</span> <span class="keyword">as</span> i,</span><br><span class="line">        @k:=(<span class="keyword">case</span> <span class="keyword">when</span> @score=a.s_score <span class="keyword">then</span> @k <span class="keyword">else</span> @i <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">        @score:=a.s_score <span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> s_id,c_id,s_score <span class="keyword">from</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'03'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id,c_id,s_score <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_score <span class="keyword">DESC</span></span><br><span class="line">)a,(<span class="keyword">select</span> @k:=<span class="number">0</span>,@i:=<span class="number">0</span>,@score:=<span class="number">0</span>)s</span><br><span class="line"><span class="comment">-- 20、查询学生的总成绩并进行排名</span></span><br><span class="line"><span class="keyword">select</span> a.s_id,</span><br><span class="line">    @i:=@i+<span class="number">1</span> <span class="keyword">as</span> i,</span><br><span class="line">    @k:=(<span class="keyword">case</span> <span class="keyword">when</span> @score=a.sum_score <span class="keyword">then</span> @k <span class="keyword">else</span> @i <span class="keyword">end</span>) <span class="keyword">as</span> <span class="keyword">rank</span>,</span><br><span class="line">    @score:=a.sum_score <span class="keyword">as</span> score</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> s_id,<span class="keyword">SUM</span>(s_score) <span class="keyword">as</span> sum_score <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> sum_score <span class="keyword">DESC</span>)a,</span><br><span class="line">    (<span class="keyword">select</span> @k:=<span class="number">0</span>,@i:=<span class="number">0</span>,@score:=<span class="number">0</span>)s</span><br><span class="line"><span class="comment">-- 21、查询不同老师所教不同课程平均分从高到低显示 </span></span><br><span class="line">    <span class="keyword">select</span> a.t_id,c.t_name,a.c_id,<span class="keyword">ROUND</span>(<span class="keyword">avg</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> course a</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.c_id=b.c_id </span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> teacher c <span class="keyword">on</span> a.t_id=c.t_id</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.c_id,a.t_id,c.t_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩 </span></span><br><span class="line">            <span class="keyword">select</span> d.*,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,@i:=@i+<span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> @i:=<span class="number">0</span>)s <span class="keyword">where</span> a.c_id=<span class="string">'01'</span>    </span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id=d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line">            <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">select</span> d.*,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,@j:=@j+<span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> @j:=<span class="number">0</span>)s <span class="keyword">where</span> a.c_id=<span class="string">'02'</span>    </span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id=d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line">            <span class="keyword">UNION</span></span><br><span class="line">            <span class="keyword">select</span> d.*,c.排名,c.s_score,c.c_id <span class="keyword">from</span> (</span><br><span class="line">                <span class="keyword">select</span> a.s_id,a.s_score,a.c_id,@k:=@k+<span class="number">1</span> <span class="keyword">as</span> 排名 <span class="keyword">from</span> score a,(<span class="keyword">select</span> @k:=<span class="number">0</span>)s <span class="keyword">where</span> a.c_id=<span class="string">'03'</span>    </span><br><span class="line">            )c</span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> student d <span class="keyword">on</span> c.s_id=d.s_id</span><br><span class="line">            <span class="keyword">where</span> 排名 <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> f.c_name,a.c_id,b.<span class="string">`85-100`</span>,b.百分比,c.<span class="string">`70-85`</span>,c.百分比,d.<span class="string">`60-70`</span>,d.百分比,e.<span class="string">`0-60`</span>,e.百分比 <span class="keyword">from</span> score a</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">85</span> <span class="keyword">and</span> s_score &lt;=<span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">`85-100`</span>,</span><br><span class="line">                                            <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">85</span> <span class="keyword">and</span> s_score &lt;=<span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">                                <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)b <span class="keyword">on</span> a.c_id=b.c_id</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">70</span> <span class="keyword">and</span> s_score &lt;=<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">`70-85`</span>,</span><br><span class="line">                                            <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">70</span> <span class="keyword">and</span> s_score &lt;=<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">                                <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)c <span class="keyword">on</span> a.c_id=c.c_id</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">60</span> <span class="keyword">and</span> s_score &lt;=<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">`60-70`</span>,</span><br><span class="line">                                            <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;<span class="number">60</span> <span class="keyword">and</span> s_score &lt;=<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">                                <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)d <span class="keyword">on</span> a.c_id=d.c_id</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> c_id,<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;=<span class="number">0</span> <span class="keyword">and</span> s_score &lt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">`0-60`</span>,</span><br><span class="line">                                            <span class="keyword">ROUND</span>(<span class="number">100</span>*(<span class="keyword">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> s_score &gt;=<span class="number">0</span> <span class="keyword">and</span> s_score &lt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*)),<span class="number">2</span>) <span class="keyword">as</span> 百分比</span><br><span class="line">                                <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id)e <span class="keyword">on</span> a.c_id=e.c_id</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> course f <span class="keyword">on</span> a.c_id = f.c_id</span><br><span class="line"><span class="comment">-- 24、查询学生平均成绩及其名次 </span></span><br><span class="line">        <span class="keyword">select</span> a.s_id,</span><br><span class="line">                @i:=@i+<span class="number">1</span> <span class="keyword">as</span> <span class="string">'不保留空缺排名'</span>,</span><br><span class="line">                @k:=(<span class="keyword">case</span> <span class="keyword">when</span> @avg_score=a.avg_s <span class="keyword">then</span> @k <span class="keyword">else</span> @i <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'保留空缺排名'</span>,</span><br><span class="line">                @avg_score:=avg_s <span class="keyword">as</span> <span class="string">'平均分'</span></span><br><span class="line">        <span class="keyword">from</span> (<span class="keyword">select</span> s_id,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_s <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id)a,(<span class="keyword">select</span> @avg_score:=<span class="number">0</span>,@i:=<span class="number">0</span>,@k:=<span class="number">0</span>)b;</span><br><span class="line"><span class="comment">-- 25、查询各科成绩前三名的记录</span></span><br><span class="line">            <span class="comment">-- 1.选出b表比a表成绩大的所有组</span></span><br><span class="line">            <span class="comment">-- 2.选出比当前id成绩大的 小于三个的</span></span><br><span class="line">        <span class="keyword">select</span> a.s_id,a.c_id,a.s_score <span class="keyword">from</span> score a </span><br><span class="line">            <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.c_id = b.c_id <span class="keyword">and</span> a.s_score&lt;b.s_score</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> a.s_id,a.c_id,a.s_score <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(b.s_id)&lt;<span class="number">3</span></span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.c_id,a.s_score <span class="keyword">DESC</span> </span><br><span class="line"><span class="comment">-- 26、查询每门课程被选修的学生数  </span></span><br><span class="line">        <span class="keyword">select</span> c_id,<span class="keyword">count</span>(s_id) <span class="keyword">from</span> score a <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id </span><br><span class="line"><span class="comment">-- 27、查询出只有两门课程的全部学生的学号和姓名 </span></span><br><span class="line">        <span class="keyword">select</span> s_id,s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(</span><br><span class="line">                <span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(c_id)=<span class="number">2</span>); </span><br><span class="line"><span class="comment">-- 28、查询男生、女生人数 </span></span><br><span class="line">        <span class="keyword">select</span> s_sex,<span class="keyword">COUNT</span>(s_sex) <span class="keyword">as</span> 人数  <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex</span><br><span class="line"><span class="comment">-- 29、查询名字中含有"风"字的学生信息</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> s_name <span class="keyword">like</span> <span class="string">'%风%'</span>;</span><br><span class="line"><span class="comment">-- 30、查询同名同性学生名单，并统计同名人数 </span></span><br><span class="line">        <span class="keyword">select</span> a.s_name,a.s_sex,<span class="keyword">count</span>(*) <span class="keyword">from</span> student a  <span class="keyword">JOIN</span> </span><br><span class="line">                    student b <span class="keyword">on</span> a.s_id !=b.s_id <span class="keyword">and</span> a.s_name = b.s_name <span class="keyword">and</span> a.s_sex = b.s_sex</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_name,a.s_sex</span><br><span class="line"><span class="comment">-- 31、查询1990年出生的学生名单 </span></span><br><span class="line">        <span class="keyword">select</span> s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_birth <span class="keyword">like</span> <span class="string">'1990%'</span> </span><br><span class="line"><span class="comment">-- 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> c_id,<span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_score <span class="keyword">DESC</span>,c_id <span class="keyword">ASC</span></span><br><span class="line"><span class="comment">-- 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> a.s_id,b.s_name,<span class="keyword">ROUND</span>(<span class="keyword">avg</span>(a.s_score),<span class="number">2</span>) <span class="keyword">as</span> avg_score <span class="keyword">from</span> score a</span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> student b <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> avg_score&gt;=<span class="number">85</span></span><br><span class="line"><span class="comment">-- 34、查询课程名称为"数学"，且分数低于60的学生姓名和分数 </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">select</span> a.s_name,b.s_score <span class="keyword">from</span> score b <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student a <span class="keyword">on</span> a.s_id=b.s_id <span class="keyword">where</span> b.c_id=(</span><br><span class="line">                    <span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> c_name =<span class="string">'数学'</span>) <span class="keyword">and</span> b.s_score&lt;<span class="number">60</span> </span><br><span class="line"><span class="comment">-- 35、查询所有学生的课程及分数情况； </span></span><br><span class="line">        <span class="keyword">select</span> a.s_id,a.s_name,</span><br><span class="line">                    <span class="keyword">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">'语文'</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'语文'</span>,</span><br><span class="line">                    <span class="keyword">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">'数学'</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'数学'</span>,</span><br><span class="line">                    <span class="keyword">SUM</span>(<span class="keyword">case</span> c.c_name <span class="keyword">when</span> <span class="string">'英语'</span> <span class="keyword">then</span> b.s_score <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> <span class="string">'英语'</span>,</span><br><span class="line">                    <span class="keyword">SUM</span>(b.s_score) <span class="keyword">as</span>  <span class="string">'总分'</span></span><br><span class="line">        <span class="keyword">from</span> student a <span class="keyword">left</span> <span class="keyword">join</span> score b <span class="keyword">on</span> a.s_id = b.s_id </span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> course c <span class="keyword">on</span> b.c_id = c.c_id </span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.s_id,a.s_name  </span><br><span class="line"> <span class="comment">-- 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数； </span></span><br><span class="line">            <span class="keyword">select</span> a.s_name,b.c_name,c.s_score <span class="keyword">from</span> course b <span class="keyword">left</span> <span class="keyword">join</span> score c <span class="keyword">on</span> b.c_id = c.c_id</span><br><span class="line">                <span class="keyword">left</span> <span class="keyword">join</span> student a <span class="keyword">on</span> a.s_id=c.s_id <span class="keyword">where</span> c.s_score&gt;=<span class="number">70</span> </span><br><span class="line"><span class="comment">-- 37、查询不及格的课程</span></span><br><span class="line">        <span class="keyword">select</span> a.s_id,a.c_id,b.c_name,a.s_score <span class="keyword">from</span> score a <span class="keyword">left</span> <span class="keyword">join</span> course b <span class="keyword">on</span> a.c_id = b.c_id</span><br><span class="line">            <span class="keyword">where</span> a.s_score&lt;<span class="number">60</span> </span><br><span class="line"><span class="comment">--38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； </span></span><br><span class="line">        <span class="keyword">select</span> a.s_id,b.s_name <span class="keyword">from</span> score a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student b <span class="keyword">on</span> a.s_id = b.s_id</span><br><span class="line">            <span class="keyword">where</span> a.c_id = <span class="string">'01'</span> <span class="keyword">and</span> a.s_score&gt;<span class="number">80</span></span><br><span class="line"><span class="comment">-- 39、求每门课程的学生人数 </span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id; </span><br><span class="line"><span class="comment">-- 40、查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩</span></span><br><span class="line">        <span class="comment">-- 查询老师id   </span></span><br><span class="line">        <span class="keyword">select</span> c_id <span class="keyword">from</span> course c,teacher d <span class="keyword">where</span> c.t_id=d.t_id <span class="keyword">and</span> d.t_name=<span class="string">'张三'</span></span><br><span class="line">        <span class="comment">-- 查询最高分（可能有相同分数）</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">MAX</span>(s_score) <span class="keyword">from</span> score <span class="keyword">where</span> c_id=<span class="string">'02'</span></span><br><span class="line">        <span class="comment">-- 查询信息</span></span><br><span class="line">        <span class="keyword">select</span> a.*,b.s_score,b.c_id,c.c_name <span class="keyword">from</span> student a</span><br><span class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score b <span class="keyword">on</span> a.s_id = b.s_id</span><br><span class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course c <span class="keyword">on</span> b.c_id=c.c_id</span><br><span class="line">            <span class="keyword">where</span> b.c_id =(<span class="keyword">select</span> c_id <span class="keyword">from</span> course c,teacher d <span class="keyword">where</span> c.t_id=d.t_id <span class="keyword">and</span> d.t_name=<span class="string">'张三'</span>)</span><br><span class="line">            <span class="keyword">and</span> b.s_score <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">MAX</span>(s_score) <span class="keyword">from</span> score <span class="keyword">where</span> c_id=<span class="string">'02'</span>)</span><br><span class="line"><span class="comment">-- 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 </span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">DISTINCT</span> b.s_id,b.c_id,b.s_score <span class="keyword">from</span> score a,score b <span class="keyword">where</span> a.c_id != b.c_id <span class="keyword">and</span> a.s_score = b.s_score</span><br><span class="line"><span class="comment">-- 42、查询每门功成绩最好的前两名 </span></span><br><span class="line">        <span class="comment">-- 牛逼的写法</span></span><br><span class="line">    <span class="keyword">select</span> a.s_id,a.c_id,a.s_score <span class="keyword">from</span> score a</span><br><span class="line">        <span class="keyword">where</span> (<span class="keyword">select</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">from</span> score b <span class="keyword">where</span> b.c_id=a.c_id <span class="keyword">and</span> b.s_score&gt;=a.s_score)&lt;=<span class="number">2</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.c_id</span><br><span class="line"><span class="comment">-- 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  </span></span><br><span class="line">        <span class="keyword">select</span> c_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> total <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id <span class="keyword">HAVING</span> total&gt;<span class="number">5</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> total,c_id <span class="keyword">ASC</span></span><br><span class="line"><span class="comment">-- 44、检索至少选修两门课程的学生学号 </span></span><br><span class="line">        <span class="keyword">select</span> s_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> sel <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> sel&gt;=<span class="number">2</span></span><br><span class="line"><span class="comment">-- 45、查询选修了全部课程的学生信息 </span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">in</span>(        </span><br><span class="line">            <span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id <span class="keyword">HAVING</span> <span class="keyword">count</span>(*)=(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> course))</span><br><span class="line"><span class="comment">--46、查询各学生的年龄</span></span><br><span class="line">    <span class="comment">-- 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</span></span><br><span class="line">    <span class="keyword">select</span> s_birth,(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y'</span>)-<span class="keyword">DATE_FORMAT</span>(s_birth,<span class="string">'%Y'</span>) - </span><br><span class="line">                (<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%m%d'</span>)&gt;<span class="keyword">DATE_FORMAT</span>(s_birth,<span class="string">'%m%d'</span>) <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">end</span>)) <span class="keyword">as</span> age</span><br><span class="line">        <span class="keyword">from</span> student;</span><br><span class="line"><span class="comment">-- 47、查询本周过生日的学生</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">WEEK</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>))=<span class="keyword">WEEK</span>(s_birth)</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">YEARWEEK</span>(s_birth)=<span class="keyword">YEARWEEK</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>))</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">WEEK</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>)) </span><br><span class="line"><span class="comment">-- 48、查询下周过生日的学生</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">WEEK</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>))+<span class="number">1</span> =<span class="keyword">WEEK</span>(s_birth) </span><br><span class="line"><span class="comment">-- 49、查询本月过生日的学生</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">MONTH</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>)) =<span class="keyword">MONTH</span>(s_birth)</span><br><span class="line"><span class="comment">-- 50、查询下月过生日的学生</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">MONTH</span>(<span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y%m%d'</span>))+<span class="number">1</span> =<span class="keyword">MONTH</span>(s_birth)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL读写分离</title>
      <link href="/2020/08/03/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2020/08/03/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL读写分离"><a href="#MySQL读写分离" class="headerlink" title="MySQL读写分离"></a>MySQL读写分离</h2><h3 id="1、读写分离的介绍"><a href="#1、读写分离的介绍" class="headerlink" title="1、读写分离的介绍"></a>1、读写分离的介绍</h3><p><img src="/2020/08/03/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.jpg" alt></p><p>​        MySQL读写分离基本原理是让master数据库处理写操作，slave数据库处理读操作。master将写操作的变更同步到各个slave节点。</p><p>​        MySQL读写分离能提高系统性能的原因在于：</p><p>​        1、物理服务器增加，机器处理能力提升。拿硬件换性能。</p><p>​        2、主从只负责各自的读和写，极大程度缓解X锁 (排它锁) 和S锁 (共享锁) 争用。</p><p>​        3、slave可以配置myiasm引擎，提升查询性能以及节约系统开销。</p><p>​        4、master直接写是并发的，slave通过主库发送来的binlog恢复数据是异步。</p><p>​        5、slave可以单独设置一些参数来提升其读的性能。</p><p>​        6、增加冗余，提高可用性。</p><h3 id="2、读写分离的配置"><a href="#2、读写分离的配置" class="headerlink" title="2、读写分离的配置"></a>2、读写分离的配置</h3><h5 id="1、硬件配置"><a href="#1、硬件配置" class="headerlink" title="1、硬件配置"></a>1、硬件配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master 192.168.85.11</span><br><span class="line">slave  192.168.85.12</span><br><span class="line">proxy  192，168.85.14</span><br></pre></td></tr></table></figure><h5 id="2、首先在master和slave上配置主从复制"><a href="#2、首先在master和slave上配置主从复制" class="headerlink" title="2、首先在master和slave上配置主从复制"></a>2、首先在master和slave上配置主从复制</h5><h5 id="3、进行proxy的相关配置"><a href="#3、进行proxy的相关配置" class="headerlink" title="3、进行proxy的相关配置"></a>3、进行proxy的相关配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、下载mysql-proxy</span></span><br><span class="line">https://downloads.mysql.com/archives/proxy/#downloads</span><br><span class="line"><span class="meta">#</span><span class="bash">2、上传软件到proxy的机器</span></span><br><span class="line">直接通过xftp进行上传</span><br><span class="line"><span class="meta">#</span><span class="bash">3、解压安装包</span></span><br><span class="line">tar -zxvf mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">4、修改解压后的目录</span></span><br><span class="line">mv mysql-proxy-0.8.5-linux-glibc2.3-x86-64bit mysql-proxy</span><br><span class="line"><span class="meta">#</span><span class="bash">5、进入mysql-proxy的目录</span></span><br><span class="line">cd mysql-proxy</span><br><span class="line"><span class="meta">#</span><span class="bash">6、创建目录</span></span><br><span class="line">mkdir conf</span><br><span class="line">mkdir logs</span><br><span class="line"><span class="meta">#</span><span class="bash">7、添加环境变量</span></span><br><span class="line"><span class="meta">#</span><span class="bash">打开/etc/profile文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件的最后面添加一下命令</span></span><br><span class="line">export PATH=$PATH:/root/mysql-proxy/bin</span><br><span class="line"><span class="meta">#</span><span class="bash">8、执行命令让环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">9、进入conf目录，创建文件并添加一下内容</span></span><br><span class="line">vi mysql-proxy.conf</span><br><span class="line">添加内容</span><br><span class="line">[mysql-proxy]</span><br><span class="line">user=root</span><br><span class="line">proxy-address=192.168.85.14:4040</span><br><span class="line">proxy-backend-addresses=192.168.85.11:3306</span><br><span class="line">proxy-read-only-backend-addresses=192.168.85.12:3306</span><br><span class="line">proxy-lua-script=/root/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lua</span><br><span class="line">log-file=/root/mysql-proxy/logs/mysql-proxy.log</span><br><span class="line">log-level=debug</span><br><span class="line">daemon=true</span><br><span class="line"><span class="meta">#</span><span class="bash">10、开启mysql-proxy</span></span><br><span class="line">mysql-proxy --defaults-file=/root/mysql-proxy/conf/mysql-proxy.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">11、查看是否安装成功，打开日志文件</span></span><br><span class="line">cd /root/mysql-proxy/logs</span><br><span class="line">tail -100 mysql-proxy.log</span><br><span class="line"><span class="meta">#</span><span class="bash">内容如下：表示安装成功</span></span><br><span class="line">2019-10-11 21:49:41: (debug) max open file-descriptors = 1024</span><br><span class="line">2019-10-11 21:49:41: (message) proxy listening on port 192.168.85.14:4040</span><br><span class="line">2019-10-11 21:49:41: (message) added read/write backend: 192.168.85.11:3306</span><br><span class="line">2019-10-11 21:49:41: (message) added read-only backend: 192.168.85.12:3306</span><br><span class="line">2019-10-11 21:49:41: (debug) now running as user: root (0/0)</span><br></pre></td></tr></table></figure><h5 id="4、进行连接"><a href="#4、进行连接" class="headerlink" title="4、进行连接"></a>4、进行连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mysql的命令行会出现无法连接的情况，所以建议使用客户端</span></span><br><span class="line">mysql -uroot -p123 -h192.168.85.14 -P 4040</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的锁机制</title>
      <link href="/2020/08/03/MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/08/03/MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL的锁机制"><a href="#MySQL的锁机制" class="headerlink" title="MySQL的锁机制"></a>MySQL的锁机制</h1><h3 id="1、MySQL锁"><a href="#1、MySQL锁" class="headerlink" title="1、MySQL锁"></a>1、MySQL锁</h3><p>​        <strong>锁是计算机协调多个进程或线程并发访问某一资源的机制。</strong>在数据库中，除传统的 计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一 个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>​        相对其他数据库而言，MySQL的锁机制比较简单，其最 显著的特点是不同的<strong>存储引擎</strong>支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。 </p><p>​        <strong>表级锁：</strong>开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>​        <strong>行级锁：</strong>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。  </p><p>​        从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度 来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有 并发查询的应用，如一些在线事务处理（OLTP）系统。 </p><h3 id="2、MyISAM表锁"><a href="#2、MyISAM表锁" class="headerlink" title="2、MyISAM表锁"></a>2、MyISAM表锁</h3><p>MySQL的表级锁有两种模式：<strong>表共享读锁（Table Read Lock）</strong>和<strong>表独占写锁（Table Write Lock）</strong>。  </p><p>对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；对 MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；MyISAM表的读操作与写操作之间，以及写操作之间是串行的！ </p><p>建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mylock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`NAME`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mylock`</span> (<span class="string">`id`</span>, <span class="string">`NAME`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'d'</span>);</span><br></pre></td></tr></table></figure><p><strong>MyISAM写锁阻塞读的案例：</strong></p><p>​        当一个线程获得对一个表的写锁之后，只有持有锁的线程可以对表进行更新操作。其他线程的读写操作都会等待，直到锁释放为止。</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获取表的write锁定<br>lock table mylock write;</td><td align="center"></td></tr><tr><td align="center">当前session对表的查询，插入，更新操作都可以执行<br>select * from mylock;<br>insert into mylock values(5,’e’);</td><td align="center">当前session对表的查询会被阻塞<br>select * from mylock；</td></tr><tr><td align="center">释放锁：<br>unlock tables；</td><td align="center">当前session能够立刻执行，并返回对应结果</td></tr></tbody></table><p><strong>MyISAM读阻塞写的案例：</strong></p><p>​        一个session使用lock table给表加读锁，这个session可以锁定表中的记录，但更新和访问其他表都会提示错误，同时，另一个session可以查询表中的记录，但更新就会出现锁等待。</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获得表的read锁定<br>lock table mylock read;</td><td align="center"></td></tr><tr><td align="center">当前session可以查询该表记录：<br>select * from mylock;</td><td align="center">当前session可以查询该表记录：<br>select * from mylock;</td></tr><tr><td align="center">当前session不能查询没有锁定的表<br>select * from person<br>Table ‘person’ was not locked with LOCK TABLES</td><td align="center">当前session可以查询或者更新未锁定的表<br>select * from mylock<br>insert into person values(1,’zhangsan’);</td></tr><tr><td align="center">当前session插入或者更新表会提示错误<br>insert into mylock values(6,’f’)<br>Table ‘mylock’ was locked with a READ lock and can’t be updated<br>update mylock set name=’aa’ where id = 1;<br>Table ‘mylock’ was locked with a READ lock and can’t be updated</td><td align="center">当前session插入数据会等待获得锁<br>insert into mylock values(6,’f’);</td></tr><tr><td align="center">释放锁<br>unlock tables;</td><td align="center">获得锁，更新成功</td></tr></tbody></table><p><strong>注意:</strong></p><p><strong>MyISAM在执行查询语句之前，会自动给涉及的所有表加读锁，在执行更新操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要使用命令来显式加锁，上例中的加锁时为了演示效果。</strong></p><p><strong>MyISAM的并发插入问题</strong></p><p>MyISAM表的读和写是串行的，这是就总体而言的，在一定条件下，MyISAM也支持查询和插入操作的并发执行</p><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">获取表的read local锁定<br>lock table mylock read local</td><td align="center"></td></tr><tr><td align="center">当前session不能对表进行更新或者插入操作<br>insert into mylock values(6,’f’)<br>Table ‘mylock’ was locked with a READ lock and can’t be updated<br>update mylock set name=’aa’ where id = 1;<br>Table ‘mylock’ was locked with a READ lock and can’t be updated</td><td align="center">其他session可以查询该表的记录<br>select* from mylock</td></tr><tr><td align="center">当前session不能查询没有锁定的表<br>select * from person<br>Table ‘person’ was not locked with LOCK TABLES</td><td align="center">其他session可以进行插入操作，但是更新会阻塞<br>update mylock set name = ‘aa’ where id = 1;</td></tr><tr><td align="center">当前session不能访问其他session插入的记录；</td><td align="center"></td></tr><tr><td align="center">释放锁资源：unlock tables</td><td align="center">当前session获取锁，更新操作完成</td></tr><tr><td align="center">当前session可以查看其他session插入的记录</td><td align="center"></td></tr></tbody></table><p> 可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定争夺： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like 'table%';</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line">| Table_locks_immediate | 352   |</span><br><span class="line">| Table_locks_waited    | 2     |</span><br><span class="line">+<span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="comment">--如果Table_locks_waited的值比较高，则说明存在着较严重的表级锁争用情况。</span></span><br></pre></td></tr></table></figure><h3 id="3、InnoDB锁"><a href="#3、InnoDB锁" class="headerlink" title="3、InnoDB锁"></a>3、InnoDB锁</h3><p><strong>1、事务及其ACID属性</strong></p><p>事务是由一组SQL语句组成的逻辑处理单元，事务具有4属性，通常称为事务的ACID属性。</p><p>原子性（Actomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。<br>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。<br>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。<br>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p><p><strong>2、并发事务带来的问题</strong></p><p>相对于串行处理来说，并发事务处理能大大增加数据库资源的利用率，提高数据库系统的事务吞吐量，从而可以支持更多用户的并发操作，但与此同时，会带来一下问题：</p><p><strong>脏读</strong>： 一个事务正在对一条记录做修改，在这个事务并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读” </p><p><strong>不可重复读</strong>：一个事务在读取某些数据已经发生了改变、或某些记录已经被删除了！这种现象叫做“不可重复读”。 </p><p><strong>幻读</strong>： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” </p><p>上述出现的问题都是数据库读一致性的问题，可以通过事务的隔离机制来进行保证。</p><p>数据库的事务隔离越严格，并发副作用就越小，但付出的代价也就越大，因为事务隔离本质上就是使事务在一定程度上串行化，需要根据具体的业务需求来决定使用哪种隔离级别</p><table><thead><tr><th align="center"></th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">read uncommitted</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">read committed</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">repeatable read</td><td align="center"></td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">serializable</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p> 可以通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like 'innodb_row_lock%';</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 18702 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 18702 |</span><br><span class="line">| Innodb_row_lock_time_max      | 18702 |</span><br><span class="line">| Innodb_row_lock_waits         | 1     |</span><br><span class="line">+<span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="comment">--如果发现锁争用比较严重，如InnoDB_row_lock_waits和InnoDB_row_lock_time_avg的值比较高</span></span><br></pre></td></tr></table></figure><p><strong>3、InnoDB的行锁模式及加锁方法</strong></p><p>​        <strong>共享锁（s）</strong>：又称读锁。允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。<br>​        <strong>排他锁（x）</strong>：又称写锁。允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</p><p>​        mysql InnoDB引擎默认的修改数据语句：<strong>update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型</strong>，如果加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。<strong>所以加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接通过select …from…查询数据，因为普通查询没有任何锁机制。</strong> </p><p><strong>InnoDB行锁实现方式</strong></p><p>​        InnoDB行锁是通过给<strong>索引</strong>上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，<strong>否则，InnoDB将使用表锁！</strong>  </p><p>1、在不通过索引条件查询的时候，innodb使用的是表锁而不是行锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_no_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_no_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'1'</span>),(<span class="number">2</span>,<span class="string">'2'</span>),(<span class="number">3</span>,<span class="string">'3'</span>),(<span class="number">4</span>,<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit=0<br>select * from tab_no_index where id = 1;</td><td align="center">set autocommit=0<br>select * from tab_no_index where id =2</td></tr><tr><td align="center">select * from tab_no_index where id = 1 for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_no_index where id = 2 for update;</td></tr></tbody></table><p>session1只给一行加了排他锁，但是session2在请求其他行的排他锁的时候，会出现锁等待。原因是在没有索引的情况下，innodb只能使用表锁。</p><p>2、创建带索引的表进行条件查询，innodb使用的是行锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_with_index(<span class="keyword">id</span> <span class="built_in">int</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">add</span> <span class="keyword">index</span> <span class="keyword">id</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'1'</span>),(<span class="number">2</span>,<span class="string">'2'</span>),(<span class="number">3</span>,<span class="string">'3'</span>),(<span class="number">4</span>,<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit=0<br>select * from tab_with_indexwhere id = 1;</td><td align="center">set autocommit=0<br>select * from tab_with_indexwhere id =2</td></tr><tr><td align="center">select * from tab_with_indexwhere id = 1 for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_with_indexwhere id = 2 for update;</td></tr></tbody></table><p>3、由于mysql的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现冲突的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tab_with_index <span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">id</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_with_index  <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">session1</th><th align="center">session2</th></tr></thead><tbody><tr><td align="center">set autocommit=0</td><td align="center">set autocommit=0</td></tr><tr><td align="center">select * from tab_with_index where id = 1 and name=’1’ for update</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">select * from tab_with_index where id = 1 and name=’4’ for update<br>虽然session2访问的是和session1不同的记录，但是因为使用了相同的索引，所以需要等待锁</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>对于MyISAM的表锁，主要讨论了以下几点：</strong><br>（1）共享读锁（S）之间是兼容的，但共享读锁（S）与排他写锁（X）之间，以及排他写锁（X）之间是互斥的，也就是说读和写是串行的。<br>（2）在一定条件下，MyISAM允许查询和插入并发执行，我们可以利用这一点来解决应用中对同一表查询和插入的锁争用问题。<br>（3）MyISAM默认的锁调度机制是写优先，这并不一定适合所有应用，用户可以通过设置LOW_PRIORITY_UPDATES参数，或在INSERT、UPDATE、DELETE语句中指定LOW_PRIORITY选项来调节读写锁的争用。<br>（4）由于表锁的锁定粒度大，读写之间又是串行的，因此，如果更新操作较多，MyISAM表可能会出现严重的锁等待，可以考虑采用InnoDB表来减少锁冲突。</p><p><strong>对于InnoDB表，本文主要讨论了以下几项内容：</strong><br>（1）InnoDB的行锁是基于索引实现的，如果不通过索引访问数据，InnoDB会使用表锁。<br>（2）在不同的隔离级别下，InnoDB的锁机制和一致性读策略不同。</p><p>在了解InnoDB锁特性后，用户可以通过设计和SQL调整等措施减少锁冲突和死锁，包括：</p><ul><li>尽量使用较低的隔离级别； 精心设计索引，并尽量使用索引访问数据，使加锁更精确，从而减少锁冲突的机会；</li><li>选择合理的事务大小，小事务发生锁冲突的几率也更小；</li><li>给记录集显式加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁；</li><li>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会；</li><li>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响； 不要申请超过实际需要的锁级别；除非必须，查询时不要显示加锁；</li><li>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的MVCC原理及使用</title>
      <link href="/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql中MVCC的使用及原理"><a href="#Mysql中MVCC的使用及原理" class="headerlink" title="Mysql中MVCC的使用及原理"></a>Mysql中MVCC的使用及原理</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>数据库默认隔离级别：<strong>RR（Repeatable Read，可重复读），MVCC主要适用于Mysql的RC,RR隔离级别</strong></p><p>创建一张存储引擎为testmvcc的表，sql为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE testmvcc (</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> id int(11) DEFAULT NULL,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> name varchar(11) DEFAULT NULL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC?"></a>什么是MVCC?</h3><p>英文全称为Multi-Version Concurrency Control,翻译为中文即 多版本并发控制。在小编看来，他无非就是乐观锁的一种实现方式。在Java编程中，如果把乐观锁看成一个接口，MVCC便是这个接口的一个实现类而已。</p><p><img src="/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/aHR0cDovL3A5LnBzdGF0cC5jb20vbGFyZ2UvcGdjLWltYWdlLzE1MzYyODkwMzA5MDRjMGRmMzFkYjM2" alt="Mysql中MVCC的使用及原理详解"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.MVCC其实广泛应用于数据库技术，像Oracle,PostgreSQL等也引入了该技术，即适用范围广</p><p>2.MVCC并没有简单的使用数据库的行锁，而是使用了行级锁，row_level_lock,而非InnoDB中的innodb_row_lock.</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>MVCC的实现，通过保存数据在某个时间点的快照来实现的。这意味着一个事务无论运行多长时间，在同一个事务里能够看到数据一致的视图。根据事务开始的时间不同，同时也意味着在同一个时刻不同事务看到的相同表里的数据可能是不同的。</p><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul><li>每行数据都存在一个版本，每次数据更新时都更新该版本。</li><li>修改时Copy出当前版本随意修改，各个事务之间无干扰。</li><li>保存时比较版本号，如果成功（commit），则覆盖原记录；失败则放弃copy（rollback）</li></ul><h3 id="InnoDB存储引擎MVCC的实现策略"><a href="#InnoDB存储引擎MVCC的实现策略" class="headerlink" title="InnoDB存储引擎MVCC的实现策略"></a>InnoDB存储引擎MVCC的实现策略</h3><p>在每一行数据中额外保存两个隐藏的列：当前行创建时的版本号和删除时的版本号（可能为空，其实还有一列称为回滚指针，用于事务回滚，不在本文范畴）。这里的版本号并不是实际的时间值，而是系统版本号。每开始新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询每行记录的版本号进行比较。</p><p>每个事务又有自己的版本号，这样事务内执行CRUD操作时，就通过版本号的比较来达到数据版本控制的目的。</p><h3 id="MVCC下InnoDB的增删查改是怎么work的"><a href="#MVCC下InnoDB的增删查改是怎么work的" class="headerlink" title="MVCC下InnoDB的增删查改是怎么work的"></a>MVCC下InnoDB的增删查改是怎么work的</h3><p>1、插入数据（insert）:记录的版本号即当前事务的版本号</p><p>执行一条数据语句：insert into testmvcc values(1,”test”);</p><p>假设事务id为1，那么插入后的数据行如下：</p><p><img src="/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/aHR0cDovL3A5OC5wc3RhdHAuY29tL2xhcmdlL3BnYy1pbWFnZS8xNTM2Mjg2MzkyMDExMzMyZGM3OTk4MA" alt="Mysql中MVCC的使用及原理详解"></p><p>2、在更新操作的时候，采用的是先标记旧的那行记录为已删除，并且删除版本号是事务版本号，然后插入一行新的记录的方式。</p><p>比如，针对上面那行记录，事务Id为2 要把name字段更新</p><p>update table set name= ‘new_value’ where id=1;</p><p><img src="/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/aHR0cDovL3A5OC5wc3RhdHAuY29tL2xhcmdlL3BnYy1pbWFnZS8xNTM2Mjg2NDc5MDI2MmE4NTg5NmU1NQ" alt="Mysql中MVCC的使用及原理详解"></p><p>3、删除操作的时候，就把事务版本号作为删除版本号。比如</p><p>delete from table where id=1;</p><p><img src="/2020/08/03/MySQL%E7%9A%84MVCC%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/aHR0cDovL3A5LnBzdGF0cC5jb20vbGFyZ2UvcGdjLWltYWdlLzE1MzYyODY1MzI0MTUwZGZiYzdiZjY2" alt="Mysql中MVCC的使用及原理详解"></p><p>4、查询操作：</p><p>从上面的描述可以看到，在查询时要符合以下两个条件的记录才能被事务查询出来：</p><p>1) 删除版本号未指定或者大于当前事务版本号，即查询事务开启后确保读取的行未被删除。(即上述事务id为2的事务查询时，依然能读取到事务id为3所删除的数据行)</p><p>2) 创建版本号 小于或者等于 当前事务版本号 ，就是说记录创建是在当前事务中（等于的情况）或者在当前事务启动之前的其他事物进行的insert。</p><p>（即事务id为2的事务只能读取到create version&lt;=2的已提交的事务的数据集）</p><blockquote><p>补充：</p><p>1.MVCC手段只适用于Msyql隔离级别中的读已提交（Read committed）和可重复读（Repeatable Read）.</p><p>2.Read uncimmitted由于存在脏读，即能读到未提交事务的数据行，所以不适用MVCC.</p><p>原因是MVCC的创建版本和删除版本只要在事务提交后才会产生。</p><p>3.串行化由于是会对所涉及到的表加锁，并非行锁，自然也就不存在行的版本控制问题。</p><p>4.通过以上总结，可知，MVCC主要作用于事务性的，有行锁控制的数据库模型。</p></blockquote><h3 id="关于Mysql中MVCC的总结"><a href="#关于Mysql中MVCC的总结" class="headerlink" title="关于Mysql中MVCC的总结"></a>关于Mysql中MVCC的总结</h3><p>客观上，我们认为他就是乐观锁的一整实现方式，就是每行都有版本号，保存时根据版本号决定是否成功。</p><p>了解乐观锁的小伙伴们都知道，其主要依靠版本控制，即消除锁定，二者相互矛盾，so从某种意义上来说，Mysql的MVCC并非真正的MVCC，他只是借用MVCC的名号实现了读的非阻塞而已。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常及常用类知识点</title>
      <link href="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">throws:声明异常</span></span><br><span class="line"><span class="comment">* 在异常情况出现的时候，可以使用try...catch...finally的方式对异常进行处理，除此之外，可以将异常向外跑出，由外部的进行处理</span></span><br><span class="line"><span class="comment">*   1、在方法调用过程中，可以存在N多个方法之间的调用，此时假如每个方法中都包含了异常情况</span></span><br><span class="line"><span class="comment">*       那么就需要在每个方法中都进行try。。catch，另外一种比较简单的方式，就是在方法的最外层调用处理一次即可</span></span><br><span class="line"><span class="comment">*       使用throws的方法，对所有执行过程中的所有方法出现的异常进行统一集中处理</span></span><br><span class="line"><span class="comment">*   2、如何判断是使用throws还是使用try...catch..</span></span><br><span class="line"><span class="comment">*       最稳妥的方式是在每个方法中都进行异常的处理</span></span><br><span class="line"><span class="comment">*       偷懒的方式是判断在整个调用的过程中，外层的调用方法是否有对异常的处理，如果有，直接使用throws,如果没有</span></span><br><span class="line"><span class="comment">*           那么就要使用try...catch...</span></span><br><span class="line"><span class="comment">* throw：抛出异常</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140433429.png" alt="image-20200513140433429"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140502888.png" alt="image-20200513140502888"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140553620.png" alt="image-20200513140553620"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140731558.png" alt="image-20200513140731558"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140744790.png" alt="image-20200513140744790"></p><h6 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h6><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140825045.png" alt="image-20200513140825045"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140834429.png" alt="image-20200513140834429"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140904488.png" alt="image-20200513140904488"></p><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 注意：常量池在1.7之后放置在了堆空间之中</span></span><br><span class="line"><span class="comment">*       字符串的使用：</span></span><br><span class="line"><span class="comment">*           1、创建</span></span><br><span class="line"><span class="comment">*               String str = "abc";</span></span><br><span class="line"><span class="comment">*               String str2 = new String("abc");</span></span><br><span class="line"><span class="comment">*               两种方式都可以用，只不过第一种使用比较多</span></span><br><span class="line"><span class="comment">*           2、字符串的本质</span></span><br><span class="line"><span class="comment">*               字符串的本质是字符数组或者叫做字符序列</span></span><br><span class="line"><span class="comment">*               String类使用final修饰，不可以被继承</span></span><br><span class="line"><span class="comment">*               使用equals方法比较的是字符数组的每一个位置的值</span></span><br><span class="line"><span class="comment">*               String是一个不可变对象</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140925492.png" alt="image-20200513140925492"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513140955701.png" alt="image-20200513140955701"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141008463.png" alt="image-20200513141008463"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141134567.png" alt="image-20200513141134567"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 可变字符串</span></span><br><span class="line"><span class="comment">*   StringBuffer：线程安全，效率低</span></span><br><span class="line"><span class="comment">*   StringBuilder: 线程不安全，效率高</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141153565.png" alt="image-20200513141153565"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141202381.png" alt="image-20200513141202381"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141242100.png" alt="image-20200513141242100"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141249790.png" alt="image-20200513141249790"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141258922.png" alt="image-20200513141258922"></p><h5 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h5><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141313248.png" alt="image-20200513141313248"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141321073.png" alt="image-20200513141321073"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141328008.png" alt="image-20200513141328008"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141333994.png" alt="image-20200513141333994"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200513141353294.png" alt="image-20200513141353294"></p><p><img src="/2020/08/03/%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9/image/%E5%BC%82%E5%B8%B8%E5%92%8C%E5%B8%B8%E7%94%A8%E7%B1%BB/image-20200513141358822.png" alt="image-20200513141358822"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架知识点整理</title>
      <link href="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* java集合框架：</span></span><br><span class="line"><span class="comment">*   Collection：存放的是单一值</span></span><br><span class="line"><span class="comment">*       特点：</span></span><br><span class="line"><span class="comment">*           1、可以存放不同类型的数据，而数组只能存放固定类型的数据</span></span><br><span class="line"><span class="comment">*           2、当使用arraylist子类实现的时候，初始化的长度是10，当长度不够的时候会自动进行扩容操作</span></span><br><span class="line"><span class="comment">*       api方法：</span></span><br><span class="line"><span class="comment">*           增加数据的方法</span></span><br><span class="line"><span class="comment">*           add：要求必须传入的参数是Object对象，因此当写入基本数据类型的时候，包含了自动拆箱和自动装箱的过程</span></span><br><span class="line"><span class="comment">*           addAll:添加另一个集合的元素到此集合中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           删除数据的方法</span></span><br><span class="line"><span class="comment">*           clear:只是清空集合中的元素，但是此集合对象并没有被回收</span></span><br><span class="line"><span class="comment">*           remove:删除指定元素</span></span><br><span class="line"><span class="comment">*           removeAll：删除集合元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           查询数据的方法</span></span><br><span class="line"><span class="comment">*           contains:判断集合中是否包含指定的元素值</span></span><br><span class="line"><span class="comment">*           containsAll:判断此集合中是否包含另一个集合</span></span><br><span class="line"><span class="comment">*           isEmpty:判断集合是否等于空</span></span><br><span class="line"><span class="comment">*           retainAll:若集合中拥有另一个集合的所有元素，返回true，否则返回false</span></span><br><span class="line"><span class="comment">*           size:返回当前集合的大小</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //集合转数组的操作</span></span><br><span class="line"><span class="comment">*           toArray:将集合转换成数组</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121720326.png" alt="image-20200514121720326"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121734482.png" alt="image-20200514121734482"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121747635.png" alt="image-20200514121747635"></p><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* java集合框架：</span></span><br><span class="line"><span class="comment">*   List：存放的是单一值</span></span><br><span class="line"><span class="comment">*       特点：</span></span><br><span class="line"><span class="comment">*           1、可以存放不同类型的数据，而数组只能存放固定类型的数据</span></span><br><span class="line"><span class="comment">*           2、当使用arraylist子类实现的时候，初始化的长度是10，当长度不够的时候会自动进行扩容操作</span></span><br><span class="line"><span class="comment">*       api方法：</span></span><br><span class="line"><span class="comment">*           增加数据的方法</span></span><br><span class="line"><span class="comment">*           add：要求必须传入的参数是Object对象，因此当写入基本数据类型的时候，包含了自动拆箱和自动装箱的过程</span></span><br><span class="line"><span class="comment">*           addAll:添加另一个集合的元素到此集合中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           删除数据的方法</span></span><br><span class="line"><span class="comment">*           clear:只是清空集合中的元素，但是此集合对象并没有被回收</span></span><br><span class="line"><span class="comment">*           remove:删除指定元素</span></span><br><span class="line"><span class="comment">*           removeAll：删除集合元素</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           查询数据的方法</span></span><br><span class="line"><span class="comment">*           contains:判断集合中是否包含指定的元素值</span></span><br><span class="line"><span class="comment">*           containsAll:判断此集合中是否包含另一个集合</span></span><br><span class="line"><span class="comment">*           isEmpty:判断集合是否等于空</span></span><br><span class="line"><span class="comment">*           retainAll:若集合中拥有另一个集合的所有元素，返回true，否则返回false</span></span><br><span class="line"><span class="comment">*           size:返回当前集合的大小</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //集合转数组的操作</span></span><br><span class="line"><span class="comment">*           toArray:将集合转换成数组</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121809284.png" alt="image-20200514121809284"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121818097.png" alt="image-20200514121818097"></p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 在java代码中包含三种循环的方式</span></span><br><span class="line"><span class="comment">*   do...while</span></span><br><span class="line"><span class="comment">*   while</span></span><br><span class="line"><span class="comment">*   for</span></span><br><span class="line"><span class="comment">* 还有一种增强for循环的方式，可以简化循环的编写</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   所有的集合类都默认实现了Iterable的接口，实现此接口意味着具备了增强for循环的能力，也就是for-each</span></span><br><span class="line"><span class="comment">*      增强for循环本质上使用的也是iterator的功能</span></span><br><span class="line"><span class="comment">*      方法：</span></span><br><span class="line"><span class="comment">*               iterator()</span></span><br><span class="line"><span class="comment">*               foreach()</span></span><br><span class="line"><span class="comment">*   在iterator的方法中，要求返回一个Iterator的接口子类实例对象</span></span><br><span class="line"><span class="comment">*       此接口中包含了</span></span><br><span class="line"><span class="comment">*               hasNext()</span></span><br><span class="line"><span class="comment">*               next()</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*   在使用iterator进行迭代的过程中如果删除其中的某个元素会报错，并发操作异常，因此</span></span><br><span class="line"><span class="comment">*       如果遍历的同时需要修改元素，建议使用listIterator（），</span></span><br><span class="line"><span class="comment">*   ListIterator迭代器提供了向前和向后两种遍历的方式</span></span><br><span class="line"><span class="comment">*       始终是通过cursor和lastret的指针来获取元素值及向下的遍历索引</span></span><br><span class="line"><span class="comment">*       当使用向前遍历的时候必须要保证指针在迭代器的结果，否则无法获取结果值</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121910889.png" alt="image-20200514121910889"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514121922127.png" alt="image-20200514121922127"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122001163.png" alt="image-20200514122001163"></p><h6 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122038056.png" alt="image-20200514122038056"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122050646.png" alt="image-20200514122050646"></p><h6 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *      1、Vector也是List接口的一个子类实现</span></span><br><span class="line"><span class="comment"> *      2、Vector跟ArrayList一样，底层都是使用数组进行实现的</span></span><br><span class="line"><span class="comment"> *      3、面试经常问区别：</span></span><br><span class="line"><span class="comment"> *          （1）ArrayList是线程不安全的，效率高，Vector是线程安全的效率低</span></span><br><span class="line"><span class="comment"> *          （2）ArrayList在进行扩容的时候，是扩容1.5倍，Vector扩容的时候扩容原来的2倍</span></span><br><span class="line"><span class="comment"> *</span></span><br></pre></td></tr></table></figure><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   1、set中存放的是无序，唯一的数据</span></span><br><span class="line"><span class="comment">*   2、set不可以通过下标获取对应位置的元素的值，因为无序的特点</span></span><br><span class="line"><span class="comment">*   3、使用treeset底层的实现是treemap,利用红黑树来进行实现</span></span><br><span class="line"><span class="comment">*   4、设置元素的时候，如果是自定义对象，会查找对象中的equals和hashcode的方法，如果没有，比较的是地址</span></span><br><span class="line"><span class="comment">*   5、树中的元素是要默认进行排序操作的，如果是基本数据类型，自动比较，如果是引用类型的话，需要自定义比较器</span></span><br><span class="line"><span class="comment">*       比较器分类：</span></span><br><span class="line"><span class="comment">*         内部比较器</span></span><br><span class="line"><span class="comment">*               定义在元素的类中，通过实现comparable接口来进行实现</span></span><br><span class="line"><span class="comment">*         外部比较器</span></span><br><span class="line"><span class="comment">*               定义在当前类中，通过实现comparator接口来实现，但是要将该比较器传递到集合中</span></span><br><span class="line"><span class="comment">*         注意：外部比较器可以定义成一个工具类，此时所有需要比较的规则如果一致的话，可以复用，而</span></span><br><span class="line"><span class="comment">*               内部比较器只有在存储当前对象的时候才可以使用</span></span><br><span class="line"><span class="comment">*               如果两者同时存在，使用外部比较器</span></span><br><span class="line"><span class="comment">*               当使用比较器的时候，不会调用equals方法</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122123267.png" alt="image-20200514122123267"></p><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122143284.png" alt="image-20200514122143284"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122235681.png" alt="image-20200514122235681"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122252795.png" alt="image-20200514122252795"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122334514.png" alt="image-20200514122334514"></p><h6 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122417659.png" alt="image-20200514122417659"></p><h6 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*         内部比较器</span></span><br><span class="line"><span class="comment">*               定义在元素的类中，通过实现comparable接口来进行实现</span></span><br><span class="line"><span class="comment">*         外部比较器</span></span><br><span class="line"><span class="comment">*               定义在当前类中，通过实现comparator接口来实现，但是要将该比较器传递到集合中</span></span><br><span class="line"><span class="comment">*         注意：外部比较器可以定义成一个工具类，此时所有需要比较的规则如果一致的话，可以复用，而</span></span><br><span class="line"><span class="comment">*               内部比较器只有在存储当前对象的时候才可以使用</span></span><br><span class="line"><span class="comment">*               如果两者同时存在，使用外部比较器</span></span><br><span class="line"><span class="comment">*               当使用比较器的时候，不会调用equals方法</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122527240.png" alt="image-20200514122527240"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514122557122.png" alt="image-20200514122557122"></p><h6 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514125045624.png" alt="image-20200514125045624"></p><h6 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h6><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514125258424.png" alt="image-20200514125258424" style="zoom:80%;"><h6 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h6><p>牺牲完全平衡的特点，部分平衡，换区插入和删除的效率</p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134304988.png" alt="image-20200514134304988"></p><h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当做一些集合的统一操作的时候，需要保证集合的类型是统一的，此时需要泛型来进行限制</span></span><br><span class="line"><span class="comment"> *      优点：</span></span><br><span class="line"><span class="comment"> *          1、数据安全</span></span><br><span class="line"><span class="comment"> *          2、获取数据时效率比较高</span></span><br><span class="line"><span class="comment"> *      给集合中的元素设置相同的类型就是泛型的基本需求</span></span><br><span class="line"><span class="comment"> *       使用：</span></span><br><span class="line"><span class="comment"> *          在定义对象的时候，通过&lt;&gt;中设置合理的类型来进行实现</span></span><br><span class="line"><span class="comment"> *  泛型的高阶应用：</span></span><br><span class="line"><span class="comment"> *      1、泛型类</span></span><br><span class="line"><span class="comment"> *          在定义类的时候在类名的后面添加&lt;E,K,V,A,B&gt;,起到占位的作用，类中的方法的返回值类型和属性的类型都可以使用</span></span><br><span class="line"><span class="comment"> *      2、泛型接口</span></span><br><span class="line"><span class="comment"> *          在定义接口的时候，在接口的名称后添加&lt;E,K,V,A,B&gt;,</span></span><br><span class="line"><span class="comment"> *          1、子类在进行实现的时候，可以不填写泛型的类型，此时在创建具体的子类对象的时候才决定使用什么类型</span></span><br><span class="line"><span class="comment"> *          2、子类在实现泛型接口的时候，只在实现父类的接口的时候指定父类的泛型类型即可，此时，测试方法中的泛型类型必须要跟子类保持一致</span></span><br><span class="line"><span class="comment"> *      3、泛型方法</span></span><br><span class="line"><span class="comment"> *          在定义方法的时候，指定方法的返回值和参数是自定义的占位符，可以是类名中的T,也可以是自定义的Q，只不过在使用Q的时候需要使用&lt;</span></span><br><span class="line"><span class="comment"> *          Q&gt;定义在返回值的前面</span></span><br><span class="line"><span class="comment"> *      4、泛型的上限（工作中不用）</span></span><br><span class="line"><span class="comment"> *          如果父类确定了，所有的子类都可以直接使用</span></span><br><span class="line"><span class="comment"> *      5、泛型的下限（工作中不用）</span></span><br><span class="line"><span class="comment"> *          如果子类确定了，子类的所有父类都可以直接传递参数使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134340093.png" alt="image-20200514134340093"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134358177.png" alt="image-20200514134358177"></p><h6 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514134659227.png" alt="image-20200514134659227"></p><h6 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h6><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514140620622.png" alt="image-20200514140620622"></p><p><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/image-20200514140636471.png" alt="image-20200514140636471"></p><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173113121.png" alt="image-20200514173113121" style="zoom:67%;"><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173130393.png" alt="image-20200514173130393" style="zoom:67%;"><img src="/2020/08/03/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9F%A5%E8%AF%86%E7%82%B9/../../../只要学不死 就往死里学/note/Collection/image/集合/image-20200514173144162.png" alt="image-20200514173144162" style="zoom:67%;">]]></content>
      
      
      
        <tags>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sleuth链路追踪;</title>
      <link href="/2020/07/29/Sleuth%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2020/07/29/Sleuth%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><h3 id="分布式计算八大误区"><a href="#分布式计算八大误区" class="headerlink" title="分布式计算八大误区"></a>分布式计算八大误区</h3><p>网络可靠。</p><p>延迟为零。</p><p>带宽无限。</p><p>网络绝对安全。</p><p>网络拓扑不会改变。</p><p>必须有一名管理员。</p><p>传输成本为零。</p><p>网络同质化。（操作系统，协议）</p><h3 id="链路追踪的必要性"><a href="#链路追踪的必要性" class="headerlink" title="链路追踪的必要性"></a>链路追踪的必要性</h3><p>如果能跟踪每个请求，中间请求经过哪些微服务，请求耗时，网络延迟，业务逻辑耗时等。我们就能更好地分析系统瓶颈、解决系统问题。因此链路跟踪很重要。</p><blockquote><p>《链路追踪》看看微服务之熵。</p></blockquote><p>我们自己思考解决方案：在调用前后加时间戳。捕获异常。</p><p>链路追踪目的：解决错综复杂的服务调用中链路的查看。排查慢服务。</p><p>市面上链路追踪产品，大部分基于google的Dapper论文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zipkin,twitter开源的。是严格按照谷歌的Dapper论文来的。</span><br><span class="line"></span><br><span class="line">pinpoint 韩国的 Naver公司的。</span><br><span class="line"></span><br><span class="line">Cat 美团点评的</span><br><span class="line"></span><br><span class="line">EagleEye 淘宝的</span><br></pre></td></tr></table></figure><h3 id="链路追踪要考虑的几个问题"><a href="#链路追踪要考虑的几个问题" class="headerlink" title="链路追踪要考虑的几个问题"></a>链路追踪要考虑的几个问题</h3><ol><li>探针的性能消耗。尽量不影响 服务本尊。</li><li>易用。开发可以很快接入，别浪费太多精力。</li><li>数据分析。要实时分析。维度足够。</li></ol><h3 id="Sleuth简介"><a href="#Sleuth简介" class="headerlink" title="Sleuth简介"></a>Sleuth简介</h3><p>Sleuth是Spring cloud的分布式跟踪解决方案。</p><ol><li><p>span(跨度)，基本工作单元。一次链路调用，创建一个span，</p><p>span用一个64位id唯一标识。包括：id，描述，时间戳事件，spanId,span父id。</p><p>span被启动和停止时，记录了时间信息，初始化span叫：root span，它的span id和trace id相等。</p></li><li><p>trace(跟踪)，一组共享“root span”的span组成的树状结构 称为 trace，trace也有一个64位ID，trace中所有span共享一个trace id。类似于一颗 span 树。</p></li><li><p>annotation（标签），annotation用来记录事件的存在，其中，核心annotation用来定义请求的开始和结束。</p><ul><li>CS(Client Send客户端发起请求)。客户端发起请求描述了span开始。</li><li>SR(Server Received服务端接到请求)。服务端获得请求并准备处理它。SR-CS=网络延迟。</li><li>SS（Server Send服务器端处理完成，并将结果发送给客户端）。表示服务器完成请求处理，响应客户端时。SS-SR=服务器处理请求的时间。</li><li>CR（Client Received 客户端接受服务端信息）。span结束的标识。客户端接收到服务器的响应。CR-CS=客户端发出请求到服务器响应的总时间。</li></ul></li></ol><p>其实数据结构是一颗树，从root span 开始。</p><blockquote><p>《链路树演示》</p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h4 id="Sleuth单独"><a href="#Sleuth单独" class="headerlink" title="Sleuth单独"></a>Sleuth单独</h4><ol><li><p>pom</p><p>每个需要监控的系统</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入sleuth依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>测试点：</p><ol><li>启动eureka 7900，service-sms 8002，api-driver 9002.</li><li>访问一次。看日志结果。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> [api-driver,1a409c98e7a3cdbf,1a409c98e7a3cdbf,<span class="literal">true</span>] </span><br><span class="line"> </span><br><span class="line"> [服务名称，traceId（一条请求调用链中 唯一ID），spanID（基本的工作单元，获取数据等），是否让zipkin收集和展示此信息]</span><br><span class="line"></span><br><span class="line">看下游</span><br><span class="line">[service-sms,1a409c98e7a3cdbf,b3d93470b5cf8434,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">traceId， 是一样的。</span><br><span class="line"></span><br><span class="line">服务名必须得写。</span><br></pre></td></tr></table></figure><h4 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h4><p>上面拍错看日志，很原始。刀耕火种，加入利器 zipkin。</p><p>zipkin是twitter开源的分布式跟踪系统。</p><p>原理收集系统的时序数据，从而追踪微服务架构中系统延时等问题。还有一个友好的界面。</p><p>由4个部分组成：</p><p>Collector、Storage、Restful API、Web UI组成</p><p>采集器，存储器，接口，UI。</p><p>原理：</p><p>sleuth收集跟踪信息通过http请求发送给zipkin server，zipkin将跟踪信息存储，以及提供RESTful API接口，zipkin ui通过调用api进行数据展示。</p><p>默认内存存储，可以用mysql，ES等存储。</p><p>操作步骤：</p><ol><li>每个需要监听的服务的pom中添加。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- zipkin --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>每个需要监听的服务yml中</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  <span class="comment">#zipkin</span></span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http://localhost:9411/</span><br><span class="line">    <span class="comment">#采样比例1</span></span><br><span class="line">  sleuth:</span><br><span class="line">    sampler:</span><br><span class="line">      rate: 1</span><br></pre></td></tr></table></figure><ol start="3"><li>启动zipkin。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jar包下载：curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class="line">我放到了 目录：C:\github\online-taxi-demo  下面。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -jar zipkin.jar</span><br><span class="line"></span><br><span class="line">或者docker：</span><br><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure><p>测试点：</p><p>访问zipkin：<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a></p><p>启动：eureka7900，service-sms 8002，api-driver 9002</p><p>发起一次 yapi -&gt;api-driver-&gt;司机发送验证码。</p><p>观察zip界面，点查找，点依赖。</p><p>看查找下的时间。</p><p>再制造一次熔断，看看zipkin。停止service-sms，访问。会看到变红。</p><p>zipkin：最好和rabbitmq，mysql配合使用。</p><h1 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>admin 组件端 = 项目：(cloud-admin)：pom</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server端：</span><br><span class="line">&lt;!-- Admin 服务 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-admin-starter-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Admin 界面 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-admin-server-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>每个需要监控的服务，都加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pom：</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">yml：</span><br><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        <span class="comment">#yml加双引号，properties不用加</span></span><br><span class="line">        include: <span class="string">"*"</span> </span><br><span class="line">    health:</span><br><span class="line">      <span class="comment">##默认是never</span></span><br><span class="line">      show-details: ALWAYS</span><br><span class="line">      enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>访问server</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:6010/</span><br><span class="line"></span><br><span class="line">root/root</span><br></pre></td></tr></table></figure><p>小插曲 正六边形算法。</p><h2 id="邮件监控-，在admin组件中。"><a href="#邮件监控-，在admin组件中。" class="headerlink" title="邮件监控 ，在admin组件中。"></a>邮件监控 ，在admin组件中。</h2><ol><li><p>pom</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">  application: </span><br><span class="line">    name: cloud-admin</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      name: root</span><br><span class="line">      password: root</span><br><span class="line">  <span class="comment"># 邮件设置</span></span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    username: 单纯QQ号</span><br><span class="line">    password: xxxxxxx授权码</span><br><span class="line">    properties:</span><br><span class="line">      mail: </span><br><span class="line">        smpt: </span><br><span class="line">          auth: <span class="literal">true</span></span><br><span class="line">          starttls: </span><br><span class="line">            <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line"><span class="comment">#收件邮箱</span></span><br><span class="line">spring.boot.admin.notify.mail.to: 2634982208@qq.com   </span><br><span class="line"><span class="comment"># 发件邮箱</span></span><br><span class="line">spring.boot.admin.notify.mail.from: xxxxxxx@qq.com</span><br></pre></td></tr></table></figure></li><li><p>下线一个服务。</p></li><li><p>去邮箱查看。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zuul网关原理及使用</title>
      <link href="/2020/07/28/Zuul%E7%BD%91%E5%85%B3%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/28/Zuul%E7%BD%91%E5%85%B3%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p>Starter阿里云镜像</p><p><a href="https://start.aliyun.com/" target="_blank" rel="noopener">https://start.aliyun.com/</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>微服务基本模块已经有了，也可以做微服务了。但完成一个复杂的业务，可能需要多个微服务合作来完成，比如下单，需要用户服务，支付服务，地图服务，订单服务。一般是我们对外服务的窗口，进行服务内外隔离。一般微服务都在内网，不做安全验证，</p><p>就好像：很多明星，可以独立开演唱会（独立提供服务）。也可以去春晚（微服务群提供服务）。但一台春晚就不能让 观众一个一个调用了。观众要调用，需要检票啥的，检票就类似于网关，进来之后，界面随便看，不会说你 看个小品，还需要再检票。</p><p>微服务没有网关，会有下面的问题：</p><ol><li><p>客户端请求多个微服务，增加了客户端复杂性，每个微服务都要做用户认证，限流等，避免和多个微服务打交道的复杂性。</p></li><li><p>有跨域问题，不在同一个域。</p></li><li><p>认证复杂，每个服务都要独立认证，服务要求的权限不一致。</p></li><li><p>难以重构。因为微服务被客户端调用着，重构难以实施。</p></li></ol><p>网关是介于客户端（外部调用方比如app，h5）和微服务的中间层。</p><p>Zuul是Netflix开源的微服务网关，核心是一系列过滤器。这些过滤器可以完成以下功能。</p><ol><li>是所有微服务入口，进行分发。</li><li>身份认证与安全。识别合法的请求，拦截不合法的请求。</li><li>监控。在入口处监控，更全面。</li><li>动态路由。动态将请求分发到不同的后端集群。</li><li>压力测试。可以逐渐增加对后端服务的流量，进行测试。</li><li>负载均衡。也是用ribbon。</li><li>限流（望京超市）。比如我每秒只要1000次，10001次就不让访问了。</li><li>服务熔断</li></ol><p>网关和服务的关系：演员和剧场检票人员的关系。</p><p>zuul默认集成了：ribbon和hystrix。</p><h2 id="启用网关"><a href="#启用网关" class="headerlink" title="启用网关"></a>启用网关</h2><p>新建项目引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.service-url.defaultZone&#x3D;http:&#x2F;&#x2F;euk1.com:7001&#x2F;eureka&#x2F;</span><br><span class="line">spring.application.name&#x3D;zuulserver</span><br><span class="line">server.port&#x3D;80</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableZuulProxy</span><br></pre></td></tr></table></figure><p>测试访问</p><p>网关会将服务名转换成具体服务的ip和端口，实际进行访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;consumer&#x2F;alive</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>启动两个Consumer</p><p>轮询访问上面地址，会看到返回结果中，端口一直轮询在变。说明负载均衡生效了，默认是轮询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.ribbon.NFLoadBalancerRuleClassName&#x3D;com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure><h3 id="路由端点"><a href="#路由端点" class="headerlink" title="路由端点"></a>路由端点</h3><p>调试的时候，看网关请求的地址，以及 映射是否正确。网关请求有误时，可以通过此处排查错误。</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include&#x3D;*</span><br><span class="line">management.endpoint.health.show-details&#x3D;always</span><br><span class="line">management.endpoint.health.enabled&#x3D;true</span><br><span class="line">management.endpoint.routes.enabled&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="配置指定微服务的访问路径"><a href="#配置指定微服务的访问路径" class="headerlink" title="配置指定微服务的访问路径"></a>配置指定微服务的访问路径</h3><ol><li>通过服务名配置（虚拟主机名）</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.routes.consumer=/xxoo/**</span><br></pre></td></tr></table></figure><p>配置前先访问，然后做对比。</p><p>2.自定义映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zuul.routes.xx.path&#x3D;&#x2F;xx&#x2F;**</span><br><span class="line">zuul.routes.xx.url&#x3D;http:&#x2F;&#x2F;mashibing.com</span><br></pre></td></tr></table></figure><ol start="3"><li>.自定义下的负载均衡</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul.routes.xx.path&#x3D;&#x2F;xx&#x2F;**</span><br><span class="line">zuul.routes.xx.service-id&#x3D;cuid</span><br><span class="line"></span><br><span class="line">cuid.ribbon.listOfServers&#x3D;localhost:82,localhost:83</span><br><span class="line">ribbon.eureka.enabled&#x3D;false</span><br></pre></td></tr></table></figure><h3 id="忽略微服务"><a href="#忽略微服务" class="headerlink" title="忽略微服务"></a>忽略微服务</h3><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.ignored-services&#x3D;user-provider</span><br></pre></td></tr></table></figure><h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.prefix&#x3D;&#x2F;api&#x2F;v1</span><br></pre></td></tr></table></figure><p>带上前缀请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul.strip-prefix&#x3D;false</span><br></pre></td></tr></table></figure><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>Nginx + Keepalive</p><h3 id="敏感Header"><a href="#敏感Header" class="headerlink" title="敏感Header"></a>敏感Header</h3><p>测试点：</p><p>停止一个api-driver。访问：yapi：网关token，看返回。</p><p>初始请求。返回值中token为msb cookie</p><p>加上下面配置</p><p>敏感的header不会传播到下游去，也就是说此处的token不会传播的其它的微服务中去。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zuul:</span><br><span class="line">  <span class="comment">#一下配置，表示忽略下面的值向微服务传播，以下配置为空表示：所有请求头都透传到后面微服务。</span></span><br><span class="line">  sensitive-headers: token</span><br></pre></td></tr></table></figure><p>访问。网关token为null。</p><hr><p>上面是网关的路由。</p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>Zuul的大部分功能都是有过滤器实现的。</p><p>4种过滤器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PRE: 在请求被路由之前调用，可利用这种过滤器实现身份验证。选择微服务，记录日志。</span><br><span class="line">ROUTING:在将请求路由到微服务调用，用于构建发送给微服务的请求，并用http clinet（或者ribbon）请求微服务。</span><br><span class="line">POST:在调用微服务执行后。可用于添加header，记录日志，将响应发给客户端。</span><br><span class="line">ERROR:在其他阶段发生错误是，走此过滤器。</span><br></pre></td></tr></table></figure><p>自定义过滤器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PreFilter看代码，注意下面4点。</span><br><span class="line">filterType：pre，routing,post,error</span><br><span class="line">filterOrder:执行顺序，在谁前，在谁后，可以+1，-1</span><br><span class="line">shouldFilter：此过滤器是否执行，<span class="literal">true</span>  <span class="literal">false</span>，可以写过滤器是否执行的判断条件。</span><br><span class="line">run：具体执行逻辑。</span><br></pre></td></tr></table></figure><p>访问：yapi中  网关token</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pre来源uri：/api-driver/<span class="built_in">test</span>/token</span><br><span class="line">pre拦截</span><br><span class="line">pre 业务逻辑 token:msb coolie</span><br></pre></td></tr></table></figure><p>说一下AuthFilter。利用filter实现了 鉴权。看代码。（实际用jwt）</p><p>测试一下，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 测试路径</span><br><span class="line">//<span class="keyword">if</span>(uri.contains(<span class="string">"api-driver"</span>)) &#123;</span><br><span class="line">//<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h3 id="接口容错"><a href="#接口容错" class="headerlink" title="接口容错"></a>接口容错</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MsbFallback implements FallbackProvider&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 表明为哪个微服务提供回退</span><br><span class="line"> * 服务Id ，若需要所有服务调用都支持回退，返回null 或者 * 即可</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">getRoute</span></span>() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"><span class="built_in">return</span> <span class="string">"*"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ClientHttpResponse fallbackResponse(String route, Throwable cause) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cause instanceof HystrixTimeoutException) &#123;</span><br><span class="line">            <span class="built_in">return</span> response(HttpStatus.GATEWAY_TIMEOUT);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> response(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private ClientHttpResponse response(final HttpStatus status) &#123;</span><br><span class="line">        <span class="built_in">return</span> new <span class="function"><span class="title">ClientHttpResponse</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public HttpStatus getStatusCode() throws IOException &#123;</span><br><span class="line">                //<span class="built_in">return</span> status;</span><br><span class="line">                <span class="built_in">return</span> HttpStatus.BAD_REQUEST;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int getRawStatusCode() throws IOException &#123;</span><br><span class="line">                //<span class="built_in">return</span> status.value();</span><br><span class="line">                <span class="built_in">return</span> HttpStatus.BAD_REQUEST.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public String getStatusText() throws IOException &#123;</span><br><span class="line">                //<span class="built_in">return</span> status.getReasonPhrase();</span><br><span class="line">                //<span class="built_in">return</span> HttpStatus.BAD_REQUEST.name();</span><br><span class="line">                <span class="built_in">return</span> HttpStatus.BAD_REQUEST.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void <span class="function"><span class="title">close</span></span>() &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public InputStream getBody() throws IOException &#123;</span><br><span class="line">                String msg = <span class="string">"&#123;\"msg\":\"服务故障\"&#125;"</span>;</span><br><span class="line">            <span class="built_in">return</span> new ByteArrayInputStream(msg.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public HttpHeaders <span class="function"><span class="title">getHeaders</span></span>() &#123;</span><br><span class="line">                HttpHeaders headers = new HttpHeaders();</span><br><span class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">                <span class="built_in">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选用基础yml</p><p>测试点：启动eureka，api-driver, online-taxi-zuul</p><p>正常启动，正常访问yapi 网关token。正常</p><p>停止api-driver。</p><p>则走了容错 方法。</p><p>将fallback的改成：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">getRoute</span></span>() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//<span class="built_in">return</span> <span class="string">"*"</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"api-passenger"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在访问上面 yapi 中 zuul，中网关token。则报500。</p><p>再改成：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">getRoute</span></span>() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//<span class="built_in">return</span> <span class="string">"*"</span>;</span><br><span class="line">//<span class="built_in">return</span> <span class="string">"api-passenger"</span>;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"api-driver"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写访问，熔断生效。</p><p>最后改回去*。</p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>保护自己，用ratelimit。</p><p>令牌桶</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设进入高速公路的车辆需要在入口处领取到通行卡才能进入高速公路。为了节约人力成本，入口处放置自动出卡机。按照国家高速公路交通安全法的规定，在高速公路上行驶的车辆，车速超过100km/h时，应与同车道前车保持100米以上距离。为了保持最小安全行车距离100米，按车速100km/h计算，需要间隔至少3.6秒才能放行一辆车，因此出卡机每隔3.6秒出一张通行卡。在自动出卡机下放置一个盒子，自动出卡机按照3.6秒的间隔向盒子中投放通行卡。每辆进入高速公路的车辆，从盒子中领取通行卡之后才可以进入高速公路。</span><br><span class="line"></span><br><span class="line">令牌桶可以看作是一个存放一定数量令牌的容器。系统按设定的速度向桶中放置令牌。当桶中令牌满时，多出的令牌溢出，桶中令牌不再增加。在使用令牌桶对流量规格进行评估时，是以令牌桶中的令牌数量是否足够满足报文的转发为依据的。每个需要被转发的报文，都要从令牌桶中领取一定数量的令牌（具体数量视报文大小而定），才可以被正常转发。如果桶中存在足够的令牌可以用来转发报文，称流量遵守或符合约定值，否则称为不符合或超标。</span><br></pre></td></tr></table></figure><ol><li><p>启动jmeter，双击：jmeter.bat</p></li><li><p>右击TestPlan,add ,Threads,Thread Group</p></li><li><p>右击测试令牌桶线程组，add，sampler, http request。</p></li><li><p>在线程组：</p><p>1、Number of Threads（users）：用户个数</p><p>2、Ramp-up Period（in seconds）：在多长时间内，加载指定的用户个数，单位为s。</p><p>假如需加载100个用户，在5s中之内加载完成，那么平均每秒钟加载20个用户。</p><p>3、Loop Count（循环次数）：用户执行操作的循环次数，如果选择forever，则永远循环下去。</p></li></ol><p>   测试点：启动eureka,api-driver,online-taxi-zuul。</p><p>   令牌桶设置成2，jemter 用10个并发。可以看到控制台输出结果。</p><p><strong><em>单独限流。</em></strong></p><h3 id="高可用-1"><a href="#高可用-1" class="headerlink" title="高可用"></a>高可用</h3><p>一般做法</p><p>前面架上nginx。</p><p>zuul作为普通的服务。对外访问。前面加一层（nginx+keepalived）</p><hr><p>第8节课完。2020.3.8</p><p>maven，</p><p>剔除。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>《Zuul原理流程图》</p></blockquote><p>让我们做，如何实现？</p><p>方案：请求过来-&gt;pre（一组，鉴权，限流之类的。）-&gt;route（一组，路由到别的服务，具体微服务。）-&gt;post（一组，处理响应）。</p><p>zuul本质就是filter。</p><p>通过filter解析url来决定我们去访问哪个微服务。</p><p>发请求访问微服务，也是通过filter实现。</p><p>响应数据，也是通过filter实现。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>所有断点入口打在：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ZuulServlet中service方法第一行。</span><br><span class="line"></span><br><span class="line">从ZuulFilter类的Object res = run();进入每个过滤器。包括路由转发规则（此时debug主要 走route方法。不是preRoute）。</span><br><span class="line">我只debug了。RibbonRoutingFilter（debug时。list有三个RibbonRoutingFilter，SimpleHostRoutingFilter，SendForwardFilter）。ServletDetectionFilter。通过网关token地址去debug。</span><br><span class="line"></span><br><span class="line">选择路由用哪个过滤器，注意每个路由规则过滤器的：</span><br><span class="line">@Override</span><br><span class="line">public boolean <span class="function"><span class="title">shouldFilter</span></span>() &#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="built_in">return</span> (ctx.getRouteHost() == null &amp;&amp; ctx.get(SERVICE_ID_KEY) != null</span><br><span class="line">&amp;&amp; ctx.sendZuulResponse());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入口开关（所有启动类上的开关，套路都一样。）"><a href="#入口开关（所有启动类上的开关，套路都一样。）" class="headerlink" title="入口开关（所有启动类上的开关，套路都一样。）"></a>入口开关（所有启动类上的开关，套路都一样。）</h3><p>spring-cloud-netflix-zuul-2.1.3.RELEASE.jar中spring.factories</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration</span><br></pre></td></tr></table></figure><p>点ZuulProxyAutoConfiguration进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)</span><br><span class="line">public class ZuulProxyAutoConfiguration extends ZuulServerAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>知道了@EnableZuulProxy的作用，开关。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Import(ZuulProxyMarkerConfiguration.class)</span><br><span class="line">public @interface EnableZuulProxy &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着：看ZuulProxyAutoConfiguration中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">服务发现</span><br><span class="line">@Autowired</span><br><span class="line">private DiscoveryClient discovery;</span><br><span class="line"></span><br><span class="line">ribbon相关</span><br><span class="line">在 import注解中，有RibbonCommandFactoryConfiguration</span><br><span class="line"></span><br><span class="line">还注入了 </span><br><span class="line">pre filter（PreDecorationFilter点进去看 filterType）</span><br><span class="line">routing filter：（RibbonRoutingFilter，SimpleHostRoutingFilter，进去查看filterType） </span><br><span class="line"></span><br><span class="line">post filter：在ZuulServerAutoConfiguration中注入的SendResponseFilter。</span><br><span class="line">error filter:和post都在ZuulServerAutoConfiguration。SendErrorFilte</span><br><span class="line">各种过滤器等，搜索注释可以看到。</span><br></pre></td></tr></table></figure><p>PreDecorationFilter：解析决定使用哪种url。</p><p>RibbonRoutingFilter：向微服务发请求</p><p>SendResponseFilter：接受微服务响应，并向用户响应。</p><h3 id="主要filter执行流程"><a href="#主要filter执行流程" class="headerlink" title="主要filter执行流程"></a>主要filter执行流程</h3><p>debug  上面3个类的中的 run方法。</p><p>PreDecorationFilter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">final String requestURI = this.urlPathHelper</span><br><span class="line">.getPathWithinApplication(ctx.getRequest());</span><br><span class="line">// 根据请求路径获取route</span><br><span class="line">Route route = this.routeLocator.getMatchingRoute(requestURI);</span><br><span class="line"><span class="keyword">if</span> (route != null) &#123;</span><br><span class="line">String location = route.getLocation();</span><br><span class="line"><span class="keyword">if</span> (location != null) &#123;</span><br><span class="line">ctx.put(REQUEST_URI_KEY, route.getPath());</span><br><span class="line">ctx.put(PROXY_KEY, route.getId());</span><br><span class="line"><span class="keyword">if</span> (!route.isCustomSensitiveHeaders()) &#123;</span><br><span class="line">this.proxyRequestHelper.addIgnoredHeaders(</span><br><span class="line">this.properties.getSensitiveHeaders().toArray(new String[0]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">this.proxyRequestHelper.addIgnoredHeaders(</span><br><span class="line">route.getSensitiveHeaders().toArray(new String[0]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (route.getRetryable() != null) &#123;</span><br><span class="line">ctx.put(RETRYABLE_KEY, route.getRetryable());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (location.startsWith(HTTP_SCHEME + <span class="string">":"</span>)</span><br><span class="line">|| location.startsWith(HTTPS_SCHEME + <span class="string">":"</span>)) &#123;</span><br><span class="line">ctx.setRouteHost(getUrl(location));</span><br><span class="line">ctx.addOriginResponseHeader(SERVICE_HEADER, location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (location.startsWith(FORWARD_LOCATION_PREFIX)) &#123;</span><br><span class="line">ctx.set(FORWARD_TO_KEY,</span><br><span class="line">StringUtils.cleanPath(</span><br><span class="line">location.substring(FORWARD_LOCATION_PREFIX.length())</span><br><span class="line">+ route.getPath()));</span><br><span class="line">ctx.setRouteHost(null);</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">// <span class="built_in">set</span> serviceId <span class="keyword">for</span> use <span class="keyword">in</span> filters.route.RibbonRequest</span><br><span class="line">ctx.set(SERVICE_ID_KEY, location);</span><br><span class="line">ctx.setRouteHost(null);</span><br><span class="line">ctx.addOriginResponseHeader(SERVICE_ID_HEADER, location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (this.properties.isAddProxyHeaders()) &#123;</span><br><span class="line">addProxyHeaders(ctx, route);</span><br><span class="line">String xforwardedfor = ctx.getRequest()</span><br><span class="line">.getHeader(X_FORWARDED_FOR_HEADER);</span><br><span class="line">serviceId虚拟主机名。（spring.application.name，vhost）</span><br><span class="line">String remoteAddr = ctx.getRequest().getRemoteAddr();</span><br><span class="line"><span class="keyword">if</span> (xforwardedfor == null) &#123;</span><br><span class="line">xforwardedfor = remoteAddr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!xforwardedfor.contains(remoteAddr)) &#123; // Prevent duplicates</span><br><span class="line">xforwardedfor += <span class="string">", "</span> + remoteAddr;</span><br><span class="line">&#125;</span><br><span class="line">ctx.addZuulRequestHeader(X_FORWARDED_FOR_HEADER, xforwardedfor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (this.properties.isAddHostHeader()) &#123;</span><br><span class="line">ctx.addZuulRequestHeader(HttpHeaders.HOST,</span><br><span class="line">toHostHeader(ctx.getRequest()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(<span class="string">"No route found for uri: "</span> + requestURI);</span><br><span class="line">String forwardURI = getForwardUri(requestURI);</span><br><span class="line"></span><br><span class="line">ctx.set(FORWARD_TO_KEY, forwardURI);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line">解析url地址，获取到当前要使用的是哪个 route。没有具体业务。</span><br></pre></td></tr></table></figure><p>RibbonRoutingFilter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">this.helper.addIgnoredHeaders();</span><br><span class="line">try &#123;</span><br><span class="line">RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line">// 得到请求微服务的结果。进入forward，在下面。</span><br><span class="line">ClientHttpResponse response = forward(commandContext);</span><br><span class="line">setResponse(response);</span><br><span class="line"><span class="built_in">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">catch (ZuulException ex) &#123;</span><br><span class="line">throw new ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">throw new ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected ClientHttpResponse forward(RibbonCommandContext context) throws Exception &#123;</span><br><span class="line">Map&lt;String, Object&gt; info = this.helper.debug(context.getMethod(),</span><br><span class="line">context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">context.getRequestEntity());</span><br><span class="line">// 用ribbon来访问</span><br><span class="line">RibbonCommand <span class="built_in">command</span> = this.ribbonCommandFactory.create(context);</span><br><span class="line">try &#123;</span><br><span class="line">// 向微服务发起请求，也就是执行具体请求，此处的<span class="built_in">command</span>，有熔断功能，回想熔断 也是用<span class="built_in">command</span></span><br><span class="line">ClientHttpResponse response = command.execute();往里走：会走到熔断的地方（execute）。</span><br><span class="line">this.helper.appendDebug(info, response.getRawStatusCode(),</span><br><span class="line">response.getHeaders());</span><br><span class="line"><span class="built_in">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">catch (HystrixRuntimeException ex) &#123;</span><br><span class="line"><span class="built_in">return</span> handleException(info, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">底层的请求在：AbstractRibbonCommand类中的protected ClientHttpResponse run() throws Exception &#123;中<span class="keyword">if</span> (retryableClient) &#123;</span><br><span class="line">response = this.client.execute(request, config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">response = this.client.executeWithLoadBalancer(request, config);</span><br><span class="line">&#125;发起执行。底层走到了ribbon的源码。回忆ribbon源码。回忆httpclient okclient等的配置。还有用hystrix包裹请求。</span><br></pre></td></tr></table></figure><p>实际请求走的ribbon。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.loadbalancer.LoadBalancerContext</span><br><span class="line">通过reconstructURIWithServer替换成 微服务实际的ip+port</span><br></pre></td></tr></table></figure><p>SendResponseFilter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">添加响应头</span><br><span class="line">addResponseHeaders();</span><br><span class="line">向客户端写数据</span><br><span class="line">writeResponse();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器存储"><a href="#过滤器存储" class="headerlink" title="过滤器存储"></a>过滤器存储</h3><p>其父类ZuulProxyAutoConfiguration extends ZuulServerAutoConfiguration</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">在缺失zuulServlet bean的情况下注入了ZuulServlet</span><br><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line">@ConditionalOnProperty(name = <span class="string">"zuul.use-filter"</span>, havingValue = <span class="string">"false"</span>, matchIfMissing = <span class="literal">true</span>)</span><br><span class="line">public ServletRegistrationBean <span class="function"><span class="title">zuulServlet</span></span>() &#123;</span><br><span class="line">ServletRegistrationBean&lt;ZuulServlet&gt; servlet = new ServletRegistrationBean&lt;&gt;(</span><br><span class="line">new ZuulServlet(), this.zuulProperties.getServletPattern());</span><br><span class="line">// The whole point of exposing this servlet is to provide a route that doesn<span class="string">'t</span></span><br><span class="line"><span class="string">// buffer requests.</span></span><br><span class="line"><span class="string">servlet.addInitParameter("buffer-requests", "false");</span></span><br><span class="line"><span class="string">return servlet;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">另外也注册了一大堆过滤器。pre route post， error</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">还有初始化了</span></span><br><span class="line"><span class="string">@Bean</span></span><br><span class="line"><span class="string">public ZuulFilterInitializer zuulFilterInitializer(CounterFactory counterFactory,</span></span><br><span class="line"><span class="string">TracerFactory tracerFactory) &#123;</span></span><br><span class="line"><span class="string">FilterLoader filterLoader = FilterLoader.getInstance();</span></span><br><span class="line"><span class="string">FilterRegistry filterRegistry = FilterRegistry.instance();</span></span><br><span class="line"><span class="string">return new ZuulFilterInitializer(this.filters, counterFactory, tracerFactory,</span></span><br><span class="line"><span class="string">filterLoader, filterRegistry);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">点击FilterRegistry进去：</span></span><br><span class="line"><span class="string">private final ConcurrentHashMap&lt;String, ZuulFilter&gt; filters = new ConcurrentHashMap&lt;String, ZuulFilter&gt;();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">FilterRegistry管理了一个ConcurrentHashMap，用作存储过滤器的，并有一些基本的CURD过滤器的方法，</span></span><br></pre></td></tr></table></figure><h3 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h3><p>关键：（请求转发器）ZuulServlet，所有请求先到ZuulServlet</p><p>上面类注入了servlet，打开servlet，<strong><em>过滤器执行的关键</em></strong>  为什么 先pre，routing，post</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class ZuulServlet extends HttpServlet</span><br><span class="line"></span><br><span class="line">// zuul执行器，ZuulServlet直接访问这个类的方法</span><br><span class="line">private ZuulRunner zuulRunner;</span><br><span class="line"></span><br><span class="line">可以断点到service</span><br><span class="line">看业务逻辑：</span><br><span class="line">@Override</span><br><span class="line">    public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) throws ServletException, IOException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        //包装http请求和响应</span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">            // Marks this request as having passed through the <span class="string">"Zuul engine"</span>, as opposed to servlets</span><br><span class="line">            // explicitly bound <span class="keyword">in</span> web.xml, <span class="keyword">for</span> <span class="built_in">which</span> requests will not have the same data attached</span><br><span class="line">            </span><br><span class="line">            获取当前的请求上下文</span><br><span class="line">            RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">            context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">            执行前置过滤器，主要做权限严重，限流。debug一个一个进入。zuulRunner-&gt;FilterProcessor(由它来执行具体过滤器，)</span><br><span class="line">                preRoute();</span><br><span class="line">            &#125; catch (ZuulException e) &#123;</span><br><span class="line">            // 如果执行出错，先执行错误处理，再执行后置过滤器，此处注意一下</span><br><span class="line">                error(e);</span><br><span class="line">                // 为什么要走post，因为要响应用户，</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">            路由过滤器，有zuul构造请求，访问实际微服务。</span><br><span class="line">                route();</span><br><span class="line">            &#125; catch (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">            后置过滤器，将微服务的响应数据，响应给用户。</span><br><span class="line">                postRoute();</span><br><span class="line">            &#125; catch (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            error(new ZuulException(e, 500, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            RequestContext.getCurrentContext().<span class="built_in">unset</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">这个方法为每个请求生成了RequestContext,RequestContext继承了ConcurrentHashMap&lt;String, Object&gt;，在请求结束时销毁掉该RequestContext，RequestContext的生命周期为请求到zuulServlet开始处理，直到请求结束返回结果。</span><br><span class="line">RequestContext类在存储了很多重要的信息，包括HttpServletRequest、HttpServletRespons、ResponseDataStream、ResponseStatusCode等。 RequestContext对象在处理请求的过程中，一直存在，所以这个对象为所有Filter共享。</span><br><span class="line"></span><br><span class="line">从ZuulServlet的service（）方法可知，它是先处理pre()类型的处理器，然后在处理route()类型的处理器，最后再处理post类型的处理器。</span><br></pre></td></tr></table></figure><p>通过上面方法，可以得出如下结论：</p><p>RequestContext贯穿整个请求filter线程。</p><p>通过service方法，可以看出整个servlet的处理流程：<br>pre异常: pre -&gt; error -&gt; post<br>route异常： pre -&gt; route -&gt; error -&gt; post<br>post异常： pre -&gt; route -&gt; post -&gt; error<br>正常: pre -&gt; route -&gt; post<br>为什么最后都要走post，因为post最后，才能直接给用户响应数据。<br>pre:表示路由的前置过滤器链，route:表示路由的过滤器链，post:表示路由的后置过滤器链，error：表示路由错误过滤器链。<br>由此可见，责任链模式是zuul的核心。</p><p>处理，增加下一个处理的节点。</p><p>Zuul责任链模式的执行顺序由filterType和filterOrder共同决定。不同的类型执行顺序为：pre过滤器 -&gt; route过滤器 -&gt; post过滤器。同一类型的执行顺序为：按filterOrder值大小排序，filterOrder值越小，越先执行。</p><p>通过上面，就知道我们的自定义过滤器，应该如何写了。（回忆我们前面自定义过滤器），</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//获取当前上下文</span><br><span class="line">RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">HttpServletRequest request = requestContext.getRequest();</span><br></pre></td></tr></table></figure><h3 id="过滤器排序"><a href="#过滤器排序" class="headerlink" title="过滤器排序"></a>过滤器排序</h3><p>自定义过滤器的排序源码</p><p>在com.netflix.zuul.http.ZuulServlet中，service方法中，有一行：preRoute();点进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void preRoute() throws ZuulException &#123;</span><br><span class="line">        zuulRunner.preRoute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>点preRoute进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void preRoute() throws ZuulException &#123;</span><br><span class="line">        FilterProcessor.getInstance().preRoute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>点preRoute进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void preRoute() throws ZuulException &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        runFilters(<span class="string">"pre"</span>);</span><br><span class="line">    &#125; catch (ZuulException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; catch (Throwable e) &#123;</span><br><span class="line">        throw new ZuulException(e, 500, <span class="string">"UNCAUGHT_EXCEPTION_IN_PRE_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点runFilters进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public Object runFilters(String sType) throws Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean bResult = <span class="literal">false</span>;</span><br><span class="line">        List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">        <span class="keyword">if</span> (list != null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">                ZuulFilter zuulFilter = list.get(i);</span><br><span class="line">                Object result = processZuulFilter(zuulFilter);</span><br><span class="line">                <span class="keyword">if</span> (result != null &amp;&amp; result instanceof Boolean) &#123;</span><br><span class="line">                    bResult |= ((Boolean) result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> bResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>点getFiltersByType进去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;ZuulFilter&gt; getFiltersByType(String filterType) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;ZuulFilter&gt; list = hashFiltersByType.get(filterType);</span><br><span class="line">        <span class="keyword">if</span> (list != null) <span class="built_in">return</span> list;</span><br><span class="line"></span><br><span class="line">        list = new ArrayList&lt;ZuulFilter&gt;();</span><br><span class="line">通过注册器找到所有的过滤器</span><br><span class="line">        Collection&lt;ZuulFilter&gt; filters = filterRegistry.getAllFilters();</span><br><span class="line">        </span><br><span class="line">        查找指定类型的过滤器</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;ZuulFilter&gt; iterator = filters.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            ZuulFilter filter = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (filter.filterType().equals(filterType)) &#123;</span><br><span class="line">                list.add(filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        根据filterOrder排序</span><br><span class="line">        Collections.sort(list); // sort by priority</span><br><span class="line"></span><br><span class="line">        hashFiltersByType.putIfAbsent(filterType, list);</span><br><span class="line">        <span class="built_in">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看到了，排序方法。</p><h3 id="过滤器顺序"><a href="#过滤器顺序" class="headerlink" title="过滤器顺序"></a>过滤器顺序</h3><p>过滤器定义order</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FilterConstants</span><br><span class="line">看里面的顺序，我们可以定义我们的过滤器 何时执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FormBodyWrapperFilter-1pre 解析表单数据  </span><br><span class="line"></span><br><span class="line">SendErrorFilter0error 如果中途出现错误</span><br><span class="line"></span><br><span class="line">DEBUG_FILTER_ORDER  1：pre  设置请求过程是否开启debug</span><br><span class="line"></span><br><span class="line">PreDecorationFilter5pre 根据uri决定调用哪一个route过滤器</span><br><span class="line"></span><br><span class="line">RibbonRoutingFilter10route  如果写配置的时候用ServiceId，则用这个route过滤器，该过滤器可以用Ribbon 做负载均衡，用hystrix做熔断</span><br><span class="line"></span><br><span class="line">SimpleHostRoutingFilter100route  如果写配置的时候用url则用这个route过滤</span><br><span class="line"></span><br><span class="line">SendResponseFilter1000  post用RequestDispatcher请求转发</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">过滤器的order值越小，就越先执行，并且在执行过滤器的过程中，它们共享了一个RequestContext对象，该对象的生命周期贯穿于请求，可以看出优先执行了pre类型的过滤器，并将执行后的结果放在RequestContext中，供后续的filter使用，</span><br><span class="line"></span><br><span class="line">而error类型的过滤器，是在程序发生异常的时候执行的。</span><br><span class="line"></span><br><span class="line">post类型的过滤，在默认的情况下，只注入了SendResponseFilter，该类型的过滤器是将最终的请求结果以流的形式输出给客户端。</span><br></pre></td></tr></table></figure><p>打开：SendResponseFilter</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Object <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">addResponseHeaders();</span><br><span class="line">writeResponse();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex) &#123;</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void writeResponse() throws Exception &#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">// there is no body to send</span><br><span class="line"><span class="keyword">if</span> (context.getResponseBody() == null</span><br><span class="line">&amp;&amp; context.getResponseDataStream() == null) &#123;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">HttpServletResponse servletResponse = context.getResponse();</span><br><span class="line"><span class="keyword">if</span> (servletResponse.getCharacterEncoding() == null) &#123; // only <span class="built_in">set</span> <span class="keyword">if</span> not <span class="built_in">set</span></span><br><span class="line">servletResponse.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String servletResponseContentEncoding = getResponseContentEncoding(context);</span><br><span class="line">OutputStream outStream = servletResponse.getOutputStream();</span><br><span class="line">InputStream is = null;</span><br><span class="line">try &#123;</span><br><span class="line"><span class="keyword">if</span> (context.getResponseBody() != null) &#123;</span><br><span class="line">String body = context.getResponseBody();</span><br><span class="line">is = new ByteArrayInputStream(</span><br><span class="line">body.getBytes(servletResponse.getCharacterEncoding()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">is = context.getResponseDataStream();</span><br><span class="line"><span class="keyword">if</span> (is != null &amp;&amp; context.getResponseGZipped()) &#123;</span><br><span class="line">// <span class="keyword">if</span> origin response is gzipped, and client has not requested gzip,</span><br><span class="line">// decompress stream before sending to client</span><br><span class="line">// <span class="keyword">else</span>, stream gzip directly to client</span><br><span class="line"><span class="keyword">if</span> (isGzipRequested(context)) &#123;</span><br><span class="line">servletResponseContentEncoding = <span class="string">"gzip"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">servletResponseContentEncoding = null;</span><br><span class="line">is = handleGzipStream(is);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (servletResponseContentEncoding != null) &#123;</span><br><span class="line">servletResponse.setHeader(ZuulHeaders.CONTENT_ENCODING,</span><br><span class="line">servletResponseContentEncoding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is != null) &#123;</span><br><span class="line">writeResponse(is, outStream);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">/**</span><br><span class="line"> * We must ensure that the InputStream provided by our upstream pooling</span><br><span class="line"> * mechanism is ALWAYS closed even <span class="keyword">in</span> the <span class="keyword">case</span> of wrapped streams, <span class="built_in">which</span> are</span><br><span class="line"> * supplied by pooled sources such as Apache<span class="string">'s</span></span><br><span class="line"><span class="string"> * PoolingHttpClientConnectionManager. In that particular case, the underlying</span></span><br><span class="line"><span class="string"> * HTTP connection will be returned back to the connection pool iif either</span></span><br><span class="line"><span class="string"> * close() is explicitly called, a read error occurs, or the end of the</span></span><br><span class="line"><span class="string"> * underlying stream is reached. If, however a write error occurs, we will end</span></span><br><span class="line"><span class="string"> * up leaking a connection from the pool without an explicit close()</span></span><br><span class="line"><span class="string"> *</span></span><br><span class="line"><span class="string"> * @author Johannes Edmeier</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">if (is != null) &#123;</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">is.close();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">catch (Exception ex) &#123;</span></span><br><span class="line"><span class="string">log.warn("Error while closing upstream input stream", ex);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// cleanup ThreadLocal when we are all done</span></span><br><span class="line"><span class="string">if (buffers != null) &#123;</span></span><br><span class="line"><span class="string">buffers.remove();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">Object zuulResponse = context.get("zuulResponse");</span></span><br><span class="line"><span class="string">if (zuulResponse instanceof Closeable) &#123;</span></span><br><span class="line"><span class="string">((Closeable) zuulResponse).close();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">outStream.flush();</span></span><br><span class="line"><span class="string">// The container will close the stream for us</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">catch (IOException ex) &#123;</span></span><br><span class="line"><span class="string">log.warn("Error while sending response to client: " + ex.getMessage());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重点writeResponse方法。</span></span><br><span class="line"><span class="string">从RequestContext中获取ResponseBody获或者ResponseDataStream来写入到HttpServletResponse中的。</span></span><br></pre></td></tr></table></figure><p>RequestContext 贯穿整个请求。</p><h3 id="过滤器执行"><a href="#过滤器执行" class="headerlink" title="过滤器执行"></a>过滤器执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">FilterProcessor</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">     *</span><br><span class="line">     * 运行某种类型的所有过滤器</span><br><span class="line">     *</span><br><span class="line">     * @param sType 过滤器类型:pre,route,post,error</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     * @throws Throwable throws up an arbitrary exception</span><br><span class="line">     */</span><br><span class="line">    public Object runFilters(String sType) throws Throwable &#123;</span><br><span class="line">       <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">            // 如果开启了路由的请求日志 ，将日志添加到RequestContext对象中</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean bResult = <span class="literal">false</span>;</span><br><span class="line">        // </span><br><span class="line">        List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">        <span class="keyword">if</span> (list != null) &#123;</span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">                ZuulFilter zuulFilter = list.get(i);</span><br><span class="line">                // 【2】</span><br><span class="line">                Object result = processZuulFilter(zuulFilter);</span><br><span class="line">                <span class="keyword">if</span> (result != null &amp;&amp; result instanceof Boolean) &#123;</span><br><span class="line">                    // 如果结果是布尔类型</span><br><span class="line">                    bResult |= ((Boolean) result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> bResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(1) 添加路由日志</span><br><span class="line">(2) 根据过滤器的优先级排序整个过滤器链</span><br><span class="line">(3) 依次执行过滤器，如果是布尔类型汇总结果</span><br><span class="line"></span><br><span class="line">看这行：</span><br><span class="line">List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line"></span><br><span class="line">public Object processZuulFilter(ZuulFilter filter) throws ZuulException &#123;</span><br><span class="line"></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        boolean bDebug = ctx.debugRouting();</span><br><span class="line">        final String metricPrefix = <span class="string">"zuul.filter-"</span>;</span><br><span class="line">        long execTime = 0;</span><br><span class="line">        String filterName = <span class="string">""</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">            long ltime = System.currentTimeMillis();</span><br><span class="line">            filterName = filter.getClass().getSimpleName();</span><br><span class="line">            </span><br><span class="line">            RequestContext copy = null;</span><br><span class="line">            Object o = null;</span><br><span class="line">            Throwable t = null;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">                Debug.addRoutingDebug(<span class="string">"Filter "</span> + filter.filterType() + <span class="string">" "</span> + filter.filterOrder() + <span class="string">" "</span> + filterName);</span><br><span class="line">                copy = ctx.copy();</span><br><span class="line">            &#125;</span><br><span class="line">            // 执行，进去 ，在下面</span><br><span class="line">            ZuulFilterResult result = filter.runFilter();</span><br><span class="line">            ExecutionStatus s = result.getStatus();</span><br><span class="line">            execTime = System.currentTimeMillis() - ltime;</span><br><span class="line"></span><br><span class="line">            switch (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> FAILED:</span><br><span class="line">                    t = result.getException();</span><br><span class="line">                    ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                    o = result.getResult();</span><br><span class="line">                    ctx.addFilterExecutionSummary(filterName, ExecutionStatus.SUCCESS.name(), execTime);</span><br><span class="line">                    <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">                        Debug.addRoutingDebug(<span class="string">"Filter &#123;"</span> + filterName + <span class="string">" TYPE:"</span> + filter.filterType() + <span class="string">" ORDER:"</span> + filter.filterOrder() + <span class="string">"&#125; Execution time = "</span> + execTime + <span class="string">"ms"</span>);</span><br><span class="line">                        Debug.compareContextState(filterName, copy);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                default:</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (t != null) throw t;</span><br><span class="line"></span><br><span class="line">            usageNotifier.notify(filter, s);</span><br><span class="line">            <span class="built_in">return</span> o;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">                Debug.addRoutingDebug(<span class="string">"Running Filter failed "</span> + filterName + <span class="string">" type:"</span> + filter.filterType() + <span class="string">" order:"</span> + filter.filterOrder() + <span class="string">" "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            usageNotifier.notify(filter, ExecutionStatus.FAILED);</span><br><span class="line">            <span class="keyword">if</span> (e instanceof ZuulException) &#123;</span><br><span class="line">                throw (ZuulException) e;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ZuulException ex = new ZuulException(e, <span class="string">"Filter threw Exception"</span>, 500, filter.filterType() + <span class="string">":"</span> + filterName);</span><br><span class="line">                ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每个filter都要run方法。</span><br><span class="line">public ZuulFilterResult <span class="function"><span class="title">runFilter</span></span>() &#123;</span><br><span class="line">        ZuulFilterResult zr = new ZuulFilterResult();</span><br><span class="line">        <span class="keyword">if</span> (!isFilterDisabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shouldFilter()) &#123;</span><br><span class="line">                Tracer t = TracerFactory.instance().startMicroTracer(<span class="string">"ZUUL::"</span> + this.getClass().getSimpleName());</span><br><span class="line">                try &#123;</span><br><span class="line">                //  每个filter都要run方法。</span><br><span class="line">                    Object res = run();</span><br><span class="line">                    zr = new ZuulFilterResult(res, ExecutionStatus.SUCCESS);</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    t.setName(<span class="string">"ZUUL::"</span> + this.getClass().getSimpleName() + <span class="string">" failed"</span>);</span><br><span class="line">                    zr = new ZuulFilterResult(ExecutionStatus.FAILED);</span><br><span class="line">                    zr.setException(e);</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    t.stopAndLog();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                zr = new ZuulFilterResult(ExecutionStatus.SKIPPED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> zr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate和Ribbon原理及使用;</title>
      <link href="/2020/07/26/RestTemplate%E5%92%8CRibbon%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/26/RestTemplate%E5%92%8CRibbon%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">&#x2F;&#x2F; 开启负载均衡</span><br><span class="line">@LoadBalanced</span><br><span class="line">RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来便可以使用资源地址调用服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D;&quot;http:&#x2F;&#x2F;provider&#x2F;getHi&quot;;</span><br><span class="line">String respStr &#x3D; restTemplate.getForObject(url, String.class);</span><br></pre></td></tr></table></figure><h3 id="get-请求处理"><a href="#get-请求处理" class="headerlink" title="get 请求处理"></a>get 请求处理</h3><h4 id="getForEntity"><a href="#getForEntity" class="headerlink" title="getForEntity"></a>getForEntity</h4><p>getForEntity方法的返回值是一个ResponseEntity，ResponseEntity是Spring对HTTP请求响应的封装，包括了几个重要的元素，如响应码、contentType、contentLength、响应消息体等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;200,Hi,[Content-Type:&quot;text&#x2F;plain;charset&#x3D;UTF-8&quot;, Content-Length:&quot;8&quot;, Date:&quot;Fri, 10 Apr 2020 09:58:44 GMT&quot;, Keep-Alive:&quot;timeout&#x3D;60&quot;, Connection:&quot;keep-alive&quot;]&gt;</span><br></pre></td></tr></table></figure><h4 id="返回一个Map"><a href="#返回一个Map" class="headerlink" title="返回一个Map"></a>返回一个Map</h4><p><strong>调用方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D;&quot;http:&#x2F;&#x2F;provider&#x2F;getMap&quot;;</span><br><span class="line">   </span><br><span class="line">ResponseEntity&lt;Map&gt; entity &#x3D; restTemplate.getForEntity(url, Map.class);</span><br><span class="line">   </span><br><span class="line">System.out.println(&quot;respStr: &quot;  + entity.getBody() );</span><br></pre></td></tr></table></figure><p><strong>生产方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;getMap&quot;)</span><br><span class="line">public Map&lt;String, String&gt; getMap() &#123;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;name&quot;, &quot;500&quot;);</span><br><span class="line">return map; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h4><p><strong>调用方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;Person&gt; entity &#x3D; restTemplate.getForEntity(url, Person.class);</span><br><span class="line">   </span><br><span class="line">System.out.println(&quot;respStr: &quot;  + ToStringBuilder.reflectionToString(entity.getBody() ));</span><br></pre></td></tr></table></figure><p><strong>生产方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;getObj&quot;)</span><br><span class="line">public Person getObj() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">person.setId(100);</span><br><span class="line">person.setName(&quot;xiaoming&quot;);</span><br><span class="line">return person; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Person类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private int id;</span><br><span class="line">private String name;</span><br></pre></td></tr></table></figure><h4 id="传参调用"><a href="#传参调用" class="headerlink" title="传参调用"></a>传参调用</h4><p><strong>使用占位符</strong></p><pre><code>String url =&quot;http://provider/getObjParam?name={1}&quot;;ResponseEntity&lt;Person&gt; entity = restTemplate.getForEntity(url, Person.class,&quot;hehehe...&quot;);</code></pre><p><strong>使用map</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D;&quot;http:&#x2F;&#x2F;provider&#x2F;getObjParam?name&#x3D;&#123;name&#125;&quot;;</span><br><span class="line">   </span><br><span class="line">Map&lt;String, String&gt; map &#x3D; Collections.singletonMap(&quot;name&quot;, &quot; memeda&quot;);</span><br><span class="line">ResponseEntity&lt;Person&gt; entity &#x3D; restTemplate.getForEntity(url, Person.class,map);</span><br></pre></td></tr></table></figure><h4 id="返回对象-1"><a href="#返回对象-1" class="headerlink" title="返回对象"></a>返回对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person &#x3D; restTemplate.getForObject(url, Person.class,map);</span><br></pre></td></tr></table></figure><h3 id="post-请求处理"><a href="#post-请求处理" class="headerlink" title="post 请求处理"></a>post 请求处理</h3><p><strong>调用方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String url &#x3D;&quot;http:&#x2F;&#x2F;provider&#x2F;postParam&quot;;</span><br><span class="line">   </span><br><span class="line">Map&lt;String, String&gt; map &#x3D; Collections.singletonMap(&quot;name&quot;, &quot; memeda&quot;);</span><br><span class="line"> ResponseEntity&lt;Person&gt; entity &#x3D; restTemplate.postForEntity(url, map, Person.class);</span><br></pre></td></tr></table></figure><p><strong>生产方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;postParam&quot;)</span><br><span class="line">public Person postParam(@RequestBody String name) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;name:&quot; + name);</span><br><span class="line"></span><br><span class="line">Person person &#x3D; new Person();</span><br><span class="line">person.setId(100);</span><br><span class="line">person.setName(&quot;xiaoming&quot; + name);</span><br><span class="line">return person; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="postForLocation"><a href="#postForLocation" class="headerlink" title="postForLocation"></a>postForLocation</h3><p><strong>调用方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String url &#x3D;&quot;http:&#x2F;&#x2F;provider&#x2F;postParam&quot;;</span><br><span class="line">   </span><br><span class="line">Map&lt;String, String&gt; map &#x3D; Collections.singletonMap(&quot;name&quot;, &quot; memeda&quot;);</span><br><span class="line">URI location &#x3D; restTemplate.postForLocation(url, map, Person.class);</span><br><span class="line"></span><br><span class="line">System.out.println(location);</span><br></pre></td></tr></table></figure><p><strong>生产方</strong></p><p>需要设置头信息，不然返回的是null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public URI postParam(@RequestBody Person person,HttpServletResponse response) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">URI uri &#x3D; new URI(&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;s?wd&#x3D;&quot;+person.getName());</span><br><span class="line">response.addHeader(&quot;Location&quot;, uri.toString());</span><br></pre></td></tr></table></figure><h3 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h3><p>可以自定义http请求的头信息，同时保护get和post方法</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>需要实现<code>ClientHttpRequestInterceptor</code>接口</p><p><strong>拦截器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class LoggingClientHttpRequestInterceptor implements ClientHttpRequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution)</span><br><span class="line">throws IOException &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;拦截啦！！！&quot;);</span><br><span class="line">System.out.println(request.getURI());</span><br><span class="line"></span><br><span class="line">ClientHttpResponse response &#x3D; execution.execute(request, body);</span><br><span class="line"></span><br><span class="line">System.out.println(response.getHeaders());</span><br><span class="line">return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到resttemplate中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">RestTemplate restTemplate() &#123;</span><br><span class="line">RestTemplate restTemplate &#x3D; new RestTemplate();</span><br><span class="line">restTemplate.getInterceptors().add(new LoggingClientHttpRequestInterceptor());</span><br><span class="line">return restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h2><h3 id="两种负载均衡"><a href="#两种负载均衡" class="headerlink" title="两种负载均衡"></a>两种负载均衡</h3><p>​        当系统面临大量的用户访问，负载过高的时候，通常会增加服务器数量来进行横向扩展（集群），多个服务器的负载需要均衡，以免出现服务器负载不均衡，部分服务器负载较大，部分服务器负载较小的情况。通过负载均衡，使得集群中服务器的负载保持在稳定高效的状态，从而提高整个系统的处理能力。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">软件负载均衡：nginx,lvs</span><br><span class="line"></span><br><span class="line">硬件负载均衡：F5</span><br><span class="line"></span><br><span class="line">我们只关注软件负载均衡，</span><br><span class="line">第一层可以用DNS，配置多个A记录，让DNS做第一层分发。</span><br><span class="line">第二层用比较流行的是反向代理，核心原理：代理根据一定规则，将http请求转发到服务器集群的单一服务器上。</span><br></pre></td></tr></table></figure><p>软件负载均衡分为：服务端（集中式），客户端。</p><p>服务端负载均衡：在客户端和服务端中间使用代理，nginx。</p><p>客户端负载均衡：根据自己的情况做负载。Ribbon就是。</p><p>客户端负载均衡和服务端负载均衡最大的区别在于 <strong><em>服务端地址列表的存储位置，以及负载算法在哪里</em></strong>。</p><h3 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h3><p>在客户端负载均衡中，所有的客户端节点都有一份自己要访问的服务端地址列表，这些列表统统都是从服务注册中心获取的；</p><h3 id="服务端负载均衡"><a href="#服务端负载均衡" class="headerlink" title="服务端负载均衡"></a>服务端负载均衡</h3><p>在服务端负载均衡中，客户端节点只知道单一服务代理的地址，服务代理则知道所有服务端的地址。</p><p>我们要学的Ribbon使用的是客户端负载均衡。</p><p>而在Spring Cloud中我们如果想要使用客户端负载均衡，方法很简单，使用@LoadBalanced注解即可，这样客户端在发起请求的时候会根据负载均衡策略从服务端列表中选择一个服务端，向该服务端发起网络请求，从而实现负载均衡。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Netflix/ribbon</span><br></pre></td></tr></table></figure><hr><p>上面几种负载均衡，硬件，软件（服务端nginx，客户端ribbon）。目的：将请求分发到其他功能相同的服务。</p><p>手动实现，其实也是它的原理，做事的方法。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">手写客户端负载均衡</span><br><span class="line">1、知道自己的请求目的地（虚拟主机名，默认是spring.application.name）</span><br><span class="line">2、获取所有服务端地址列表（也就是注册表）。</span><br><span class="line">3、选出一个地址，找到虚拟主机名对应的ip、port（将虚拟主机名 对应到 ip和port上）。</span><br><span class="line">4、发起实际请求(最朴素的请求)。</span><br></pre></td></tr></table></figure><p>Ribbon是Netflix开发的客户端负载均衡器，为Ribbon配置<strong>服务提供者地址列表</strong>后，Ribbon就可以基于某种<strong>负载均衡策略算法</strong>，自动地帮助服务消费者去请求 提供者。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。我们也可以实现自定义负载均衡算法。</p><p>Ribbon作为Spring Cloud的负载均衡机制的实现，</p><ol><li>Ribbon可以单独使用，作为一个独立的负载均衡组件。只是需要我们手动配置 服务地址列表。</li><li>Ribbon与Eureka配合使用时，Ribbon可自动从Eureka Server获取服务提供者地址列表（DiscoveryClient），并基于负载均衡算法，请求其中一个服务提供者实例。</li><li>Ribbon与OpenFeign和RestTemplate进行无缝对接，让二者具有负载均衡的能力。OpenFeign默认集成了ribbon。</li></ol><h3 id="Ribbon组成"><a href="#Ribbon组成" class="headerlink" title="Ribbon组成"></a>Ribbon组成</h3><p>官网首页：<a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">https://github.com/Netflix/ribbon</a></p><p>ribbon-core: 核心的通用性代码。api一些配置。</p><p>ribbon-eureka：基于eureka封装的模块，能快速集成eureka。</p><p>ribbon-examples：学习示例。</p><p>ribbon-httpclient：基于apache httpClient封装的rest客户端，集成了负载均衡模块，可以直接在项目中使用。</p><p>ribbon-loadbalancer：负载均衡模块。</p><p>ribbon-transport：基于netty实现多协议的支持。比如http，tcp，udp等。</p><h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><p>默认实现：</p><p>ZoneAvoidanceRule（区域权衡策略）：复合判断Server所在区域的性能和Server的可用性，轮询选择服务器。</p><p>其他规则：</p><p>BestAvailableRule（最低并发策略）：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。逐个找服务，如果断路器打开，则忽略。</p><p>RoundRobinRule（轮询策略）：以简单轮询选择一个服务器。按顺序循环选择一个server。</p><p>RandomRule（随机策略）：随机选择一个服务器。</p><p>AvailabilityFilteringRule（可用过滤策略）：会先过滤掉多次访问故障而处于断路器跳闸状态的服务和过滤并发的连接数量超过阀值得服务，然后对剩余的服务列表安装轮询策略进行访问。</p><p>WeightedResponseTimeRule（响应时间加权策略）：据平均响应时间计算所有的服务的权重，响应时间越快服务权重越大，容易被选中的概率就越高。刚启动时，如果统计信息不中，则使用RoundRobinRule(轮询)策略，等统计的信息足够了会自动的切换到WeightedResponseTimeRule。响应时间长，权重低，被选择的概率低。反之，同样道理。此策略综合了各种因素（网络，磁盘，IO等），这些因素直接影响响应时间。</p><p>RetryRule（重试策略）：先按照RoundRobinRule(轮询)的策略获取服务，如果获取的服务失败则在指定的时间会进行重试，进行获取可用的服务。如多次获取某个服务失败，就不会再次获取该服务。主要是在一个时间段内，如果选择一个服务不成功，就继续找可用的服务，直到超时。</p><h3 id="切换负载均衡策略"><a href="#切换负载均衡策略" class="headerlink" title="切换负载均衡策略"></a>切换负载均衡策略</h3><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public IRule myRule()&#123;</span><br><span class="line">&#x2F;&#x2F;return new RoundRobinRule();</span><br><span class="line">&#x2F;&#x2F;return new RandomRule();</span><br><span class="line">return new RetryRule();</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>针对服务定ribbon策略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure><p>给所有服务定ribbon策略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure><p>属性配置方式优先级高于Java代码。</p><h3 id="Ribbon脱离Eureka"><a href="#Ribbon脱离Eureka" class="headerlink" title="Ribbon脱离Eureka"></a>Ribbon脱离Eureka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ribbon.eureka.enabled=<span class="literal">false</span></span><br><span class="line">ribbon.listOfServers=localhost:80,localhost:81</span><br></pre></td></tr></table></figure><p>为service-sms设置 请求的网络地址列表。</p><p>Ribbon可以和服务注册中心Eureka一起工作，从服务注册中心获取服务端的地址信息，也可以在配置文件中使用listOfServers字段来设置服务端地址。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode题解--括号配对</title>
      <link href="/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/"/>
      <url>/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="括号配对"><a href="#括号配对" class="headerlink" title="括号配对"></a>括号配对</h4><p>括号有效配对是指：<br>1）任何一个左括号都能找到和其正确配对的右括号<br>2）任何一个右括号都能找到和其正确配对的左括号<br>有效的：    (())  ()()   (()())  等<br>无效的：     (()   )(     等</p><h5 id="问题1-怎么判断一个括号字符串有效？"><a href="#问题1-怎么判断一个括号字符串有效？" class="headerlink" title="问题1: 怎么判断一个括号字符串有效？"></a>问题1: 怎么判断一个括号字符串有效？</h5><p>思路:</p><ol><li>用栈: 麻烦</li><li>用单一变量, 遇到左括号count++, 遇到右括号count–, count&lt;0,返回false, 最后count==0, 返回true</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.tocharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 注意字符用单引号'('</span></span><br><span class="line">        count += str[i] == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题2-如果一个括号字符串无效，返回至少填几个字符能让其整体有效-LeetCode-921"><a href="#问题2-如果一个括号字符串无效，返回至少填几个字符能让其整体有效-LeetCode-921" class="headerlink" title="问题2: 如果一个括号字符串无效，返回至少填几个字符能让其整体有效 (LeetCode 921)"></a>问题2: 如果一个括号字符串无效，返回至少填几个字符能让其整体有效 (LeetCode 921)</h5><p>思路: </p><ol><li>遇到左括号, count++, 遇到右括号, count–</li><li>如果count == -1, need++, count恢复成0</li><li>返回count + need</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">needParenthese</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> need = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 遇到')'</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                need++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count + need; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minAddToMakeValid</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;S.length(); i++) &#123;</span><br><span class="line">            R += S.charAt(i) == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (R == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 缺左括号, 左右都要+1, 把R归0</span></span><br><span class="line">                L++;</span><br><span class="line">                R++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> L + R;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="问题3-返回一个括号字符串中，最长的括号有效子串的长度-动态规划-LeetCode-32"><a href="#问题3-返回一个括号字符串中，最长的括号有效子串的长度-动态规划-LeetCode-32" class="headerlink" title="问题3: 返回一个括号字符串中，最长的括号有效子串的长度 (动态规划) (LeetCode 32)"></a>问题3: 返回一个括号字符串中，最长的括号有效子串的长度 (动态规划) (LeetCode 32)</h5><p>思路:</p><ol><li><p>i位置是左括号, dp[i] = 0</p></li><li><p>i位置是右括号, dp[i] = dp[i - 1] + 2 + (pre &gt; 0 ? dp[pre -1] : 0);</p></li><li><p>i位置往前推dp[i-1]个数, 的前一个数</p><p><img src="/2020/07/26/LeetCode%E9%A2%98%E8%A7%A3-%E6%8B%AC%E5%8F%B7%E9%85%8D%E5%AF%B9/image-20200624125914653.png" alt="image-20200624125914653"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[str.length];</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认dp[0] = 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 左括号不管</span></span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="comment">// 与str[i] 配对的左括号位置pre</span></span><br><span class="line">            pre = i - dp[i - <span class="number">1</span>] -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// pre是有效的, 并且是左括号</span></span><br><span class="line">            <span class="keyword">if</span> (pre &gt;= <span class="number">0</span> &amp;&amp; str[pre] == <span class="string">'('</span>) &#123;</span><br><span class="line">                <span class="comment">// dp[i] = 前一个有效值 + 2 + 再前一个有效值(pre - 1要有效)</span></span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + <span class="number">2</span> + (pre &gt; <span class="number">0</span> ? dp[pre -<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题4-给定括号字符串-返回该字符串最大嵌套层数"><a href="#问题4-给定括号字符串-返回该字符串最大嵌套层数" class="headerlink" title="问题4: 给定括号字符串, 返回该字符串最大嵌套层数"></a>问题4: 给定括号字符串, 返回该字符串最大嵌套层数</h5><p>思路: 遇到左括号count++, 遇到右括号count–, 返回count最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="comment">// 辅助变量</span></span><br><span class="line">    <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] != <span class="string">')'</span> &amp;&amp; str[i] != <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">')'</span> &amp;&amp; --status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            status++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!isValid(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] str = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">            max = Math.max(max, ++count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC处理器适配器的源码详解</title>
      <link href="/2020/07/24/Spring%20MVC%E5%A4%84%E7%90%86%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/07/24/Spring%20MVC%E5%A4%84%E7%90%86%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="处理器适配器的详细处理过程"><a href="#处理器适配器的详细处理过程" class="headerlink" title="处理器适配器的详细处理过程"></a>处理器适配器的详细处理过程</h1><p>​        当把需要的处理器和适配器找到之后，下面就开始执行具体的处理过程了，通过下述代码进行调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv &#x3D; ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><p>找到RequestMappingHandlerAdapter的类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleInternal</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 先声明ModelAndView结果</span></span><br><span class="line">ModelAndView mav;</span><br><span class="line">        <span class="comment">// 检查请求是否支持，1、通过supportedMethods方法判断是否包含请求方法，2、检查请求中是否包含session</span></span><br><span class="line">checkRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class="line">        <span class="comment">// 处理时是否对session加锁，默认为false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">            <span class="comment">// 获取session对象</span></span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 对session是否为空做判断，如果不等于空</span></span><br><span class="line"><span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取session中锁对象</span></span><br><span class="line">Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">                <span class="comment">// 加锁后执行调用处理器方法逻辑</span></span><br><span class="line"><span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class="line">                <span class="comment">// 没有session，则忽略加所，直接执行调用处理器方法逻辑</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No synchronization on session demanded at all...</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果响应结果不包含缓存控制头</span></span><br><span class="line"><span class="keyword">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class="line">            <span class="comment">// 如果该处理器方法包含sessionAttribute</span></span><br><span class="line"><span class="keyword">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class="line"><span class="comment">// 应哟个sessionAttributes的缓存策略</span></span><br><span class="line">                applyCacheSeconds(response, <span class="keyword">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不包含SessionAttribute，准备请求。内部逻辑应用配置的缓存策略，本适配器默认没有缓存策略，故所有请求都不返回缓存响应头</span></span><br><span class="line">prepareResponse(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、mav-invokeHandlerMethod-request-response-handlerMethod"><a href="#1、mav-invokeHandlerMethod-request-response-handlerMethod" class="headerlink" title="1、mav = invokeHandlerMethod(request, response, handlerMethod);"></a>1、mav = invokeHandlerMethod(request, response, handlerMethod);</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 把请求和响应封装为一个ServletWebRequest对象</span></span><br><span class="line">ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建WebDataBinderFactory工厂，该工厂用于获取处理器方法对应的WebDataBinder组件</span></span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">            <span class="comment">// 获取当前处理器方法对应的Model工厂，该工厂用于获取处理器方法对应的model</span></span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"><span class="comment">// 创建一个Servlet下可调用处理器的方法，内部创建了一个ServletInvocableHandlerMethod对象</span></span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">            <span class="comment">//设置参数解析器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 设置返回值处理器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 设置DataBinder工厂</span></span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">            <span class="comment">// 设置参数名获取器，用于获取方法上的参数名</span></span><br><span class="line">invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"><span class="comment">// 创建用于处理过程中使用的ModelAndView容器</span></span><br><span class="line">ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">            <span class="comment">// 向MV容器中添加FlashMap的属性</span></span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">            <span class="comment">// 初始化Model，包含调用Model相关的初始化方法，如ModelAttribute注解标记的方法</span></span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line"><span class="comment">//在重定向时忽略默认的Model属性值，只考虑重定向Model的属性值，默认为true</span></span><br><span class="line">         mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"><span class="comment">// 准备异步相关的处理</span></span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line">LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用处理器方法并处理返回值</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取MV结果</span></span><br><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 标记请求完成</span></span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、WebDataBinderFactory-binderFactory-getDataBinderFactory-handlerMethod"><a href="#1、WebDataBinderFactory-binderFactory-getDataBinderFactory-handlerMethod" class="headerlink" title="1、WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);"></a>1、WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> WebDataBinderFactory <span class="title">getDataBinderFactory</span><span class="params">(HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取处理器方法所在的Bean类型</span></span><br><span class="line">Class&lt;?&gt; handlerType = handlerMethod.getBeanType();</span><br><span class="line">    <span class="comment">// 从InitBinder缓存中获取当前处理器类型标记了@InitBinder注释的方法</span></span><br><span class="line">Set&lt;Method&gt; methods = <span class="keyword">this</span>.initBinderCache.get(handlerType);</span><br><span class="line">    <span class="comment">// 如果为空，说明缓存中没有，进入获取逻辑</span></span><br><span class="line"><span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到所有标记了@InitBinder的方法</span></span><br><span class="line">methods = MethodIntrospector.selectMethods(handlerType, INIT_BINDER_METHODS);</span><br><span class="line"><span class="comment">// 添加到缓存中</span></span><br><span class="line">            <span class="keyword">this</span>.initBinderCache.put(handlerType, methods);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 保存全部标记了@InitBinder方法的结果列表</span></span><br><span class="line">List&lt;InvocableHandlerMethod&gt; initBinderMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Global methods first</span></span><br><span class="line">    <span class="comment">// 遍历全局InitBinder增强器缓存</span></span><br><span class="line"><span class="keyword">this</span>.initBinderAdviceCache.forEach((controllerAdviceBean, methodSet) -&gt; &#123;</span><br><span class="line">            <span class="comment">//  判断是否能够应用到当前处理器中，判断依据是@ControllerAdvice</span></span><br><span class="line"><span class="keyword">if</span> (controllerAdviceBean.isApplicableToBeanType(handlerType)) &#123;</span><br><span class="line">Object bean = controllerAdviceBean.resolveBean();</span><br><span class="line"><span class="keyword">for</span> (Method method : methodSet) &#123;</span><br><span class="line">initBinderMethods.add(createInitBinderMethod(bean, method));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="comment">// 添加处理器方法所在Bean的@InitBinder方法</span></span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">Object bean = handlerMethod.getBean();</span><br><span class="line">            <span class="comment">// 把Bean和方法封装为InvocableHandlerMethod</span></span><br><span class="line">initBinderMethods.add(createInitBinderMethod(bean, method));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 把InitBinder方法参数列表作为参数，创建WebDataBinder工厂</span></span><br><span class="line"><span class="keyword">return</span> createDataBinderFactory(initBinderMethods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、ModelFactory-modelFactory-getModelFactory-handlerMethod-binderFactory"><a href="#2、ModelFactory-modelFactory-getModelFactory-handlerMethod-binderFactory" class="headerlink" title="2、ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);"></a>2、ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ModelFactory <span class="title">getModelFactory</span><span class="params">(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取SessionAttributes的处理器，用于处理处理器Bean类型上标记的@SessionAttributes注解</span></span><br><span class="line">SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod);</span><br><span class="line">    <span class="comment">// 获取处理器Bean类型</span></span><br><span class="line">Class&lt;?&gt; handlerType = handlerMethod.getBeanType();</span><br><span class="line">    <span class="comment">// 从ModelAttribute缓存中获取Bean类型对应的@ModelAttribute标记的方法</span></span><br><span class="line">Set&lt;Method&gt; methods = <span class="keyword">this</span>.modelAttributeCache.get(handlerType);</span><br><span class="line"><span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若缓存中没有，则进入获取逻辑，获取处理器类型中标记了@ModelAttribute注解且未标记@RequestMapping注解的方法，作为ModelAttribute方法</span></span><br><span class="line">methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);</span><br><span class="line">            <span class="comment">// 加入缓存</span></span><br><span class="line"><span class="keyword">this</span>.modelAttributeCache.put(handlerType, methods);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 创建一个列表，用于保存@ModelAttribute注解标注方法的InvocableHandlerMethod，可以调用封装</span></span><br><span class="line">List&lt;InvocableHandlerMethod&gt; attrMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Global methods first</span></span><br><span class="line"><span class="keyword">this</span>.modelAttributeAdviceCache.forEach((controllerAdviceBean, methodSet) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 通过@ControllerAdvice的属性进行过滤，判断是否可被应哟个到当前处理器Bean中</span></span><br><span class="line"><span class="keyword">if</span> (controllerAdviceBean.isApplicableToBeanType(handlerType)) &#123;</span><br><span class="line">                <span class="comment">// 解析处理器增强Bean为实例</span></span><br><span class="line">Object bean = controllerAdviceBean.resolveBean();</span><br><span class="line"><span class="keyword">for</span> (Method method : methodSet) &#123;</span><br><span class="line">                    <span class="comment">//遍历对应的方法集合，创建ModelAttribute可调用方法，添加到结果列表中</span></span><br><span class="line">attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="comment">//全局@ModelAttribute方法添加完成之后，添加当前处理器Bean中的@ModelAttribute方法</span></span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">Object bean = handlerMethod.getBean();</span><br><span class="line">attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回Model工厂实例，封装全部@ModelAttribute的可调用方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelFactory(attrMethods, binderFactory, sessionAttrHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、ServletInvocableHandlerMethod-invocableMethod-createInvocableHandlerMethod-handlerMethod"><a href="#3、ServletInvocableHandlerMethod-invocableMethod-createInvocableHandlerMethod-handlerMethod" class="headerlink" title="3、ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);"></a>3、ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ServletInvocableHandlerMethod <span class="title">createInvocableHandlerMethod</span><span class="params">(HandlerMethod handlerMethod)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个新的对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletInvocableHandlerMethod(handlerMethod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、modelFactory-initModel-webRequest-mavContainer-invocableMethod"><a href="#4、modelFactory-initModel-webRequest-mavContainer-invocableMethod" class="headerlink" title="4、modelFactory.initModel(webRequest, mavContainer, invocableMethod);"></a>4、modelFactory.initModel(webRequest, mavContainer, invocableMethod);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initModel</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 使用SEssionAttribute处理器，先从Session中获取@SessionAttributes注解声明的session属性</span></span><br><span class="line">Map&lt;String, ?&gt; sessionAttributes = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttributes(request);</span><br><span class="line">    <span class="comment">// 把@SessionAttributes声明的session属性全部合并到ModelAndView容器中</span></span><br><span class="line">container.mergeAttributes(sessionAttributes);</span><br><span class="line">    <span class="comment">// 调用@ModelArrtibute注解标记的方法，把方法返回值放入ModelAndView容器的Model中</span></span><br><span class="line">invokeModelAttributeMethods(request, container);</span><br><span class="line"><span class="comment">// 遍历返回的name列表</span></span><br><span class="line"><span class="keyword">for</span> (String name : findSessionAttributeArguments(handlerMethod)) &#123;</span><br><span class="line">            <span class="comment">// 如果MV容器中不包含name属性，则从session中获取该属性，添加到容器中</span></span><br><span class="line"><span class="keyword">if</span> (!container.containsAttribute(name)) &#123;</span><br><span class="line">Object value = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttribute(request, name);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpSessionRequiredException(<span class="string">"Expected session attribute '"</span> + name + <span class="string">"'"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">container.addAttribute(name, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeModelAttributeMethods</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 遍历全部模型属性方法，直到为空</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="keyword">this</span>.modelMethods.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取当前遍历的可调用模型属性方法</span></span><br><span class="line">InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod();</span><br><span class="line">            <span class="comment">// 检查该方法上是否存在@ModelAttribute注解</span></span><br><span class="line">ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Assert.state(ann != <span class="keyword">null</span>, <span class="string">"No ModelAttribute annotation"</span>);</span><br><span class="line">            <span class="comment">// 如果当前容器中已经包含了模型属性方法声明的模型名，则不覆盖现有属性</span></span><br><span class="line"><span class="keyword">if</span> (container.containsAttribute(ann.name())) &#123;</span><br><span class="line">                <span class="comment">// 如果注解标记了binding=false,则把这个属性名添加到容器的不绑定列表中，用于在参数绑定时忽略此模型属性的绑定</span></span><br><span class="line"><span class="keyword">if</span> (!ann.binding()) &#123;</span><br><span class="line">container.setBindingDisabled(ann.name());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据请求执行模型属性方法，获取模型属性方法的返回值</span></span><br><span class="line">Object returnValue = modelMethod.invokeForRequest(request, container);</span><br><span class="line">            <span class="comment">// 如果方法声明的返回值类型不是void，则继续处理这个返回值</span></span><br><span class="line"><span class="keyword">if</span> (!modelMethod.isVoid())&#123;</span><br><span class="line">                <span class="comment">// 根据返回值与返回类型获取返回的属性名，一般是从方法注解@ModelAttribute的name属性中获取该属性名</span></span><br><span class="line">String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType());</span><br><span class="line">                <span class="comment">// 判断是否声明了binding=false</span></span><br><span class="line"><span class="keyword">if</span> (!ann.binding()) &#123;</span><br><span class="line">container.setBindingDisabled(returnValueName);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">// 再次判断容器的Model中是否包含此模型属性</span></span><br><span class="line"><span class="keyword">if</span> (!container.containsAttribute(returnValueName)) &#123;</span><br><span class="line">                    <span class="comment">// 不包含，则把模型属性名与对应的返回值添加到容器中</span></span><br><span class="line">container.addAttribute(returnValueName, returnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、invocableMethod-invokeAndHandle-webRequest-mavContainer"><a href="#5、invocableMethod-invokeAndHandle-webRequest-mavContainer" class="headerlink" title="5、invocableMethod.invokeAndHandle(webRequest, mavContainer);"></a>5、invocableMethod.invokeAndHandle(webRequest, mavContainer);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 执行调用方法获取处理器方法的返回值，内部包含参数解析</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    <span class="comment">// 设置响应状态码</span></span><br><span class="line">setResponseStatus(webRequest);</span><br><span class="line"><span class="comment">// 如果返回值为空</span></span><br><span class="line"><span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果判断请求内容未修改或响应状态码不是空或容器中标记了请求已处理</span></span><br><span class="line"><span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="keyword">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">disableContentCachingIfNecessary(webRequest);</span><br><span class="line">                <span class="comment">// 表示请求已经处理完成，直接返回</span></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果响应状态原因存在内容，则直接返回</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果请求没有被处理，则标记请求未被处理</span></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">false</span>);</span><br><span class="line">Assert.state(<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>, <span class="string">"No return value handlers"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行返回值处理器的处理返回逻辑</span></span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 异常记录日志，并且抛出</span></span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 解析处理器方法的所有参数，返回一个参数数组，用于反射调用</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Arguments: "</span> + Arrays.toString(args));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 通过反射执行真实的处理器方法，获取处理器方法执行后的返回值，此处就是调用Controller中的方法</span></span><br><span class="line"><span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">    <span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 获取方法上的参数数组</span></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line">    <span class="comment">// 遍历参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 拿到数组中当前遍历的参数</span></span><br><span class="line">MethodParameter parameter = parameters[i];</span><br><span class="line">            <span class="comment">// 初始化参数的参数名获取器，以用来获取参数名</span></span><br><span class="line">parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">            <span class="comment">// 解析通过providedArgs提供的预留参数，当providedArgs中有与当前遍历的参数类型匹配的参数值时，直接使用该值作为最终调用的参数值，在处理器方法调用时，providedArgs为空，但在异常解析方法与@InitBinder方法调用时，有额外提供的参数</span></span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">            <span class="comment">// 如果能从已提供参数中获取，则继续进行下一个参数的解析</span></span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 尝试判断参数解析器是否支持这个参数，如果支持，则执行解析逻辑</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">"No suitable resolver"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行参数解析器的解析参数逻辑，获取参数值</span></span><br><span class="line">args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String exMsg = ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if (!this.resolvers.supportsParameter(parameter))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 返回的参数解析器不为空，则视为支持</span></span><br><span class="line"><span class="keyword">return</span> getArgumentResolver(parameter) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 优先从缓存中获取</span></span><br><span class="line">HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line"><span class="comment">// 如果缓存为空</span></span><br><span class="line">   <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 执行遍历判断逻辑，遍历内部的全部参数解析器</span></span><br><span class="line"><span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line">               <span class="comment">//执行参数解析器的判断逻辑，判断当前遍历中参数解析器是否支持当前参数</span></span><br><span class="line"><span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">                   <span class="comment">// 如果支持，则指定result为当前参数解析器，并添加到缓存</span></span><br><span class="line">result = resolver;</span><br><span class="line"><span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 返回支持该参数的参数解析器</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 执行获取参数解析器逻辑，直接从缓存中获取</span></span><br><span class="line">HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</span><br><span class="line">    <span class="comment">// 一般不会等于空</span></span><br><span class="line"><span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unsupported parameter type ["</span> +</span><br><span class="line">parameter.getParameterType().getName() + <span class="string">"]. supportsParameter should be called first."</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 执行这个参数解析器的解析参数逻辑</span></span><br><span class="line"><span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>this.returnValueHandlers.handleReturnValue(<br>                    returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(@Nullable Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 选择返回值处理器列表中支持当前返回值的处理器</span></span><br><span class="line">HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);</span><br><span class="line"><span class="comment">// 如果为空，则表示无法处理返回值，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown return value type: "</span> + returnType.getParameterType().getName());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 调用选择的返回值处理器的处理返回值方法，对返回值及返回值相关的MV容器及Web请求进行处理，返回值处理器的返回逻辑不返回任何结果，处理后的结果都是通过MV传递</span></span><br><span class="line">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title">selectHandler</span><span class="params">(@Nullable Object value, MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断返回值是否是异步类型，但此处判断逻辑默认都是false，因为所有的异步结构都是作为同步结果进行处理的，在同步结果的处理器中做溢写异步操作实现异步结果的处理</span></span><br><span class="line"><span class="keyword">boolean</span> isAsyncValue = isAsyncReturnValue(value, returnType);</span><br><span class="line">    <span class="comment">// 遍历当前组合组件封装的全部返回值处理器</span></span><br><span class="line"><span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="keyword">this</span>.returnValueHandlers) &#123;</span><br><span class="line">            <span class="comment">// 如果是异步结果，且当前处理器不是异步返回值处理器，则直接跳过</span></span><br><span class="line"><span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 判断当前遍历中返回值处理器是否支持该返回值类型，如果支持则直接返回，一个结果只能有一个返回值处理器</span></span><br><span class="line"><span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、getModelAndView-mavContainer-modelFactory-webRequest"><a href="#6、getModelAndView-mavContainer-modelFactory-webRequest" class="headerlink" title="6、getModelAndView(mavContainer, modelFactory, webRequest);"></a>6、getModelAndView(mavContainer, modelFactory, webRequest);</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">getModelAndView</span><span class="params">(ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 通过model工厂更新model中的值</span></span><br><span class="line">modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">        <span class="comment">// 如果是已经处理过的请求，则返回的MV为空，后续不再执行处理</span></span><br><span class="line"><span class="keyword">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 获取MV容器中的ModelMap，包含了所有的Model属性</span></span><br><span class="line">ModelMap model = mavContainer.getModel();</span><br><span class="line">        <span class="comment">// 创建新的MV对象</span></span><br><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class="line">        <span class="comment">//如果容器中的视图不是视图名引用</span></span><br><span class="line"><span class="keyword">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class="line">            <span class="comment">// 直接设置返回ModelAndView中的视图</span></span><br><span class="line">mav.setView((View) mavContainer.getView());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 如果模型属性是RediretAttributes类型，说明是通过RedirectAttributes类型引入的参数添加的模型属性值，即重定向属性</span></span><br><span class="line"><span class="keyword">if</span> (model <span class="keyword">instanceof</span> RedirectAttributes) &#123;</span><br><span class="line">            <span class="comment">// 获取重定向模型属性中需要留给重定向后请求使用的闪存属性</span></span><br><span class="line">Map&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class="line">            <span class="comment">// 通过传入的请求封装获取原始的请求</span></span><br><span class="line">HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 如果请求不为空</span></span><br><span class="line"><span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 把重定向的删除属性添加到当前请求的输出FlashMap中</span></span><br><span class="line">RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁常见解决方案;</title>
      <link href="/2020/07/23/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/07/23/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>千万级流量以上的项目，基本上都会用redis。</p><p>RedLock，redis创始人 比较提出的方案。</p><h2 id="我们真的需要锁么？"><a href="#我们真的需要锁么？" class="headerlink" title="我们真的需要锁么？"></a>我们真的需要锁么？</h2><p>需要锁的条件：</p><ol><li>多任务环境下。（进程，线程）</li><li>任务都对同一共享资源进行写操作。</li><li>对资源的访问是互斥的。</li></ol><p>操作周期：</p><ol><li>竞争锁。获取锁后才能对资源进行操作。</li><li>占有锁。操作中。</li><li>其他竞争者，任务阻塞。</li><li>占有锁者，释放锁。继续从1开始。</li></ol><p>JVM 锁 解决不了分布式环境中的加锁问题。</p><p>分布式锁应用场景：服务集群，比如N个订单服务，接受到大量司机的发送的对一个订单的抢单请求。如果是单个服务，可以用jvm锁控制，但是服务集群，jvm 就不行了。因为不在一个jvm中。</p><h2 id="分布式锁解决方案"><a href="#分布式锁解决方案" class="headerlink" title="分布式锁解决方案"></a>分布式锁解决方案</h2><p>api-driver,                   eureka 7900          service-order 8004,8005</p><h2 id="无锁情况"><a href="#无锁情况" class="headerlink" title="无锁情况"></a>无锁情况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Qualifier(<span class="string">"grabNoLockService"</span>)</span><br><span class="line"></span><br><span class="line">tb_order表中 status设置0</span><br><span class="line"></span><br><span class="line">执行jmeter。司机抢单。</span><br><span class="line">结果：</span><br><span class="line">司机:1 执行抢单逻辑</span><br><span class="line">司机:2 执行抢单逻辑</span><br><span class="line">司机:1 抢单成功</span><br><span class="line">司机:3 执行抢单逻辑</span><br><span class="line">司机:2 抢单成功</span><br><span class="line">司机:4 执行抢单逻辑</span><br><span class="line">司机:3 抢单失败</span><br><span class="line">司机:5 执行抢单逻辑</span><br><span class="line">司机:4 抢单失败</span><br><span class="line">司机:6 执行抢单逻辑</span><br><span class="line">司机:5 抢单失败</span><br><span class="line">司机:7 执行抢单逻辑</span><br><span class="line">司机:6 抢单失败</span><br><span class="line">司机:8 执行抢单逻辑</span><br><span class="line">司机:7 抢单失败</span><br><span class="line">司机:8 抢单失败</span><br><span class="line">司机:9 执行抢单逻辑</span><br><span class="line">司机:10 执行抢单逻辑</span><br><span class="line">司机:9 抢单失败</span><br><span class="line">司机:10 抢单失败</span><br><span class="line"></span><br><span class="line">1和2 都抢单成功。</span><br></pre></td></tr></table></figure><h2 id="JVM-锁"><a href="#JVM-锁" class="headerlink" title="JVM 锁"></a>JVM 锁</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Qualifier(<span class="string">"grabJvmLockService"</span>)</span><br><span class="line"></span><br><span class="line">司机:1 执行抢单逻辑</span><br><span class="line">2020-03-07 12:20:46.931  INFO 20484 --- [nio-8004-exec-1] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-9&#125; inited</span><br><span class="line">司机:1 抢单成功</span><br><span class="line">司机:10 执行抢单逻辑</span><br><span class="line">司机:10 抢单失败</span><br><span class="line">司机:9 执行抢单逻辑</span><br><span class="line">司机:9 抢单失败</span><br><span class="line">司机:8 执行抢单逻辑</span><br><span class="line">司机:8 抢单失败</span><br><span class="line">司机:7 执行抢单逻辑</span><br><span class="line">司机:7 抢单失败</span><br><span class="line">司机:6 执行抢单逻辑</span><br><span class="line">司机:6 抢单失败</span><br><span class="line">司机:5 执行抢单逻辑</span><br><span class="line">司机:5 抢单失败</span><br><span class="line">司机:4 执行抢单逻辑</span><br><span class="line">司机:4 抢单失败</span><br><span class="line">司机:3 执行抢单逻辑</span><br><span class="line">司机:3 抢单失败</span><br><span class="line">司机:2 执行抢单逻辑</span><br><span class="line">司机:2 抢单失败</span><br><span class="line"></span><br><span class="line">只有一个抢单成功</span><br></pre></td></tr></table></figure><p>但是：启动两个service-order8004,8005，则有下面情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">8005:</span><br><span class="line">司机:1 执行抢单逻辑</span><br><span class="line">2020-03-07 12:43:49.821  INFO 9292 --- [nio-8005-exec-1] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">司机:1 抢单成功</span><br><span class="line">司机:9 执行抢单逻辑</span><br><span class="line">司机:9 抢单失败</span><br><span class="line">司机:7 执行抢单逻辑</span><br><span class="line">司机:7 抢单失败</span><br><span class="line">司机:5 执行抢单逻辑</span><br><span class="line">司机:5 抢单失败</span><br><span class="line">司机:3 执行抢单逻辑</span><br><span class="line">司机:3 抢单失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8004:</span><br><span class="line">司机:2 执行抢单逻辑</span><br><span class="line">2020-03-07 12:43:49.977  INFO 8880 --- [nio-8004-exec-1] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">司机:2 抢单成功</span><br><span class="line">司机:10 执行抢单逻辑</span><br><span class="line">司机:10 抢单失败</span><br><span class="line">司机:8 执行抢单逻辑</span><br><span class="line">司机:8 抢单失败</span><br><span class="line">司机:6 执行抢单逻辑</span><br><span class="line">司机:6 抢单失败</span><br><span class="line">司机:4 执行抢单逻辑</span><br><span class="line">司机:4 抢单失败</span><br></pre></td></tr></table></figure><p>问题：无法解决分布式，集群环境的问题。所以要用分布锁</p><h2 id="基于mysql"><a href="#基于mysql" class="headerlink" title="基于mysql"></a>基于mysql</h2><p>测试时要恢复数据。tbl_order 中status 为0，tbl_order_lock清空</p><p>@Qualifier(“grabMysqlLockService”) 实际用 事件实现。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">8005:</span><br><span class="line">司机6加锁成功</span><br><span class="line">司机:6 执行抢单逻辑</span><br><span class="line">司机:6 抢单成功</span><br><span class="line">司机4加锁成功</span><br><span class="line">司机:4 执行抢单逻辑</span><br><span class="line">司机:4 抢单失败</span><br><span class="line">司机8加锁成功</span><br><span class="line">司机:8 执行抢单逻辑</span><br><span class="line">司机:8 抢单失败</span><br><span class="line">司机10加锁成功</span><br><span class="line">司机:10 执行抢单逻辑</span><br><span class="line">司机:10 抢单失败</span><br><span class="line">司机2加锁成功</span><br><span class="line">司机:2 执行抢单逻辑</span><br><span class="line">司机:2 抢单失败</span><br><span class="line"></span><br><span class="line">8004:</span><br><span class="line">2020-03-07 12:50:04.938  INFO 7356 --- [nio-8004-exec-1] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">司机7加锁成功</span><br><span class="line">司机:7 执行抢单逻辑</span><br><span class="line">司机:7 抢单失败</span><br><span class="line">司机1加锁成功</span><br><span class="line">司机:1 执行抢单逻辑</span><br><span class="line">司机:1 抢单失败</span><br><span class="line">司机5加锁成功</span><br><span class="line">司机:5 执行抢单逻辑</span><br><span class="line">司机:5 抢单失败</span><br><span class="line">司机9加锁成功</span><br><span class="line">司机:9 执行抢单逻辑</span><br><span class="line">司机:9 抢单失败</span><br><span class="line">司机3加锁成功</span><br><span class="line">司机:3 执行抢单逻辑</span><br><span class="line">司机:3 抢单失败</span><br></pre></td></tr></table></figure><p>问题：</p><p>1、如果中间出异常了，如何释放锁，用存储过程，还是可以解决。</p><p>2、mysql 并发是由限制的。不适合高并发场景。</p><p>压测结果：<a href="https://help.aliyun.com/document_detail/150351.html?spm=a2c4g.11186623.6.1463.1e732d02nCMBBa" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/150351.html?spm=a2c4g.11186623.6.1463.1e732d02nCMBBa</a></p><p>牛逼点的：<a href="https://help.aliyun.com/document_detail/101100.html?spm=5176.11065259.1996646101.searchclickresult.5a6316bcjenDJn" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/101100.html?spm=5176.11065259.1996646101.searchclickresult.5a6316bcjenDJn</a></p><h2 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate 用法</span><br><span class="line">https://blog.csdn.net/zzz127333092/article/details/88742088</span><br></pre></td></tr></table></figure><p>redis：内存存储的数据结构服务器，内存数据库。可用于：数据库，高速缓存，消息队列。采用单线程模型，并发能力强大。10万并发没问题。</p><p>分布锁知识：</p><p>redis的单进程单线程。</p><p>缓存有效期。有效期到，删除数据。</p><p>setnx。当key存在，不做任何操作，key不存在，才设置。</p><blockquote><p>《Redis 分布锁》</p></blockquote><h4 id="单节点"><a href="#单节点" class="headerlink" title="单节点"></a>单节点</h4><p><strong><em>加锁</em></strong></p><p>SET orderId driverId NX PX 30000</p><p>上面的命令如果执行成功，则客户端成功获取到了锁，接下来就可以访问共享资源了；而如果上面的命令执行失败，则说明获取锁失败。</p><p><strong><em>释放锁</em></strong></p><p>关键，判断是不是自己加的锁。</p><p><strong><em>关注点</em></strong>：</p><ol><li><p>orderId，是我们的key，要锁的目标。</p></li><li><p>driverId是由我们的司机ID，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。即一个订单被一个司机抢。</p></li><li><p>NX表示只有当orderId不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。</p></li><li><p>PX 30000表示这个锁有一个30秒的自动过期时间。当然，这里30秒只是一个例子，客户端可以选择合适的过期时间。</p></li><li><p><strong>这个锁必须要设置一个过期时间。</strong>否则的话，当一个客户端获取锁成功之后，假如它崩溃了，或者由于发生了网络分区，导致它再也无法和Redis节点通信了，那么它就会一直持有这个锁，而其它客户端永远无法获得锁了。antirez在后面的分析中也特别强调了这一点，而且把这个过期时间称为锁的有效时间(lock validity time)。获得锁的客户端必须在这个时间之内完成对共享资源的访问。</p></li><li><p>此操作不能分割。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SETNX orderId driverId</span><br><span class="line">EXPIRE orderId 30</span><br><span class="line">虽然这两个命令和前面算法描述中的一个SET命令执行效果相同，但却不是原子的。如果客户端在执行完SETNX后崩溃了，那么就没有机会执行EXPIRE了，导致它一直持有这个锁。造成死锁。</span><br></pre></td></tr></table></figure></li><li><p>必须给key设置一个value。value保证每个线程不一样。如果value在每个线程间一样。会发生 误解锁的问题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.客户端1获取锁成功。</span><br><span class="line">2.客户端1在某个操作上阻塞了很长时间。</span><br><span class="line">3.过期时间到了，锁自动释放了。</span><br><span class="line">4.客户端2获取到了对应同一个资源的锁。</span><br><span class="line">5.客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class="line">之后，客户端2在访问共享资源的时候，就没有锁为它提供保护了。</span><br></pre></td></tr></table></figure></li><li><p>释放锁的操作，得释放自己加的锁。</p></li></ol>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.客户端1获取锁成功。</span><br><span class="line">2.客户端1访问共享资源。</span><br><span class="line">3.客户端1为了释放锁，先执行<span class="string">'GET'</span>操作获取随机字符串的值。</span><br><span class="line">4.客户端1判断随机字符串的值，与预期的值相等。</span><br><span class="line">5.客户端1由于某个原因阻塞住了很长时间。</span><br><span class="line">6.过期时间到了，锁自动释放了。</span><br><span class="line">7.客户端2获取到了对应同一个资源的锁。</span><br><span class="line">8.客户端1从阻塞中恢复过来，执行DEL操纵，释放掉了客户端2持有的锁。</span><br></pre></td></tr></table></figure><ol start="9"><li><p>redis故障问题。</p><p>如果redis故障了，所有客户端无法获取锁，服务变得不可用。为了提高可用性。我们给redis 配置主从。当master不可用时，系统切换到slave，由于Redis的主从复制（replication）是异步的，这可能导致丧失锁的安全性。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.客户端1从Master获取了锁。</span><br><span class="line">2.Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class="line">3.Slave升级为Master。</span><br><span class="line">4.客户端2从新的Master获取到了对应同一个资源的锁。</span><br></pre></td></tr></table></figure><p>客户端1和客户端2同时持有了同一个资源的锁。锁的安全性被打破。</p></li><li><p>这个算法中出现的锁的有效时间(lock validity time)，设置成多少合适呢？如果设置太短的话，锁就有可能在客户端完成对于共享资源的访问之前过期，从而失去保护；如果设置太长的话，一旦某个持有锁的客户端释放锁失败，那么就会导致所有其它客户端都无法获取锁，从而长时间内无法正常工作。应该设置稍微短一些，如果线程持有锁，开启线程自动延长有效期。</p></li></ol><p><strong><em>还有一点，如果在过期时间内，程序没有执行完，是不能让key过期的，所以要延时。</em></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">断点打在：rlock.lock();</span><br><span class="line">执行完，之后，等着，去redis查看，看过期时间，是不是一直在变，答案：一直在变。到20时，自动加到30.</span><br></pre></td></tr></table></figure><p>为了解决9.10问题。antirez设计了Redlock算法</p><p>Redis的作者antirez给出了一个更好的实现，称为Redlock，算是Redis官方对于实现分布式锁的指导规范。Redlock的算法描述就放在Redis的官网上：</p><p><a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a></p><h4 id="RedLock（多master）"><a href="#RedLock（多master）" class="headerlink" title="RedLock（多master）"></a>RedLock（多master）</h4><p>debug</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">断点达到：rLock.lock()</span><br><span class="line">执行完后，看结果，发现如果是3个redis节点，则有2个节点中 设置了值。</span><br></pre></td></tr></table></figure><p>目的：对共享资源做互斥访问。   </p><p>因此antirez提出了新的分布式锁的算法Redlock，它基于N个完全独立的Redis节点（通常情况下N可以设置成5）。</p><p>运行Redlock算法的客户端依次执行下面各个步骤，来完成 获取锁 的操作：</p><ol><li>获取当前时间（毫秒数）。</li><li>按顺序依次向N个Redis节点执行 <strong>获取锁</strong> 的操作。这个获取操作跟前面基于单Redis节点的 <strong>获取锁</strong> 的过程相同，包含value driverId ，也包含过期时间(比如 <code>PX 30000</code> ，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个 <strong>获取锁</strong> 的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。这里的失败，应该包含任何类型的失败，比如该Redis节点不可用，或者该Redis节点上的锁已经被其它客户端持有（注：Redlock原文中这里只提到了Redis节点不可用的情况，但也应该包含其它的失败情况）。</li><li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li><li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li><li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起 <strong>释放锁</strong> 的操作（即前面介绍的Redis Lua脚本）。</li></ol><p>当然，上面描述的只是 获取锁 的过程，而 释放锁 的过程比较简单：客户端向所有Redis节点发起 释放锁 的操作，不管这些节点当时在获取锁的时候成功与否。</p><p>问题：</p><p>由于N个Redis节点中的大多数能正常工作就能保证Redlock正常工作，因此理论上它的可用性更高。我们前面讨论的单Redis节点的分布式锁在failover的时候锁失效的问题，在Redlock中不存在了，但如果有节点发生崩溃重启，还是会对锁的安全性有影响的。具体的影响程度跟Redis对数据的持久化程度有关。</p><p>假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</p><ol><li>客户端1成功锁住了A, B, C， <strong>获取锁</strong> 成功（但D和E没有锁住）。</li><li>节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</li><li>节点C重启后，客户端2锁住了C, D, E， <strong>获取锁</strong> 成功。</li></ol><p>这样，客户端1和客户端2同时获得了锁（针对同一资源）。</p><p>在默认情况下，Redis的AOF持久化方式是每秒写一次磁盘（即执行fsync），因此最坏情况下可能丢失1秒的数据。为了尽可能不丢数据，Redis允许设置成每次修改数据都进行fsync，但这会降低性能。当然，即使执行了fsync也仍然有可能丢失数据（这取决于系统而不是Redis的实现）。所以，上面分析的由于节点重启引发的锁失效问题，总是有可能出现的。为了应对这一问题，antirez又提出了 延迟重启 (delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p><p>关于Redlock还有一点细节值得拿出来分析一下：在最后 释放锁 的时候，antirez在算法描述中特别强调，客户端应该向所有Redis节点发起 释放锁 的操作。也就是说，即使当时向某个节点获取锁没有成功，在释放锁的时候也不应该漏掉这个节点。这是为什么呢？设想这样一种情况，客户端发给某个Redis节点的 获取锁 的请求成功到达了该Redis节点，这个节点也成功执行了 <code>SET</code>操作，但是它返回给客户端的响应包却丢失了。这在客户端看来，获取锁的请求由于超时而失败了，但在Redis这边看来，加锁已经成功了。因此，释放锁的时候，客户端也应该对当时获取锁失败的那些Redis节点同样发起请求。实际上，这种情况在异步通信模型中是有可能发生的：客户端向服务器通信是正常的，但反方向却是有问题的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign原理及使用</title>
      <link href="/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>OpenFeign是Netflix 开发的声明式、模板化的HTTP请求客户端。可以更加便捷、优雅地调用http api。</p><p>OpenFeign会根据带有注解的函数信息构建出网络请求的模板，在发送网络请求之前，OpenFeign会将函数的参数值设置到这些请求模板中。</p><p>feign主要是构建微服务消费端。只要使用OpenFeign提供的注解修饰定义网络请求的接口类，就可以使用该接口的实例发送RESTful的网络请求。还可以集成Ribbon和Hystrix，提供负载均衡和断路器。</p><p>英文表意为“假装，伪装，变形”， 是一个 Http 请求调用的轻量级框架，可以以 Java 接口注解的方式调用 Http 请求，而不用像 Java 中通过封装 HTTP 请求报文的方式直接调用。通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求，这种请求相对而言比较直观。Feign 封装 了HTTP 调用流程，面向接口编程，回想第一节课的SOP。</p><h3 id="Feign和OpenFeign的关系"><a href="#Feign和OpenFeign的关系" class="headerlink" title="Feign和OpenFeign的关系"></a>Feign和OpenFeign的关系</h3><p>Feign本身不支持Spring MVC的注解，它有一套自己的注解</p><p>OpenFeign是Spring Cloud 在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等等。<br>OpenFeign的<code>@FeignClient</code>可以解析SpringMVC的@RequestMapping注解下的接口，<br>并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><h2 id="声明式服务调用"><a href="#声明式服务调用" class="headerlink" title="声明式服务调用"></a>声明式服务调用</h2><p>provider方提供公用API包，Feign通过SpringMVC的注解来加载URI</p><h3 id="1-创建项目User-Provider"><a href="#1-创建项目User-Provider" class="headerlink" title="1.创建项目User-Provider"></a>1.创建项目User-Provider</h3><p><img src="/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20200413170210544.png" alt="image-20200413170210544"></p><h4 id="选择依赖"><a href="#选择依赖" class="headerlink" title="选择依赖"></a><strong>选择依赖</strong></h4><p><img src="/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20200413170342890.png" alt="image-20200413170342890"></p><h3 id="2-创建项目User-API"><a href="#2-创建项目User-API" class="headerlink" title="2.创建项目User-API"></a>2.创建项目User-API</h3><p>依赖 spring-boot-starter-web</p><h4 id="创建一个接口-RegisterApi"><a href="#创建一个接口-RegisterApi" class="headerlink" title="创建一个接口 RegisterApi"></a>创建一个接口 RegisterApi</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.UserAPI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户操作相关接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一明哥</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/isAlive"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">isAlive</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-User-Provider-实现API"><a href="#3-User-Provider-实现API" class="headerlink" title="3.User-Provider 实现API"></a>3.User-Provider 实现API</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://euk1.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">81</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">user-provider</span></span><br></pre></td></tr></table></figure><h4 id="引入API"><a href="#引入API" class="headerlink" title="引入API"></a>引入API</h4><p>1.maven install User-Api项目</p><p>2.User-Provider的Pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing.User-API<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>User-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建UserController"><a href="#创建UserController" class="headerlink" title="创建UserController"></a>创建UserController</h4><p>实现Api的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.UserProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.UserAPI.RegisterApi;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">RegisterApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Consumer调用"><a href="#4-Consumer调用" class="headerlink" title="4.Consumer调用"></a>4.Consumer调用</h3><h4 id="创建项目User-Consumer"><a href="#创建项目User-Consumer" class="headerlink" title="创建项目User-Consumer"></a>创建项目User-Consumer</h4><p><img src="/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20200413171817399.png" alt="image-20200413171817399"></p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/2020/07/23/Feign%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/image-20200413171910314.png" alt="image-20200413171910314"></p><h4 id="引入API-1"><a href="#引入API-1" class="headerlink" title="引入API"></a>引入API</h4><p>Pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing.User-API<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>User-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://euk1.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">90</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consumer</span></span><br></pre></td></tr></table></figure><h4 id="创建Service接口"><a href="#创建Service接口" class="headerlink" title="创建Service接口"></a>创建Service接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.UserConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.UserAPI.RegisterApi;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"user-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConsumerService</span> <span class="keyword">extends</span> <span class="title">RegisterApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.mashibing.UserConsumer;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConsumerController &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">UserConsumerService consumerSrv;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;&#x2F;alive&quot;)</span><br><span class="line">public String alive() &#123;</span><br><span class="line"></span><br><span class="line">return consumerSrv.isAlive();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改启动类"><a href="#修改启动类" class="headerlink" title="修改启动类"></a>修改启动类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.mashibing.UserConsumer;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableFeignClients</span><br><span class="line">public class UserConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(UserConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>访问 <a href="http://localhost:90/alive" target="_blank" rel="noopener">http://localhost:90/alive</a> 即可完成声明式远程服务调用</p><h2 id="Get和Post"><a href="#Get和Post" class="headerlink" title="Get和Post"></a>Get和Post</h2><p>Feign默认所有带参数的请求都是Post，想要使用指定的提交方式需引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.openfeign&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feign-httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>并指明提交方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;&#x2F;alived&quot;, method &#x3D; RequestMethod.POST)</span><br><span class="line">@GetMapping(&quot;&#x2F;findById&quot;)</span><br></pre></td></tr></table></figure><h3 id="带参请求"><a href="#带参请求" class="headerlink" title="带参请求"></a>带参请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;findById&quot;)</span><br><span class="line">public Map findById(@RequestParam(&quot;id&quot;) Integer id);</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;&#x2F;register&quot;)</span><br><span class="line">public Map&lt;String, String&gt; reg(@RequestBody User user);</span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>feign的默认配置类是：org.springframework.cloud.openfeign.FeignClientsConfiguration。默认定义了feign使用的编码器，解码器等。</p><p>允许使用@FeignClient的configuration的属性自定义Feign配置。自定义的配置优先级高于上面的FeignClientsConfiguration。</p><p>通过权限的例子，学习feign的自定义配置。</p><p>服务提供者。上述例子开放service-valuation的权限 后，访问。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">开放权限：</span><br><span class="line">&lt;!-- 安全认证 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">// 关闭csrf</span><br><span class="line">http.csrf().<span class="built_in">disable</span>();</span><br><span class="line">// 表示所有的访问都必须认证，认证处理后才可以正常进行</span><br><span class="line">http.httpBasic().and().authorizeRequests().anyRequest().fullyAuthenticated();</span><br><span class="line">// 所有的rest服务一定要设置为无状态，以提升操作效率和性能</span><br><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spring: </span><br><span class="line">  security: </span><br><span class="line">    user: </span><br><span class="line">      name: root</span><br><span class="line">      password: root</span><br></pre></td></tr></table></figure><p>继续feign原来访问，报错。401。</p><p>有如下两种方式：</p><ol><li>自定义配置类。</li><li>增加拦截器。</li></ol><p><strong>自定义配置</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置类：</span><br><span class="line">public class FeignAuthConfiguration &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public BasicAuthRequestInterceptor <span class="function"><span class="title">basicAuthRequestInterceptor</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> new BasicAuthRequestInterceptor(<span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在feign上加配置</span><br><span class="line">@FeignClient(name = <span class="string">"service-valuation"</span>,configuration = FeignAuthConfiguration.class)</span><br></pre></td></tr></table></figure><p>OK，可以正常访问了。</p><p>小结：如果在配置类上添加了@Configuration注解，并且该类在@ComponentScan所扫描的包中，那么该类中的配置信息就会被所有的@FeignClient共享。最佳实践是：不指定@Configuration注解（或者指定configuration，用注解忽略），而是手动：</p><p>@FeignClient(name = “service-valuation”,configuration = FeignAuthConfiguration.class)</p><p><strong>拦截器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import feign.RequestInterceptor;</span><br><span class="line">import feign.RequestTemplate;</span><br><span class="line"></span><br><span class="line">public class MyBasicAuthRequestInterceptor implements RequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void apply(RequestTemplate template) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">template.header(<span class="string">"Authorization"</span>, <span class="string">"Basic cm9vdDpyb290"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  client: </span><br><span class="line">    config:  </span><br><span class="line">      service-valuation: </span><br><span class="line">        </span><br><span class="line">        request-interceptors:</span><br><span class="line">        - com.online.taxi.passenger.feign.interceptor.MyBasicAuthRequestInterceptor</span><br></pre></td></tr></table></figure><p>代码中取消上面的配置，访问，报401.用下面的方式。</p><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><ol><li>接上面例子，此例子和上面例子实现的功能一样。记得两者取一个即可。说明用属性而不是用属性中的configuration。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">定义拦截器</span><br><span class="line">public class MyBasicAuthRequestInterceptor implements RequestInterceptor &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void apply(RequestTemplate template) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">template.header(<span class="string">"Authorization"</span>, <span class="string">"Basic cm9vdDpyb290"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">feign:</span><br><span class="line">  client: </span><br><span class="line">    config:  </span><br><span class="line">      service-valuation: </span><br><span class="line">        request-interceptors:</span><br><span class="line">        - com.online.taxi.passenger.feign.interceptor.MyBasicAuthRequestInterceptor</span><br></pre></td></tr></table></figure><p>再次访问，测试Ok。</p><ol start="2"><li>扩展</li></ol><p>指定服务名称配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  client: </span><br><span class="line">    config:  </span><br><span class="line">      service-valuation: </span><br><span class="line">        connect-timeout: 5000</span><br><span class="line">        <span class="built_in">read</span>-timeout: 5000</span><br><span class="line">        logger-level: full</span><br></pre></td></tr></table></figure><p>   通用配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  client: </span><br><span class="line">    config:  </span><br><span class="line">      default: </span><br><span class="line">        connect-timeout: 5000</span><br><span class="line">        <span class="built_in">read</span>-timeout: 5000</span><br><span class="line">        logger-level: full</span><br></pre></td></tr></table></figure><p> 属性配置比Java代码优先级高。也可通过配置设置java代码优先级高。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">client: </span><br><span class="line">default-to-properties: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>feign在方法上可以设置：@RequestMapping,@ResponseBody。</p><p>方法中的参数可以设置：@RequestBody等等，Spring MVC中的注解。</p><p>推荐使用yml配置方式，在yml中按 代码提示键，可以看到所有配置。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>主程序入口添加@EnableFeignClients注解开启对Feign Client扫描加载处理。根据Feign Client的开发规范，定义接口并加@FeignClient注解。</li><li>当程序启动时，会进行包扫描，扫描所有@FeignClient注解的类，并将这些信息注入Spring IoC容器中。当定义的Feign接口中的方法被调用时，通过JDK的代理方式，来生成具体的RequestTemplate。当生成代理时，Feign会为每个接口方法创建一个RequestTemplate对象，该对象封装了HTTP请求需要的全部信息，如请求参数名、请求方法等信息都在这个过程中确定。</li><li>然后由RequestTemplate生成Request，然后把这个Request交给client处理，这里指的Client可以是JDK原生的URLConnection、Apache的Http Client，也可以是Okhttp。最后Client被封装到LoadBalanceClient类，这个类结合Ribbon负载均衡发起服务之间的调用。</li></ol><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>服务端provider配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#服务端开启压缩</span><br><span class="line">server.compression.enabled&#x3D;true</span><br></pre></td></tr></table></figure><p>调用方consumer配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#配置请求GZIP压缩</span><br><span class="line">feign.compression.request.enabled&#x3D;true</span><br><span class="line">#配置响应GZIP压缩</span><br><span class="line">feign.compression.response.enabled&#x3D;true</span><br><span class="line">#单位是B</span><br><span class="line">feign.compression.request.min-request-size&#x3D;100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis的分布式锁实现原理</title>
      <link href="/2020/07/23/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2020/07/23/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了防止分布式系统中的多个进程之间相互干扰，我们需要一种分布式协调技术来对这些进程进行调度。而这个分布式协调技术的核心就是来实现这个<strong>分布式锁</strong>。</p><h2 id="为什么要使用分布式锁"><a href="#为什么要使用分布式锁" class="headerlink" title="为什么要使用分布式锁"></a>为什么要使用分布式锁</h2><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-7cc8f57c65d81728.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/874/format/webp" alt="img"></p><ul><li>成员变量 A 存在 JVM1、JVM2、JVM3 三个 JVM 内存中</li><li>成员变量 A 同时都会在 JVM 分配一块内存，三个请求发过来同时对这个变量操作，显然结果是不对的</li><li>不是同时发过来，三个请求分别操作三个不同 JVM 内存区域的数据，变量 A 之间不存在共享，也不具有可见性，处理的结果也是不对的<br>注：该成员变量 A 是一个有状态的对象</li></ul><p>如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题，<strong>这就是分布式锁要解决的问题</strong></p><h2 id="分布式锁应该具备哪些条件"><a href="#分布式锁应该具备哪些条件" class="headerlink" title="分布式锁应该具备哪些条件"></a>分布式锁应该具备哪些条件</h2><ul><li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</li><li>高可用的获取锁与释放锁</li><li>高性能的获取锁与释放锁</li><li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li><li>具备锁失效机制，防止死锁</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li></ul><h2 id="分布式锁的实现有哪些"><a href="#分布式锁的实现有哪些" class="headerlink" title="分布式锁的实现有哪些"></a>分布式锁的实现有哪些</h2><ul><li>Memcached：利用 Memcached 的 <code>add</code> 命令。此命令是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>add</code> 成功，也就意味着线程得到了锁。</li><li>Redis：和 Memcached 的方式类似，利用 Redis 的 <code>setnx</code> 命令。此命令同样是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>set</code> 成功。</li><li><strong>Zookeeper</strong>：利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。Zookeeper 设计的初衷，就是为了实现分布式锁服务的。</li><li>Chubby：Google 公司实现的粗粒度分布式锁服务，底层利用了 Paxos 一致性算法。</li></ul><h2 id="通过-Redis-分布式锁的实现理解基本概念"><a href="#通过-Redis-分布式锁的实现理解基本概念" class="headerlink" title="通过 Redis 分布式锁的实现理解基本概念"></a>通过 Redis 分布式锁的实现理解基本概念</h2><p>分布式锁实现的三个核心要素：</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>最简单的方法是使用 <code>setnx</code> 命令。<code>key</code> 是锁的唯一标识，按业务来决定命名。比如想要给一种商品的秒杀活动加锁，可以给 <code>key</code> 命名为 “lock_sale_商品ID” 。而 <code>value</code> 设置成什么呢？我们可以姑且设置成 <code>1</code>。加锁的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx（lock_sale_商品ID，1）</span><br></pre></td></tr></table></figure><p>当一个线程执行 <code>setnx</code> 返回 <code>1</code>，说明 <code>key</code> 原本不存在，该线程成功得到了锁；当一个线程执行 <code>setnx</code> 返回 <code>0</code>，说明 <code>key</code> 已经存在，该线程抢锁失败。</p><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>有加锁就得有解锁。当得到锁的线程执行完任务，需要释放锁，以便其他线程可以进入。释放锁的最简单方式是执行 <code>del</code> 指令，伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span>（lock_sale_商品ID）</span><br></pre></td></tr></table></figure><p>释放锁之后，其他线程就可以继续执行 <code>setnx</code> 命令来获得锁。</p><h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>锁超时是什么意思呢？如果一个得到锁的线程在执行任务的过程中挂掉，来不及显式地释放锁，这块资源将会永远被锁住（<strong>死锁</strong>），别的线程再也别想进来。所以，<code>setnx</code> 的 <code>key</code> 必须设置一个超时时间，以保证即使没有被显式释放，这把锁也要在一定时间后自动释放。<code>setnx</code> 不支持超时参数，所以需要额外的指令，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire（lock_sale_商品ID， 30）</span><br></pre></td></tr></table></figure><p>综合伪代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（setnx（lock_sale_商品ID，<span class="number">1</span>） == <span class="number">1</span>）&#123;</span><br><span class="line">    expire（lock_sale_商品ID，<span class="number">30</span>）</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something ......</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        del（lock_sale_商品ID）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在什么问题"><a href="#存在什么问题" class="headerlink" title="存在什么问题"></a>存在什么问题</h3><p>以上伪代码中存在三个致命问题</p><h4 id="setnx-和-expire-的非原子性"><a href="#setnx-和-expire-的非原子性" class="headerlink" title="setnx 和 expire 的非原子性"></a><code>setnx</code> 和 <code>expire</code> 的非原子性</h4><p>设想一个极端场景，当某线程执行 <code>setnx</code>，成功得到了锁：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-153ca0fbc59af246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p><code>setnx</code> 刚执行成功，还未来得及执行 <code>expire</code> 指令，节点 1 挂掉了。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-616a3d3f9f42b60d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/520/format/webp" alt="img"></p><p>这样一来，这把锁就没有设置过期时间，变成<strong>死锁</strong>，别的线程再也无法获得锁了。</p><p>怎么解决呢？<code>setnx</code> 指令本身是不支持传入超时时间的，<code>set</code> 指令增加了可选参数，伪代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>（lock_sale_商品ID，1，30，NX）</span><br></pre></td></tr></table></figure><p>这样就可以取代 <code>setnx</code> 指令。</p><h4 id="del-导致误删"><a href="#del-导致误删" class="headerlink" title="del 导致误删"></a><code>del</code> 导致误删</h4><p>又是一个极端场景，假如某线程成功得到了锁，并且设置的超时时间是 30 秒。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-9c744a0adacf3591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>如果某些原因导致线程 A 执行的很慢很慢，过了 30 秒都没执行完，这时候锁过期自动释放，线程 B 得到了锁。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-aff00874eea4ffb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>随后，线程 A 执行完了任务，线程 A 接着执行 <code>del</code> 指令来释放锁。但这时候线程 B 还没执行完，线程A实际上 <code>删除的是线程 B 加的锁</code>。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-d641463ea89da638.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>怎么避免这种情况呢？可以在 <code>del</code> 释放锁之前做一个判断，验证当前的锁是不是自己加的锁。至于具体的实现，可以在加锁的时候把当前的线程 ID 当做 <code>value</code>，并在删除之前验证 <code>key</code> 对应的 <code>value</code> 是不是自己线程的 ID。</p><p>加锁：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> threadId = Thread.currentThread().getId()</span><br><span class="line"><span class="keyword">set</span>（key，threadId ，<span class="number">30</span>，NX）</span><br></pre></td></tr></table></figure><p>解锁：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（threadId .<span class="keyword">equals</span>(redisClient.<span class="keyword">get</span>(key))）&#123;</span><br><span class="line">    del(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样做又隐含了一个新的问题，判断和释放锁是两个独立操作，不是原子性。</p><h4 id="出现并发的可能性"><a href="#出现并发的可能性" class="headerlink" title="出现并发的可能性"></a>出现并发的可能性</h4><p>还是刚才第二点所描述的场景，虽然我们避免了线程 A 误删掉 <code>key</code> 的情况，但是同一时间有 A，B 两个线程在访问代码块，仍然是不完美的。怎么办呢？我们可以让获得锁的线程开启一个<strong>守护线程</strong>，用来给快要过期的锁“续航”。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-e6e284f3c6a07a85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>当过去了 29 秒，线程 A 还没执行完，这时候守护线程会执行 <code>expire</code> 指令，为这把锁“续命”20 秒。守护线程从第 29 秒开始执行，每 20 秒执行一次。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-723b942f08f9304b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>当线程 A 执行完任务，会显式关掉守护线程。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-316383d4d0af2be6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p><p>另一种情况，如果节点 1 忽然断电，由于线程 A 和守护线程在同一个进程，守护线程也会停下。这把锁到了超时的时候，没人给它续命，也就自动释放了。</p><p><img src="https:////upload-images.jianshu.io/upload_images/7986413-e41eb41db50fa1b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/510/format/webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解TCP/IP；</title>
      <link href="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/"/>
      <url>/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/</url>
      
        <content type="html"><![CDATA[<p>OSI七层参考模型</p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200405195932930.png" alt="image-20200405195932930" style="zoom:67%;"><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/206633-2d6f4a3abcd59745.png" alt="img" style="zoom: 50%;"><p>HTTP协议</p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200405200118533.png" alt="image-20200405200118533" style="zoom:80%;"><ol><li><p>应用层协议: HTTP协议, SSH协议</p><p>应用层想建立通信, 先阻塞, 调内核, 告诉内核想和谁通信</p></li><li><p>传输控制层, 如果是TCP协议, 制作一个握手的包, 制作之后阻塞, 调网络层</p></li><li><p>网络层触发路由条目判定, 拿着目标的IP地址, 从路由表(有网络层就有路由表)去找, 从哪个口出去合适(找到哪个下一跳合适), 调链路</p></li><li><p>链路层根据你要下一跳的IP地址, 通过ARP协议, 获取MAC地址, 有了映射之后, 封了一个数据包                     {源端口号-&gt;目标端口号  源IP地址-&gt;目标IP地址  源MAC地址-&gt;目标MAC地址} 三层完成寻址</p></li></ol><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/image-20200406173649038.png" alt="image-20200406173649038" style="zoom:50%;"><ol><li>arp广播, 可获得目标MAC地址</li><li>每一跳MAC地址都会改变, 目标IP地址不变</li><li>交换机衔接同一网络, 两层, 没有路由表</li><li>路由器衔接不同网络, 三层, 有路由表, 可以做路由转发和判定</li></ol><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/image-20200406172106856.png" alt="image-20200406172106856" style="zoom: 50%;"><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200406171335574.png" alt="image-20200406171335574"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200406173740380.png" alt="image-20200406173740380"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200406173811840.png" alt="image-20200406173811840"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200406173837272.png" alt="image-20200406173837272"></p><p>高并发负载均衡:</p><p>tomcat为什么慢?<br>是应用层, 要走很多层</p><p>LVS负载均衡服务器为什么快, 数据包级别, 没有七层, 要求后端服务器是镜像的<br>LVS四层, Nginx七层</p><p>一层lvs hold住流量(流量负载层)   一层nginx hold住握手(接入层,接到后边tomcat) </p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/image-20200406174544842.png" alt="image-20200406174544842" style="zoom: 67%;"><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200406181203062.png" alt="image-20200406181203062"></p><p>负载均衡两块网卡, VIP虚拟网课, DIP分发网卡</p><p>方案一慢, D-NAT(基于三层,换ip): 保证去回的IP能对应  非对称  去的时候赛车,回来的时候变卡车  能力有限</p><p>方案二快, DR(基于二层,换mac): 直接路由模型  MAC欺骗  企业用得最多的</p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/image-20200406180132566.png" alt="image-20200406180132566" style="zoom: 80%;"><ol><li>路由器有两个地址, 一个内网地址, 一个公网地址</li><li>私有地址解决IP地址不够用问题, 不会出现在互联网上</li><li>S-NAT: (源地址)路由器修改1.8和1.6的端口号, </li><li>上边图: VIP-&gt;RIP</li></ol><p>公开课</p><p>1.和百度建立连接 : 应用层  走的是HTTP协议</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413201303047.png" alt="image-20200413201303047"></p><p>2.发送get请求  / 根目录,主页</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413201650607.png" alt="image-20200413201650607"></p><p>3.查看响应</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413202032204.png" alt="image-20200413202032204"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413202554457.png" alt="image-20200413202554457"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413202541641.png" alt="image-20200413202541641"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413203550480.png" alt="image-20200413203550480"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413205903398.png" alt="image-20200413205903398"></p><p><a href="https://blog.csdn.net/pashanhu6402/article/details/96428887" target="_blank" rel="noopener">https://blog.csdn.net/pashanhu6402/article/details/96428887</a></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/20190718154523875.png" alt="img"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/20190718154556909.png" alt="img"></p><p>服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><p>共同开辟资源</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413204352374.png" alt="image-20200413204352374"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413204543971.png" alt="image-20200413204543971"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210433311.png" alt="image-20200413210433311"></p><p>每个socket都能开65536个端口<br>AC只占用一个端口<br>一个</p><p>多层映射, 唯一路径</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413205547335.png" alt="image-20200413205547335"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210039092.png" alt="image-20200413210039092"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210411534.png" alt="image-20200413210411534"></p><p>抓包<br><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210521953.png" alt="image-20200413210521953"></p><p>监听<br><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210614147.png" alt="image-20200413210614147"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413210838852.png" alt="image-20200413210838852"></p><p>不可被分割的对小粒度:  三次握手-&gt;数据传输-&gt;四次挥手</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413211230556.png" alt="image-20200413211230556"></p><p>LVS四层 高并发负载均衡器 不能随便发包</p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/../../../只要学不死 就往死里学/note/网络/TCP IP/image/TCP笔记/image-20200406174544842.png" alt="image-20200406174544842" style="zoom: 67%;"><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413211648782.png" alt="image-20200413211648782"></p><p>三次握手, 传输控制层做第一个包, 阻塞住, 给网络层, 网络层给链路层</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413212157100.png" alt="image-20200413212157100"></p><p>IP地址:点分字节,0-255<br>掩码: ip和11111100按位与,得到网络号192.168.150.0, 前三字段,<br>网关: 链路层下一跳的地址<br>DNS: 域名解析</p><p>路由表<br><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413212638496.png" alt="image-20200413212638496"></p><p>局域网不用走网关<br><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413213004272.png" alt="image-20200413213004272"></p><p>下一跳<br>链路层再封一层MAC地址</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214944503.png" alt="image-20200413214944503"></p><p>软件是工程学, 层与层是依赖的<br>先有arp, 再有三次握手</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214126593.png" alt="image-20200413214126593"></p><p>arp协议<br>地址解析协议，即ARP（Address Resolution Protocol），是根据<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>获取<a href="https://baike.baidu.com/item/物理地址/2129" target="_blank" rel="noopener">物理地址</a>的一个<a href="https://baike.baidu.com/item/TCP%2FIP协议" target="_blank" rel="noopener">TCP/IP协议</a>。<a href="https://baike.baidu.com/item/主机/455151" target="_blank" rel="noopener">主机</a>发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。</p><p>iconfig lo:3 192.168.88.88/24</p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214639062.png" alt="image-20200413214639062"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214812426.png" alt="image-20200413214812426"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214823949.png" alt="image-20200413214823949"></p><p><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image-20200413214856112.png" alt="image-20200413214856112"></p><p>跳板机<br><img src="/2020/07/23/%E5%9B%BE%E8%A7%A3TCP-IP/image/TCP%E7%AC%94%E8%AE%B0/image-20200413215151587.png" alt="image-20200413215151587"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC的进阶使用-2</title>
      <link href="/2020/07/20/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-2/"/>
      <url>/2020/07/20/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC的使用-2"><a href="#Spring-MVC的使用-2" class="headerlink" title="Spring MVC的使用-2"></a>Spring MVC的使用-2</h1><h3 id="1、SpringMVC的返回JSON数据"><a href="#1、SpringMVC的返回JSON数据" class="headerlink" title="1、SpringMVC的返回JSON数据"></a>1、SpringMVC的返回JSON数据</h3><p>​        到目前为止我们编写的所有Controller的方法的返回值都是String类型，但是大家应该都知道，我们有时候数据传递特别是在ajax中，我们返回的数据经常需要使用json，那么如何来保证返回的数据的是json格式呢？使用@ResponseBody注解</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmv_ajax<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JsonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">json</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"zhangsan"</span>,<span class="number">12</span>,<span class="string">"男"</span>,<span class="keyword">new</span> Date(),<span class="string">"1234@qq.com"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"zhangsan2"</span>,<span class="number">12</span>,<span class="string">"男"</span>,<span class="keyword">new</span> Date(),<span class="string">"1234@qq.com"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">"zhangsan3"</span>,<span class="number">12</span>,<span class="string">"男"</span>,<span class="keyword">new</span> Date(),<span class="string">"1234@qq.com"</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@JsonFormat</span>( pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Integer age, String gender, Date birth, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时@ResponseBody可以直接将返回的字符串数据作为响应内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testResponseBody"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;h1&gt;success&lt;/h1&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、发送ajax请求获取json数据"><a href="#2、发送ajax请求获取json数据" class="headerlink" title="2、发送ajax请求获取json数据"></a>2、发送ajax请求获取json数据</h3><p>ajax.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="script/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"ctp"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;a href="$&#123;ctp&#125;/json"&gt;获取用户信息&lt;/a&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(<span class="string">"a:first"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"$&#123;ctp&#125;/json"</span>,</span><br><span class="line">            type:<span class="string">"GET"</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                console.log(data)</span><br><span class="line">                $.each(data,function() &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="keyword">this</span>.id+<span class="string">"--"</span>+<span class="keyword">this</span>.name+<span class="string">"--"</span>+<span class="keyword">this</span>.age+<span class="string">"--"</span>+<span class="keyword">this</span>.gender+<span class="string">"--"</span>+<span class="keyword">this</span>.birth+<span class="string">"--"</span>+<span class="keyword">this</span>.email;</span><br><span class="line">                    $(<span class="string">"div"</span>).append(user+<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3、使用-RequestBody获取请求体信息"><a href="#3、使用-RequestBody获取请求体信息" class="headerlink" title="3、使用@RequestBody获取请求体信息"></a>3、使用@RequestBody获取请求体信息</h3><p>testOther.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"ctp"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/testRequestBody"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"username"</span> value=<span class="string">"zhangsan"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input name=<span class="string">"password"</span> value=<span class="string">"123456"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>OtherController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求体："</span>+body);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时@RequestBody能够接受json格式的请求数据：</p><p>testOther.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;script type="text/javascript" src="script/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"ctp"</span>,request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctp&#125;/testRequestBody"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"username"</span> value=<span class="string">"zhangsan"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input name=<span class="string">"password"</span> value=<span class="string">"123456"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> &gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;a href="$&#123;ctp&#125;/testRequestJson"&gt;发送json数据&lt;/a&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(<span class="string">"a:first"</span>).click(function () &#123;</span><br><span class="line">        <span class="keyword">var</span> user = &#123;id:<span class="string">"1"</span>,name:<span class="string">"zhangsan"</span>,age:<span class="string">"12"</span>,gender:<span class="string">"男"</span>,birth:<span class="string">"2020-3-13"</span>,email:<span class="string">"123@qq.com"</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> userJson = JSON.stringify(user);</span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           url:<span class="string">"$&#123;ctp&#125;/testRequestJson"</span>,</span><br><span class="line">           type:<span class="string">"POST"</span>,</span><br><span class="line">           data:userJson,</span><br><span class="line">           contentType:<span class="string">"application/json"</span>,</span><br><span class="line">           success:function (data) &#123;</span><br><span class="line">               alert(data);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>OtherController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请求体："</span>+body);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestJson"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象："</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接受请求的时候还可以使用HttpEntity对象，用来接受参数，可以获取请求头信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testHttpEntity"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(HttpEntity&lt;String&gt; httpEntity)</span></span>&#123;</span><br><span class="line">        System.out.println(httpEntity);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用RespsonseEntity可以用来定制响应内容"><a href="#4、使用RespsonseEntity可以用来定制响应内容" class="headerlink" title="4、使用RespsonseEntity可以用来定制响应内容"></a>4、使用RespsonseEntity可以用来定制响应内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testResponseEntity"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">testResponseEntity</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String body = <span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span>;</span><br><span class="line">        MultiValueMap&lt;String,String&gt; header = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        header.add(<span class="string">"Set-Cookie"</span>,<span class="string">"name=zhangsan"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ResponseEntity&lt;String&gt;(body,header, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、文件下载"><a href="#5、文件下载" class="headerlink" title="5、文件下载"></a>5、文件下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取要下载文件的路径及输入流对象</span></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/script/jquery-1.9.1.min.js"</span>);</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fileInputStream.available()];</span><br><span class="line">        fileInputStream.read(bytes);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        <span class="comment">//将要下载文件内容返回</span></span><br><span class="line">        HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        httpHeaders.set(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename=jquery-1.9.1.min.js"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(bytes,httpHeaders,HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、文件上传"><a href="#6、文件上传" class="headerlink" title="6、文件上传"></a>6、文件上传</h3><p>​        Spring MVC 为文件上传提供了直接的支持，这种支持是通过即插即用的 <strong>MultipartResolver</strong> 实现的。Spring 用 <strong>Jakarta Commons FileUpload</strong> 技术实现了一个 MultipartResolver 实现类：<strong>CommonsMultipartResovler</strong>  </p><p>​        Spring MVC 上下文中默认没有装配 MultipartResovler，因此默认情况下不能处理文件的上传工作，如果想使用 Spring 的文件上传功能，需现在上下文中配置 MultipartResolver。</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc_upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"1024000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">"testUpload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    描述: &lt;input type=<span class="string">"text"</span> name=<span class="string">"desc"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>UploadHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testUpload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testUpload</span><span class="params">(@RequestParam(value = <span class="string">"desc"</span>, required = <span class="keyword">false</span>)</span> String desc, @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"desc : "</span> + desc);</span><br><span class="line">        System.out.println(<span class="string">"OriginalFilename : "</span> + multipartFile.getOriginalFilename());</span><br><span class="line">        multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">"D:\\file\\"</span>+multipartFile.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">//增加成功页面: /views/success.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">success</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果是多文件上传，那么又改如何处理呢？</p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form action=<span class="string">"testUpload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    文件: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    文件: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    描述: &lt;input type=<span class="string">"text"</span> name=<span class="string">"desc"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>UploadHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testUpload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testUpload</span><span class="params">(@RequestParam(value = <span class="string">"desc"</span>, required = <span class="keyword">false</span>)</span> String desc, @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile[] multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"desc : "</span> + desc);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : multipartFile) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"OriginalFilename : "</span> + file.getOriginalFilename());</span><br><span class="line">                file.transferTo(<span class="keyword">new</span> File(<span class="string">"D:\\file\\"</span> + file.getOriginalFilename()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">//增加成功页面: /views/success.jsp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、Springmvc拦截器"><a href="#7、Springmvc拦截器" class="headerlink" title="7、Springmvc拦截器"></a>7、Springmvc拦截器</h3><p>​        SpringMVC提供了拦截器机制，允许运行目标方法之前进行一些拦截工作或者目标方法运行之后进行一下其他相关的处理。自定义的拦截器必须实现<strong>HandlerInterceptor</strong>接口。</p><p>![image-20200313173442876](Spring MVC的进阶使用-2/handlerInterceptor.png) </p><p>​        <strong>preHandle</strong>()：这个方法在业务处理器处理请求之前被调用，在该方法中对用户请求 request 进行处理。如果程序员决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去进行处理，则返回true；如果程序员决定不需要再调用其他的组件去处理请求，则返回false</p><p>​        <strong>postHandle</strong>()：这个方法在业务处理器处理完请求后，但是DispatcherServlet 向客户端返回响应前被调用，在该方法中对用户请求request进行处理。</p><p>​        <strong>afterCompletion</strong>()：这个方法在DispatcherServlet完全处理完请求后被调用，可以在该方法中进行一些资源清理的操作。</p><h5 id="1、自定义第一个拦截器"><a href="#1、自定义第一个拦截器" class="headerlink" title="1、自定义第一个拦截器"></a>1、自定义第一个拦截器</h5><p>MyFirstInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;postHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestInterceptorController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"test01"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test01"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.interceptor.MyFirstInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% System.out.println(<span class="string">"success.jsp"</span>);%&gt;</span><br><span class="line">success</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​        通过运行结果能够发现拦截器的执行顺序如下：</p><p><img src="/2020/07/20/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-2/E:%5Clian%5Cspringmvc%5Cimage%5C%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt></p><p>​        可以看到先执行拦截器的preHandle方法—-》执行目标方法—-》执行拦截器的postHandle方法—-》执行页面跳转—-》执行拦截器的afterCompletion方法</p><p>​        在配置拦截器的时候有两个需要注意的点：</p><p>​        1、如果prehandle方法返回值 为false，那么意味着不放行，那么就会造成后续的所有操作都中断</p><p>​        2、如果执行到方法中出现异常，那么后续流程不会处理但是afterCompletion方法会执行</p><h5 id="2、定义多个拦截器"><a href="#2、定义多个拦截器" class="headerlink" title="2、定义多个拦截器"></a>2、定义多个拦截器</h5><p>​        再添加另外一个拦截器</p><p>MySecondInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecondInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;postHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"-------&gt;afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到如下执行顺序：</p><p><img src="/2020/07/20/Spring%20MVC%E7%9A%84%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8-2/E:%5Clian%5Cspringmvc%5Cimage%5C%E5%A4%9A%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.png" alt="image-20200313182213954"></p><p>调整两个拦截器的配置顺序：</p><p>![image-20200313182350929](Spring MVC的进阶使用-2/多个拦截器执行顺序2.png)</p><p>大家可以看到对应的效果，谁先执行取决于配置的顺序。</p><p>​        拦截器的preHandle是按照顺序执行的</p><p>​        拦截器的postHandle是按照逆序执行的</p><p>​        拦截器的afterCompletion是按照逆序执行的</p><p>​        如果执行的时候核心的业务代码出问题了，那么已经通过的拦截器的afterCompletion会接着执行。</p><h3 id="8、拦截器跟过滤器的区别"><a href="#8、拦截器跟过滤器的区别" class="headerlink" title="8、拦截器跟过滤器的区别"></a>8、拦截器跟过滤器的区别</h3><p>​        1、过滤器是基于函数回调的，而拦截器是基于java反射的</p><p>​        2、过滤器依赖于servlet容器，而拦截器不依赖与Servlet容器</p><p>​        3、连接器几乎对所有的请求都起作用和，而拦截器只能对action请求起作用</p><p>​        4、拦截器可以访问action的上下文，而过滤器不可以</p><p>​        5、在action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化的时候调用一次</p><p>![image-20200313190146352](Spring MVC的进阶使用-2/拦截器跟过滤器的执行流程.png)</p><p>![image-20200313190309273](Spring MVC的进阶使用-2/拦截器和过滤器的包含关系.png)</p><h3 id="9、SpringMVC的国际化操作"><a href="#9、SpringMVC的国际化操作" class="headerlink" title="9、SpringMVC的国际化操作"></a>9、SpringMVC的国际化操作</h3><p>​        在日常工作中，如果你的网站需要给不同语言地区的人进行查看，此时就需要使用国际化的基本操作，springmvc的国际化操作比较容易。</p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href="i18n"&gt;国际化页面登录&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;fmt:message key="welcomeinfo"/&gt;&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"login"</span> method=<span class="string">"post"</span> &gt;</span><br><span class="line">    &lt;fmt:message key=<span class="string">"username"</span>/&gt;: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;fmt:message key=<span class="string">"password"</span>/&gt;: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"&lt;fmt:message key="</span>loginBtn<span class="string">"/&gt;"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>I18nController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18nController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"i18n"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">i18n</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login_en_US.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">welcomeinfo</span>=<span class="string">welcome to oi.com</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">USERNAME</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">PASSWORD</span></span><br><span class="line"><span class="attr">loginBtn</span>=<span class="string">LOGIN</span></span><br></pre></td></tr></table></figure><p>login_zh_CN.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">welcomeinfo&#x3D;欢迎进入马士兵教育</span><br><span class="line">username&#x3D;用户名</span><br><span class="line">password&#x3D;密码</span><br><span class="line">loginBtn&#x3D;登录</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        其实SpringMVC中国际化的处理非常简单，就是按照浏览器所带来的语言信息决定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Locale locale = request.getLocale();<span class="comment">//获取浏览器的区域信息</span></span><br></pre></td></tr></table></figure><p>在DispatcherServlet中会包含一个组件，用来专门获取区域信息</p><p>![image-20200313193757666](Spring MVC的进阶使用-2/国际化1.png)</p><p>![image-20200313193823121](Spring MVC的进阶使用-2/国际化2.png)</p><p>![image-20200313194137103](Spring MVC的进阶使用-2/国际化3.png)</p><p>通过图片能够发现，默认调用的是org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver类</p><p>![image-20200313194436614](Spring MVC的进阶使用-2/国际化4.png)</p><p>在程序中可以获取Locale的相关信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18nController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"i18n"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">i18n</span><span class="params">(Locale locale)</span></span>&#123;</span><br><span class="line">        System.out.println(locale);</span><br><span class="line">        String username = messageSource.getMessage(<span class="string">"username"</span>, <span class="keyword">null</span>, locale);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、通过超链接来切换国际化"><a href="#10、通过超链接来切换国际化" class="headerlink" title="10、通过超链接来切换国际化"></a>10、通过超链接来切换国际化</h3><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;fmt:message key="welcomeinfo"/&gt;&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"login"</span> method=<span class="string">"post"</span> &gt;</span><br><span class="line">    &lt;fmt:message key=<span class="string">"username"</span>/&gt;: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;fmt:message key=<span class="string">"password"</span>/&gt;: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"&lt;fmt:message key="</span>loginBtn<span class="string">"/&gt;"</span>/&gt;</span><br><span class="line">    &lt;a href="i18n?locale=zh_CN"&gt;中文&lt;/a&gt;&lt;a href="i18n?locale=en_US"&gt;英文&lt;/a&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>MyLocaleResolver.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析并返回locale</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Locale locale = <span class="keyword">null</span>;</span><br><span class="line">        String localeStr = request.getParameter(<span class="string">"locale"</span>);</span><br><span class="line">        <span class="keyword">if</span>(localeStr!=<span class="keyword">null</span> &amp;&amp; ! <span class="string">""</span>.equals(localeStr))&#123;</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(localeStr.split(<span class="string">"_"</span>)[<span class="number">0</span>],localeStr.split(<span class="string">"_"</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            locale = request.getLocale();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不支持设置locale的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locale</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line">                <span class="string">"Cannot change HTTP accept header - use a different locale resolution strategy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置区域信息解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"com.oi.MyLocaleResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了可以自定义区域信息解析器之外，我们还可以使用SpringMVC中自带的SessionLocaleResolver:</p><p>I18nController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.SessionLocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18nController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"i18n"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">i18n</span><span class="params">(@RequestParam(value = <span class="string">"locale"</span>,defaultValue = <span class="string">"zh_CN"</span>)</span> String localeStr,Locale locale, HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Locale l = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(localeStr!=<span class="keyword">null</span> &amp;&amp; ! <span class="string">""</span>.equals(localeStr))&#123;</span><br><span class="line">            l = <span class="keyword">new</span> Locale(localeStr.split(<span class="string">"_"</span>)[<span class="number">0</span>],localeStr.split(<span class="string">"_"</span>)[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l = locale;</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(SessionLocaleResolver.class.getName() + ".LOCALE",l);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置区域信息解析器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="localeResolver" class="com.oi.MyLocaleResolver"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用LocaleChangeInterceptor来实现国际化：</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="defaultEncoding" value="UTF-8"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="maxUploadSize" value="1024000"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:interceptors&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean class="com.oi.interceptor.MySecondInterceptor"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean class="com.oi.interceptor.MyFirstInterceptor"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/mvc:interceptors&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置区域信息解析器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="localeResolver" class="com.oi.MyLocaleResolver"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.SessionLocaleResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I18nController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.i18n.SessionLocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I18nController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"i18n"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">i18n</span><span class="params">(@RequestParam(value = <span class="string">"locale"</span>,defaultValue = <span class="string">"zh_CN"</span>)</span> String localeStr,Locale locale, HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Locale l = null;</span></span><br><span class="line"><span class="comment">//        if(localeStr!=null &amp;&amp; ! "".equals(localeStr))&#123;</span></span><br><span class="line"><span class="comment">//            l = new Locale(localeStr.split("_")[0],localeStr.split("_")[1]);</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            l = locale;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        session.setAttribute(SessionLocaleResolver.class.getName() + ".LOCALE",l);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、SpringMVC异常处理机制"><a href="#11、SpringMVC异常处理机制" class="headerlink" title="11、SpringMVC异常处理机制"></a>11、SpringMVC异常处理机制</h3><p>​        在SpringMVC中拥有一套非常强大的异常处理机制，SpringMVC通过HandlerExceptionResolver处理程序的异常，包括请求映射，数据绑定以及目标方法的执行时发生的异常。</p><p>![image-20200313204210754](Spring MVC的进阶使用-2/异常处理实现的子类.png)</p><p>在容器启动好，进入DispatcherServlet之后，会对HandlerExceptionResolver进行初始化操作：</p><p>![image-20200313204557902](Spring MVC的进阶使用-2/异常初始化.png)</p><p>会默认的从DispatcherServlet.properties中找到对应的异常处理类：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认的处理类</span></span><br><span class="line"><span class="meta">org.springframework.web.servlet.HandlerExceptionResolver</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#处理@ExceptionHandler</span></span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\</span><br><span class="line"><span class="comment">#处理@ResponseStatus，给自定义异常使用</span></span><br><span class="line">org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</span><br><span class="line"><span class="comment">#判断是否是SpringMVC自带异常</span></span><br><span class="line"><span class="attr">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span></span><br></pre></td></tr></table></figure><p>自己定义异常处理方式：</p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;a href="exception1"&gt;自己处理异常&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ExceptionController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception......."</span>);</span><br><span class="line">        System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;ArithmeticException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">handlerException</span>(<span class="title">Exception</span> <span class="title">exception</span>)</span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"ex"</span>,exception);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">我的出错页面：</span><br><span class="line">错误信息：$&#123;ex&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​        在一个类中可能会包含多个异常的处理方法，在不同的方法上可以使用不同范围的异常，在查找的时候会优先调用范围小的异常处理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception......."</span>);</span><br><span class="line">        System.out.println(<span class="number">10</span>/<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;ArithmeticException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">handlerException1</span>(<span class="title">Exception</span> <span class="title">exception</span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handlerException1........"</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"ex"</span>,exception);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;Exception<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">handlerException2</span>(<span class="title">Exception</span> <span class="title">exception</span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handlerException2........"</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"ex"</span>,exception);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在不同的类中可能会包含不同的异常处理，因此我们需要定义一个全局的异常控制器,使用@ControllerAdvice注解标注，如果本类跟全局都有相关异常的处理，那么会优先使用本类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;ArithmeticException<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">handlerException1</span>(<span class="title">Exception</span> <span class="title">exception</span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"handlerException1........"</span>);</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"ex"</span>,exception);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ResponseStatus的使用：</p><p>​        @ResponseStatus可以标注到方法上，但是标注在方法之后可能导致该方法无法被访问，因此更多的是在自定义类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(reason = <span class="string">"不知道什么原因，反正错误"</span>,value = HttpStatus.NOT_ACCEPTABLE)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception......."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        @ResponseStatus作用在类上</p><p>UserNameException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus</span>(reason = <span class="string">"名字不是admin"</span>,value = HttpStatus.NOT_ACCEPTABLE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNameException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExceptionController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception......."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception2</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception2222......."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserNameException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc自定义的异常：</p><p>index.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: root</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">3</span>/<span class="number">13</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;a href="exception1"&gt;自己处理异常&lt;/a&gt;</span><br><span class="line">&lt;a href="exception2?username=zhangsan"&gt;自定义异常处理&lt;/a&gt;</span><br><span class="line">&lt;a href="exception3"&gt;Springmvc自己异常处理&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>ExceptionController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception......."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"exception2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception2</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception2222......."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserNameException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"exception3"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exception3</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"exception3......."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot源码解析</title>
      <link href="/2020/07/19/Spring%20Boot%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/07/19/Spring%20Boot%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h1><h3 id="1、springboot的入口程序"><a href="#1、springboot的入口程序" class="headerlink" title="1、springboot的入口程序"></a>1、springboot的入口程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartupApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StartupApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当程序开始执行之后，会调用SpringApplication的构造方法，进行某些初始参数的设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新的实例，这个应用程序的上下文将要从指定的来源加载Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//资源初始化资源加载器，默认为null</span></span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">//断言主要加载资源类不能为 null，否则报错</span></span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="comment">//初始化主要加载资源类集合并去重</span></span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">//推断当前 WEB 应用类型，一共有三种：NONE,SERVLET,REACTIVE</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">//设置应用上线文初始化器,从"META-INF/spring.factories"读取ApplicationContextInitializer类的实例名称集合并去重，并进行set去重。（一共7个）</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//设置监听器,从"META-INF/spring.factories"读取ApplicationListener类的实例名称集合并去重，并进行set去重。（一共11个）</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="comment">//推断主入口应用类，通过当前调用栈，获取Main方法所在类，并赋值给mainApplicationClass</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述构造方法中，有一个判断应用类型的方法，用来判断当前应用程序的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WebApplicationType的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> WebApplicationType &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment"> * embedded web server.</span></span><br><span class="line"><span class="comment"> * 非web项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NONE,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded servlet web server.</span></span><br><span class="line"><span class="comment"> * servlet web 项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SERVLET,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment"> * embedded reactive web server.</span></span><br><span class="line"><span class="comment"> * 响应式 web 项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REACTIVE;</span><br></pre></td></tr></table></figure><p>springboot启动的运行方法，可以看到主要是各种运行环境的准备工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建并启动计时监控类</span></span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">    <span class="comment">//2、初始化应用上下文和异常报告集合</span></span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//3、设置系统属性“java.awt.headless”的值，默认为true，用于运行headless服务器，进行简单的图像处理，多用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">    <span class="comment">//4、创建所有spring运行监听器并发布应用启动事件，简单说的话就是获取SpringApplicationRunListener类型的实例（EventPublishingRunListener对象），并封装进SpringApplicationRunListeners对象，然后返回这个SpringApplicationRunListeners对象。说的再简单点，getRunListeners就是准备好了运行时监听器EventPublishingRunListener。</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//5、初始化默认应用参数类</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        <span class="comment">//6、根据运行监听器和应用参数来准备spring环境</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        <span class="comment">//将要忽略的bean的参数打开</span></span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">//7、创建banner打印类</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">//8、创建应用上下文，可以理解为创建一个容器</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">        <span class="comment">//9、准备异常报告器，用来支持报告关于启动的错误</span></span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        <span class="comment">//10、准备应用上下文，该步骤包含一个非常关键的操作，将启动类注入容器，为后续开启自动化提供基础</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">//11、刷新应用上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">        <span class="comment">//12、应用上下文刷新后置处理，做一些扩展功能</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">//13、停止计时监控类</span></span><br><span class="line">stopWatch.stop();</span><br><span class="line">        <span class="comment">//14、输出日志记录执行主类名、时间信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//15、发布应用上下文启动监听事件</span></span><br><span class="line">listeners.started(context);</span><br><span class="line">        <span class="comment">//16、执行所有的Runner运行器</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//17、发布应用上下文就绪事件</span></span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//18、返回应用上下文</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面详细介绍各个启动的环节：</p><p>1、创建并启动计时监控类，可以看到记录当前任务的名称，默认是空字符串，然后记录当前springboot应用启动的开始时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line"><span class="comment">//详细源代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">start(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String taskName)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't start StopWatch: it's already running"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.currentTaskName = taskName;</span><br><span class="line"><span class="keyword">this</span>.startTimeNanos = System.nanoTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、初始化应用上下文和异常报告集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>3、设置系统属性java.awt.headless的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.awt.headless模式是在缺少显示屏、键盘或者鼠标的系统配置</span></span><br><span class="line"><span class="comment">当配置了如下属性之后，应用程序可以执行如下操作：</span></span><br><span class="line"><span class="comment">1、创建轻量级组件</span></span><br><span class="line"><span class="comment">2、收集关于可用的字体、字体指标和字体设置的信息</span></span><br><span class="line"><span class="comment">3、设置颜色来渲染准备图片</span></span><br><span class="line"><span class="comment">4、创造和获取图像，为渲染准备图片</span></span><br><span class="line"><span class="comment">5、使用java.awt.PrintJob,java.awt.print.*和javax.print.*类里的方法进行打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureHeadlessProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS,</span><br><span class="line">System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(<span class="keyword">this</span>.headless)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建所有spring运行监听器并发布应用启动事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建spring监听器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] types = new Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger,</span><br><span class="line">getSpringFactoriesInstances(SpringApplicationRunListener<span class="class">.<span class="keyword">class</span>, <span class="title">types</span>, <span class="title">this</span>, <span class="title">args</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line">SpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class="line"><span class="keyword">this</span>.log = log;</span><br><span class="line"><span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环遍历获取监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.starting();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处的监听器可以看出是事件发布监听器，主要用来发布启动事件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里是创建application事件‘applicationStartingEvent’</span></span><br><span class="line"><span class="keyword">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> ApplicationStartingEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//applicationStartingEvent是springboot框架最早执行的监听器，在该监听器执行started方法时，会继续发布事件，主要是基于spring的事件机制</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">        <span class="comment">//获取线程池，如果为空则同步处理。这里线程池为空，还未初始化</span></span><br><span class="line">Executor executor = getTaskExecutor();</span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line"><span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//异步发送事件</span></span><br><span class="line">executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//同步发送事件</span></span><br><span class="line">invokeListener(listener, event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、初始化默认应用参数类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultApplicationArguments</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">Assert.notNull(args, <span class="string">"Args must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.source = <span class="keyword">new</span> Source(args);</span><br><span class="line"><span class="keyword">this</span>.args = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、根据运行监听器和应用参数来准备spring环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">//详细环境的准备</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取或者创建应用环境</span></span><br><span class="line">ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 配置应用环境，配置propertySource和activeProfiles</span></span><br><span class="line">configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">//listeners环境准备，广播ApplicationEnvironmentPreparedEvent</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line">listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">//将环境绑定给当前应用程序</span></span><br><span class="line">bindToSpringApplication(environment);</span><br><span class="line">    <span class="comment">//对当前的环境类型进行判断，如果不一致进行转换</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">deduceEnvironmentClass());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//配置propertySource对它自己的递归依赖</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line"><span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取或者创建应用环境，根据应用程序的类型可以分为servlet环境、标准环境(特殊的非web环境)和响应式环境</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存在则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//根据webApplicationType创建对应的Environment</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardReactiveWebEnvironment();</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置应用环境</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.addConversionService) &#123;</span><br><span class="line">ConversionService conversionService = ApplicationConversionService.getSharedInstance();</span><br><span class="line">environment.setConversionService((ConfigurableConversionService) conversionService);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//配置property sources</span></span><br><span class="line">configurePropertySources(environment, args);</span><br><span class="line">    <span class="comment">//配置profiles</span></span><br><span class="line">configureProfiles(environment, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、创建banner的打印类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line"><span class="comment">//打印类的详细操作过程</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Banner.Mode.OFF) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">ResourceLoader resourceLoader = (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) ? <span class="keyword">this</span>.resourceLoader</span><br><span class="line">: <span class="keyword">new</span> DefaultResourceLoader(getClassLoader());</span><br><span class="line">SpringApplicationBannerPrinter bannerPrinter = <span class="keyword">new</span> SpringApplicationBannerPrinter(resourceLoader, <span class="keyword">this</span>.banner);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Mode.LOG) &#123;</span><br><span class="line"><span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, logger);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, System.out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、创建应用的上下文:根据不同哦那个的应用类型初始化不同的上下文应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</span><br><span class="line"><span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line">contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line">contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、准备异常报告器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、准备应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//应用上下文的environment</span></span><br><span class="line">context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">//应用上下文后处理</span></span><br><span class="line">postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">//为上下文应用所有初始化器，执行容器中的applicationContextInitializer(spring.factories的实例)，将所有的初始化对象放置到context对象中</span></span><br><span class="line">applyInitializers(context);</span><br><span class="line">    <span class="comment">//触发所有SpringApplicationRunListener监听器的ContextPrepared事件方法。添加所有的事件监听器</span></span><br><span class="line">listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">//记录启动日志</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">logStartupProfileInfo(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册启动参数bean，将容器指定的参数封装成bean，注入容器</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">    <span class="comment">//设置banner</span></span><br><span class="line"><span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载所有资源，指的是启动器指定的参数</span></span><br><span class="line">Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    <span class="comment">//将bean加载到上下文中</span></span><br><span class="line">load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">//触发所有springapplicationRunListener监听器的contextLoaded事件方法，</span></span><br><span class="line">listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">    <span class="comment">//这里没有做任何的处理过程，因为beanNameGenerator和resourceLoader默认为空，可以方便后续做扩展处理</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">context.getBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line"><span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</span><br><span class="line">((GenericApplicationContext) context).setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> DefaultResourceLoader) &#123;</span><br><span class="line">((DefaultResourceLoader) context).setClassLoader(<span class="keyword">this</span>.resourceLoader.getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.addConversionService) &#123;</span><br><span class="line">context.getBeanFactory().setConversionService(ApplicationConversionService.getSharedInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">    <span class="comment">//将启动器类加载到spring容器中，为后续的自动化配置奠定基础，之前看到的很多注解也与此相关</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">&#125;</span><br><span class="line">BeanDefinitionLoader loader = createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">&#125;</span><br><span class="line">loader.load();</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">    <span class="comment">//springboot会优先选择groovy加载方式，找不到在选择java方式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Class&lt;?&gt; source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">source</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span></span><br><span class="line">GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">load(loader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isComponent(source)) &#123;</span><br><span class="line"><span class="keyword">this</span>.annotatedReader.register(source);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、刷新应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">refresh(context);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">context.registerShutdownHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line"><span class="comment">// Not allowed in some environments.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">            <span class="comment">//刷新上下文环境，初始化上下文环境，对系统的环境变量或者系统属性进行准备和校验</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">            <span class="comment">//初始化beanfactory，解析xml，相当于之前的xmlBeanfactory操作</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">            <span class="comment">//为上下文准备beanfactory，对beanFactory的各种功能进行填充，如@autowired，设置spel表达式解析器，设置编辑注册器，添加applicationContextAwareprocessor处理器等等</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">                <span class="comment">//提供子类覆盖的额外处理，即子类处理自定义的beanfactorypostProcess</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">                <span class="comment">//激活各种beanfactory处理器</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">                <span class="comment">//注册拦截bean创建的bean处理器，即注册beanPostProcessor</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">                <span class="comment">//初始化上下文中的资源文件如国际化文件的处理</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">                <span class="comment">//初始化上下文事件广播器</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">                <span class="comment">//给子类扩展初始化其他bean</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">                <span class="comment">//在所有的bean中查找listener bean,然后 注册到广播器中</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">                <span class="comment">//初始化剩余的非懒惰的bean，即初始化非延迟加载的bean</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">                <span class="comment">//发完成刷新过程，通知声明周期处理器刷新过程，同时发出ContextRefreshEvent通知别人</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12、应用上下文刷新后置处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line"><span class="comment">//当前方法的代码是空的，可以做一些自定义的后置处理操作</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13、停止计时监控类：计时监听器停止，并统计一些任务执行信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">stopWatch.stop();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentTaskName == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can't stop StopWatch: it's not running"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> lastTime = System.nanoTime() - <span class="keyword">this</span>.startTimeNanos;</span><br><span class="line"><span class="keyword">this</span>.totalTimeNanos += lastTime;</span><br><span class="line"><span class="keyword">this</span>.lastTaskInfo = <span class="keyword">new</span> TaskInfo(<span class="keyword">this</span>.currentTaskName, lastTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.keepTaskList) &#123;</span><br><span class="line"><span class="keyword">this</span>.taskList.add(<span class="keyword">this</span>.lastTaskInfo);</span><br><span class="line">&#125;</span><br><span class="line">++<span class="keyword">this</span>.taskCount;</span><br><span class="line"><span class="keyword">this</span>.currentTaskName = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14、输出日志记录执行主类名、时间信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15、发布应用上下文启动完成事件：触发所有SpringapplicationRunListener监听器的started事件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listeners.started(context);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.started(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16、执行所有Runner执行器：执行所有applicationRunner和CommandLineRunner两种运行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">callRunners(context, applicationArguments);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">runners.addAll(context.getBeansOfType(ApplicationRunner<span class="class">.<span class="keyword">class</span>).<span class="title">values</span>())</span>;</span><br><span class="line">runners.addAll(context.getBeansOfType(CommandLineRunner<span class="class">.<span class="keyword">class</span>).<span class="title">values</span>())</span>;</span><br><span class="line">AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line"><span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;&gt;(runners)) &#123;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">callRunner((ApplicationRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">callRunner((CommandLineRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17、发布应用上下文就绪事件：触发所有springapplicationRunnListener将挺起的running事件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listeners.running(context);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.running(context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18、返回应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> context;</span><br></pre></td></tr></table></figure><hr><p>注意：</p><p>整个springboot框架中获取factorys文件的方式统一如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryTypeName = factoryType.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">createSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">ClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; instances = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//装载class文件到内存</span></span><br><span class="line">Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</span><br><span class="line">Assert.isAssignable(type, instanceClass);</span><br><span class="line">Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);</span><br><span class="line">                <span class="comment">//通过反射创建实例</span></span><br><span class="line">T instance = (T) BeanUtils.instantiateClass(constructor, args);</span><br><span class="line">instances.add(instance);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot instantiate "</span> + type + <span class="string">" : "</span> + name, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.factory文件中的类的作用：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PropertySource Loaders 属性文件加载器</span></span><br><span class="line"><span class="meta">org.springframework.boot.env.PropertySourceLoader</span>=<span class="string">\</span></span><br><span class="line"><span class="comment"># properties文件加载器</span></span><br><span class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span><br><span class="line"><span class="comment"># yaml文件加载器</span></span><br><span class="line"><span class="attr">org.springframework.boot.env.YamlPropertySourceLoader</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Listeners 运行时的监听器</span></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="comment"># 程序运行过程中所有监听通知都是通过此类来进行回调</span></span><br><span class="line"><span class="attr">org.springframework.boot.context.event.EventPublishingRunListener</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Error Reporters错误报告器</span></span><br><span class="line"><span class="meta">org.springframework.boot.SpringBootExceptionReporter</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Context Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="comment"># 报告spring容器的一些常见的错误配置</span></span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line"><span class="comment"># 设置spring应用上下文的ID</span></span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line"><span class="comment"># 使用环境属性context.initializer.classes指定初始化器进行初始化规则</span></span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</span><br><span class="line"><span class="comment"># 将内置servlet容器实际使用的监听端口写入到environment环境属性中</span></span><br><span class="line"><span class="attr">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="comment"># 应用上下文加载完成后对缓存做清除工作，响应事件ContextRefreshEvent</span></span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line"><span class="comment"># 监听双亲应用上下文的关闭事件并往自己的孩子应用上下文中传播，相关事件ParentContextAvailableEvent/ContextClosedEvent</span></span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="line"><span class="comment"># 如果系统文件编码和环境变量中指定的不同则终止应用启动。具体的方法是比较系统属性file.encoding和环境变量spring.mandatory-file-encoding是否相等(大小写不敏感)。</span></span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line"><span class="comment"># 根据spring.output.ansi.enabled参数配置AnsiOutput</span></span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line"><span class="comment"># EnvironmentPostProcessor，从常见的那些约定的位置读取配置文件，比如从以下目录读取#application.properties,application.yml等配置文件：</span></span><br><span class="line"><span class="comment"># classpath:</span></span><br><span class="line"><span class="comment"># file:.</span></span><br><span class="line"><span class="comment"># classpath:config</span></span><br><span class="line"><span class="comment"># file:./config/:</span></span><br><span class="line"><span class="comment"># 也可以配置成从其他指定的位置读取配置文件</span></span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line"><span class="comment"># 监听到事件后转发给环境变量context.listener.classes指定的那些事件监听器</span></span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line"><span class="comment"># 一个SmartApplicationListener,对环境就绪事件ApplicationEnvironmentPreparedEvent/应用失败事件ApplicationFailedEvent做出响应，往日志DEBUG级别输出TCCL(thread context class loader)的classpath。</span></span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line"><span class="comment"># 检测正在使用的日志系统，默认时logback，，此时日志系统还没有初始化</span></span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br><span class="line"><span class="comment"># 使用一个可以和Spring Boot可执行jar包配合工作的版本替换liquibase ServiceLocator</span></span><br><span class="line"><span class="attr">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span></span><br></pre></td></tr></table></figure><h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><p>​        在之前的课程中我们讲解了springboot的启动过程，其实在面试过程中问的最多的可能是自动装配的原理，而自动装配是在启动过程中完成，只不过在刚开始的时候我们选择性的跳过了，下面详细讲解自动装配的过程。</p><h5 id="1、在springboot的启动过程中，有一个步骤是创建上下文，如果不记得可以看下面的代码："><a href="#1、在springboot的启动过程中，有一个步骤是创建上下文，如果不记得可以看下面的代码：" class="headerlink" title="1、在springboot的启动过程中，有一个步骤是创建上下文，如果不记得可以看下面的代码："></a>1、在springboot的启动过程中，有一个步骤是创建上下文，如果不记得可以看下面的代码：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line">context = createApplicationContext();</span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">            <span class="comment">//此处完成自动装配的过程</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context);</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、在prepareContext方法中查找load方法，一层一层向内点击，找到最终的load方法"><a href="#2、在prepareContext方法中查找load方法，一层一层向内点击，找到最终的load方法" class="headerlink" title="2、在prepareContext方法中查找load方法，一层一层向内点击，找到最终的load方法"></a>2、在prepareContext方法中查找load方法，一层一层向内点击，找到最终的load方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//prepareContext方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">context.setEnvironment(environment);</span><br><span class="line">postProcessApplicationContext(context);</span><br><span class="line">applyInitializers(context);</span><br><span class="line">listeners.contextPrepared(context);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">logStartupProfileInfo(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line"><span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Load the sources</span></span><br><span class="line">Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">        <span class="comment">//load方法完成该功能</span></span><br><span class="line">load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load beans into the application context.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context the context to load beans into</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sources the sources to load</span></span><br><span class="line"><span class="comment"> * 加载bean对象到context中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//获取bean对象定义的加载器</span></span><br><span class="line">BeanDefinitionLoader loader = createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">&#125;</span><br><span class="line">loader.load();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the sources into the reader.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of loaded beans</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Object source : <span class="keyword">this</span>.sources) &#123;</span><br><span class="line">count += load(source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、实际执行load的是BeanDefinitionLoader中的load方法，如下："><a href="#3、实际执行load的是BeanDefinitionLoader中的load方法，如下：" class="headerlink" title="3、实际执行load的是BeanDefinitionLoader中的load方法，如下："></a>3、实际执行load的是BeanDefinitionLoader中的load方法，如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际记载bean的方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">Assert.notNull(source, <span class="string">"Source must not be null"</span>);</span><br><span class="line">       <span class="comment">//如果是class类型，启用注解类型</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Class&lt;?&gt;) source);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果是resource类型，启动xml解析</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Resource) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Resource) source);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果是package类型，启用扫描包，例如@ComponentScan</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Package) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Package) source);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//如果是字符串类型，直接加载</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line"><span class="keyword">return</span> load((CharSequence) source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid source type "</span> + source.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、下面方法将用来判断是否资源的类型，是使用groovy加载还是使用注解的方式"><a href="#4、下面方法将用来判断是否资源的类型，是使用groovy加载还是使用注解的方式" class="headerlink" title="4、下面方法将用来判断是否资源的类型，是使用groovy加载还是使用注解的方式"></a>4、下面方法将用来判断是否资源的类型，是使用groovy加载还是使用注解的方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Class&lt;?&gt; source)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//判断使用groovy脚本</span></span><br><span class="line"><span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">source</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span></span><br><span class="line">GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">load(loader);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//使用注解加载</span></span><br><span class="line"><span class="keyword">if</span> (isComponent(source)) &#123;</span><br><span class="line"><span class="keyword">this</span>.annotatedReader.register(source);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、下面方法判断启动类中是否包含-Component注解，但是会神奇的发现我们的启动类中并没有该注解，继续更进发现MergedAnnotations类传入了一个参数SearchStrategy-TYPE-HIERARCHY，会查找继承关系中是否包含这个注解，-SpringBootApplication–-gt-SpringBootConfiguration–-gt-Configuration–-gt-Component-当找到-Component注解之后，会把该对象注册到AnnotatedBeanDefinitionReader对象中"><a href="#5、下面方法判断启动类中是否包含-Component注解，但是会神奇的发现我们的启动类中并没有该注解，继续更进发现MergedAnnotations类传入了一个参数SearchStrategy-TYPE-HIERARCHY，会查找继承关系中是否包含这个注解，-SpringBootApplication–-gt-SpringBootConfiguration–-gt-Configuration–-gt-Component-当找到-Component注解之后，会把该对象注册到AnnotatedBeanDefinitionReader对象中" class="headerlink" title="5、下面方法判断启动类中是否包含@Component注解，但是会神奇的发现我们的启动类中并没有该注解，继续更进发现MergedAnnotations类传入了一个参数SearchStrategy.TYPE_HIERARCHY，会查找继承关系中是否包含这个注解，@SpringBootApplication–&gt;@SpringBootConfiguration–&gt;@Configuration–&gt;@Component,当找到@Component注解之后，会把该对象注册到AnnotatedBeanDefinitionReader对象中"></a>5、下面方法判断启动类中是否包含@Component注解，但是会神奇的发现我们的启动类中并没有该注解，继续更进发现MergedAnnotations类传入了一个参数SearchStrategy.TYPE_HIERARCHY，会查找继承关系中是否包含这个注解，@SpringBootApplication–&gt;@SpringBootConfiguration–&gt;@Configuration–&gt;@Component,当找到@Component注解之后，会把该对象注册到AnnotatedBeanDefinitionReader对象中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isComponent</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// This has to be a bit of a guess. The only way to be sure that this type is</span></span><br><span class="line">   <span class="comment">// eligible is to make a bean definition out of it and try to instantiate it.</span></span><br><span class="line">   <span class="keyword">if</span> (MergedAnnotations.from(type, SearchStrategy.TYPE_HIERARCHY).isPresent(Component<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Nested anonymous classes are not eligible for registration, nor are groovy</span></span><br><span class="line">   <span class="comment">// closures</span></span><br><span class="line">   <span class="keyword">return</span> !type.getName().matches(<span class="string">".*\\$_.*closure.*"</span>) &amp;&amp; !type.isAnonymousClass()</span><br><span class="line">         &amp;&amp; type.getConstructors() != <span class="keyword">null</span> &amp;&amp; type.getConstructors().length != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations.</span></span><br><span class="line"><span class="comment"> * 从给定的bean class中注册一个bean对象，从注解中找到相关的元数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">doRegisterBean</span><span class="params">(Class&lt;T&gt; beanClass, @Nullable String name,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Class&lt;? extends Annotation&gt;[] qualifiers, @Nullable Supplier&lt;T&gt; supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable BeanDefinitionCustomizer[] customizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(beanClass);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abd.setInstanceSupplier(supplier);</span><br><span class="line">ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">String beanName = (name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry));</span><br><span class="line"></span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line"><span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;? extends Annotation&gt; qualifier : qualifiers) &#123;</span><br><span class="line"><span class="keyword">if</span> (Primary<span class="class">.<span class="keyword">class</span> </span>== qualifier) &#123;</span><br><span class="line">abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Lazy<span class="class">.<span class="keyword">class</span> </span>== qualifier) &#123;</span><br><span class="line">abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (customizers != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionCustomizer customizer : customizers) &#123;</span><br><span class="line">customizer.customize(abd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the given bean definition with the given bean factory.</span></span><br><span class="line"><span class="comment"> * 注册主类，如果有别名可以设置别名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">String beanName = definitionHolder.getBeanName();</span><br><span class="line">registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">String[] aliases = definitionHolder.getAliases();</span><br><span class="line"><span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">registry.registerAlias(beanName, alias);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure><p>当看完上述代码之后，只是完成了启动对象的注入，自动装配还没有开始，下面开始进入到自动装配。</p><h5 id="6、自动装配入口，从刷新容器开始"><a href="#6、自动装配入口，从刷新容器开始" class="headerlink" title="6、自动装配入口，从刷新容器开始"></a>6、自动装配入口，从刷新容器开始</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">                <span class="comment">// 此处是自动装配的入口</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="7、在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行"><a href="#7、在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行" class="headerlink" title="7、在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行"></a>7、在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiate and invoke all registered BeanFactoryPostProcessor beans,</span></span><br><span class="line"><span class="comment"> * respecting explicit order if given.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Must be called before singleton instantiation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//开始执行beanFactoryPostProcessor对应实现类,需要知道的是beanFactoryPostProcessor是spring的扩展接口，在刷新容器之前，该接口可以用来修改bean元数据信息</span></span><br><span class="line">PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class="line"><span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、查看invokeBeanFactoryPostProcessors的具体执行方法"><a href="#8、查看invokeBeanFactoryPostProcessors的具体执行方法" class="headerlink" title="8、查看invokeBeanFactoryPostProcessors的具体执行方法"></a>8、查看invokeBeanFactoryPostProcessors的具体执行方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line">Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//开始遍历三个内部类，如果属于BeanDefinitionRegistryPostProcessor子类，加入到bean注册的集合，否则加入到regularPostProcessors</span></span><br><span class="line"><span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line"><span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">BeanDefinitionRegistryPostProcessor registryProcessor =</span><br><span class="line">(BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">registryProcessors.add(registryProcessor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">regularPostProcessors.add(postProcessor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line"><span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line"><span class="comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span></span><br><span class="line"><span class="comment">// PriorityOrdered, Ordered, and the rest.</span></span><br><span class="line">List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">           <span class="comment">//通过BeanDefinitionRegistryPostProcessor获取到对应的处理类“org.springframework.context.annotation.internalConfigurationAnnotationProcessor”，但是需要注意的是这个类在springboot中搜索不到，这个类的完全限定名在AnnotationConfigEmbeddedWebApplicationContext中，在进行初始化的时候会装配几个类，在创建AnnotatedBeanDefinitionReader对象的时候会将该类注册到bean对象中，此处可以看到internalConfigurationAnnotationProcessor为bean名称，容器中真正的类是ConfigurationClassPostProcessor</span></span><br><span class="line">String[] postProcessorNames =</span><br><span class="line">beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">           <span class="comment">//首先执行类型为PriorityOrdered的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">           <span class="comment">//PriorityOrdered类型表明为优先执行</span></span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                   <span class="comment">//获取对应的bean</span></span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">                   <span class="comment">//用来存储已经执行过的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">           <span class="comment">//开始执行装配逻辑</span></span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span><br><span class="line">           <span class="comment">//其次执行类型为Ordered的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">           <span class="comment">//Ordered表明按顺序执行</span></span><br><span class="line">postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span><br><span class="line">           <span class="comment">//循环中执行类型不为PriorityOrdered，Ordered类型的BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">reiterate = <span class="keyword">false</span>;</span><br><span class="line">postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">reiterate = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span><br><span class="line">           <span class="comment">//执行父类方法，优先执行注册处理类</span></span><br><span class="line">invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">           <span class="comment">//执行有规则处理类</span></span><br><span class="line">invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invoke factory processors registered with the context instance.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line"><span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">String[] postProcessorNames =</span><br><span class="line">beanFactory.getBeanNamesForType(BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line"><span class="comment">// Ordered, and the rest.</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line"><span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">orderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line"><span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line"><span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line">invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line"><span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、开始执行自动配置逻辑（启动类指定的配置，非默认配置），可以通过debug的方式一层层向里进行查找，会发现最终会在ConfigurationClassParser类中，此类是所有配置类的解析类，所有的解析逻辑在parser.parse(candidates)中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//是否是注解类</span></span><br><span class="line"><span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//执行配置类</span></span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(AnnotationMetadata metadata, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(metadata, beanName));</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processConfigurationClass</span><span class="params">(ConfigurationClass configClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigurationClass existingClass = <span class="keyword">this</span>.configurationClasses.get(configClass);</span><br><span class="line"><span class="keyword">if</span> (existingClass != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line"><span class="keyword">if</span> (existingClass.isImported()) &#123;</span><br><span class="line">existingClass.mergeImportedBy(configClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise ignore new imported config class; existing non-imported class overrides it.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Explicit bean definition found, probably replacing an import.</span></span><br><span class="line"><span class="comment">// Let's remove the old one and go with the new one.</span></span><br><span class="line"><span class="keyword">this</span>.configurationClasses.remove(configClass);</span><br><span class="line"><span class="keyword">this</span>.knownSuperclasses.values().removeIf(configClass::equals);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recursively process the configuration class and its superclass hierarchy.</span></span><br><span class="line">SourceClass sourceClass = asSourceClass(configClass);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//循环处理bean,如果有父类，则处理父类，直至结束</span></span><br><span class="line">sourceClass = doProcessConfigurationClass(configClass, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (sourceClass != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.configurationClasses.put(configClass, configClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、继续跟进doProcessConfigurationClass方法，此方式是支持注解配置的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply processing and build a complete &#123;<span class="doctag">@link</span> ConfigurationClass&#125; by reading the</span></span><br><span class="line"><span class="comment"> * annotations, members and methods from the source class. This method can be called</span></span><br><span class="line"><span class="comment"> * multiple times as relevant sources are discovered.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> configClass the configuration class being build</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceClass a source class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the superclass, or &#123;<span class="doctag">@code</span> null&#125; if none found or previously processed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理内部类逻辑，由于传来的参数是启动类，并不包含内部类，所以跳过</span></span><br><span class="line"><span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line"><span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line">processMemberClasses(configClass, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">        <span class="comment">//针对属性配置的解析</span></span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">sourceClass.getMetadata(), PropertySources<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">annotation</span>.<span class="title">PropertySource</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">processPropertySource(propertySource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.info(<span class="string">"Ignoring @PropertySource annotation on ["</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line"><span class="string">"]. Reason: Environment must implement ConfigurableEnvironment"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">        <span class="comment">// 这里是根据启动类@ComponentScan注解来扫描项目中的bean</span></span><br><span class="line">Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">sourceClass.getMetadata(), ComponentScans<span class="class">.<span class="keyword">class</span>, <span class="title">ComponentScan</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">!<span class="keyword">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line"><span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">                <span class="comment">//遍历项目中的bean，如果是注解定义的bean，则进一步解析</span></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line"><span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line"><span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line"><span class="keyword">if</span> (bdCand == <span class="keyword">null</span>) &#123;</span><br><span class="line">bdCand = holder.getBeanDefinition();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                        <span class="comment">//递归解析，所有的bean,如果有注解，会进一步解析注解中包含的bean</span></span><br><span class="line">parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @Import annotations</span></span><br><span class="line">        <span class="comment">//递归解析，获取导入的配置类，很多情况下，导入的配置类中会同样包含导入类注解</span></span><br><span class="line">processImports(configClass, sourceClass, getImports(sourceClass), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">        <span class="comment">//解析@ImportResource配置类</span></span><br><span class="line">AnnotationAttributes importResource =</span><br><span class="line">AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (importResource != <span class="keyword">null</span>) &#123;</span><br><span class="line">String[] resources = importResource.getStringArray(<span class="string">"locations"</span>);</span><br><span class="line">Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(<span class="string">"reader"</span>);</span><br><span class="line"><span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">String resolvedResource = <span class="keyword">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process individual @Bean methods</span></span><br><span class="line">        <span class="comment">//处理@Bean注解修饰的类</span></span><br><span class="line">Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line"><span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process default methods on interfaces</span></span><br><span class="line">        <span class="comment">// 处理接口中的默认方法</span></span><br><span class="line">processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process superclass, if any</span></span><br><span class="line">        <span class="comment">//如果该类有父类，则继续返回，上层方法判断不为空，则继续递归执行</span></span><br><span class="line"><span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line"><span class="keyword">if</span> (superclass != <span class="keyword">null</span> &amp;&amp; !superclass.startsWith(<span class="string">"java"</span>) &amp;&amp;</span><br><span class="line">!<span class="keyword">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line"><span class="keyword">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line"><span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line"><span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、查看获取配置类的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">processImports(configClass, sourceClass, getImports(sourceClass), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &#123;<span class="doctag">@code</span> <span class="doctag">@Import</span>&#125; class, considering all meta-annotations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;SourceClass&gt; <span class="title">getImports</span><span class="params">(SourceClass sourceClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Set&lt;SourceClass&gt; imports = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">Set&lt;SourceClass&gt; visited = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">collectImports(sourceClass, imports, visited);</span><br><span class="line"><span class="keyword">return</span> imports;</span><br><span class="line">&#125;</span><br><span class="line">------------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Recursively collect all declared &#123;<span class="doctag">@code</span> <span class="doctag">@Import</span>&#125; values. Unlike most</span></span><br><span class="line"><span class="comment"> * meta-annotations it is valid to have several &#123;<span class="doctag">@code</span> <span class="doctag">@Import</span>&#125;s declared with</span></span><br><span class="line"><span class="comment"> * different values; the usual process of returning values from the first</span></span><br><span class="line"><span class="comment"> * meta-annotation on a class is not sufficient.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For example, it is common for a &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class to declare direct</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Import</span>&#125;s in addition to meta-imports originating from an &#123;<span class="doctag">@code</span> <span class="doctag">@Enable</span>&#125;</span></span><br><span class="line"><span class="comment"> * annotation.</span></span><br><span class="line"><span class="comment"> * 看到所有的bean都以导入的方式被加载进去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectImports</span><span class="params">(SourceClass sourceClass, Set&lt;SourceClass&gt; imports, Set&lt;SourceClass&gt; visited)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (visited.add(sourceClass)) &#123;</span><br><span class="line"><span class="keyword">for</span> (SourceClass annotation : sourceClass.getAnnotations()) &#123;</span><br><span class="line">String annName = annotation.getMetadata().getClassName();</span><br><span class="line"><span class="keyword">if</span> (!annName.equals(Import<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">collectImports(annotation, imports, visited);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">imports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), "value"));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、继续回到ConfigurationClassParser中的parse方法中的最后一行-继续跟进该方法："><a href="#12、继续回到ConfigurationClassParser中的parse方法中的最后一行-继续跟进该方法：" class="headerlink" title="12、继续回到ConfigurationClassParser中的parse方法中的最后一行,继续跟进该方法："></a>12、继续回到ConfigurationClassParser中的parse方法中的最后一行,继续跟进该方法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.process()</span><br><span class="line">-------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="keyword">this</span>.deferredImportSelectors;</span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectors = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (deferredImports != <span class="keyword">null</span>) &#123;</span><br><span class="line">DeferredImportSelectorGroupingHandler handler = <span class="keyword">new</span> DeferredImportSelectorGroupingHandler();</span><br><span class="line">deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span><br><span class="line">deferredImports.forEach(handler::register);</span><br><span class="line">handler.processGroupImports();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processGroupImports</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="keyword">this</span>.groupings.values()) &#123;</span><br><span class="line">grouping.getImports().forEach(entry -&gt; &#123;</span><br><span class="line">ConfigurationClass configurationClass = <span class="keyword">this</span>.configurationClasses.get(</span><br><span class="line">entry.getMetadata());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processImports(configurationClass, asSourceClass(configurationClass),</span><br><span class="line">asSourceClasses(entry.getImportClassName()), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to process import candidates for configuration class ["</span> +</span><br><span class="line">configurationClass.getMetadata().getClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the imports defined by the group.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> each import with its associated configuration class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;</span><br><span class="line"><span class="keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="keyword">this</span>.deferredImports) &#123;</span><br><span class="line"><span class="keyword">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">deferredImport.getImportSelector());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.group.selectImports();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeferredImportSelector <span class="title">getImportSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.importSelector;</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> </span>&#123;</span><br><span class="line">Assert.state(deferredImportSelector <span class="keyword">instanceof</span> AutoConfigurationImportSelector,</span><br><span class="line">() -&gt; String.format(<span class="string">"Only %s implementations are supported, got %s"</span>,</span><br><span class="line">AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(),</span></span><br><span class="line"><span class="class"><span class="title">deferredImportSelector</span>.<span class="title">getClass</span>().<span class="title">getName</span>()))</span>;</span><br><span class="line">AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">.getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata);</span><br><span class="line"><span class="keyword">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line"><span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line"><span class="keyword">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h1><h3 id="1、启动器"><a href="#1、启动器" class="headerlink" title="1、启动器"></a>1、启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        springboot-boot-starter:就是springboot的场景启动器。springboot将所有的功能场景都抽取出来，做成一个个的starter，只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来，根据公司业务需求决定导入什么启动器即可。</p><h3 id="2、主程序"><a href="#2、主程序" class="headerlink" title="2、主程序"></a>2、主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//SpringBootApplication注解用来标注一个主程序类，说明是一个springboot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StudyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<strong>@SpringBootApplication</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ComponentScan:自动扫描并加载符合条件的组件或者bean，将这个bean定义加载到IOC容器中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@SpringBootConfiguration:标注在某个类上，表示这是一个springboot的配置类。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@EnableAutoConfiguration:开启自动配置功能,之前在使用springboot的时候，springboot可以自动帮我们完成配置功能，@EnableAutoConfiguration告诉springboot开启自动配置功能，这样自动配置才能生效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以看到SpringBootConfiguration使用了Configuration注解来标注</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以看到Configuration也是容器中的一个组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@AutoConfigurationPackage:自动配置包</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Import(AutoConfigurationImportSelector.class)：导入哪些组件的选择器，它将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中，它会给容器中导入非常多的自动配置类，就是给容器中导入这个场景需要的所有组件，并配置好这些组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给容器导入一个组件，导入的组件由AutoConfigurationPackages.Registrar.class将主配置类（@SpringBootApplication标注的类）的所在包及包下面所有子包里面的所有组件扫描到spring容器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">AutoConfigurationPackage</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在AutoConfigurationImportSelector类中有如下方法，可以看到</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此时返回的就是启动自动导入配置文件的注解类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line"><span class="keyword">return</span> EnableAutoConfiguration<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入SpringFactoriesLoader类中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看到会读取对应的配置文件，位置在META-INF/spring.factories中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The location to look for factories.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Can be present in multiple JAR files.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入loadFactoryNames方法中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryTypeName = factoryType.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springboot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入容器，自动配置类就生效，帮我们进行自动配置的工作：spring.factories文件位于springboot-autoconfigure.jar包中。</p><p>所以真正实现是从classpath中搜寻所有的<strong>META-INF/spring.factories</strong>配置文件，并将其中对应org.springframework.boot.autoconfigure.包下的配置项通过反射实例化为对应标注了@Configuration的JavaConfig形式的IOC容器配置类，然后将这些都汇总称为一个实例并加载到IOC容器中。</p><h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><p>springboot配置文件的装配过程</p><p>1、springboot在启动的时候会加载主配置类，开启了@EnableAutoConfiguration。</p><p>2、@EnableAutoConfiguration的作用：</p><ul><li>利用AutoConfigurationImportSelector给容器导入一些组件。</li><li>查看selectImports方法的内容，返回一个AutoConfigurationEntry</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">      annotationMetadata);</span><br><span class="line">------</span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">------</span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到SpringFactoriesLoader.loadFactoryNames，继续看又调用了loadSpringFactories方法，获取META-INF/spring.factories资源文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">String factoryTypeName = factoryType.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">URL url = urls.nextElement();</span><br><span class="line">UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line"><span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location ["</span> +</span><br><span class="line">FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：将类路径下 META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；每一个xxxAutoConfiguration类都是容器中的一个组件，最后都加入到容器中，用来做自动配置，每一个自动配置类都可以进行自动配置功能</p><p>使用HttpEncodingAutoConfiguration来解释自动装配原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">表名这是一个配置类，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">启动指定类的ConfigurationProperties功能,进入HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来，并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">/*</span></span><br><span class="line"><span class="class"><span class="title">spring</span>底层@<span class="title">Confitional</span>注解，根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效</span></span><br><span class="line"><span class="class">此时表示判断当前应用是否是<span class="title">web</span>应用，如果是，那么配置类生效</span></span><br><span class="line"><span class="class">*/</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断当前项目由没有这个类CharacterEncodingFilter，springmvc中进行乱码解决的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">/*</span></span><br><span class="line"><span class="class">判断配置文件中是否存在某个配置：<span class="title">spring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span></span></span><br><span class="line"><span class="class">如果不存在，判断也是成立的，</span></span><br><span class="line"><span class="class">即使我们配置文件中不配置<span class="title">spring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span></span>=<span class="keyword">true</span>，也是默认生效的</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//和springboot的配置文件映射</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span><span class="comment">//判断容器中是否有此组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">LocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) &#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效！</p><p>总结：</p><p>​        1、springboot启动会加载大量的自动配置类</p><p>​        2、查看需要的功能有没有在springboot默认写好的自动配置类中华</p><p>​        3、查看这个自动配置类到底配置了哪些组件</p><p>​        4、给容器中自动配置类添加组件的时候，会从properties类中获取属性</p><p>@Conditional：自动配置类在一定条件下才能生效</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC源码解析</title>
      <link href="/2020/07/15/Spring%20MVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/07/15/Spring%20MVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC源码解析"><a href="#Spring-MVC源码解析" class="headerlink" title="Spring MVC源码解析"></a>Spring MVC源码解析</h1><p>​        在讲解springmvc之前，其实是需要大家了解一点tomcat的源码知识的，但是大部分的初学者还只停留在应用的层面，所以，下面展示tomcat容器初始化的流程图和加载servlet的流程图，大家只需要先记住他们的执行顺序即可，等后续开始tomcat源码之后我们再做下一步深入了解。</p><p>1、Tomcat容器初始化流程图</p><p>![img](Spring MVC源码解析/tomcat容器初始化流程图.png)</p><p>2、tomcat加载servlet流程图</p><p>![img](Spring MVC源码解析/加载servlet流程图.png)</p><p>从上述流程开始看起，我们发现最终会调用Servlet的init方法，SpringMVC中最核心的类就是DispatcherServlet，因此需要找到init方法。</p><h3 id="1、DispatcherServlet的初始化"><a href="#1、DispatcherServlet的初始化" class="headerlink" title="1、DispatcherServlet的初始化"></a>1、DispatcherServlet的初始化</h3><p>DispatcherServlet的类图：</p><p>![image-20200314005616939](Spring MVC源码解析/DispatcherServlet类图.png)</p><p>​        可以看到,DispatcherServlet继承自HttpServlet，它的本质就是一个Servlet，但是此类中并没有init方法，因此要去父类中进行查找，最终在HttpServletBean类中重写了父类GenericServlet的init方法。因此当tomcat容器启动的时候会调用init方法开始执行，中间会经历N多个环节，此处不需要了解，唯一需要注意的一个点，就在于SpringMVC的组件会调用DispatcherServlet的组件进行初始化工作，这些初始化工作会完成对于九大组件的初始化，这个初始化会从DispatcherServlet.properties文件中进行相应的属性值加载。</p><p>HttpServletBean———init()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set bean properties from init parameters.</span></span><br><span class="line">    <span class="comment">// 将web.xml文件中初始化参数设置到bean中，requiredProperties为必须参数</span></span><br><span class="line">PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</span><br><span class="line"><span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//将DispatcherServlet类添加到BeanWrapper的包装类中</span></span><br><span class="line">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</span><br><span class="line">ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">bw.registerCustomEditor(Resource<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ResourceEditor</span>(<span class="title">resourceLoader</span>, <span class="title">getEnvironment</span>()))</span>;</span><br><span class="line">                <span class="comment">//对DispatcherServlet进行初始化工作</span></span><br><span class="line">initBeanWrapper(bw);</span><br><span class="line">                <span class="comment">//将配置的初始化值设置到DispatcherServlet中</span></span><br><span class="line">bw.setPropertyValues(pvs, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">    <span class="comment">// 模板方法，子类初始化的入口方法</span></span><br><span class="line">initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用子类方法实现初始化BeanServlet</p><p>FrameworlServlet——initServletBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="string">"Initializing Spring "</span> + getClass().getSimpleName() + <span class="string">" '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Initializing Servlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 设置开始时间</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// webApplicationContext是FrameworkServlet的上下文，后续的方法是进行上下万的初始化</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">            <span class="comment">// 初始化FrameworkServlet，默认实现为null，由子类进行实现</span></span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException | RuntimeException ex) &#123;</span><br><span class="line">logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String value = <span class="keyword">this</span>.enableLoggingRequestDetails ?</span><br><span class="line"><span class="string">"shown which may lead to unsafe logging of potentially sensitive data"</span> :</span><br><span class="line"><span class="string">"masked to prevent unsafe logging of potentially sensitive data"</span>;</span><br><span class="line">logger.debug(<span class="string">"enableLoggingRequestDetails='"</span> + <span class="keyword">this</span>.enableLoggingRequestDetails +</span><br><span class="line"><span class="string">"': request parameters and headers will be "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Completed initialization in "</span> + (System.currentTimeMillis() - startTime) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此后的流程会进入到Spring的onRefresh方法中，最终会调用DispatcherServlet中的onRefresh方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the strategy objects that this servlet uses.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.进行springmvc组件的初始化，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 文件上传解析器</span></span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">        <span class="comment">// 区域信息解析器，国际化相关</span></span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">        <span class="comment">// 主题解析器</span></span><br><span class="line">initThemeResolver(context);</span><br><span class="line">        <span class="comment">// 处理映射器</span></span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">        <span class="comment">// 处理适配器</span></span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">        <span class="comment">// 异常解析器</span></span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">        <span class="comment">// RequestToViewName解析器</span></span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">        <span class="comment">// 视图解析器</span></span><br><span class="line">initViewResolvers(context);</span><br><span class="line">        <span class="comment">// FlashMap解析器</span></span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这几个组件的初始化过程都差不多，因此我们选择一个来重点描述，其他的需要大家下去之后自己来研究了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 是否查找所有HandlerMapping标识</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line"><span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">            <span class="comment">// 从上下文中查找HandlerMapping类型的Bean</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 根据指定名称获取HandlerMapping对象</span></span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line">    <span class="comment">// 确保至少有一个HandlerMapping，如果没有找到，使用默认策略，注册一个默认的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No HandlerMappings declared for servlet '"</span> + getServletName() +</span><br><span class="line"><span class="string">"': using default strategies from DispatcherServlet.properties"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过默认策略来加载默认的配置项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</span><br><span class="line">String key = strategyInterface.getName();</span><br><span class="line">String value = defaultStrategies.getProperty(key);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</span><br><span class="line">List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;&gt;(classNames.length);</span><br><span class="line"><span class="keyword">for</span> (String className : classNames) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">Object strategy = createDefaultStrategy(context, clazz);</span><br><span class="line">strategies.add((T) strategy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</span><br><span class="line"><span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className +</span><br><span class="line"><span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (LinkageError err) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</span><br><span class="line"><span class="string">"Unresolvable class definition for DispatcherServlet's default strategy class ["</span> +</span><br><span class="line">className + <span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strategies;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认策略就完成了从DispatcherServlet.properties文件中加载的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties defaultStrategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// Load default strategy implementations from properties file.</span></span><br><span class="line"><span class="comment">// This is currently strictly internal and not meant to be customized</span></span><br><span class="line"><span class="comment">// by application developers.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not load '"</span> + DEFAULT_STRATEGIES_PATH + <span class="string">"': "</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        以上的操作就是DispatcherServlet的组件的初始化过程，下去之后一定要把每个过程详细看一下，如果能够结合spring进行查看就更好了。</p><h3 id="2、DispatcherServlet的请求处理"><a href="#2、DispatcherServlet的请求处理" class="headerlink" title="2、DispatcherServlet的请求处理"></a>2、DispatcherServlet的请求处理</h3><p>​        我们都知道当发送请求的时候每次都是找到Servlet的doget或者dopost方法中，但是你在DispatcherServlet中并没有看到这两个方法，还是按照老规矩，子类没有去父类找实现。</p><p>FrameworkServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        大家看到无论发送什么请求，最终都会进入到processRequest方法中，此方法用来处理我们从浏览器发送的请求，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 记录启动时间</span></span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取之前设置的LocaleContext上下文</span></span><br><span class="line">LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="comment">// 以当前的request作用域来创建一个上下文对象</span></span><br><span class="line">LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取之前的request属性值</span></span><br><span class="line">RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="comment">// previousAttributes若为null，那么就new ServletRequestAttributes(request, response);如果不等于空，就直接返回</span></span><br><span class="line">ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取异步管理器</span></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.registerCallableInterceptor(FrameworkServlet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">new</span> <span class="title">RequestBindingInterceptor</span>())</span>;</span><br><span class="line"><span class="comment">//将之前设置request和locale上下文绑定到requestContext中</span></span><br><span class="line">initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//在子类中进行逻辑实现</span></span><br><span class="line">doService(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">failureCause = ex;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line"><span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">requestAttributes.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">logResult(request, response, failureCause, asyncManager);</span><br><span class="line">publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        大家看到了，在上述方法中，实际调用的是子类的doService方法，也就是DispatcherServlet中的方法实现，现在终于回归到我们要重点关注的类了，接着向下看；</p><p>DispatcherServlet  doService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line"><span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">        <span class="comment">// 如果该请求是include的请求（请求包含） 那么就把request域中的数据保存一份快照版本</span></span><br><span class="line"><span class="comment">// 等doDispatch结束之后，会把这个快照版本的数据覆盖到新的request里面去</span></span><br><span class="line">Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line"><span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">String attrName = (String) attrNames.nextElement();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">        <span class="comment">// 把一些常用对象放进请求域  方便Handler里面可以随意获取</span></span><br><span class="line">request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从flashMapManager中获取重定向的相关参数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line"><span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//DispatcherServlet中最重要的方法，由此方法来分发请求，进行处理</span></span><br><span class="line">doDispatch(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line"><span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        到此为止，就该执行DispatcherServlet的核心方法doDispatcher，此方法完成了我们需要的全部功能，接着向下看。</p><p>3、DispatcherServlet的核心处理方法doDispatcher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个已处理请求，指向参数的request</span></span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">    <span class="comment">// 定义处理器执行连，内部封装拦截器列表和处理器</span></span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 是否有文件上传的请求标志</span></span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取异步管理器，执行异步操作</span></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保存处理器执行的返回结果</span></span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 保存处理过程中的异常</span></span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 判断当前请求是否有上传需求，并返回保存到processedRequest中</span></span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">                <span class="comment">// 判断当前请求是否是文件上传的请求，如果是则说明是上传请求已经处理</span></span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">                <span class="comment">// 获取可处理当前请求的请求处理器，通过HandlerMapping进行查找</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">                <span class="comment">// 如果没有，就执行没有处理器的逻辑</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在内部处理中抛出异常或者返回404</span></span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">                <span class="comment">// 根据当前请求的处理器获取支持该处理器的适配器</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">                <span class="comment">// 处理last-modified请求头，用于判断请求内容是否发生修改</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">                <span class="comment">// 只有get请求和head请求执行此判断</span></span><br><span class="line"><span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line"><span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 通过mappedHandler这个HandlerExecutionChain执行链的封装，链式执行所有连接器的前置拦截方法</span></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                    <span class="comment">// 任意一个拦截器的前置拦截方法返回false，提前结束请求的处理</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">                <span class="comment">// 执行处理适配器的处理方法，传入请求，对请求进行处理，此方法的返回值是ModelAndView对象，封装了模型和视图</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="comment">// 如果是异步处理，则直接返回，后续处理通过异步执行</span></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回的mv对象中如果没有视图名称，则根据请求设置默认视图名</span></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                <span class="comment">// 请求处理正常完成，链式执行所有拦截器的后置方法</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">// 保存异常信息</span></span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">                <span class="comment">// 4.3版本之后提供了error类型异常的处理</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 对下执行结果进行处理，包括视图的处理和异常的处理</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="comment">// 链式执行拦截器链的afterCompletion方法</span></span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// 拦截error类型异常，拦截后链式执行拦截器链的afterCompletion方法</span></span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 做资源清理</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如果把刚刚的大致流程都搞清楚的话，那么我们下面开始分析每一个环节的具体流程，下面的代码会比较多，大家尽力去理解。</p><h3 id="3、上传组件的请求处理"><a href="#3、上传组件的请求处理" class="headerlink" title="3、上传组件的请求处理"></a>3、上传组件的请求处理</h3><p>processedRequest = checkMultipart(request);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HttpServletRequest <span class="title">checkMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line">    <span class="comment">// 判断当前请求是否包含文件上传的需求，如果是则执行后续逻辑</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class="line">            <span class="comment">// 判断当前请求是否是MultipartHttpServletRequest类型，如果是的话，就判断当前请求的类型是否是Request，如果是打印日志即可</span></span><br><span class="line"><span class="keyword">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (request.getDispatcherType().equals(DispatcherType.REQUEST)) &#123;</span><br><span class="line">logger.trace(<span class="string">"Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//判断是否有异常</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hasMultipartException(request)) &#123;</span><br><span class="line">logger.debug(<span class="string">"Multipart resolution previously failed for current request - "</span> +</span><br><span class="line"><span class="string">"skipping re-resolution for undisturbed error rendering"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 将当前请求包装返回一个新的包装对象StandardMultipartHttpServletRequest</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MultipartException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Multipart resolution failed for error dispatch"</span>, ex);</span><br><span class="line"><span class="comment">// Keep processing error dispatch with regular request handle below</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If not returned before: return original request.</span></span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、获取请求处理器"><a href="#4、获取请求处理器" class="headerlink" title="4、获取请求处理器"></a>4、获取请求处理器</h3><p>mappedHandler = getHandler(processedRequest);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 判断当前处理器映射列表不为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="comment">// 遍历全部处理器映射</span></span><br><span class="line">      <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">         <span class="comment">// 执行当前处理器映射的获取处理器方法，获取与本次请求适配的处理器执行链</span></span><br><span class="line">         HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">         <span class="comment">// 不为空直接返回，即便有多个处理器执行链匹配，也只返回第一个，处理器映射排在前面的优先返回</span></span><br><span class="line">         <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在springmvc中默认会加载三个请求处理类：RequestMappingHandlerMapping、BeanNameUrlHandlerMapping、SimpleUrlHandlerMapping。这几个类都是在初始化的时候设置成功的，同样的，他们也具备相同的父类AbstractHandlerMapping，无论哪一个处理类最终都会嗲用getHandler方法，此方法在父类中，没有在子类中实现，下面来看这个方法的逻辑：</p><p>AbstractHandlerMapping  getHandler()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//此方法留给子类实现，用于查找handler处理器，每个子类都有不同的实现，因此需要单独去查看</span></span><br><span class="line">Object handler = getHandlerInternal(request);</span><br><span class="line">    <span class="comment">// 如果handler为空，那么就使用默认的</span></span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">handler = getDefaultHandler();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果还是为空的话，那么就直接返回</span></span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bean name or resolved handler?</span></span><br><span class="line">    <span class="comment">// 如果返回的handler为string,则使用Spring容器实例化</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">String handlerName = (String) handler;</span><br><span class="line">handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询匹配的拦截器，组装handler生成HandlerExecutionChain</span></span><br><span class="line">HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Mapped to "</span> + handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled() &amp;&amp; !request.getDispatcherType().equals(DispatcherType.ASYNC)) &#123;</span><br><span class="line">logger.debug(<span class="string">"Mapped to "</span> + executionChain.getHandler());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是cors请求，cors是跨域请求</span></span><br><span class="line"><span class="keyword">if</span> (hasCorsConfigurationSource(handler) || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line">CorsConfiguration config = (<span class="keyword">this</span>.corsConfigurationSource != <span class="keyword">null</span> ? <span class="keyword">this</span>.corsConfigurationSource.getCorsConfiguration(request) : <span class="keyword">null</span>);</span><br><span class="line">CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class="line">config = (config != <span class="keyword">null</span> ? config.combine(handlerConfig) : handlerConfig);</span><br><span class="line">executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回处理器链</span></span><br><span class="line"><span class="keyword">return</span> executionChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、获取请求处理类的适配器类"><a href="#5、获取请求处理类的适配器类" class="headerlink" title="5、获取请求处理类的适配器类"></a>5、获取请求处理类的适配器类</h3><p>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历处理适配器列表，根据support方法来进行判断</span></span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">                <span class="comment">// 当找到支持的适配器则返回</span></span><br><span class="line"><span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 未找到适配器则直接抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line"><span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此适配器集合共有三个具体实现子类，分别是：HttpRequestHandlerAdapter、SimpleControllerHandlerAdapter、RequestMappingHandlerAdapter，然后根据support方法来判断使用哪种适配器，并将对应的适配器对象返回。</p><h3 id="6、执行前置拦截器链"><a href="#6、执行前置拦截器链" class="headerlink" title="6、执行前置拦截器链"></a>6、执行前置拦截器链</h3><p>if (!mappedHandler.applyPreHandle(processedRequest, response))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前处理器执行链中的所有拦截器</span></span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">            <span class="comment">// 正序遍历全部拦截器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">                <span class="comment">// 执行拦截器的prehandle方法，如果返回false则直接停止执行视为处理完成，触发拦截器的完成后方法</span></span><br><span class="line"><span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">// 如果为true，拦截器索引设置为当前遍历索引</span></span><br><span class="line"><span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 全部执行完成，返回true，表示继续执行下一步</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、根据适配器类去处理对应的请求，并返回ModelAndView对象"><a href="#7、根据适配器类去处理对应的请求，并返回ModelAndView对象" class="headerlink" title="7、根据适配器类去处理对应的请求，并返回ModelAndView对象"></a>7、根据适配器类去处理对应的请求，并返回ModelAndView对象</h3><p>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 调用具体的适配器子类去处理请求</span></span><br><span class="line">((HttpRequestHandler) handler).handleRequest(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、设置默认的视图名称"><a href="#7、设置默认的视图名称" class="headerlink" title="7、设置默认的视图名称"></a>7、设置默认的视图名称</h3><p>applyDefaultViewName(processedRequest, mv);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do we need view name translation?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyDefaultViewName</span><span class="params">(HttpServletRequest request, @Nullable ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如果返回值不为空，且不包含视图</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;</span><br><span class="line">            <span class="comment">// 根据逻辑获取默认视图名</span></span><br><span class="line">String defaultViewName = getDefaultViewName(request);</span><br><span class="line">            <span class="comment">// 如果获取的默认视图名不为空，则将其设置为modelAndView的视图名</span></span><br><span class="line"><span class="keyword">if</span> (defaultViewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">mv.setViewName(defaultViewName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、执行后置拦截器链"><a href="#8、执行后置拦截器链" class="headerlink" title="8、执行后置拦截器链"></a>8、执行后置拦截器链</h3><p>mappedHandler.applyPostHandle(processedRequest, response, mv);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取全部拦截器</span></span><br><span class="line">HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">            <span class="comment">// 倒序遍历全部拦截器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">                <span class="comment">// 直接执行，无返回值</span></span><br><span class="line">interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、处理Controller返回的结果"><a href="#9、处理Controller返回的结果" class="headerlink" title="9、处理Controller返回的结果"></a>9、处理Controller返回的结果</h3><p>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否是error视图</span></span><br><span class="line"><span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 如果有异常，就 进入异常处理逻辑，返回到异常页面</span></span><br><span class="line"><span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果异常类型为ModelAndViewDefiningException</span></span><br><span class="line"><span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">                <span class="comment">// 直接使用异常中封装的ModelAndView作为最终的mv结果</span></span><br><span class="line">mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 其他异常类型，先获取处理器</span></span><br><span class="line">Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">// 执行process处理其异常方法，获取处理了异常结果后得到的mv结果</span></span><br><span class="line">mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">                <span class="comment">// 如果mv不为空，则说明返回了包含异常的视图，</span></span><br><span class="line">errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="comment">// 如果mv不为空且mv没有标记为被清理，</span></span><br><span class="line"><span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            <span class="comment">// 执行视图渲染的操作</span></span><br><span class="line">render(mv, request, response);</span><br><span class="line">            <span class="comment">// 如果是异常视图，渲染后需要清空请求属性中的异常信息</span></span><br><span class="line"><span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果视图为空，则打印一个日志</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No view rendering, null ModelAndView returned."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果异步处理已经开始，则直接返回结束执行</span></span><br><span class="line"><span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行拦截器的AfterCompletion方法</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在上述的处理过程中，有两个比较重要的方法，第一个是发生异常时，把异常处理为mv返回值的逻辑processHandlerException，第二个是对返回的mv结果进行渲染的逻辑render。</p><h3 id="10、处理器异常处理方法"><a href="#10、处理器异常处理方法" class="headerlink" title="10、处理器异常处理方法"></a>10、处理器异常处理方法</h3><p>mv = processHandlerException(request, response, handler, exception);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Success and error responses may use different content types</span></span><br><span class="line">request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check registered HandlerExceptionResolvers...</span></span><br><span class="line">ModelAndView exMv = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果处理器异常解析器列表不为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerExceptionResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历该列表</span></span><br><span class="line"><span class="keyword">for</span> (HandlerExceptionResolver resolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</span><br><span class="line">                <span class="comment">// 执行处理器异常解析器的解析异常方法，拿到解析的ModelAndView的结果</span></span><br><span class="line">exMv = resolver.resolveException(request, response, handler, ex);</span><br><span class="line">                <span class="comment">// 如果不为空，则将此结果作为对异常处理后的mv结果使用，中断后续的遍历动作</span></span><br><span class="line"><span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 如果返回的异常mv不为null</span></span><br><span class="line"><span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果mv内部为空</span></span><br><span class="line"><span class="keyword">if</span> (exMv.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 设置异常属性到请求属性中</span></span><br><span class="line">request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// We might still need view name translation for a plain error model...</span></span><br><span class="line">            <span class="comment">// 如果异常mv不包含视图</span></span><br><span class="line"><span class="keyword">if</span> (!exMv.hasView()) &#123;</span><br><span class="line">                <span class="comment">// 采用与doDispatch方法中相同的处理逻辑来给很具请求获取默认视图名</span></span><br><span class="line">String defaultViewName = getDefaultViewName(request);</span><br><span class="line"><span class="keyword">if</span> (defaultViewName != <span class="keyword">null</span>) &#123;</span><br><span class="line">exMv.setViewName(defaultViewName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Using resolved error view: "</span> + exMv, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Using resolved error view: "</span> + exMv);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 暴露溢写异常信息到请求属性中</span></span><br><span class="line">WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class="line">            <span class="comment">// 返回新的mv异常视图模型</span></span><br><span class="line"><span class="keyword">return</span> exMv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有处理器异常解析器，则原封不动抛出原始异常，交给web框架处理</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、视图渲染方法：</p><p>render(mv, request, response);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">    <span class="comment">// 先通过Locale解析器获取请求对应的Locale</span></span><br><span class="line">Locale locale =</span><br><span class="line">(<span class="keyword">this</span>.localeResolver != <span class="keyword">null</span> ? <span class="keyword">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</span><br><span class="line">    <span class="comment">// 设置获取的Locale为响应的Locale</span></span><br><span class="line">response.setLocale(locale);</span><br><span class="line"><span class="comment">// 最终获取的视图</span></span><br><span class="line">View view;</span><br><span class="line">    <span class="comment">// 如果mv中的视图为视图名，则获取这个视图名</span></span><br><span class="line">String viewName = mv.getViewName();</span><br><span class="line"><span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// We need to resolve the view name.</span></span><br><span class="line">            <span class="comment">// 把视图名解析为视图</span></span><br><span class="line">view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">            <span class="comment">// 无法根绝视图名解析视图时抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</span><br><span class="line"><span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">            <span class="comment">// 如果不是视图名，而直接是一个视图类型，则获取视图</span></span><br><span class="line">view = mv.getView();</span><br><span class="line">            <span class="comment">// 视图为空时同样抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +</span><br><span class="line"><span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Rendering view ["</span> + view + <span class="string">"] "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果mv中的status为空，则把其设置为响应的状态码，</span></span><br><span class="line"><span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">response.setStatus(mv.getStatus().value());</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 执行视图的渲染方法，每种模板引擎都有其对应的视图实现，视图渲染对应于模板引擎的渲染模板</span></span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, @Nullable Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="function"><span class="params">Locale locale, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 如果视图解析器列表不为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历视图解析器列表</span></span><br><span class="line"><span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">                <span class="comment">// 调用视图解析器的resolveViewName方法，把视图名解析为视图</span></span><br><span class="line">View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">                <span class="comment">// 第一个不为空的视图返回</span></span><br><span class="line"><span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引数据结构分析</title>
      <link href="/2020/07/12/MySQL%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/12/MySQL%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树、B-Tree、B-Tree、红黑树、平衡二叉树（AVL-Trees）"><a href="#二叉树、B-Tree、B-Tree、红黑树、平衡二叉树（AVL-Trees）" class="headerlink" title="二叉树、B-Tree、B+Tree、红黑树、平衡二叉树（AVL Trees）"></a>二叉树、B-Tree、B+Tree、红黑树、平衡二叉树（AVL Trees）</h2><h3 id="平衡二叉树-AVL-Trees"><a href="#平衡二叉树-AVL-Trees" class="headerlink" title="平衡二叉树 (AVL Trees)"></a>平衡二叉树 (AVL Trees)</h3><p>  平衡二叉树是一种特殊的二叉树，所以他也满足前面说到的二叉树的两个特性，同时还有一个特性：</p><p>​        它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>  大家也看到了前面[35 27 48 12 29 38 55]插入完成后的图，其实就已经是一颗平衡二叉树。</p><p>  那如果按照[12 27 29 35 38 48 55]的顺序插入一颗平衡二叉树，会怎么样呢？我们看看插入以及平衡的过程：</p><img src="http://cdn.17coding.info/WeChat%20Screenshot_20190616165744.png" alt="img" style="zoom:80%;"><img src="http://cdn.17coding.info/WeChat%20Screenshot_20190616165806.png" alt="img" style="zoom:80%;">![img](MySQL索引数据结构分析/WeChat Screenshot_20190616165835.png)![img](MySQL索引数据结构分析/WeChat Screenshot_20190616165909.png)![img](MySQL索引数据结构分析/WeChat Screenshot_20190616165924.png)![img](MySQL索引数据结构分析/WeChat Screenshot_20190616165936.png)![img](MySQL索引数据结构分析/WeChat Screenshot_20190616165954.png)<p>  这棵树始终满足平衡二叉树的几个特性而保持平衡！这样我们的树也不会退化为线性链表了！我们需要查找一个数的时候就能沿着树根一直往下找，这样的查找效率和二分法查找是一样的呢！</p><p>  一颗平衡二叉树能容纳多少的结点呢？这跟树的高度是有关系的，假设树的高度为h，那每一层最多容纳的结点数量为2^(n-1)，整棵树最多容纳节点数为2^0+2^1+2^2+…+2^(h-1)。这样计算，100w数据树的高度大概在20左右，那也就是说从有着100w条数据的平衡二叉树中找一个数据，最坏的情况下需要20次查找。如果是内存操作，效率也是很高的！但是我们数据库中的数据基本都是放在磁盘中的，每读取一个二叉树的结点就是一次磁盘IO，这样我们找一条数据如果要经过20次磁盘的IO？那性能就成了一个很大的问题了！那我们是不是可以把这棵树压缩一下，让每一层能够容纳更多的节点呢？虽然我矮，但是我胖啊…</p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>  这颗矮胖的树就是B-Tree，注意中间是杠精的杠而不是减，所以也不要读成B减Tree了~</p><p>  那B-Tree有哪些特性呢？一棵m阶的B-Tree有如下特性：</p><blockquote><p>1、每个结点最多m个子结点。<br>2、除了根结点和叶子结点外，每个结点最少有m/2（向上取整）个子结点。<br>3、如果根结点不是叶子结点，那根结点至少包含两个子结点。<br>4、所有的叶子结点都位于同一层。<br>5、每个结点都包含k个元素（关键字），这里m/2≤k&lt;m，这里m/2向下取整。<br>6、每个节点中的元素（关键字）从小到大排列。<br>7、每个元素（关键字）字左结点的值，都小于或等于该元素（关键字）。右结点的值都大于或等于该元素（关键字）。</p></blockquote><p>  是不是感觉跟丈母娘张口问你要彩礼一样，列一堆的条件，而且每一条都让你很懵逼！下面我们以一个[0,1,2,3,4,5,6,7]的数组插入一颗3阶的B-Tree为例，将所有的条件都串起来，你就明白了！</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204220.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204227.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204243.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204302.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204311.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204327.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619204336.png)</p><p>  那么，你是否对B-Tree的几点特性都清晰了呢？在二叉树中，每个结点只有一个元素。但是在B-Tree中，每个结点都可能包含多个元素，并且非叶子结点在元素的左右都有指向子结点的指针。</p><p>  如果需要查找一个元素，那流程是怎么样的呢？我们看下图，如果我们要在下面的B-Tree中找到关键字24，那流程如下<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619210818.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619210824.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619210831.png)<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190619210838.png)</p><p>  从这个流程我们能看出，B-Tree的查询效率好像也并不比平衡二叉树高。但是查询所经过的结点数量要少很多，也就意味着要少很多次的磁盘IO，这对<br>性能的提升是很大的。</p><p>  前面对B-Tree操作的图我们能看出来，元素就是类似1、2、3这样的数值，但是数据库的数据都是一条条的数据，如果某个数据库以B-Tree的数据结构存储数据，那数据怎么存放的呢？我们看下一张图</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190620221029.png)</p><p>  普通的B-Tree的结点中，元素就是一个个的数字。但是上图中，我们把元素部分拆分成了key-data的形式，key就是数据的主键，data就是具体的数据。这样我们在找一条数的时候，就沿着根结点往下找就ok了，效率是比较高的。</p><h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>  B+Tree是在B-Tree基础上的一种优化，使其更适合实现外存储索引结构。B+Tree与B-Tree的结构很像，但是也有几个自己的特性：</p><blockquote><p>1、所有的非叶子节点只存储关键字信息。<br>2、所有卫星数据（具体数据）都存在叶子结点中。<br>3、所有的叶子结点中包含了全部元素的信息。<br>4、所有叶子节点之间都有一个链指针。</p></blockquote><p>  如果上面B-Tree的图变成B+Tree，那应该如下：<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190621220003.png)</p><p>  大家仔细对比于B-Tree的图能发现什么不同？<br>  1、非叶子结点上已经只有key信息了，满足上面第1点特性！<br>  2、所有叶子结点下面都有一个data区域，满足上面第2点特性！<br>  3、非叶子结点的数据在叶子结点上都能找到，如根结点的元素4、8在最底层的叶子结点上也能找到，满足上面第3点特性！<br>  4、注意图中叶子结点之间的箭头，满足满足上面第4点特性！</p><h3 id="B-Tree-or-B-Tree？"><a href="#B-Tree-or-B-Tree？" class="headerlink" title="B-Tree or B+Tree？"></a>B-Tree or B+Tree？</h3><p>  在讲这两种数据结构在数据库中的选择之前，我们还需要了解的一个知识点是操作系统从磁盘读取数据到内存是以磁盘块（block）为基本单位的，<strong>位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么</strong>。即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的<strong>局部性原理</strong>： 当一个数据被用到时，其附近的数据也通常会马上被使用。<br>  预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k）。</p><p>  B-Tree和B+Tree该如何选择呢？都有哪些优劣呢？<br>  1、B-Tree因为非叶子结点也保存具体数据，所以在查找某个关键字的时候找到即可返回。而B+Tree所有的数据都在叶子结点，每次查找都得到叶子结点。所以在同样高度的B-Tree和B+Tree中，B-Tree查找某个关键字的效率更高。<br>  2、由于B+Tree所有的数据都在叶子结点，并且结点之间有指针连接，在找大于某个关键字或者小于某个关键字的数据的时候，B+Tree只需要找到该关键字然后沿着链表遍历就可以了，而B-Tree还需要遍历该关键字结点的根结点去搜索。<br>  3、由于B-Tree的每个结点（这里的结点可以理解为一个数据页）都存储主键+实际数据，而B+Tree非叶子结点只存储关键字信息，而每个页的大小有限是有限的，所以同一页能存储的B-Tree的数据会比B+Tree存储的更少。这样同样总量的数据，B-Tree的深度会更大，增大查询时的磁盘I/O次数，进而影响查询效率。<br>  鉴于以上的比较，所以在常用的关系型数据库中，都是选择B+Tree的数据结构来存储数据！下面我们以mysql的innodb存储引擎为例讲解，其他类似sqlserver、oracle的原理类似！</p><h4 id="innodb引擎数据存储"><a href="#innodb引擎数据存储" class="headerlink" title="innodb引擎数据存储"></a>innodb引擎数据存储</h4><p>  在InnoDB存储引擎中，也有页的概念，默认每个页的大小为16K，也就是每次读取数据时都是读取4*4k的大小！假设我们现在有一个用户表，我们往里面写数据</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623130137.png)</p><p>  这里需要注意的一点是，在某个页内插入新行时，为了不减少数据的移动，通常是插入到当前行的后面或者是已删除行留下来的空间，所以在<strong>某一个页内</strong>的数据并<strong>不是完全有序</strong>的（后面页结构部分有细讲），但是为了为了数据访问顺序性，在每个记录中都有一个指向下一条记录的指针，以此构成了一条单向有序链表，不过在这里为了方便演示我是按顺序排列的！</p><p>  由于数据还比较少，一个页就能容下，所以只有一个根结点，主键和数据也都是保存在根结点（左边的数字代表主键，右边名字、性别代表具体的数据）。假设我们写入10条数据之后，Page1满了，再写入新的数据会怎么存放呢？我们继续看下图</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623130144.png)</p><p>  有个叫“秦寿生”的朋友来了，但是Page1已经放不下数据了，这时候就需要进行页分裂，产生一个新的Page。在innodb中的流程是怎么样的呢？</p><blockquote><p>1、产生新的Page2，然后将Page1的内容复制到Page2。<br>2、产生新的Page3，“秦寿生”的数据放入Page3。<br>3、原来的Page1依然作为根结点，但是变成了一个不存放数据只存放索引的页，并且有两个子结点Page2、Page3。</p></blockquote><p>  这里有两个问题需要注意的是<br>  1、为什么要复制Page1为Page2而不是创建一个新的页作为根结点，这样就少了一步复制的开销了？<br>  如果是重新创建根结点，那根结点存储的物理地址可能经常会变，不利于查找。并且在<strong>innodb中根结点是会预读到内存中</strong>的，所以结点的物理地址固定会比较好！</p><p>  2、原来Page1有10条数据，在插入第11条数据的时候进行裂变，根据前面对B-Tree、B+Tree特性的了解，那这至少是一颗11阶的树，裂变之后每个结点的元素至少为11/2=5个，那是不是应该页裂变之后主键1-5的数据还是在原来的页，主键6-11的数据会放到新的页，根结点存放主键6？<br>  如果是这样的话新的页空间利用率只有50%，并且会导致更为频繁的页分裂。所以innodb对这一点做了优化，新的数据放入新创建的页，不移动原有页面的任何记录。</p><p>  随着数据的不断写入，这棵树也逐渐枝繁叶茂，如下图<br>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623131149.png)</p><p>  每次新增数据，都是将一个页写满，然后新创建一个页继续写，这里其实是有个隐含条件的，那就是<strong>主键自增</strong>！主键自增写入时新插入的数据不会影响到原有页，插入效率高！且页的利用率高！但是如果主键是无序的或者随机的，那每次的插入可能会导致原有页频繁的分裂，影响插入效率！降低页的利用率！<strong>这也是为什么在innodb中建议设置主键自增的原因！</strong></p><p>  这棵树的非叶子结点上存的都是主键，那如果一个表没有主键会怎么样？在innodb中，如果一个表没有主键，那默认会找建了唯一索引的列，如果也没有，则会生成一个隐形的字段作为主键！</p><p>  有数据插入那就有删除，如果这个用户表频繁的插入和删除，那会导致数据页产生碎片，页的空间利用率低，还会导致树变的“虚高”，降低查询效率！这可以通过<strong>索引重建</strong>来消除碎片提高查询效率！</p><h4 id="innodb引擎数据查找"><a href="#innodb引擎数据查找" class="headerlink" title="innodb引擎数据查找"></a>innodb引擎数据查找</h4><p>  数据插入了怎么查找呢？</p><blockquote><p>1、找到数据所在的页。这个查找过程就跟前面说到的B+Tree的搜索过程是一样的，从根结点开始查找一直到叶子结点。<br>2、在页内找具体的数据。读取第1步找到的叶子结点数据到内存中，然后通过<strong>分块查找</strong>的方法找到具体的数据。</p></blockquote><p>  这跟我们在新华字典中找某个汉字是一样的，先通过字典的索引定位到该汉字拼音所在的页，然后到指定的页找到具体的汉字。innodb中定位到页后用了哪种策略快速查找某个主键呢？这我们就需要从页结构开始了解。</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623225950.png)</p><p>  左边蓝色区域称为Page Directory，这块区域由多个slot组成，是一个稀疏索引结构，即一个槽中可能属于多个记录，最少属于4条记录，最多属于8条记录。槽内的数据是有序存放的，所以当我们寻找一条数据的时候可以先在槽中通过二分法查找到一个大致的位置。</p><p>  右边区域为数据区域，每一个数据页中都包含多条行数据。注意看图中最上面和最下面的两条特殊的行记录Infimum和Supremum，这是两个虚拟的行记录。在没有其他用户数据的时候Infimum的下一条记录的指针指向Supremum，当有用户数据的时候，Infimum的下一条记录的指针指向当前页中最小的用户记录，当前页中最大的用户记录的下一条记录的指针指向Supremum，至此整个页内的所有行记录形成一个单向链表。</p><p>  行记录被Page Directory逻辑的分成了多个块，块与块之间是有序的，也就是说“4”这个槽指向的数据块内最大的行记录的主键都要比“8”这个槽指向的数据块内最小的行记录的主键要小。但是块内部的行记录不一定有序。</p><p>  每个行记录的都有一个n_owned的区域（图中粉红色区域），n_owned标识这个这个块有多少条数据，伪记录Infimum的n_owned值总是1，记录Supremum的n_owned的取值范围为[1,8]，其他用户记录n_owned的取值范围[4,8]，并且只有每个块中最大的那条记录的n_owned才会有值，其他的用户记录的n_owned为0。</p><p>  所以当我们要找主键为6的记录时，先通过<strong>二分法</strong>在<strong>稀疏索引</strong>中找到对应的槽，也就是Page Directory中“8”这个槽，“8”这个槽指向的是该数据块中最大的记录，而数据是单向链表结构所以无法逆向查找，所以需要找到上一个槽即“4”这个槽，然后通过“4”这个槽中最大的用户记录的指针沿着链表<strong>顺序查找</strong>到目标记录。</p><h4 id="聚集索引-amp-非聚集索引"><a href="#聚集索引-amp-非聚集索引" class="headerlink" title="聚集索引&amp;非聚集索引"></a>聚集索引&amp;非聚集索引</h4><p>  前面关于数据存储的都是演示的聚集索引的实现，如果上面的用户表需要以“用户名字”建立一个非聚集索引，是怎么实现的呢？我们看下图：</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623152229.png)</p><p>  非聚集索引的存储结构与前面是一样的，不同的是在叶子结点的数据部分存的不再是具体的数据，而数据的聚集索引的key。所以通过非聚集索引查找的过程是先找到该索引key对应的聚集索引的key，然后再拿聚集索引的key到主键索引树上查找对应的数据，这个过程称为<strong>回表</strong>！</p><p>  图中的这些名字均来源于网络，希望没有误伤正在看这篇文章的你~^_^</p><h4 id="innodb与MyISAM两种存储引擎对比"><a href="#innodb与MyISAM两种存储引擎对比" class="headerlink" title="innodb与MyISAM两种存储引擎对比"></a>innodb与MyISAM两种存储引擎对比</h4><p>  上面包括存储和搜索都是拿的innodb引擎为例，那MyISAM与innodb在存储上有啥不同呢？憋缩话，看图：</p><p>![img](MySQL索引数据结构分析/WeChat Screenshot_20190623161414.png)</p><p>  上图为MyISAM主键索引的存储结构，我们能看到的不同是</p><blockquote><p>1、主键索引树的叶子结点的数据区域没有存放实际的数据，存放的是数据记录的地址。<br>2、数据的存储不是按主键顺序存放的，按写入的顺序存放。</p></blockquote><p>  也就是说innodb引擎数据在物理上是按主键顺序存放，而MyISAM引擎数据在物理上按插入的顺序存放。并且MyISAM的叶子结点不存放数据，所以非聚集索引的存储结构与聚集索引类似，在使用非聚集索引查找数据的时候通过非聚集索引树就能直接找到数据的地址了，不需要<strong>回表</strong>，这比innodb的搜索效率会更高呢！</p><h4 id="索引优化建议？"><a href="#索引优化建议？" class="headerlink" title="索引优化建议？"></a>索引优化建议？</h4><p>  大家经常会在很多的文章或书中能看到一些索引的使用建议，比如说</p><blockquote><p>1、like的模糊查询以%开头，会导致索引失效。<br>2、一个表建的索引尽量不要超过5个。<br>3、尽量使用覆盖索引。<br>4、尽量不要在重复数据多的列上建索引。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置数据源</title>
      <link href="/2020/07/12/Spring%20Boot%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2020/07/12/Spring%20Boot%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot配置数据源"><a href="#Spring-Boot配置数据源" class="headerlink" title="Spring Boot配置数据源"></a>Spring Boot配置数据源</h1><p>​        Spring Framework 为 SQL 数据库提供了广泛的支持。从直接使用 JdbcTemplate 进行 JDBC 访问到完全的对象关系映射（object relational mapping）技术，比如 Hibernate。Spring Data 提供了更多级别的功能，直接从接口创建的 Repository 实现，并使用了约定从方法名生成查询。</p><h3 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h3><p>1、创建项目，导入需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/sakila?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>3、测试类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以看到默认配置的数据源为class com.zaxxer.hikari.HikariDataSource，我们没有经过任何配置，说明springboot默认情况下支持的就是这种数据源，可以在DataSourceProperties.java文件中查看具体的属性配置</span></span><br></pre></td></tr></table></figure><p>4、crud操作</p><p>​        1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用连接和原生的 JDBC 语句来操作数据库</p><p>​        2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即 org.springframework.jdbc.core.JdbcTemplate。</p><p>​        3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>​        4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>​        5、JdbcTemplate 的自动配置原理是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.contoller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/emplist"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; empList()&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/addEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into emp(empno,ename) values(1111,'zhangsan')"</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateEmp/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String sql = <span class="string">"update emp set ename=? where empno = "</span>+id;</span><br><span class="line">        String name = <span class="string">"list"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteEmp/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from emp where empno = "</span>+id;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"delete success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、自定义数据源DruidDataSource"><a href="#2、自定义数据源DruidDataSource" class="headerlink" title="2、自定义数据源DruidDataSource"></a>2、自定义数据源DruidDataSource</h3><p>通过源码查看DataSourceAutoConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; DataSource<span class="class">.<span class="keyword">class</span>, <span class="title">EmbeddedDatabaseType</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(<span class="title">DataSourceProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; DataSourcePoolMetadataProvidersConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceInitializationConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">DataSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(EmbeddedDatabaseCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123; DataSource<span class="class">.<span class="keyword">class</span>, <span class="title">XADataSource</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(<span class="title">EmbeddedDataSourceConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">EmbeddedDatabaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(PooledDataSourceCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span>&#123; DataSource<span class="class">.<span class="keyword">class</span>, <span class="title">XADataSource</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; DataSourceConfiguration.Hikari<span class="class">.<span class="keyword">class</span>, <span class="title">DataSourceConfiguration</span>.<span class="title">Tomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">DataSourceConfiguration</span>.<span class="title">Dbcp2</span>.<span class="title">class</span>, <span class="title">DataSourceConfiguration</span>.<span class="title">Generic</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">DataSourceJmxConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">PooledDataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> AnyNestedCondition&#125; that checks that either &#123;<span class="doctag">@code</span> spring.datasource.type&#125;</span></span><br><span class="line"><span class="comment"> * is set or &#123;<span class="doctag">@link</span> PooledDataSourceAvailableCondition&#125; applies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PooledDataSourceCondition</span> <span class="keyword">extends</span> <span class="title">AnyNestedCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PooledDataSourceCondition() &#123;</span><br><span class="line"><span class="keyword">super</span>(ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.datasource"</span>, name = <span class="string">"type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplicitType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Conditional</span>(PooledDataSourceAvailableCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">class</span> <span class="title">PooledDataSourceAvailable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、添加druid的maven配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、添加数据源的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p>3、测试发现数据源已经更改</p><p>4、druid是数据库连接池，可以添加druid的独有配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>测试类，发现配置的参数没有生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource)dataSource;</span><br><span class="line">        System.out.println(druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(druidDataSource.getInitialSize());</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要定义druidDatasource的配置类，绑定参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Druid数据源还具有监控的功能，并提供了一个web界面方便用户进行查看。</p><p>加入log4j的日志依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>向DruidConfig中添加代码，配置druid监控管理台的servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;Servlet&gt; servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">        <span class="comment">//initParams.put("allow", "localhost")：表示只有本机可以访问</span></span><br><span class="line">        <span class="comment">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//deny：Druid 后台拒绝谁访问</span></span><br><span class="line">        <span class="comment">//initParams.put("msb", "192.168.1.20");表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">        servletRegistrationBean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line">    <span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//"/*" 表示过滤所有请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、springboot配置多数据源并动态切换"><a href="#3、springboot配置多数据源并动态切换" class="headerlink" title="3、springboot配置多数据源并动态切换"></a>3、springboot配置多数据源并动态切换</h3><p>​        DataSource是和线程绑定的，动态数据源的配置主要是通过继承AbstractRoutingDataSource类实现的，实现在AbstractRoutingDataSource类中的 protected Object determineCurrentLookupKey()方法来获取数据源，所以我们需要先创建一个多线程线程数据隔离的类来存放DataSource，然后在determineCurrentLookupKey()方法中通过这个类获取当前线程的DataSource，在AbstractRoutingDataSource类中，DataSource是通过Key-value的方式保存的，我们可以通过ThreadLocal来保存Key，从而实现数据源的动态切换。</p><p>1、修改配置文件类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">local:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://localhost:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">remote:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure><p>2、创建数据源枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DataSourceType &#123;</span><br><span class="line">    REMOTE,</span><br><span class="line">    LOCAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、数据源切换处理</p><p>​        创建一个数据源切换处理类，有对数据源变量的获取、设置和情况的方法，其中threadlocal用于保存某个线程共享变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用ThreadLocal维护变量，ThreadLocal为每个使用该变量的线程提供独立的变量副本，</span></span><br><span class="line"><span class="comment">     *  所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据源变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSourceType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSourceType</span><span class="params">(String dataSourceType)</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"切换到&#123;%s&#125;数据源"</span>, dataSourceType);</span><br><span class="line">        CONTEXT_HOLDER.set(dataSourceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据源变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSourceType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空数据源变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSourceType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、继承AbstractRoutingDataSource</p><p>​        动态切换数据源主要依靠AbstractRoutingDataSource。创建一个AbstractRoutingDataSource的子类，重写determineCurrentLookupKey方法，用于决定使用哪一个数据源。这里主要用到AbstractRoutingDataSource的两个属性defaultTargetDataSource和targetDataSources。defaultTargetDataSource默认目标数据源，targetDataSources（map类型）存放用来切换的数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultTargetDataSource);</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="comment">// afterPropertiesSet()方法调用时用来将targetDataSources的属性写入resolvedDataSources中的</span></span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Key获取数据源的信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceContextHolder.getDataSourceType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、注入数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.remote"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">remoteDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource.local"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">localDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dynamicDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dataSource</span><span class="params">(DataSource remoteDataSource, DataSource localDataSource)</span> </span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        targetDataSources.put(DataSourceType.REMOTE.name(), remoteDataSource);</span><br><span class="line">        targetDataSources.put(DataSourceType.LOCAL.name(), localDataSource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(remoteDataSource, targetDataSources);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、自定义多数据源切换注解</p><p>​        设置拦截数据源的注解，可以设置在具体的类上，或者在具体的方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">DataSourceType <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DataSourceType.REMOTE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、AOP拦截类的实现</p><p>​        通过拦截上面的注解，在其执行之前处理设置当前执行SQL的数据源的信息，CONTEXT_HOLDER.set(dataSourceType)这里的数据源信息从我们设置的注解上面获取信息，如果没有设置就是用默认的数据源的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.oi.mult.DataSource)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dsPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"dsPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        DataSource dataSource = method.getAnnotation(DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DynamicDataSourceContextHolder.setDataSourceType(dataSource.value().name());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 销毁数据源 在执行方法之后</span></span><br><span class="line">            DynamicDataSourceContextHolder.clearDataSourceType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8、使用切换数据源注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/local"</span>)</span><br><span class="line">    <span class="meta">@DataSource</span>(value = DataSourceType.LOCAL)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; local()&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"select * from emp"</span>);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/remote"</span>)</span><br><span class="line">    <span class="meta">@DataSource</span>(value = DataSourceType.REMOTE)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; remote()&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"select * from emp"</span>);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、在启动项目的过程中会发生循环依赖的问题，直接修改启动类即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = DataSourceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringbootDataApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDataApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、springboot整合mybatis"><a href="#4、springboot整合mybatis" class="headerlink" title="4、springboot整合mybatis"></a>4、springboot整合mybatis</h3><p>1、导入mybatis的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置数据源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        System.out.println(connection.getMetaData().getURL());</span><br><span class="line"></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double comm;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename, String job, Integer mgr, Date hiredate, Double sal, Double comm, Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Integer mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(Double comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Emp)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Emp emp = (Emp) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(empno, emp.empno) &amp;&amp;</span><br><span class="line">                Objects.equals(ename, emp.ename) &amp;&amp;</span><br><span class="line">                Objects.equals(job, emp.job) &amp;&amp;</span><br><span class="line">                Objects.equals(mgr, emp.mgr) &amp;&amp;</span><br><span class="line">                Objects.equals(hiredate, emp.hiredate) &amp;&amp;</span><br><span class="line">                Objects.equals(sal, emp.sal) &amp;&amp;</span><br><span class="line">                Objects.equals(comm, emp.comm) &amp;&amp;</span><br><span class="line">                Objects.equals(deptno, emp.deptno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(empno, ename, job, mgr, hiredate, sal, comm, deptno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Emp&#123;"</span> +</span><br><span class="line">                <span class="string">"empno="</span> + empno +</span><br><span class="line">                <span class="string">", ename='"</span> + ename + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", job='"</span> + job + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mgr="</span> + mgr +</span><br><span class="line">                <span class="string">", hiredate="</span> + hiredate +</span><br><span class="line">                <span class="string">", sal="</span> + sal +</span><br><span class="line">                <span class="string">", comm="</span> + comm +</span><br><span class="line">                <span class="string">", deptno="</span> + deptno +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、配置Mapper接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">selectEmp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpById</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">addEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">deleteEmp</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在resources下创建Emp.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.oi.mapper.EmpMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmp"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    select * from emp</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpById"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addEmp"</span> <span class="attr">parameterType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    insert into emp (empno,ename) values (#&#123;empno&#125;,#&#123;ename&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span> <span class="attr">parameterType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    update emp set ename=#&#123;ename&#125; where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmp"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from emp where empno = #&#123;empno&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、添加配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.oi.entity</span></span><br></pre></td></tr></table></figure><p>8、编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.contoller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.entity.Emp;</span><br><span class="line"><span class="keyword">import</span> com.oi.mapper.EmpMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择全部用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/selectEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Emp&gt; emps = empMapper.selectEmp();</span><br><span class="line">        <span class="keyword">for</span> (Emp Emp : emps) &#123;</span><br><span class="line">            System.out.println(Emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id选择用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/selectEmpById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectEmpById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Emp emp = empMapper.selectEmpById(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/addEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        empMapper.addEmp(<span class="keyword">new</span> Emp(<span class="number">1234</span>,<span class="string">"heheda"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        empMapper.updateEmp(<span class="keyword">new</span> Emp(<span class="number">1234</span>,<span class="string">"heihei"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id删除用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        empMapper.deleteEmp(<span class="number">1234</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ详解</title>
      <link href="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-详细介绍"><a href="#1-详细介绍" class="headerlink" title="1. 详细介绍"></a>1. 详细介绍</h1><h2 id="什么是JMS-MQ"><a href="#什么是JMS-MQ" class="headerlink" title="什么是JMS MQ"></a>什么是JMS MQ</h2><p>全称：Java MessageService 中文：Java 消息服务。 </p><p>JMS 是 Java 的一套 API 标准，最初的目的是为了使应用程序能够访问现有的 MOM 系 统（MOM 是 MessageOriented Middleware 的英文缩写，指的是利用高效可靠的消息传递机 制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。） ；</p><p>后来被许多现有 的 MOM 供应商采用，并实现为 MOM 系统。【常见 MOM 系统包括 Apache 的 ActiveMQ、 阿里巴巴的 RocketMQ、IBM 的 MQSeries、Microsoft 的 MSMQ、BEA 的 RabbitMQ 等。 （并 非全部的 MOM 系统都遵循 JMS 规范）】 </p><p>基于 JMS 实现的 MOM，又被称为 JMSProvider。</p><p>“消息”是在两台计算机间传送的数据单位。消息可以非常简单，例如只包含文本字符串； 也可以更复杂，可能包含嵌入对象。 消息被发送到队列中。</p><p>“消息队列”是在消息的传输过程中保存消息的容器。消息队列管 理器在将消息从它的源中继到它的目标时充当中间人。</p><p>队列的主要目的是提供路由并保证消 息的传递；如果发送消息时接收者不可用，消息队列会保留消息，直到可以成功地传递它。</p><p>消息队列的主要特点是异步处理，主要目的是减少请求响应时间和解耦。所以主要的使 用场景就是将比较耗时而且不需要即时（同步）返回结果的操作作为消息放入消息队列。同 时由于使用了消息队列，只要保证消息格式不变，消息的发送方和接收方并不需要彼此联系， 也不需要受对方的影响，即解耦和。如: 跨系统的异步通信，所有需要异步交互的地方都可以使用消息队列。就像我们除了打电 话（同步）以外，还需要发短信，发电子邮件（异步）的通讯方式。 多个应用之间的耦合，由于消息是平台无关和语言无关的，而且语义上也不再是函数调 用，因此更适合作为多个应用之间的松耦合的接口。基于消息队列的耦合，不需要发送方和 接收方同时在线。 在企业应用集成（EAI）中，文件传输，共享数据库，消息队列，远程过程调用都可以 作为集成的方法。 应用内的同步变异步，比如订单处理，就可以由前端应用将订单信息放到队列，后端应 用从队列里依次获得消息处理，高峰时的大量订单可以积压在队列里慢慢处理掉。由于同步 通常意味着阻塞，而大量线程的阻塞会降低计算机的性能。 消息驱动的架构（EDA），系统分解为消息队列，和消息制造者和消息消费者，一个处 理流程可以根据需要拆成多个阶段（Stage） ，阶段之间用队列连接起来，前一个阶段处理的 结果放入队列，后一个阶段从队列中获取消息继续处理。 应用需要更灵活的耦合方式，如发布订阅，比如可以指定路由规则。 跨局域网，甚至跨城市的通讯，比如北京机房与广州机房的应用程序的通信。</p><h2 id="消息中间件应用场景"><a href="#消息中间件应用场景" class="headerlink" title="消息中间件应用场景"></a>消息中间件应用场景</h2><h3 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a><strong>异步通信</strong></h3><p>有些业务不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h3 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a><strong>缓冲</strong></h3><p>在任何重要的系统中，都会有需要不同的处理时间的元素。消息队列通过一个缓冲层来帮助任务最高效率的执行，该缓冲有助于控制和优化数据流经过系统的速度。以调节系统响应时间。</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a><strong>解耦</strong></h3><p>降低工程间的强依赖程度，针对异构系统进行适配。在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。通过消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，当应用发生变化时，可以独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><h3 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a><strong>冗余</strong></h3><p>有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</p><h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a><strong>扩展性</strong></h3><p>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。便于分布式扩容。</p><h3 id="可恢复性"><a href="#可恢复性" class="headerlink" title="可恢复性"></a><strong>可恢复性</strong></h3><p>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p><h3 id="顺序保证"><a href="#顺序保证" class="headerlink" title="顺序保证"></a><strong>顺序保证</strong></h3><p>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。</p><h3 id="过载保护"><a href="#过载保护" class="headerlink" title="过载保护"></a><strong>过载保护</strong></h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量无法提取预知；如果以为了能处理这类瞬间峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p><h3 id="数据流处理"><a href="#数据流处理" class="headerlink" title="数据流处理"></a><strong>数据流处理</strong></h3><p>分布式系统产生的海量数据流，如：业务日志、监控数据、用户行为等，针对这些数据流进行实时或批量采集汇总，然后进行大数据分析是当前互联网的必备技术，通过消息队列完成此类数据收集是最好的选择。</p><h2 id="常用消息队列（ActiveMQ、RabbitMQ、RocketMQ、Kafka）比较"><a href="#常用消息队列（ActiveMQ、RabbitMQ、RocketMQ、Kafka）比较" class="headerlink" title="常用消息队列（ActiveMQ、RabbitMQ、RocketMQ、Kafka）比较"></a>常用消息队列（ActiveMQ、RabbitMQ、RocketMQ、Kafka）比较</h2><table><thead><tr><th>特性MQ</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>生产者消费者模式</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>发布订阅模式</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>请求回应模式</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Api完备性</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>多语言支持</td><td>支持</td><td>支持</td><td>java</td><td>支持</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>万级</td><td>十万级</td></tr><tr><td>消息延迟</td><td>无</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>消息丢失</td><td>低</td><td>低</td><td>理论上不会丢失</td><td>理论上不会丢失</td></tr><tr><td>文档的完备性</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>提供快速入门</td><td>有</td><td>有</td><td>有</td><td>有</td></tr><tr><td>社区活跃度</td><td>高</td><td>高</td><td>有</td><td>高</td></tr><tr><td>商业支持</td><td>无</td><td>无</td><td>商业云</td><td>商业云</td></tr></tbody></table><h2 id="JMS中的一些角色"><a href="#JMS中的一些角色" class="headerlink" title="JMS中的一些角色"></a>JMS中的一些角色</h2><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a><strong>Broker</strong></h3><p>消息服务器，作为server提供消息核心服务</p><h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><p>生产者</p><p>消息生产者是由会话创建的一个对象，用于把消息发送到一个目的地。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消费者</p><p>消息消费者是由会话创建的一个对象，它用于接收发送到目的地的消息。消息的消费可以采用以下两种方法之一：</p><ul><li>同步消费。通过调用消费者的receive方法从目的地中显式提取消息。receive方法可以一直阻塞到消息到达。</li><li>异步消费。客户可以为消费者注册一个消息监听器，以定义在消息到达时所采取的动作。</li></ul><h3 id="p2p"><a href="#p2p" class="headerlink" title="p2p"></a>p2p</h3><p>基于点对点的消息模型</p><p>消息生产者生产消息发送到 queue 中，然后消息消费者从 queue 中取出并且消费消息。 消息被消费以后，queue 中不再有存储，所以消息消费者不可能消费到已经被消费的消<br>息。<br>Queue 支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费、其它 的则不能消费此消息了。 当消费者不存在时，消息会一直保存，直到有消费消费</p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200110192535698.png" alt="image-20200110192535698"></p><h3 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h3><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200110192613518.png" alt="image-20200110192613518"></p><p>基于订阅/发布的消息模型</p><p>消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消<br>息。<br>和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。 当生产者发布消息，不管是否有消费者。都不会保存消息 一定要先有消息的消费者，后有消息的生产者。</p><h3 id="PTP-和-PUB-SUB-简单对"><a href="#PTP-和-PUB-SUB-简单对" class="headerlink" title="PTP 和 PUB/SUB 简单对"></a>PTP 和 PUB/SUB 简单对</h3><table><thead><tr><th>1</th><th>Topic</th><th>Queue</th></tr></thead><tbody><tr><td></td><td>Publish Subscribe messaging 发布 订阅消息</td><td>Point-to-Point 点对点</td></tr><tr><td>有无状态</td><td>topic 数据默认不落地，是无状态的。</td><td>Queue 数据默认会在 mq 服 务器上以文件形式保存，比如 Active MQ 一 般 保 存 在 $AMQ_HOME\data\kahadb 下 面。也可以配置成 DB 存储。</td></tr><tr><td>完整性保障</td><td>并不保证 publisher 发布的每条数 据，Subscriber 都能接受到。</td><td>Queue 保证每条数据都能 被 receiver 接收。消息不超时。</td></tr><tr><td>消息是否会丢失</td><td>一般来说 publisher 发布消息到某 一个 topic 时，只有正在监听该 topic 地址的 sub 能够接收到消息；如果没 有 sub 在监听，该 topic 就丢失了。</td><td>Sender 发 送 消 息 到 目 标 Queue， receiver 可以异步接收这 个 Queue 上的消息。Queue 上的 消息如果暂时没有 receiver 来 取，也不会丢失。前提是消息不 超时。</td></tr><tr><td>消息发布接 收策略</td><td>一对多的消息发布接收策略，监 听同一个topic地址的多个sub都能收 到 publisher 发送的消息。Sub 接收完 通知 mq 服务器</td><td>一对一的消息发布接收策 略，一个 sender 发送的消息，只 能有一个 receiver 接收。 receiver 接收完后，通知 mq 服务器已接 收，mq 服务器对 queue 里的消 息采取删除或其他操作。</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>队列存储，常用与点对点消息模型 </p><p>默认只能由唯一的一个消费者处理。一旦处理消息删除。 </p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>主题存储，用于订阅/发布消息模型</p><p>主题中的消息，会发送给所有的消费者同时处理。只有在消息可以重复处 理的业务场景中可使用。</p><p>Queue/Topic都是 Destination 的子接口</p><h3 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h3><p>连接工厂，jms中用它创建连接</p><p>连接工厂是客户用来创建连接的对象，例如ActiveMQ提供的ActiveMQConnectionFactory。</p><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>JMS Connection封装了客户与JMS提供者之间的一个虚拟的连接。  </p><h3 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h3><p>消息的目的地</p><p>目的地是客户用来指定它生产的消息的目标和它消费的消息的来源的对象。JMS1.0.2规范中定义了两种消息传递域：点对点（PTP）消息传递域和发布/订阅消息传递域。 点对点消息传递域的特点如下：</p><ul><li>每个消息只能有一个消费者。</li><li>消息的生产者和消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运行状态，它都可以提取消息。</li></ul><p>发布/订阅消息传递域的特点如下：</p><ul><li>每个消息可以有多个消费者。</li><li>生产者和消费者之间有时间上的相关性。</li><li>订阅一个主题的消费者只能消费自它订阅之后发布的消息。JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求 。持久订阅允许消费者消费它在未处于激活状态时发送的消息。<br>在点对点消息传递域中，目的地被成为队列（queue）；在发布/订阅消息传递域中，目的地被成为主题（topic）。</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>JMS Session是生产和消费消息的一个单线程上下文。会话用于创建消息生产者（producer）、消息消费者（consumer）和消息（message）等。会话提供了一个事务性的上下文，在这个上下文中，一组发送和接收被组合到了一个原子操作中。</p><h2 id="JMS的消息格式"><a href="#JMS的消息格式" class="headerlink" title="JMS的消息格式"></a>JMS的消息格式</h2><h3 id="JMS消息由以下三部分组成的："><a href="#JMS消息由以下三部分组成的：" class="headerlink" title="JMS消息由以下三部分组成的："></a>JMS消息由以下三部分组成的：</h3><ul><li><p>消息头。</p><p>每个消息头字段都有相应的getter和setter方法。</p></li><li><p>消息属性。</p><p>如果需要除消息头字段以外的值，那么可以使用消息属性。</p></li><li><p>消息体。</p><p>JMS定义的消息类型有TextMessage、MapMessage、BytesMessage、StreamMessage和ObjectMessage。</p></li></ul><h3 id="TextMessage"><a href="#TextMessage" class="headerlink" title="TextMessage"></a>TextMessage</h3><p>文本消息</p><h3 id="MapMessage"><a href="#MapMessage" class="headerlink" title="MapMessage"></a>MapMessage</h3><p>k/v</p><h3 id="BytesMessage"><a href="#BytesMessage" class="headerlink" title="BytesMessage"></a>BytesMessage</h3><p>字节流</p><h3 id="StreamMessage"><a href="#StreamMessage" class="headerlink" title="StreamMessage"></a>StreamMessage</h3><p>java原始的数据流</p><h3 id="ObjectMessage"><a href="#ObjectMessage" class="headerlink" title="ObjectMessage"></a>ObjectMessage</h3><p>序列化的java对象</p><h2 id="消息可靠性机制"><a href="#消息可靠性机制" class="headerlink" title="消息可靠性机制"></a>消息可靠性机制</h2><h3 id="确认-JMS消息"><a href="#确认-JMS消息" class="headerlink" title="确认 JMS消息"></a>确认 JMS消息</h3><p>只有在被确认之后，才认为已经被成功地消费了。</p><p>消息的成功消费通常包含三个阶段：客户接收消息、客户处理消息和消息被确认。 </p><p>在事务性会话中，当一个事务被提交的时候，确认自动发生。</p><p>在非事务性会话中，消息何时被确认取决于创建会话时的应答模式（acknowledgement mode）。该参数有以下三个可选值：</p><ul><li>Session.AUTO_ACKNOWLEDGE。当客户成功的从receive方法返回的时候，或者从MessageListener.onMessage方法成功返回的时候，会话自动确认客户收到的消息。</li><li>Session.CLIENT_ACKNOWLEDGE。客户通过消息的acknowledge方法确认消息。需要注意的是，在这种模式中，确认是在会话层上进行：确认一个被消费的消息将自动确认所有已被会话消费的消息。例如，如果一个消息消费者消费了10个消息，然后确认第5个消息，那么所有10个消息都被确认。</li><li>Session.DUPS_ACKNOWLEDGE。该选择只是会话迟钝的确认消息的提交。如果JMS Provider失败，那么可能会导致一些重复的消息。如果是重复的消息，那么JMS Provider必须把消息头的JMSRedelivered字段设置为true。</li></ul><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>JMS 支持以下两种消息提交模式：</p><ul><li>PERSISTENT。指示JMS Provider持久保存消息，以保证消息不会因为JMS Provider的失败而丢失。</li><li>NON_PERSISTENT。不要求JMS Provider持久保存消息。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>可以使用消息优先级来指示JMS Provider首先提交紧急的消息。优先级分10个级别，从0（最低）到9（最高）。如果不指定优先级，默认级别是4。需要注意的是，JMS Provider并不一定保证按照优先级的顺序提交消息。</p><h3 id="消息过期"><a href="#消息过期" class="headerlink" title="消息过期"></a>消息过期</h3><p>可以设置消息在一定时间后过期，默认是永不过期。</p><h3 id="临时目的地"><a href="#临时目的地" class="headerlink" title="临时目的地"></a>临时目的地</h3><p>可以通过会话上的createTemporaryQueue方法和createTemporaryTopic方法来创建临时目的地。它们的存在时间只限于创建它们的连接所保持的时间。只有创建该临时目的地的连接上的消息消费者才能够从临时目的地中提取消息。</p><h3 id="持久订阅"><a href="#持久订阅" class="headerlink" title="持久订阅"></a>持久订阅</h3><p>首先消息生产者必须使用PERSISTENT提交消息。客户可以通过会话上的createDurableSubscriber方法来创建一个持久订阅，该方法的第一个参数必须是一个topic，第二个参数是订阅的名称。 JMS Provider会存储发布到持久订阅对应的topic上的消息。如果最初创建持久订阅的客户或者任何其它客户使用相同的连接工厂和连接的客户ID、相同的主题和相同的订阅名再次调用会话上的createDurableSubscriber方法，那么该持久订阅就会被激活。JMS Provider会象客户发送客户处于非激活状态时所发布的消息。 持久订阅在某个时刻只能有一个激活的订阅者。持久订阅在创建之后会一直保留，直到应用程序调用会话上的unsubscribe方法。</p><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>在一个JMS客户端，可以使用本地事务来组合消息的发送和接收。JMS Session接口提供了commit和rollback方法。事务提交意味着生产的所有消息被发送，消费的所有消息被确认；事务回滚意味着生产的所有消息被销毁，消费的所有消息被恢复并重新提交，除非它们已经过期。 事务性的会话总是牵涉到事务处理中，commit或rollback方法一旦被调用，一个事务就结束了，而另一个事务被开始。关闭事务性会话将回滚其中的事务。 需要注意的是，如果使用请求/回复机制，即发送一个消息，同时希望在同一个事务中等待接收该消息的回复，那么程序将被挂起，因为知道事务提交，发送操作才会真正执行。 需要注意的还有一个，消息的生产和消费不能包含在同一个事务中。</p><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/activemq_logo_white_vertical.png" alt="img"></p><p>官方网站</p><p><a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><h2 id="Broker-1"><a href="#Broker-1" class="headerlink" title="Broker"></a>Broker</h2><p>ActiveMQ 5.0 的二进制发布包中bin目录中包含一个名为activemq的脚本，直接运行这个脚本就可以启动一个broker。 此外也可以通过Broker Configuration URI或Broker XBean URI对broker进行配置，以下是一些命令行参数的例子：</p><table><thead><tr><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>activemq</td><td>Runs a broker using the default  ‘xbean:activemq.xml’ as the broker configuration file.</td></tr><tr><td>activemq xbean:myconfig.xml</td><td>Runs a broker using the file myconfig.xml as the  broker configuration file that is located in the classpath.</td></tr><tr><td>activemq xbean:file:./conf/broker1.xml</td><td>Runs a broker using the file broker1.xml as the  broker configuration file that is located in the relative file path  ./conf/broker1.xml</td></tr><tr><td>activemq xbean:file:C:/ActiveMQ/conf/broker2.xml</td><td>Runs a broker using the file broker2.xml as the  broker configuration file that is located in the absolute file path  C:/ActiveMQ/conf/broker2.xml</td></tr><tr><td>activemq broker:(tcp://localhost:61616,  tcp://localhost:5000)?useJmx=true</td><td>Runs a broker with two transport connectors and  JMX enabled.</td></tr><tr><td>activemq broker:(tcp://localhost:61616,  network:tcp://localhost:5000)?persistent=false</td><td>Runs a broker with 1 transport connector and 1  network connector with persistence disabled.</td></tr></tbody></table><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="KahaDB存储"><a href="#KahaDB存储" class="headerlink" title="KahaDB存储"></a>KahaDB存储</h3><p>KahaDB是默认的持久化策略，所有消息顺序添加到一个日志文件中，同时另外有一个索引文件记录指向这些日志的存储地址，还有一个事务日志用于消息回复操作。是一个专门针对消息持久化的解决方案,它对典型的消息使用模式进行了优化。</p><p>在data/kahadb这个目录下，会生成四个文件，来完成消息持久化<br>1.db.data 它是消息的索引文件，本质上是B-Tree（B树），使用B-Tree作为索引指向db-*.log里面存储的消息<br>2.db.redo 用来进行消息恢复 *</p><p>3.db-.log 存储消息内容。新的数据以APPEND的方式追加到日志文件末尾。属于顺序写入，因此消息存储是比较 快的。默认是32M，达到阀值会自动递增<br>4.lock文件 锁，写入当前获得kahadb读写权限的broker ，用于在集群环境下的竞争处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt; &lt;!--directory:保存数据的目录;journalMaxFileLength:保存消息的文件大小 --&gt; &lt;kahaDBdirectory&#x3D;&quot;$&#123;activemq.data&#125;&#x2F;kahadb&quot;journalMaxFileLength&#x3D;&quot;16mb&quot;&#x2F;&gt; &lt;&#x2F;persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><p>特性：</p><p>1、日志形式存储消息；</p><p>2、消息索引以 B-Tree 结构存储，可以快速更新；</p><p>3、 完全支持 JMS 事务；</p><p>4、支持多种恢复机制kahadb 可以限制每个数据文件的大小。不代表总计数据容量。 </p><h3 id="AMQ-方式"><a href="#AMQ-方式" class="headerlink" title="AMQ 方式"></a>AMQ 方式</h3><p>只适用于 5.3 版本之前。 AMQ 也是一个文件型数据库，消息信息最终是存储在文件中。内存中也会有缓存数据。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;persistenceAdapter&gt; &lt;!--directory:保存数据的目录 ;maxFileLength:保存消息的文件大小 --&gt; &lt;amqPersistenceAdapterdirectory&#x3D;&quot;$&#123;activemq.data&#125;&#x2F;amq&quot;maxFileLength&#x3D;&quot;32mb&quot;&#x2F;&gt; &lt;&#x2F;persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><p> 性能高于 JDBC，写入消息时，会将消息写入日志文件，由于是顺序追加写，性能很高。</p><p> 为了提升性能，创建消息主键索引，并且提供缓存机制，进一步提升性能。</p><p>每个日志文件的 大小都是有限制的（默认 32m，可自行配置） 。 </p><p>当超过这个大小，系统会重新建立一个文件。</p><p>当所有的消息都消费完成，系统会删除这 个文件或者归档。 </p><p>主要的缺点是 AMQ Message 会为每一个 Destination 创建一个索引，如果使用了大量的 Queue，索引文件的大小会占用很多磁盘空间。 </p><p>而且由于索引巨大，一旦 Broker（ActiveMQ 应用实例）崩溃，重建索引的速度会非常 慢。 </p><p>虽然 AMQ 性能略高于 Kaha DB 方式，但是由于其重建索引时间过长，而且索引文件 占用磁盘空间过大，所以已经不推荐使用。</p><h3 id="JDBC存储"><a href="#JDBC存储" class="headerlink" title="JDBC存储"></a>JDBC存储</h3><p>使用JDBC持久化方式，数据库默认会创建3个表，每个表的作用如下：<br>activemq_msgs：queue和topic的消息都存在这个表中<br>activemq_acks：存储持久订阅的信息和最后一个持久订阅接收的消息ID<br>activemq_lock：跟kahadb的lock文件类似，确保数据库在某一时刻只有一个broker在访问</p><p>ActiveMQ 将数据持久化到数据库中。 </p><p>不指定具体的数据库。 可以使用任意的数据库 中。 </p><p>本环节中使用 MySQL 数据库。 下述文件为 activemq.xml 配置文件部分内容。 </p><p> 首先定义一个 mysql-ds 的 MySQL 数据源，然后在 persistenceAdapter 节点中配置 jdbcPersistenceAdapter 并且引用刚才定义的数据源。</p><p>dataSource 指定持久化数据库的 bean，createTablesOnStartup 是否在启动的时候创建数 据表，默认值是 true，这样每次启动都会去创建数据表了，一般是第一次启动的时候设置为 true，之后改成 false。 </p><p><strong>Beans中添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;mysql-ds&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot; destroy-method&#x3D;&quot;close&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt; </span><br><span class="line">&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost&#x2F;activemq?relaxAutoCommit&#x3D;true&quot;&#x2F;&gt; </span><br><span class="line">&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;activemq&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;activemq&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;200&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;poolPreparedStatements&quot; value&#x3D;&quot;true&quot;&#x2F;&gt; </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p><strong>修改persistenceAdapter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      &lt;persistenceAdapter&gt;</span><br><span class="line">         &lt;!-- &lt;kahaDB directory&#x3D;&quot;$&#123;activemq.data&#125;&#x2F;kahadb&quot;&#x2F;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;jdbcPersistenceAdapter dataSource&#x3D;&quot;#mysql-ds&quot; createTablesOnStartup&#x3D;&quot;true&quot; &#x2F;&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;&#x2F;persistenceAdapter&gt;</span><br></pre></td></tr></table></figure><p>依赖jar包</p><p>commons-dbcp commons-pool mysql-connector-java</p><h4 id="表字段解释"><a href="#表字段解释" class="headerlink" title="表字段解释"></a>表字段解释</h4><p><strong>activemq_acks</strong>：用于存储订阅关系。如果是持久化Topic，订阅者和服务器的订阅关系在这个表保存。<br>主要的数据库字段如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">container：消息的destination </span><br><span class="line">sub_dest：如果是使用static集群，这个字段会有集群其他系统的信息 </span><br><span class="line">client_id：每个订阅者都必须有一个唯一的客户端id用以区分 </span><br><span class="line">sub_name：订阅者名称 </span><br><span class="line">selector：选择器，可以选择只消费满足条件的消息。条件可以用自定义属性实现，可支持多属性and和or操作 </span><br><span class="line">last_acked_id：记录消费过的消息的id。</span><br></pre></td></tr></table></figure><p>2：<strong>activemq_lock</strong>：在集群环境中才有用，只有一个Broker可以获得消息，称为Master Broker，其他的只能作为备份等待Master Broker不可用，才可能成为下一个Master Broker。这个表用于记录哪个Broker是当前的Master Broker。</p><p>3：<strong>activemq_msgs</strong>：用于存储消息，Queue和Topic都存储在这个表中。<br>主要的数据库字段如下：</p><p><a href="javascript:void(0);"><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/copycode.gif" alt="复制代码"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">id：自增的数据库主键 </span><br><span class="line">container：消息的destination </span><br><span class="line">msgid_prod：消息发送者客户端的主键 </span><br><span class="line">msg_seq：是发送消息的顺序，msgid_prod+msg_seq可以组成jms的messageid </span><br><span class="line">expiration：消息的过期时间，存储的是从1970-01-01到现在的毫秒数 </span><br><span class="line">msg：消息本体的java序列化对象的二进制数据 </span><br><span class="line">priority：优先级，从0-9，数值越大优先级越高 </span><br><span class="line">xid:用于存储订阅关系。如果是持久化topic，订阅者和服务器的订阅关系在这个表保存。</span><br></pre></td></tr></table></figure><h3 id="LevelDB存储"><a href="#LevelDB存储" class="headerlink" title="LevelDB存储"></a>LevelDB存储</h3><p>LevelDB持久化性能高于KahaDB，虽然目前默认的持久化方式仍然是KahaDB。并且，在ActiveMQ 5.9版本提供 了基于LevelDB和Zookeeper的数据复制方式，用于Master-slave方式的首选数据复制方案。 但是在ActiveMQ官网对LevelDB的表述：LevelDB官方建议使用以及不再支持，推荐使用的是KahaDB </p><h3 id="Memory-消息存储"><a href="#Memory-消息存储" class="headerlink" title="Memory 消息存储"></a>Memory 消息存储</h3><p>顾名思义，基于内存的消息存储，就是消息存储在内存中。persistent=”false”,表示不设置持 久化存储，直接存储到内存中<br>在broker标签处设置。</p><h3 id="JDBC-Message-store-with-ActiveMQ-Journal"><a href="#JDBC-Message-store-with-ActiveMQ-Journal" class="headerlink" title="JDBC Message store with ActiveMQ Journal"></a>JDBC Message store with ActiveMQ Journal</h3><p>这种方式克服了JDBC Store的不足，JDBC存储每次消息过来，都需要去写库和读库。 ActiveMQ Journal，使用延迟存储数据到数据库，当消息来到时先缓存到文件中，延迟后才写到数据库中。</p><p>当消费者的消费速度能够及时跟上生产者消息的生产速度时，journal文件能够大大减少需要写入到DB中的消息。 举个例子，生产者生产了1000条消息，这1000条消息会保存到journal文件，如果消费者的消费速度很快的情况 下，在journal文件还没有同步到DB之前，消费者已经消费了90%的以上的消息，那么这个时候只需要同步剩余的 10%的消息到DB。 如果消费者的消费速度很慢，这个时候journal文件可以使消息以批量方式写到DB。 </p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>完整支持的协议</p><p><a href="http://activemq.apache.org/configuring-version-5-transports.html" target="_blank" rel="noopener">http://activemq.apache.org/configuring-version-5-transports.html</a></p><p>ActiveMQ支持的client-broker通讯协议有：TCP、NIO、UDP、SSL、Http(s)、VM。</p><h3 id="Transmission-Control-Protocol-TCP"><a href="#Transmission-Control-Protocol-TCP" class="headerlink" title="Transmission Control Protocol (TCP)"></a>Transmission Control Protocol (TCP)</h3><p>1：这是默认的Broker配置，TCP的Client监听端口是61616。<br>2：在网络传输数据前，必须要序列化数据，消息是通过一个叫wire protocol的来序列化成字节流。默认情况下，ActiveMQ把wire protocol叫做OpenWire，它的目的是促使网络上的效率和数据快速交互。<br>3：TCP连接的URI形式：tcp://hostname:port?key=value&amp;key=value，加粗部分是必须的<br>4：TCP传输的优点：<br>(1)TCP协议传输可靠性高，稳定性强<br>(2)高效性：字节流方式传递，效率很高<br>(3)有效性、可用性：应用广泛，支持任何平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;openwire&quot; uri&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:61616?maximumConnections&#x3D;1000&amp;wireFormat.maxFrameSize&#x3D;104857600&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="New-I-O-API-Protocol（NIO）"><a href="#New-I-O-API-Protocol（NIO）" class="headerlink" title="New I/O API Protocol（NIO）"></a>New I/O API Protocol（NIO）</h3><p>1：NIO协议和TCP协议类似，但NIO更侧重于底层的访问操作。它允许开发人员对同一资源可有更多的client调用和服务端有更多的负载。<br>2：适合使用NIO协议的场景：<br>(1)可能有大量的Client去链接到Broker上一般情况下，大量的Client去链接Broker是被操作系统的线程数所限制的。因此，NIO的实现比TCP需要更少的线程去运行，所以建议使用NIO协议<br>(2)可能对于Broker有一个很迟钝的网络传输NIO比TCP提供更好的性能<br>3：NIO连接的URI形式：nio://hostname:port?key=value<br>4：Transport Connector配置示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">　　&lt;transportConnector</span><br><span class="line">　　　　name&#x3D;&quot;tcp&quot;</span><br><span class="line">　　　　uri&#x3D;&quot;tcp:&#x2F;&#x2F;localhost:61616?trace&#x3D;true&quot; &#x2F;&gt;</span><br><span class="line">　　&lt;transportConnector</span><br><span class="line">　　　　name&#x3D;&quot;nio&quot;</span><br><span class="line">　　　　uri&#x3D;&quot;nio:&#x2F;&#x2F;localhost:61618?trace&#x3D;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;transportConnectors&gt;</span><br></pre></td></tr></table></figure><p>上面的配置，示范了一个TCP协议监听61616端口，一个NIO协议监听61618端口 </p><h3 id="User-Datagram-Protocol（UDP"><a href="#User-Datagram-Protocol（UDP" class="headerlink" title="User Datagram Protocol（UDP)"></a>User Datagram Protocol（UDP)</h3><p>1：UDP和TCP的区别<br>(1)TCP是一个原始流的传递协议，意味着数据包是有保证的，换句话说，数据包是不会被复制和丢失的。UDP，另一方面，它是不会保证数据包的传递的<br>(2)TCP也是一个稳定可靠的数据包传递协议，意味着数据在传递的过程中不会被丢失。这样确保了在发送和接收之间能够可靠的传递。相反，UDP仅仅是一个链接协议，所以它没有可靠性之说<br>2：从上面可以得出：TCP是被用在稳定可靠的场景中使用的；UDP通常用在快速数据传递和不怕数据丢失的场景中，还有ActiveMQ通过防火墙时，只能用UDP<br>3：UDP连接的URI形式：udp://hostname:port?key=value<br>4：Transport Connector配置示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector</span><br><span class="line">        name&#x3D;&quot;udp&quot;</span><br><span class="line">        uri&#x3D;&quot;udp:&#x2F;&#x2F;localhost:61618?trace&#x3D;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;transportConnectors&gt;</span><br></pre></td></tr></table></figure><h3 id="Secure-Sockets-Layer-Protocol-SSL"><a href="#Secure-Sockets-Layer-Protocol-SSL" class="headerlink" title="Secure Sockets Layer Protocol (SSL)"></a>Secure Sockets Layer Protocol (SSL)</h3><p>1：连接的URI形式：ssl://hostname:port?key=value<br>2：Transport Connector配置示例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector name&#x3D;&quot;ssl&quot; uri&#x3D;&quot;ssl:&#x2F;&#x2F;localhost:61617?trace&#x3D;true&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;transportConnectors&gt;</span><br></pre></td></tr></table></figure><h3 id="Hypertext-Transfer-Protocol-HTTP-HTTPS"><a href="#Hypertext-Transfer-Protocol-HTTP-HTTPS" class="headerlink" title="Hypertext Transfer Protocol (HTTP/HTTPS)"></a>Hypertext Transfer Protocol (HTTP/HTTPS)</h3><p>1：像web和email等服务需要通过防火墙来访问的，Http可以使用这种场合<br>2：连接的URI形式：<a href="http://hostname:port?key=value或者https://hostname:port?key=value">http://hostname:port?key=value或者https://hostname:port?key=value</a><br>3：Transport Connector配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector name&#x3D;&quot;http&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080?trace&#x3D;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;transportConnectors&gt;</span><br></pre></td></tr></table></figure><h3 id="VM-Protocol（VM）"><a href="#VM-Protocol（VM）" class="headerlink" title="VM Protocol（VM）"></a>VM Protocol（VM）</h3><p>1、VM transport允许在VM内部通信，从而避免了网络传输的开销。这时候采用的连 接不是socket连接，而是直接的方法调用。 </p><p>2、第一个创建VM连接的客户会启动一个embed VM broker，接下来所有使用相同的 broker name的VM连接都会使用这个broker。当这个broker上所有的连接都关闭 的时候，这个broker也会自动关闭。 </p><p>3、连接的URI形式：vm://brokerName?key=value </p><p>4、Java中嵌入的方式： vm:broker:(tcp://localhost:6000)?brokerName=embeddedbroker&amp;persistent=fal se ， 定义了一个嵌入的broker名称为embededbroker以及配置了一个 tcptransprotconnector在监听端口6000上 </p><p>5、使用一个加载一个配置文件来启动broker vm://localhost?brokerConfig=xbean:activemq.xml</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h3><p>解压后直接执行</p><p><code>bin/win64/activemq.bat</code></p><h3 id="web控制台"><a href="#web控制台" class="headerlink" title="web控制台"></a>web控制台</h3><p><a href="http://localhost:8161/" target="_blank" rel="noopener">http://localhost:8161/</a></p><p>通过8161端口访问</p><h3 id="修改访问端口"><a href="#修改访问端口" class="headerlink" title="修改访问端口"></a>修改访问端口</h3><p>修改 ActiveMQ 配置文件:/usr/local/activemq/conf/jetty.xml</p><p><strong>jettyport节点</strong></p><p>配置文件修改完毕，保存并重新启动 ActiveMQ 服务。</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>maven坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.activemq&#x2F;activemq-all --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.activemq&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activemq-all&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.15.11&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.activemq01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1. 建立工厂对象，</span></span><br><span class="line">ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</span><br><span class="line">ActiveMQConnectionFactory.DEFAULT_USER,</span><br><span class="line">ActiveMQConnectionFactory.DEFAULT_PASSWORD,</span><br><span class="line"><span class="string">"tcp://localhost:61616"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//2 从工厂里拿一个连接</span></span><br><span class="line">Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//3 从连接中获取Session(会话)</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 从会话中获取目的地(Destination)消费者会从这个目的地取消息</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"f"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从会话中创建消息提供者</span></span><br><span class="line"></span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">//从会话中创建文本消息(也可以创建其它类型的消息体)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"msg: "</span> + i);</span><br><span class="line"><span class="comment">// 通过消息提供者发送消息到ActiveMQ</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">producer.send(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">connection.close();</span><br><span class="line">System.out.println(<span class="string">"exit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.activemq01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1. 建立工厂对象，</span></span><br><span class="line">ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</span><br><span class="line">ActiveMQConnectionFactory.DEFAULT_USER,</span><br><span class="line">ActiveMQConnectionFactory.DEFAULT_PASSWORD,</span><br><span class="line"><span class="string">"tcp://localhost:61616"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//2 从工厂里拿一个连接</span></span><br><span class="line">Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//3 从连接中获取Session(会话)</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">// 从会话中获取目的地(Destination)消费者会从这个目的地取消息</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"f"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从会话中创建消息提供者</span></span><br><span class="line"></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">//从会话中创建文本消息(也可以创建其它类型的消息体)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">TextMessage receive = (TextMessage)consumer.receive();</span><br><span class="line">System.out.println(<span class="string">"TextMessage:"</span> + receive.getText());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Active-MQ的安全机制"><a href="#Active-MQ的安全机制" class="headerlink" title="Active MQ的安全机制"></a>Active MQ的安全机制</h2><h3 id="web控制台安全"><a href="#web控制台安全" class="headerlink" title="web控制台安全"></a>web控制台安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># username: password [,rolename ...]</span><br><span class="line">admin: admin, admin</span><br><span class="line">user: user, user</span><br><span class="line">yiming: 123, user</span><br></pre></td></tr></table></figure><p>用户名：密码，角色</p><p>注意: 配置需重启ActiveMQ才会生效。</p><h3 id="消息安全机制"><a href="#消息安全机制" class="headerlink" title="消息安全机制"></a>消息安全机制</h3><p>修改 activemq.xml</p><p>在123行      节点中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">groups</span>=<span class="string">"admins,publishers,consumers"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"publisher"</span> <span class="attr">password</span>=<span class="string">"publisher"</span>  <span class="attr">groups</span>=<span class="string">"publishers,consumers"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"consumer"</span> <span class="attr">password</span>=<span class="string">"consumer"</span> <span class="attr">groups</span>=<span class="string">"consumers"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"guest"</span> <span class="attr">password</span>=<span class="string">"guest"</span>  <span class="attr">groups</span>=<span class="string">"guests"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.commit();</span><br><span class="line">session.rollback();</span><br></pre></td></tr></table></figure><p>用来提交/回滚事务</p><h3 id="Purge"><a href="#Purge" class="headerlink" title="Purge"></a>Purge</h3><p>清理消息</p><h3 id="签收模式"><a href="#签收模式" class="headerlink" title="签收模式"></a>签收模式</h3><p>签收代表接收端的session已收到消息的一次确认，反馈给broker</p><p>ActiveMQ支持自动签收与手动签收</p><h4 id="Session-AUTO-ACKNOWLEDGE"><a href="#Session-AUTO-ACKNOWLEDGE" class="headerlink" title="Session.AUTO_ACKNOWLEDGE"></a>Session.AUTO_ACKNOWLEDGE</h4><p>当客户端从receiver或onMessage成功返回时，Session自动签收客户端的这条消息的收条。</p><h4 id="Session-CLIENT-ACKNOWLEDGE"><a href="#Session-CLIENT-ACKNOWLEDGE" class="headerlink" title="Session.CLIENT_ACKNOWLEDGE"></a>Session.CLIENT_ACKNOWLEDGE</h4><p>客户端通过调用消息(Message)的acknowledge方法签收消息。在这种情况下，签收发生在Session层面：签收一个已经消费的消息会自动地签收这个Session所有已消费的收条。</p><h4 id="Session-DUPS-OK-ACKNOWLEDGE"><a href="#Session-DUPS-OK-ACKNOWLEDGE" class="headerlink" title="Session.DUPS_OK_ACKNOWLEDGE"></a>Session.DUPS_OK_ACKNOWLEDGE</h4><p>Session不必确保对传送消息的签收，这个模式可能会引起消息的重复，但是降低了Session的开销，所以只有客户端能容忍重复的消息，才可使用。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>默认持久化是开启的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT)</span><br></pre></td></tr></table></figure><h3 id="优先级-1"><a href="#优先级-1" class="headerlink" title="优先级"></a>优先级</h3><p>可以打乱消费顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.setPriority</span><br></pre></td></tr></table></figure><p>配置文件需要指定使用优先级的目的地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;policyEntry queue&#x3D;&quot;queue1&quot; prioritizedMessages&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="消息超时-过期"><a href="#消息超时-过期" class="headerlink" title="消息超时/过期"></a>消息超时/过期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.setTimeToLive</span><br></pre></td></tr></table></figure><p>设置了消息超时的消息，消费端在超时后无法在消费到此消息。</p><p>给消息设置一个超时时间 -&gt; 死信队列 -&gt; 拿出来 -&gt; 重发</p><h4 id="死信"><a href="#死信" class="headerlink" title="死信"></a>死信</h4><p>此类消息会进入到<code>ActiveMQ.DLQ</code>队列且不会自动清除，称为死信</p><p>此处有消息堆积的风险</p><h4 id="修改死信队列名称"><a href="#修改死信队列名称" class="headerlink" title="修改死信队列名称"></a>修改死信队列名称</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">"f"</span> <span class="attr">prioritizedMessages</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">individualDeadLetterStrategy</span>   <span class="attr">queuePrefix</span>=<span class="string">"DLxxQ."</span> <span class="attr">useQueueForQueueMessages</span>=<span class="string">"true"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">deadLetterStrategy</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br></pre></td></tr></table></figure><p>useQueueForQueueMessages: 设置使用队列保存死信，还可以设置useQueueForTopicMessages，使用Topic来保存死信 </p><h4 id="让非持久化的消息也进入死信队列"><a href="#让非持久化的消息也进入死信队列" class="headerlink" title="让非持久化的消息也进入死信队列"></a>让非持久化的消息也进入死信队列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;individualDeadLetterStrategy   queuePrefix&#x3D;&quot;DLxxQ.&quot; useQueueForQueueMessages&#x3D;&quot;true&quot;  processNonPersistent&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>processNonPersistent=”true”</p><h4 id="过期消息不进死信队列"><a href="#过期消息不进死信队列" class="headerlink" title="过期消息不进死信队列"></a>过期消息不进死信队列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;individualDeadLetterStrategy   processExpired&#x3D;&quot;false&quot;  &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="独占消费者"><a href="#独占消费者" class="headerlink" title="独占消费者"></a>独占消费者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue queue &#x3D; session.createQueue(&quot;xxoo?consumer.exclusive&#x3D;true&quot;);</span><br></pre></td></tr></table></figure><p>还可以设置优先级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue queue &#x3D; session.createQueue(&quot;xxoo?consumer.exclusive&#x3D;true&amp;consumer.priority&#x3D;10&quot;);</span><br></pre></td></tr></table></figure><h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><h4 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Girl girl = <span class="keyword">new</span> Girl(<span class="string">"qiqi"</span>,<span class="number">25</span>,<span class="number">398.0</span>);</span><br><span class="line"></span><br><span class="line">Message message = session.createObjectMessage(girl);</span><br></pre></td></tr></table></figure><h4 id="接受端"><a href="#接受端" class="headerlink" title="接受端"></a>接受端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(message <span class="keyword">instanceof</span> ActiveMQObjectMessage) &#123;</span><br><span class="line"></span><br><span class="line">Girl girl = (Girl)((ActiveMQObjectMessage)message).getObject();</span><br><span class="line"></span><br><span class="line">System.out.println(girl);</span><br><span class="line">System.out.println(girl.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果遇到此类报错</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; javax.jms.JMSException: Failed to build body from content. Serializable class not available to broker. Reason: java.lang.ClassNotFoundException: Forbidden class com.mashibing.mq.Girl! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http:&#x2F;&#x2F;activemq.apache.org&#x2F;objectmessage.html for more information on how to configure trusted classes.</span><br><span class="line">at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36)</span><br><span class="line">at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:213)</span><br><span class="line">at com.mashibing.mq.Receiver.main(Receiver.java:65)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: Forbidden class com.mashibing.mq.Girl! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http:&#x2F;&#x2F;activemq.apache.org&#x2F;objectmessage.html for more information on how to configure trusted classes.</span><br><span class="line">at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.checkSecurity(ClassLoadingAwareObjectInputStream.java:112)</span><br><span class="line">at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.resolveClass(ClassLoadingAwareObjectInputStream.java:57)</span><br><span class="line">at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1868)</span><br><span class="line">at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)</span><br><span class="line">at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)</span><br><span class="line">at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)</span><br><span class="line">at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)</span><br><span class="line">at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:211)</span><br><span class="line">... 1 more</span><br></pre></td></tr></table></figure><p><strong>需要添加信任</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">connectionFactory.setTrustedPackages(</span><br><span class="line">new ArrayList&lt;String&gt;(</span><br><span class="line">Arrays.asList(</span><br><span class="line">new String[]&#123;</span><br><span class="line">Girl.class.getPackage().getName()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="bytesMessage"><a href="#bytesMessage" class="headerlink" title="bytesMessage"></a>bytesMessage</h3><h4 id="发送端-1"><a href="#发送端-1" class="headerlink" title="发送端"></a>发送端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BytesMessage bytesMessage &#x3D; session.createBytesMessage();</span><br><span class="line">      bytesMessage.writeBytes(&quot;str&quot;.getBytes());</span><br><span class="line">      bytesMessage.writeUTF(&quot;哈哈&quot;);</span><br></pre></td></tr></table></figure><h4 id="接受端-1"><a href="#接受端-1" class="headerlink" title="接受端"></a>接受端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(message <span class="keyword">instanceof</span> BytesMessage) &#123;</span><br><span class="line">BytesMessage bm = (BytesMessage)message;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">while</span> ((len = bm.readBytes(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用ActiveMQ给提供的便捷方法,但要注意读取和写入的顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bm.readBoolean()</span><br><span class="line">bm.readUTF()</span><br></pre></td></tr></table></figure><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream out &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">    out &#x3D; new FileOutputStream(&quot;d:&#x2F;aa.txt&quot;);</span><br><span class="line">&#125; catch (FileNotFoundException e2) &#123;</span><br><span class="line">    e2.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">byte[] by &#x3D; new byte[1024];</span><br><span class="line">int len &#x3D; 0 ;</span><br><span class="line">try &#123;</span><br><span class="line">    while((len &#x3D; bm.readBytes(by))!&#x3D; -1)&#123;</span><br><span class="line">        out.write(by,0,len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception e1) &#123;</span><br><span class="line">    e1.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MapMessage-1"><a href="#MapMessage-1" class="headerlink" title="MapMessage"></a>MapMessage</h3><h4 id="发送端-2"><a href="#发送端-2" class="headerlink" title="发送端"></a>发送端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MapMessage mapMessage = session.createMapMessage();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">mapMessage.setString(<span class="string">"name"</span>,<span class="string">"lucy"</span>);</span><br><span class="line">      mapMessage.setBoolean(<span class="string">"yihun"</span>,<span class="keyword">false</span>);</span><br><span class="line">mapMessage.setInt(<span class="string">"age"</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">producer.send(mapMessage);</span><br></pre></td></tr></table></figure><h4 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Message message &#x3D; consumer.receive();</span><br><span class="line">MapMessage mes &#x3D; (MapMessage) message;</span><br><span class="line"></span><br><span class="line">System.out.println(mes);</span><br><span class="line"></span><br><span class="line">System.out.println(mes.getString(&quot;name&quot;));</span><br></pre></td></tr></table></figure><h2 id="消息发送原理"><a href="#消息发送原理" class="headerlink" title="消息发送原理"></a>消息发送原理</h2><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><table><thead><tr><th></th><th>开启事务</th><th>关闭事务</th></tr></thead><tbody><tr><td>持久化</td><td>异步</td><td>同步</td></tr><tr><td>非持久化</td><td>异步</td><td>异步</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>我们可以通过以下几种方式来设置异步发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</span><br><span class="line"><span class="string">"admin"</span>,</span><br><span class="line"><span class="string">"admin"</span>,</span><br><span class="line"><span class="string">"tcp://localhost:61616"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 2.获取一个向ActiveMQ的连接</span></span><br><span class="line">connectionFactory.setUseAsyncSend(<span class="keyword">true</span>);</span><br><span class="line">ActiveMQConnection connection = (ActiveMQConnection)connectionFactory.createConnection();</span><br><span class="line">connection.setUseAsyncSend(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h3><p>producer每发送一个消息，统计一下发送的字节数，当字节数达到ProducerWindowSize值时，需要等待broker的确认，才能继续发送。</p><p>brokerUrl中设置: <code>tcp://localhost:61616?jms.producerWindowSize=1048576</code></p><p>destinationUri中设置: <code>myQueue?producer.windowSize=1048576</code></p><h3 id="延迟消息投递"><a href="#延迟消息投递" class="headerlink" title="延迟消息投递"></a>延迟消息投递</h3><p>首先在配置文件中开启延迟和调度</p><p><strong>schedulerSupport=”true”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;broker xmlns&#x3D;&quot;http:&#x2F;&#x2F;activemq.apache.org&#x2F;schema&#x2F;core&quot; brokerName&#x3D;&quot;localhost&quot; dataDirectory&#x3D;&quot;$&#123;activemq.data&#125;&quot; schedulerSupport&#x3D;&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="延迟发送"><a href="#延迟发送" class="headerlink" title="延迟发送"></a>延迟发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 10*1000);</span><br></pre></td></tr></table></figure><h3 id="带间隔的重复发送"><a href="#带间隔的重复发送" class="headerlink" title="带间隔的重复发送"></a>带间隔的重复发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">long delay &#x3D; 10 * 1000;</span><br><span class="line">long period &#x3D; 2 * 1000;</span><br><span class="line">int repeat &#x3D; 9;</span><br><span class="line">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);</span><br><span class="line">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);</span><br><span class="line">message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);</span><br><span class="line">createProducer.send(message);</span><br></pre></td></tr></table></figure><h3 id="Cron表达式定时发送"><a href="#Cron表达式定时发送" class="headerlink" title="Cron表达式定时发送"></a>Cron表达式定时发送</h3><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： </p><p><em>Seconds Minutes Hours DayofMonth Month DayofWeek Year或</em> </p><p>Seconds Minutes Hours DayofMonth Month DayofWeek</p><p>每一个域可出现的字符如下： </p><p>Seconds:可出现”, - * /“四个字符，有效范围为0-59的整数 </p><p>Minutes:可出现”, - * /“四个字符，有效范围为0-59的整数 </p><p>Hours:可出现”, - * /“四个字符，有效范围为0-23的整数 </p><p>DayofMonth:可出现”, - * / ? L W C”八个字符，有效范围为0-31的整数 </p><p>Month:可出现”, - * /“四个字符，有效范围为1-12的整数或JAN-DEc </p><p>DayofWeek:可出现”, - * / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推 </p><p>Year:可出现”, - * /“四个字符，有效范围为1970-2099年</p><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是： </p><p>(1)<em>：表示匹配该域的任意值，假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</p><p>(2)?:只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。 </p><p>(3)-:表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p><p>(4)/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. </p><p>(5),:表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p><p>(6)L:表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p><p>(7)W: 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 </p><p>(8)LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p><p>(9)#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p><p>举几个例子: </p><p>0 0 2 1 * ? * 表示在每月的1日的凌晨2点调度任务 </p><p>0 15 10 ? * MON-FRI 表示周一到周五每天上午10：15执行作业 </p><p>0 15 10 ? 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。 </p><p>按顺序依次为 </p><p>秒（0~59） </p><p>分钟（0~59） </p><p>小时（0~23） </p><p>天（月）（0~31，但是你需要考虑你月的天数） </p><p>月（0~11） </p><p>天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT） </p><p>年份（1970－2099）</p><p>其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于”月份中的日期”和”星期中的日期”这两个元素互斥的,必须要对其中一个设置?</p><p>0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 </p><p>0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时 </p><p>0 0 12 ? * WED 表示每个星期三中午12点 </p><p>“0 0 12 * * ?” 每天中午12点触发 </p><p>“0 15 10 ? * *” 每天上午10:15触发 </p><p>“0 15 10 * * ?” 每天上午10:15触发 </p><p>“0 15 10 * * ? *” 每天上午10:15触发 </p><p>“0 15 10 * * ? 2005” 2005年的每天上午10:15触发 </p><p>“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发 </p><p>“0 0/5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发 </p><p>“0 0/5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p><p>“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发 </p><p>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发 </p><p>“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发 </p><p>“0 15 10 15 * ?” 每月15日上午10:15触发 </p><p>“0 15 10 L * ?” 每月最后一日的上午10:15触发 </p><p>“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发 </p><p>“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发 </p><p>“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发</p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>可以使用监听器来处理消息接收</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.setMessageListener(new MyListener());</span><br></pre></td></tr></table></figure><p>需要实现接口MessageListener</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MyListener implements MessageListener &#123;</span><br><span class="line"></span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">TextMessage textMessage &#x3D; (TextMessage)message;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;xxoo&quot; + textMessage.getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当收到消息后会调起onMessage方法</p><h2 id="消息过滤"><a href="#消息过滤" class="headerlink" title="消息过滤"></a>消息过滤</h2><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MapMessage msg1 &#x3D; session.createMapMessage();</span><br><span class="line">msg1.setString(&quot;name&quot;, &quot;qiqi&quot;);</span><br><span class="line">msg1.setString(&quot;age&quot;, &quot;18&quot;);</span><br><span class="line"></span><br><span class="line">msg1.setStringProperty(&quot;name&quot;, &quot;qiqi&quot;);</span><br><span class="line">msg1.setIntProperty(&quot;age&quot;, 18);</span><br><span class="line">MapMessage msg2 &#x3D; session.createMapMessage();</span><br><span class="line">msg2.setString(&quot;name&quot;, &quot;lucy&quot;);</span><br><span class="line">msg2.setString(&quot;age&quot;, &quot;18&quot;);</span><br><span class="line">msg2.setStringProperty(&quot;name&quot;, &quot;lucy&quot;);</span><br><span class="line">msg2.setIntProperty(&quot;age&quot;, 18);</span><br><span class="line">MapMessage msg3 &#x3D; session.createMapMessage();</span><br><span class="line">msg3.setString(&quot;name&quot;, &quot;qianqian&quot;);</span><br><span class="line">msg3.setString(&quot;age&quot;, &quot;17&quot;);</span><br><span class="line">msg3.setStringProperty(&quot;name&quot;, &quot;qianqian&quot;);</span><br><span class="line">msg3.setIntProperty(&quot;age&quot;, 17);</span><br></pre></td></tr></table></figure><h3 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String selector1 &#x3D; &quot;age &gt; 17&quot;;</span><br><span class="line">String selector2 &#x3D; &quot;name &#x3D; &#39;lucy&#39;&quot;;</span><br><span class="line">MessageConsumer consumer &#x3D; session.createConsumer(queue,selector2);</span><br></pre></td></tr></table></figure><h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing.arika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.messaginghub<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pooled-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#连接池最大连接数</span></span><br><span class="line">      <span class="attr">max-connections:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#空闲的连接过期时间，默认为30秒</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">packages:</span></span><br><span class="line">      <span class="attr">trust-all:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h4><p>用于生产ConnectionFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.arika;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.annotation.EnableJms;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.config.DefaultJmsListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.config.JmsListenerContainerFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; jmsListenerContainerTopic(ConnectionFactory activeMQConnectionFactory) &#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory bean = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        bean.setPubSubDomain(<span class="keyword">true</span>);</span><br><span class="line">        bean.setConnectionFactory(activeMQConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queue模式的ListenerContainer</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; jmsListenerContainerQueue(ConnectionFactory activeMQConnectionFactory) &#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory bean = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        bean.setConnectionFactory(activeMQConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="收"><a href="#收" class="headerlink" title="收"></a>收</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@JmsListener(destination &#x3D; &quot;user&quot;,containerFactory &#x3D; &quot;jmsListenerContainerQueue&quot;)</span><br><span class="line">   public void receiveStringQueue(String msg) &#123;</span><br><span class="line">       System.out.println(&quot;接收到消息....&quot; + msg);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">@JmsListener(destination &#x3D; &quot;ooo&quot;,containerFactory &#x3D; &quot;jmsListenerContainerTopic&quot;)</span><br><span class="line">   public void receiveStringTopic(String msg) &#123;</span><br><span class="line">    System.out.println(&quot;接收到消息....&quot; + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发"><a href="#发" class="headerlink" title="发"></a>发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.mashibing.arika;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageProducer;</span><br><span class="line">import javax.jms.Queue;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.command.ActiveMQQueue;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.jms.core.JmsMessagingTemplate;</span><br><span class="line">import org.springframework.jms.core.JmsTemplate;</span><br><span class="line">import org.springframework.jms.core.MessageCreator;</span><br><span class="line">import org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class MqProducerService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void sendStringQueue(String destination, String msg) &#123;</span><br><span class="line">System.out.println(&quot;send...&quot;);</span><br><span class="line">ActiveMQQueue queue &#x3D; new ActiveMQQueue(destination);</span><br><span class="line">jmsMessagingTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">ConnectionFactory factory &#x3D; jmsMessagingTemplate.getConnectionFactory();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">Connection connection &#x3D; factory.createConnection();</span><br><span class="line">connection.start();</span><br><span class="line"></span><br><span class="line">Session session &#x3D; connection.createSession(true, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">Queue queue2 &#x3D; session.createQueue(destination);</span><br><span class="line"></span><br><span class="line">MessageProducer producer &#x3D; session.createProducer(queue2);</span><br><span class="line"></span><br><span class="line">TextMessage message &#x3D; session.createTextMessage(&quot;hahaha&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">producer.send(message);</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jmsMessagingTemplate.convertAndSend(queue, msg);</span><br><span class="line">&#125;</span><br><span class="line">public void sendStringQueueList(String destination, String msg) &#123;</span><br><span class="line">System.out.println(&quot;xxooq&quot;);</span><br><span class="line">ArrayList&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;1&quot;);</span><br><span class="line">list.add(&quot;2&quot;);</span><br><span class="line">jmsMessagingTemplate.convertAndSend(new ActiveMQQueue(destination), list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h2><p><strong>下载</strong></p><p><strong>解压</strong></p><p>在<code>init.d</code>下建立软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;activemq&#x2F;bin&#x2F;activemq .&#x2F;</span><br></pre></td></tr></table></figure><p><strong>设置开启启动</strong></p><p><code>chkconfig activemq on</code></p><p>服务管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service activemq start</span><br><span class="line">service activemq status</span><br><span class="line">service activemq stop</span><br></pre></td></tr></table></figure><h3 id="NIO配置"><a href="#NIO配置" class="headerlink" title="NIO配置"></a>NIO配置</h3><p>默认配置为tcp，使用的是bio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;openwire&quot; uri&#x3D;&quot;tcp:&#x2F;&#x2F;0.0.0.0:61616?maximumConnections&#x3D;1000&amp;wireFormat.maxFrameSize&#x3D;104857600&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><a href="http://activemq.apache.org/configuring-version-5-transports" target="_blank" rel="noopener">http://activemq.apache.org/configuring-version-5-transports</a></p><p>Nio是基于TCP的</p><p>客户端使用连接时也应使用nio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory &#x3D; new ActiveMQConnectionFactory(</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;nio:&#x2F;&#x2F;localhost:61617&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Auto + Nio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;auto+nio&quot; uri&#x3D;&quot;auto+nio:&#x2F;&#x2F;localhost:5671&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>自动适配协议</p><h3 id="OpenWire-可用配置选项"><a href="#OpenWire-可用配置选项" class="headerlink" title="OpenWire 可用配置选项"></a>OpenWire 可用配置选项</h3><table><thead><tr><th>Option</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>cacheEnabled</code></td><td><code>true</code></td><td>Should commonly repeated values be cached so that less marshaling occurs?</td></tr><tr><td><code>cacheSize</code></td><td><code>1024</code></td><td>When <code>cacheEnabled=true</code> then this parameter is used to specify the number of values to be cached.</td></tr><tr><td><code>maxInactivityDuration</code></td><td><code>30000</code></td><td>The maximum <a href="http://activemq.apache.org/activemq-inactivitymonitor" target="_blank" rel="noopener">inactivity</a> duration (before which the socket is considered dead) in milliseconds. On some platforms it can take a long time for a socket to die. Therefore allow the broker to kill connections when they have been inactive for the configured period of time. Used by some transports to enable a keep alive heart beat feature. Inactivity monitoring is disabled when set to a value <code>&lt;= 0</code>.</td></tr><tr><td><code>maxInactivityDurationInitalDelay</code></td><td><code>10000</code></td><td>The initial delay before starting <a href="http://activemq.apache.org/activemq-inactivitymonitor" target="_blank" rel="noopener">inactivity</a> checks. Yes, the word <code>&#39;Inital&#39;</code> is supposed to be misspelled like that.</td></tr><tr><td><code>maxFrameSize</code></td><td><code>MAX_LONG</code></td><td>Maximum allowed frame size. Can help help prevent OOM DOS attacks.</td></tr><tr><td><code>sizePrefixDisabled</code></td><td><code>false</code></td><td>Should the size of the packet be prefixed before each packet is marshaled?</td></tr><tr><td><code>stackTraceEnabled</code></td><td><code>true</code></td><td>Should the stack trace of exception that occur on the broker be sent to the client?</td></tr><tr><td><code>tcpNoDelayEnabled</code></td><td><code>true</code></td><td>Does not affect the wire format, but provides a hint to the peer that <code>TCP_NODELAY</code> should be enabled on the communications Socket.</td></tr><tr><td><code>tightEncodingEnabled</code></td><td><code>true</code></td><td>Should wire size be optimized over CPU usage?</td></tr></tbody></table><h3 id="Transport-可用配置选项"><a href="#Transport-可用配置选项" class="headerlink" title="Transport 可用配置选项"></a>Transport 可用配置选项</h3><table><thead><tr><th>Option Name</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td>backlog</td><td>5000</td><td>Specifies the maximum number of connections waiting to be accepted by the transport server socket.</td></tr><tr><td>closeAsync</td><td>true</td><td>If <strong><code>true</code></strong> the socket close call happens asynchronously. This parameter should be set to <strong><code>false</code></strong> for protocols like STOMP, that are commonly used in situations where a new connection is created for each read or write. Doing so ensures the socket close call happens synchronously. A synchronous close prevents the broker from running out of available sockets owing to the rapid cycling of connections.</td></tr><tr><td>connectionTimeout</td><td>30000</td><td>If <strong><code>&gt;=1</code></strong> the value sets the connection timeout in milliseconds. A value of <strong><code>0</code></strong> denotes no timeout. Negative values are ignored.</td></tr><tr><td>daemon</td><td>false</td><td>If <strong><code>true</code></strong> the transport thread will run in daemon mode. Set this parameter to <strong><code>true</code></strong> when embedding the broker in a Spring container or a web container to allow the container to shut down correctly.</td></tr><tr><td>dynamicManagement</td><td>false</td><td>If <strong><code>true</code></strong> the <strong><code>TransportLogger</code></strong> can be managed by JMX.</td></tr><tr><td>ioBufferSize</td><td>8 * 1024</td><td>Specifies the size of the buffer to be used between the TCP layer and the OpenWire layer where <strong><code>wireFormat</code></strong> based marshaling occurs.</td></tr><tr><td>jmxPort</td><td>1099</td><td>(Client Only) Specifies the port that will be used by the JMX server to manage the <strong><code>TransportLoggers</code></strong>. This should only be set, via URI, by either a client producer or consumer as the broker creates its own JMX server. Specifying an alternate JMX port is useful for developers that test a broker and client on the same machine and need to control both via JMX.</td></tr><tr><td>keepAlive</td><td>false</td><td>If <strong><code>true</code>,</strong> enables <a href="http://tldp.org/HOWTO/TCP-Keepalive-HOWTOoverview" target="_blank" rel="noopener">TCP KeepAlive</a> on the broker connection to prevent connections from timing out at the TCP level. This should <em>not</em> be confused with <strong><code>KeepAliveInfo</code></strong> messages as used by the <strong><code>InactivityMonitor</code>.</strong></td></tr><tr><td>logWriterName</td><td>default</td><td>Sets the name of the <strong><code>org.apache.activemq.transport.LogWriter</code></strong> implementation to use. Names are mapped to classes in the <strong><code>resources/META-INF/services/org/apache/activemq/transport/logwriters</code></strong> directory.</td></tr><tr><td>maximumConnections</td><td>Integer.MAX_VALUE</td><td>The maximum number of sockets allowed for this broker.</td></tr><tr><td>minmumWireFormatVersion</td><td>0</td><td>The minimum remote <strong><code>wireFormat</code></strong> version that will be accepted (note the misspelling). Note: when the remote <strong><code>wireFormat</code></strong> version is lower than the configured minimum acceptable version an exception will be thrown and the connection attempt will be refused. A value of <strong><code>0</code></strong> denotes no checking of the remote <strong><code>wireFormat</code></strong> version.</td></tr><tr><td>socketBufferSize</td><td>64 * 1024</td><td>Sets the size, in bytes, for the accepted socket’s read and write buffers.</td></tr><tr><td>soLinger</td><td>Integer.MIN_VALUE</td><td>Sets the socket’s option <strong><code>soLinger</code></strong> when the value is <strong><code>&gt; -1</code></strong>. When set to <strong><code>-1</code></strong> the <strong><code>soLinger</code></strong> socket option is disabled.</td></tr><tr><td>soTimeout</td><td>0</td><td>Sets the socket’s read timeout in milliseconds. A value of <strong><code>0</code></strong> denotes no timeout.</td></tr><tr><td>soWriteTimeout</td><td>0</td><td>Sets the socket’s write timeout in milliseconds. If the socket write operation does not complete before the specified timeout, the socket will be closed. A value of <strong>0</strong> denotes no timeout.</td></tr><tr><td>stackSize</td><td>0</td><td>Set the stack size of the transport’s background reading thread. Must be specified in multiples of <strong><code>128K</code></strong>. A value of <strong><code>0</code></strong> indicates that this parameter is ignored.</td></tr><tr><td>startLogging</td><td>true</td><td>If <strong><code>true</code></strong> the <strong><code>TransportLogger</code></strong> object of the Transport stack will initially write messages to the log. This parameter is ignored unless <strong><code>trace=true</code></strong>.</td></tr><tr><td>tcpNoDelay</td><td>false</td><td>If <strong><code>true</code></strong> the socket’s option <strong><code>TCP_NODELAY</code></strong> is set. This disables Nagle’s algorithm for small packet transmission.</td></tr><tr><td>threadName</td><td>N/A</td><td>When this parameter is specified the name of the thread is modified during the invocation of a transport. The remote address is appended so that a call stuck in a transport method will have the destination information in the thread name. This is extremely useful when using thread dumps for degugging.</td></tr><tr><td>trace</td><td>false</td><td>Causes all commands that are sent over the transport to be logged. To view the logged output define the <strong><code>Log4j</code></strong> logger: <strong><code>log4j.logger.org.apache.activemq.transport.TransportLogger=DEBUG</code></strong>.</td></tr><tr><td>trafficClass</td><td>0</td><td>The Traffic Class to be set on the socket.</td></tr><tr><td>diffServ</td><td>0</td><td>(Client only) The preferred Differentiated Services traffic class to be set on outgoing packets, as described in RFC 2475. Valid integer values: <strong><code>[0,64]</code></strong>. Valid string values: <strong><code>EF</code>, <code>AF[1-3][1-4]</code></strong> or <strong><code>CS[0-7]</code></strong>. With JDK 6, only works when the JVM uses the IPv4 stack. To use the IPv4 stack set the system property <strong><code>java.net.preferIPv4Stack=true</code></strong>. Note: it’s invalid to specify both ‘<strong>diffServ</strong> and <strong>typeOfService</strong>’ at the same time as they share the same position in the TCP/IP packet headers</td></tr><tr><td>typeOfService</td><td>0</td><td>(Client only) The preferred Type of Service value to be set on outgoing packets. Valid integer values: <strong><code>[0,256]</code></strong>. With JDK 6, only works when the JVM is configured to use the IPv4 stack. To use the IPv4 stack set the system property <strong><code>java.net.preferIPv4Stack=true</code></strong>. Note: it’s invalid to specify both ‘<strong>diffServ</strong> and <strong>typeOfService</strong>’ at the same time as they share the same position in the TCP/IP packet headers.</td></tr><tr><td>useInactivityMonitor</td><td>true</td><td>When <strong><code>false</code></strong> the <strong><code>InactivityMonitor</code></strong> is disabled and connections will never time out.</td></tr><tr><td>useKeepAlive</td><td>true</td><td>When <strong><code>true</code> <code>KeepAliveInfo</code></strong> messages are sent on an idle connection to prevent it from timing out. If this parameter is <strong><code>false</code></strong> connections will still timeout if no data was received on the connection for the specified amount of time.</td></tr><tr><td>useLocalHost</td><td>false</td><td>When <strong><code>true</code></strong> local connections will be made using the value <strong><code>localhost</code></strong> instead of the actual local host name. On some operating systems, such as <strong><code>OS X</code></strong>, it’s not possible to connect as the local host name so <strong><code>localhost</code></strong> is better.</td></tr><tr><td>useQueueForAccept</td><td>true</td><td>When <strong><code>true</code></strong> accepted sockets are placed onto a queue for asynchronous processing using a separate thread.</td></tr><tr><td>wireFormat</td><td>default</td><td>The name of the <strong><code>wireFormat</code></strong> factory to use.</td></tr><tr><td>wireFormat.*</td><td>N/A</td><td>Properties with this prefix are used to configure the <strong><code>wireFormat</code></strong>.</td></tr></tbody></table><h2 id="ActiveMQ服务监控-Hawtio"><a href="#ActiveMQ服务监控-Hawtio" class="headerlink" title="ActiveMQ服务监控 Hawtio"></a>ActiveMQ服务监控 Hawtio</h2><h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://hawt.io/" target="_blank" rel="noopener">https://hawt.io/</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="独立jar包的形式运行"><a href="#独立jar包的形式运行" class="headerlink" title="独立jar包的形式运行"></a>独立jar包的形式运行</h4><p>java -jar</p><p>hawtio单程序运行，可以对多个远程ActiveMQ服务器进行监控</p><h4 id="嵌入ActiveMQ"><a href="#嵌入ActiveMQ" class="headerlink" title="嵌入ActiveMQ"></a>嵌入ActiveMQ</h4><ul><li>下载war包</li><li>复制到webapps下</li></ul><p><strong>jetty.xml bean标签下添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;        </span><br><span class="line">&lt;property name&#x3D;&quot;contextPath&quot; value&#x3D;&quot;&#x2F;hawtio&quot; &#x2F;&gt;        </span><br><span class="line">&lt;property name&#x3D;&quot;war&quot; value&#x3D;&quot;$&#123;activemq.home&#125;&#x2F;webapps&#x2F;hawtio.war&quot; &#x2F;&gt;        </span><br><span class="line">&lt;property name&#x3D;&quot;logUrlOnStart&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;  </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p><strong>ActiveMQ.bat下添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if &quot;%ACTIVEMQ_OPTS%&quot; &#x3D;&#x3D; &quot;&quot; set ACTIVEMQ_OPTS&#x3D;-Xms1G -Xmx1G -Dhawtio.realm&#x3D;activemq -Dhawtio.role&#x3D;admins -Dhawtio.rolePrincipalClasses&#x3D;org.apache.activemq.jaas.GroupPrincipal -Djava.util.logging.config.file&#x3D;logging.properties -Djava.security.auth.login.config&#x3D;&quot;%ACTIVEMQ_CONF%\login.config&quot;</span><br></pre></td></tr></table></figure><h2 id="JMS消息结构（Message）"><a href="#JMS消息结构（Message）" class="headerlink" title="JMS消息结构（Message）"></a>JMS消息结构（Message）</h2><p>Message主要由三部分组成，分别是Header，Properties，Body， 详细如下：</p><table><thead><tr><th>Header</th><th>消息头，所有类型的这部分格式都是一样的</th></tr></thead><tbody><tr><td>Properties</td><td>属性，按类型可以分为应用设置的属性，标准属性和消息中间件定义的属性</td></tr><tr><td>Body</td><td>消息正文，指我们具体需要消息传输的内容。</td></tr></tbody></table><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>JMS消息头使用的所有方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">getJMSDestination</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSDestination</span><span class="params">(Destination destination)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getJMSDeliveryMode</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSDeliveryMode</span><span class="params">(<span class="keyword">int</span> deliveryMode)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJMSMessageID</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSMessageID</span><span class="params">(String id)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getJMSTimestamp</span><span class="params">()</span> <span class="keyword">throws</span> JMSException'</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSTimestamp</span><span class="params">(<span class="keyword">long</span> timestamp)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getJMSExpiration</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSExpiration</span><span class="params">(<span class="keyword">long</span> expiration)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getJMSRedelivered</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSRedelivered</span><span class="params">(<span class="keyword">boolean</span> redelivered)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getJMSPriority</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSPriority</span><span class="params">(<span class="keyword">int</span> priority)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">getJMSReplyTo</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSReplyTo</span><span class="params">(Destination replyTo)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJMScorrelationID</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSCorrelationID</span><span class="params">(String correlationID)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getJMSCorrelationIDAsBytes() <span class="keyword">throws</span> JMSException;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSCorrelationIDAsBytes</span><span class="params">(<span class="keyword">byte</span>[] correlationID)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJMSType</span><span class="params">()</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJMSType</span><span class="params">(String type)</span> <span class="keyword">throws</span> JMSException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消息头分为自动设置和手动设置的内容</strong></p><h4 id="自动头信息"><a href="#自动头信息" class="headerlink" title="自动头信息"></a>自动头信息</h4><p>有一部分可以在创建Session和MessageProducer时设置</p><table><thead><tr><th>属性名称</th><th>说明</th><th>设置者</th></tr></thead><tbody><tr><td>JMSDeliveryMode</td><td>消息的发送模式，分为<strong>NON_PERSISTENT</strong>和<strong>PERSISTENT</strong>，即非持久性模式的和持久性模式。默认设置为<strong>PERSISTENT（持久性）。</strong>一条<strong>持久性消息</strong>应该被传送一次（就一次），这就意味着如果JMS提供者出现故障，该消息并不会丢失； 它会在服务器恢复正常之后再次传送。一条<strong>非持久性消息</strong>最多只会传送一次，这意味着如果JMS提供者出现故障，该消息可能会永久丢失。在持久性和非持久性这两种传送模式中，消息服务器都不会将一条消息向同一消息者发送一次以上（成功算一次）。</td><td>send</td></tr><tr><td>JMSMessageID</td><td>消息ID，需要以ID:开头，用于唯一地标识了一条消息</td><td>send</td></tr><tr><td>JMSTimestamp</td><td>消息发送时的时间。这条消息头用于确定发送消息和它被消费者实际接收的时间间隔。时间戳是一个以毫秒来计算的Long类型时间值（自1970年1月1日算起）。</td><td>send</td></tr><tr><td>JMSExpiration</td><td>消息的过期时间，以毫秒为单位，用来防止把过期的消息传送给消费者。任何直接通过编程方式来调用setJMSExpiration()方法都会被忽略。</td><td>send</td></tr><tr><td>JMSRedelivered</td><td>消息是否重复发送过，如果该消息之前发送过，那么这个属性的值需要被设置为true, 客户端可以根据这个属性的值来确认这个消息是否重复发送过，以避免重复处理。</td><td>Provider</td></tr><tr><td>JMSPriority</td><td>消息的优先级,0-4为普通的优化级，而5-9为高优先级，通常情况下，高优化级的消息需要优先发送。任何直接通过编程方式调用setJMSPriority()方法都将被忽略。</td><td>send</td></tr><tr><td>JMSDestination</td><td>消息发送的目的地，是一个Topic或Queue</td><td>send</td></tr></tbody></table><p><strong>JMSDeliveryMode</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MessageProducer producer = session.createProducer(topic);</span><br><span class="line">producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br></pre></td></tr></table></figure><p><strong>JMSExpiration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将过期时间设置为1小时（1000毫秒 ＊60 ＊60）</span></span><br><span class="line">producer.setTimeToLive(<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br></pre></td></tr></table></figure><p><strong>JMSPriority</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.setPriority(9);</span><br></pre></td></tr></table></figure><h4 id="手动头信息"><a href="#手动头信息" class="headerlink" title="手动头信息"></a>手动头信息</h4><table><thead><tr><th>属性名称</th><th>说明</th><th>设置者</th></tr></thead><tbody><tr><td>JMSCorrelationID</td><td>关联的消息ID，这个通常用在需要回传消息的时候</td><td>client</td></tr><tr><td>JMSReplyTo</td><td>消息回复的目的地，其值为一个Topic或Queue, 这个由发送者设置，但是接收者可以决定是否响应</td><td>client</td></tr><tr><td>JMSType</td><td>由消息发送者设置的消息类型，代表消息的结构，有的消息中间件可能会用到这个，但这个并不是是批消息的种类，比如TextMessage之类的</td><td>client</td></tr></tbody></table><p>从上表中我们可以看到，系统提供的标准头信息一共有10个属性，其中有6个是由send方法在调用时设置的，有三个是由客户端（client）设置的，还有一个是由消息中间件（Provider）设置的。</p><p>需要注意的是，这里</p><h2 id="下一代-ActiveMQ-6？Artemis"><a href="#下一代-ActiveMQ-6？Artemis" class="headerlink" title="下一代 ActiveMQ 6？Artemis"></a>下一代 ActiveMQ 6？Artemis</h2><p>为下一代事件驱动的消息传递应用程序提供高性能、无阻塞的体系结构。</p><ul><li>包含JNDI，具有完整的JMS 1.1 &amp; 2.0客户端实现</li><li>高可用性共享存储、网络复制能力</li><li>简单而强大的寻址模型协议</li><li>灵活的负载均衡分配能力</li><li>针对低延迟持久性和JDBC的高级日志实现</li><li>与ActiveMQ 5的高功能奇偶校验，以简化迁移</li></ul><p>官方文档：<a href="http://activemq.apache.org/components/artemis/migration" target="_blank" rel="noopener">http://activemq.apache.org/components/artemis/migration</a></p><ul><li>netty</li><li>自己的存储</li><li>优化传输流程</li><li>更高的性能</li><li>不再把所有的协议转换成openwire</li></ul><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><h3 id="JMSCorrelationID"><a href="#JMSCorrelationID" class="headerlink" title="JMSCorrelationID"></a>JMSCorrelationID</h3><p>用于消息之间的关联，给人一种会话的感觉</p><hr><h3 id="JMSReplyTo"><a href="#JMSReplyTo" class="headerlink" title="JMSReplyTo"></a><strong>JMSReplyTo</strong></h3><p>发送方可以接受到消息消费确认的地址</p><p>ActiveMQ5.10.x 以上版本必须使用 JDK1.8 才能正常使用。 </p><p>ActiveMQ5.9.x 及以下版本使用 JDK1.7 即可正常使用。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="ActiveMQ如何防止消息丢失？会不会丢消息？"><a href="#ActiveMQ如何防止消息丢失？会不会丢消息？" class="headerlink" title="ActiveMQ如何防止消息丢失？会不会丢消息？"></a>ActiveMQ如何防止消息丢失？会不会丢消息？</h3><p>做高可用</p><p>死信队列</p><p>持久化</p><p>ack</p><p>消息重投</p><p>记录日志</p><p>接收（消费）确认</p><p>broker负载/限流</p><h3 id="如何防止重复消费？"><a href="#如何防止重复消费？" class="headerlink" title="如何防止重复消费？"></a>如何防止重复消费？</h3><p>消息幂等处理</p><p>map <em>ConcurrentHashMap</em> -&gt; putIfAbsent   guava cache</p><h3 id="如何保证消费顺序？"><a href="#如何保证消费顺序？" class="headerlink" title="如何保证消费顺序？"></a>如何保证消费顺序？</h3><p>queue 优先级别设置</p><p>多消费端 -&gt; </p><h1 id="3-高级使用"><a href="#3-高级使用" class="headerlink" title="3. 高级使用"></a>3. 高级使用</h1><h3 id="queue-browser"><a href="#queue-browser" class="headerlink" title="queue browser"></a>queue browser</h3><p>可以查看队列中的消息而不消费，没有订阅的功能</p><h3 id="JMSCorrelationID-1"><a href="#JMSCorrelationID-1" class="headerlink" title="JMSCorrelationID"></a>JMSCorrelationID</h3><p>用于消息之间的关联，给人一种会话的感觉</p><p><a href="http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html" target="_blank" rel="noopener">http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html</a></p><hr><h3 id="JMSReplyTo-1"><a href="#JMSReplyTo-1" class="headerlink" title="JMSReplyTo"></a><strong>JMSReplyTo</strong></h3><p>发送方可以接受到消息消费确认的地址</p><h3 id="QueueRequestor同步消息"><a href="#QueueRequestor同步消息" class="headerlink" title="QueueRequestor同步消息"></a>QueueRequestor同步消息</h3><p>可以发送同步消息</p><p>本质违背了mq的异步通讯原则</p><p>但是mq还是能够提供应用解耦、异构系统的特性</p><p>因为使用QueueRequestor发送消息后，会等待接收端的回复，如果收不到回复就会造成死等现象!而且该方法没有设置超时等待的功能 </p><h3 id="生产环境中影响性能的几个因素"><a href="#生产环境中影响性能的几个因素" class="headerlink" title="生产环境中影响性能的几个因素"></a>生产环境中影响性能的几个因素</h3><h4 id="Out-of-memory"><a href="#Out-of-memory" class="headerlink" title="Out of memory"></a>Out of memory</h4><p>activemq启动脚本中配置内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%ACTIVEMQ_OPTS%&quot; &#x3D;&#x3D; &quot;&quot; set ACTIVEMQ_OPTS&#x3D;-Xms1G -Xmx1G</span><br></pre></td></tr></table></figure><p>以及配置文件中的百分比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;memoryUsage percentOfJvmHeap&#x3D;&quot;70&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>SystemUsage配置设置了一些系统内存和硬盘容量，当系统消耗超过这些容量设置时，amq会“slow down producer”，还是很重要的。</p><h4 id="持久化和非持久化"><a href="#持久化和非持久化" class="headerlink" title="持久化和非持久化"></a>持久化和非持久化</h4><h4 id="消息异步发送"><a href="#消息异步发送" class="headerlink" title="消息异步发送"></a>消息异步发送</h4><p>建议使用默认，强制开启有可能丢失消息</p><p>异步发送丢失消息的场景是：生产者设置UseAsyncSend=true，使用producer.send(msg)持续发送消息。由于消息不阻塞，生产者会认为所有send的消息均被成功发送至MQ。如果服务端突然宕机，此时生产者端内存中尚未被发送至MQ的消息都会丢失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new ActiveMQConnectionFactory(&quot;tcp:&#x2F;&#x2F;locahost:61616?jms.useAsyncSend&#x3D;true&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQConnectionFactory)connectionFactory).setUseAsyncSend(true);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQConnection)connection).setUseAsyncSend(true)</span><br></pre></td></tr></table></figure><h4 id="批量确认"><a href="#批量确认" class="headerlink" title="批量确认"></a>批量确认</h4><p>ActiveMQ缺省支持批量确认消息，批量确认可以提高系统性能</p><p><strong>关闭方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new ActiveMQConnectionFactory(&quot;tcp:&#x2F;&#x2F;locahost:61616?jms.optimizeAcknowledge&#x3D;false&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQConnectionFactory)connectionFactory).setOptimizeAcknowledge(fase);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQConnection)connection).setOptimizeAcknowledge(true);</span><br></pre></td></tr></table></figure><h3 id="消费缓冲与消息积压prefetchSize"><a href="#消费缓冲与消息积压prefetchSize" class="headerlink" title="消费缓冲与消息积压prefetchSize"></a>消费缓冲与消息积压prefetchSize</h3><p>消费者端，一般来说消费的越快越好，broker的积压越小越好。</p><p>但是考虑到事务性和客户端确认的情况，如果一个消费者一次获取到了很多消息却都不确认，这会造成事务上下文变大，broker端这种“半消费状态”的数据变多，所以ActiveMQ有一个prefetchSize参数来控制未确认情况下，最多可以预获取多少条记录。</p><p><strong>Pre-fetch默认值</strong></p><table><thead><tr><th>consumer type</th><th>default value</th></tr></thead><tbody><tr><td>queue</td><td>1000</td></tr><tr><td>queue browser</td><td>500</td></tr><tr><td>topic</td><td>32766</td></tr><tr><td>durable topic</td><td>1000</td></tr></tbody></table><h4 id="可以通过3中方式设置prefetchSize"><a href="#可以通过3中方式设置prefetchSize" class="headerlink" title="可以通过3中方式设置prefetchSize"></a>可以通过3中方式设置prefetchSize</h4><p><strong>创建连接时整体设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectio nFactory &#x3D; new ActiveMQConnectionFactory(</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;tcp:&#x2F;&#x2F;localhost:5671?jms.prefetchPolicy.all&#x3D;50&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>创建连接时对topic和queue单独设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory &#x3D; new ActiveMQConnectionFactory(</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;admin&quot;,</span><br><span class="line">&quot;tcp:&#x2F;&#x2F;localhost:5671?jms.prefetchPolicy.queuePrefetch&#x3D;1&amp;jms.prefetchPolicy.topicPrefetch&#x3D;1&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>针对destination单独设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Destination topic &#x3D; session.createTopic(&quot;user?consumer.prefetchSize&#x3D;10&quot;);</span><br></pre></td></tr></table></figure><p>注意：对destination设置prefetchsize后会覆盖连接时的设置值</p><h3 id="消息到底是推还是拉"><a href="#消息到底是推还是拉" class="headerlink" title="消息到底是推还是拉?"></a>消息到底是推还是拉?</h3><p>发送消息时是推向broker</p><p>获取消息时：</p><ul><li>默认是一条一条的推</li><li>当customer的prefetchSize满的时候停止推消息</li><li>当customer的prefetchSize ==0时 拉取消息</li></ul><h3 id="EIP-Enterprise-Integration-Patterns"><a href="#EIP-Enterprise-Integration-Patterns" class="headerlink" title="EIP Enterprise Integration Patterns."></a>EIP Enterprise Integration Patterns.</h3><p>EIP系统是以数据为基础，应用为核心，以实现业务及业务流程的自动化为目的多功能企业信息平台。为企业的信息化建设提供一种循序渐进，逐步优化的路径</p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200207162242385.png" alt="image-20200207162242385"></p><p>一个围绕消息集成的企业应用集成场景基本在上面的图中描述的比较清楚的，简单说明如下</p><p>1)消息发送方和接收方：可以是异构的业务系统，但是都需要提供Endpoint实现集成。<br>2)消息本身：两个应用系统通过channel连接，实现了消息本身的发送和接收操作<br>3)消息Channel：即消息传输的通道，消息本身必须要通过channel来实现传输，从源到达目标。<br>4)消息路由：当有多个目标接收方的时候，如果根据消息的特征来确定究竟发送到哪个接收方？<br>5)消息转换：消息在传输过程中是否需要进行转换和数据映射，包括报文格式转换和内容转换映射。<br>6)Pipe and Filter：在执行复杂的消息流处理时，如何维护消息本身的独立性和灵活性。</p><p>常用实现Camel</p><p>支持ActiveMQ、RabbitMQ、kafka、WebService</p><p><strong>camel实现了客户端与服务端的解耦， 生产者和消费者的解耦。</strong></p><h2 id="Request-Response模型实现"><a href="#Request-Response模型实现" class="headerlink" title="Request/Response模型实现"></a>Request/Response模型实现</h2><h3 id="QueueRequestor"><a href="#QueueRequestor" class="headerlink" title="QueueRequestor"></a>QueueRequestor</h3><p>同步阻塞</p><h3 id="TemporaryQueue"><a href="#TemporaryQueue" class="headerlink" title="TemporaryQueue"></a>TemporaryQueue</h3><p>异步监听，当消息过多时会创建响应的临时queue</p><h3 id="JMSCorrelationID-消息属性"><a href="#JMSCorrelationID-消息属性" class="headerlink" title="JMSCorrelationID 消息属性"></a>JMSCorrelationID 消息属性</h3><p>异步监听，公用queue</p><h2 id="调优总结"><a href="#调优总结" class="headerlink" title="调优总结"></a>调优总结</h2><h3 id="Topic加强-可追溯消息"><a href="#Topic加强-可追溯消息" class="headerlink" title="Topic加强 可追溯消息"></a>Topic加强 可追溯消息</h3><p><a href="http://activemq.apache.org/retroactive-consumer.html" target="_blank" rel="noopener">http://activemq.apache.org/retroactive-consumer.html</a></p><p>避免topic下错过消息</p><h4 id="消费者设置"><a href="#消费者设置" class="headerlink" title="消费者设置"></a>消费者设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Destination topic &#x3D; session.createTopic(&quot;tpk?consumer.retroactive&#x3D;true&quot;);</span><br></pre></td></tr></table></figure><h3 id="Summary-of-Available-Recovery-Policies"><a href="#Summary-of-Available-Recovery-Policies" class="headerlink" title="Summary of Available Recovery Policies"></a>Summary of Available Recovery Policies</h3><table><thead><tr><th>Policy Name</th><th>Sample Configuration</th><th>Description</th></tr></thead><tbody><tr><td>FixedSizedSubscriptionRecoveryPolicy</td><td><fixedSizedSubscriptionRecoveryPolicy maximumsize="1024"></fixedSizedSubscriptionRecoveryPolicy></td><td>Keep a fixed amount of memory in RAM for message history which is evicted in time order.</td></tr><tr><td>FixedCountSubscriptionRecoveryPolicy</td><td><fixedCountSubscriptionRecoveryPolicy maximumsize="100"></fixedCountSubscriptionRecoveryPolicy></td><td>Keep a fixed count of last messages.</td></tr><tr><td>LastImageSubscriptionRecoveryPolicy</td><td><lastImageSubscriptionRecoveryPolicy></lastImageSubscriptionRecoveryPolicy></td><td>Keep only the last message.</td></tr><tr><td>NoSubscriptionRecoveryPolicy</td><td><noSubscriptionRecoveryPolicy></noSubscriptionRecoveryPolicy></td><td>Disables message recovery.</td></tr><tr><td>QueryBasedSubscriptionRecoveryPolicy</td><td><queryBasedSubscriptionRecoveryPolicy query="JMSType = 'car' AND color = 'blue'"></queryBasedSubscriptionRecoveryPolicy></td><td>Perform a user specific query mechanism to load any message they may have missed. Details on message selectors are available <a href="http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html" target="_blank" rel="noopener">here</a></td></tr><tr><td>TimedSubscriptionRecoveryPolicy</td><td><timedSubscriptionRecoveryPolicy recoverduration="60000"></timedSubscriptionRecoveryPolicy></td><td>Keep a timed buffer of messages around in memory and use that to recover new subscriptions. Recovery time is in milliseconds.</td></tr><tr><td>RetainedMessageSubscriptionRecoveryPolicy</td><td><retainedMessageSubscriptionRecoveryPolicy></retainedMessageSubscriptionRecoveryPolicy></td><td>Keep the last message with ActiveMQ.Retain property set to true</td></tr></tbody></table><h4 id="保留固定字节的消息"><a href="#保留固定字节的消息" class="headerlink" title="保留固定字节的消息"></a>保留固定字节的消息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;policyEntry topic&#x3D;&quot;&gt;&quot;&gt;</span><br><span class="line">&lt;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;fixedSizedSubscriptionRecoveryPolicy maximumSize&#x3D;&quot;1024&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;&#x2F;policyEntry&gt;</span><br></pre></td></tr></table></figure><h4 id="保留固定数量的消息"><a href="#保留固定数量的消息" class="headerlink" title="保留固定数量的消息"></a>保留固定数量的消息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;policyEntry topic&#x3D;&quot;&gt;&quot;&gt;</span><br><span class="line">&lt;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;fixedCountSubscriptionRecoveryPolicy maximumSize&#x3D;&quot;100&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;&#x2F;policyEntry&gt;</span><br></pre></td></tr></table></figure><h4 id="保留时间"><a href="#保留时间" class="headerlink" title="保留时间"></a>保留时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;timedSubscriptionRecoveryPolicy recoverDuration&#x3D;&quot;60000&quot; &#x2F;&gt; </span><br><span class="line">&lt;&#x2F;subscriptionRecoveryPolicy&gt;</span><br></pre></td></tr></table></figure><h4 id="保留最后一条"><a href="#保留最后一条" class="headerlink" title="保留最后一条"></a>保留最后一条</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;subscriptionRecoveryPolicy&gt;</span><br><span class="line">&lt;lastImageSubscriptionRecoveryPolicy&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;subscriptionRecoveryPolicy&gt;</span><br></pre></td></tr></table></figure><h3 id="慢速消费"><a href="#慢速消费" class="headerlink" title="慢速消费"></a>慢速消费</h3><h4 id="SlowConsumerStrategy"><a href="#SlowConsumerStrategy" class="headerlink" title="SlowConsumerStrategy"></a>SlowConsumerStrategy</h4><p>对于慢消费者，broker会启动一个后台线程用来检测所有的慢速消费者，并定期的关闭慢消费者。<br> <strong>AbortSlowConsumerStrategy abortConnection</strong>：中断慢速消费者，慢速消费将会被关闭。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slowConsumerStrategy</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">abortSlowConsumerStrategy</span> <span class="attr">abortConnection</span>=<span class="string">"false"</span>/&gt;</span><span class="comment">&lt;!-- 不关闭底层链接 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">slowConsumerStrategy</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>AbortSlowConsumerStrategy maxTimeSinceLastAck</strong>：如果慢速消费者最后一个ACK距离现在的时间间隔超过阀值，则中断慢速消费者。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slowConsumerStrategy</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">abortSlowConsumerStrategy</span>  <span class="attr">maxTimeSinceLastAck</span>=<span class="string">"30000"</span>/&gt;</span><span class="comment">&lt;!-- 30秒滞后 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">slowConsumerStrategy</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="PendingMessageLimitStrategy：消息限制策略（面向慢消费者）"><a href="#PendingMessageLimitStrategy：消息限制策略（面向慢消费者）" class="headerlink" title="PendingMessageLimitStrategy：消息限制策略（面向慢消费者）"></a>PendingMessageLimitStrategy：消息限制策略（面向慢消费者）</h4><p><a href="http://activemq.apache.org/slow-consumer-handling" target="_blank" rel="noopener">http://activemq.apache.org/slow-consumer-handling</a></p><p>  此策略只对Topic有效，只对未持久化订阅者有效，当通道中有大量的消息积压时，broker可以保留的消息量。为了防止Topic中有慢速消费者，导致整个通道消息积压。<br><strong>ConstantPendingMessageLimitStrategy</strong>：保留固定条数的消息，如果消息量超过limit，将使用<strong>消息剔除策略</strong>移除消息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">topic</span>=<span class="string">"ORDERS.&gt;"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- lets force old messages to be discarded for slow consumers --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">pendingMessageLimitStrategy</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">constantPendingMessageLimitStrategy</span> <span class="attr">limit</span>=<span class="string">"50"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pendingMessageLimitStrategy</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>PrefetchRatePendingMessageLimitStrategy</strong>：保留prefetchSize倍数条消息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 若prefetchSize为100，则保留2.5 * 100条消息 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">prefetchRatePendingMessageLimitStrategy</span> <span class="attr">multiplier</span>=<span class="string">"2.5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="消息堆积内存上涨"><a href="#消息堆积内存上涨" class="headerlink" title="消息堆积内存上涨"></a>消息堆积内存上涨</h3><ul><li>检查消息是否持久化</li><li>检查消息 消费速度与生产速度</li><li>调整xms xmx参数</li></ul><h3 id="磁盘满"><a href="#磁盘满" class="headerlink" title="磁盘满"></a>磁盘满</h3><p>当非持久化消息堆积到一定程度，ActiveMQ会将非持久化消息写入临时文件，但是在重启的时候不会恢复</p><p>当存储持久化数据的磁盘满了的时候</p><p><strong>持久化消息</strong></p><p>生产者阻塞，消费正常，当消费一部分消息后，腾出空间，生产者继续</p><p><strong>非持久化消息</strong></p><p>由于临时文件造成磁盘满了，生产者阻塞，消费异常，无法提供服务</p><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><p>在发送非持久化消息的时候，可以有效防止消息丢失</p><h3 id="prefetchSize影响消费倾斜"><a href="#prefetchSize影响消费倾斜" class="headerlink" title="prefetchSize影响消费倾斜"></a>prefetchSize影响消费倾斜</h3><p>慢速消费的时候可以将prefetchSize设为1，每次取一条</p><h3 id="prefetchSize造成消费者内存溢出"><a href="#prefetchSize造成消费者内存溢出" class="headerlink" title="prefetchSize造成消费者内存溢出"></a>prefetchSize造成消费者内存溢出</h3><h3 id="AUTO-ACKNOWLEDGE造成消息丢失-乱序"><a href="#AUTO-ACKNOWLEDGE造成消息丢失-乱序" class="headerlink" title="AUTO_ACKNOWLEDGE造成消息丢失/乱序"></a>AUTO_ACKNOWLEDGE造成消息丢失/乱序</h3><p>消息消费失败后，无法复原消息，可以手动ack 避免broker把消息自动确认删除</p><p>receive()方法接受到消息后立即确认</p><p>listener 的onmessage方法执行完毕才会确认</p><p>手动ack的时候要等connection断开 才会重新推送给其他的consumer，所以有可能会导致消费顺序错乱</p><h3 id="exclusive-和selector有可能造成消息堆积"><a href="#exclusive-和selector有可能造成消息堆积" class="headerlink" title="exclusive 和selector有可能造成消息堆积"></a>exclusive 和selector有可能造成消息堆积</h3><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p><strong>官方文档</strong></p><p><a href="http://activemq.apache.org/clustering" target="_blank" rel="noopener">http://activemq.apache.org/clustering</a></p><h3 id="主备集群"><a href="#主备集群" class="headerlink" title="主备集群"></a>主备集群</h3><p><a href="http://activemq.apache.org/masterslave.html" target="_blank" rel="noopener">http://activemq.apache.org/masterslave.html</a></p><table><thead><tr><th>Master Slave Type</th><th>Requirements</th><th>Pros</th><th>Cons</th></tr></thead><tbody><tr><td><a href="http://activemq.apache.org/shared-file-system-master-slave" target="_blank" rel="noopener">Shared File System Master Slave</a></td><td>A shared file system such as a SAN</td><td>Run as many slaves as required. Automatic recovery of old masters</td><td>Requires shared file system</td></tr><tr><td><a href="http://activemq.apache.org/jdbc-master-slave" target="_blank" rel="noopener">JDBC Master Slave</a></td><td>A Shared database</td><td>Run as many slaves as required. Automatic recovery of old masters</td><td>Requires a shared database. Also relatively slow as it cannot use the high performance journal</td></tr><tr><td><a href="http://activemq.apache.org/replicated-Features/PersistenceFeatures/Persistence/Features/Persistence/leveldb-store" target="_blank" rel="noopener">Replicated LevelDB Store</a></td><td>ZooKeeper Server</td><td>Run as many slaves as required. Automatic recovery of old masters. Very fast.</td><td>Requires a ZooKeeper server.</td></tr></tbody></table><h4 id="Shared-File-System-Master-Slave"><a href="#Shared-File-System-Master-Slave" class="headerlink" title="Shared File System Master Slave"></a>Shared File System Master Slave</h4><p>基于共享存储的Master-Slave；多个broker共用同一数据源，谁拿到锁谁就是master,其他处于待启动状态，如果master挂掉了，某个抢到文件锁的slave变成master</p><p><strong>启动后</strong></p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/Startup.png" alt="img"></p><p><strong>Master宕机</strong></p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/MasterFailed.png" alt="img"></p><p><strong>Master重启</strong></p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200212193653842.png" alt="image-20200212193653842"></p><p><strong>JDBC Master Slave</strong></p><p>基于JDBC的Master-Slave:使用同一个数据库，拿到LOCK表的写锁的broker成为master.</p><p>性能较低，不能使用高性能日志</p><p><strong>Replicated LeveDB Store</strong></p><p>基于zookeeper复制LeveDB存储的Master-Slave机制</p><p><strong>配置步骤</strong></p><ol><li>修改broker名称</li><li>修改数据源<ol><li>如果使用kahadb，配置相同路径</li><li>如果使用mysql 使用同一数据源（同一数据库和表）</li></ol></li></ol><p><strong>尝试</strong></p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200212144259602.png" alt="image-20200212144259602"></p><p><a href="http://activemq.apache.org/failover-transport-reference.html" target="_blank" rel="noopener">http://activemq.apache.org/failover-transport-reference.html</a></p><h4 id="failover-故障转移协议"><a href="#failover-故障转移协议" class="headerlink" title="failover 故障转移协议"></a>failover 故障转移协议</h4><p>断线重连机制是ActiveMQ的高可用性具体体现之一。ActiveMQ提供failover机制去实现断线重连的高可用性，可以使得连接断开之后，不断的重试连接到一个或多个brokerURL。</p><p>默认情况下，如果client与broker直接的connection断开，则client会新起一个线程，不断的从url参数中获取一个url来重试连接。</p><p>配置语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(</span><br><span class="line"><span class="string">"admin"</span>,</span><br><span class="line"><span class="string">"admin"</span>,</span><br><span class="line"><span class="string">"failover:(nio://localhost:5671,nio://localhost:5672)"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>可配置选项</strong></p><h4 id="Transport-Options"><a href="#Transport-Options" class="headerlink" title="Transport Options"></a>Transport Options</h4><table><thead><tr><th>Option Name</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>backup</code></td><td><code>false</code></td><td>Initialize and hold a second transport connection - to enable fast failover.</td></tr><tr><td><code>initialReconnectDelay</code></td><td><code>10</code></td><td>The delay (in ms) before the <em>first</em> reconnect attempt.</td></tr><tr><td><code>maxCacheSize</code></td><td><code>131072</code></td><td>Size in bytes for the cache of tracked messages. Applicable only if <code>trackMessages</code> is <code>true</code>.</td></tr><tr><td><code>maxReconnectAttempts</code></td><td>`-1</td><td>0`</td></tr><tr><td><code>maxReconnectDelay</code></td><td><code>30000</code></td><td>The maximum delay (in ms) between the <em>second and subsequent</em> reconnect attempts.</td></tr><tr><td><code>nested.*</code></td><td><code>null</code></td><td><strong>From ActiveMQ 5.9:</strong> common URI options that will be applied to each URI in the list<strong>.</strong></td></tr><tr><td><code>randomize</code></td><td><code>true</code></td><td>If <code>true</code>, choose a URI at random from the list to use for reconnect.</td></tr><tr><td><code>reconnectDelayExponent</code></td><td><code>2.0</code></td><td>The exponent used during exponential back-off attempts.</td></tr><tr><td><code>reconnectSupported</code></td><td><code>true</code></td><td>Determines whether the client should respond to broker <code>ConnectionControl</code> events with a reconnect (see: <code>rebalanceClusterClients</code>).</td></tr><tr><td><code>startupMaxReconnectAttempts</code></td><td><code>-1</code></td><td>A value of <code>-1</code> denotes that the number of connection attempts at startup should be unlimited. A value of <code>&gt;=0</code> denotes the number of reconnect attempts at startup that will be made after which an error is sent back to the client when the client makes a subsequent reconnect attempt. <strong>Note</strong>: once successfully connected the <code>maxReconnectAttempts</code> option prevails.</td></tr><tr><td><code>timeout</code></td><td><code>-1</code></td><td><strong>From ActiveMQ 5.3</strong>: set the timeout on send operations (in ms) without interruption of re-connection process.</td></tr><tr><td><code>trackMessages</code></td><td><code>false</code></td><td>Keep a cache of in-flight messages that will flushed to a broker on reconnect.</td></tr><tr><td><code>updateURIsSupported</code></td><td><code>true</code></td><td><strong>From</strong> <strong>ActiveMQ 5.4:</strong> determines whether the client should accept updates from the broker to its list of known URIs.</td></tr><tr><td><code>updateURIsURL</code></td><td><code>null</code></td><td><strong>From ActiveMQ 5.4:</strong> a URL (or path to a local file) to a text file containing a comma separated list of URIs to use for reconnect in the case of failure.</td></tr><tr><td><code>useExponentialBackOff</code></td><td><code>true</code></td><td>If <code>true</code> an exponential back-off is used between reconnect attempts.</td></tr><tr><td><code>warnAfterReconnectAttempts</code></td><td><code>10</code></td><td><strong>From ActiveMQ 5.10:</strong> a value <code>&gt;0</code> specifies the number of reconnect attempts before a warning is logged. A logged warning indicates that there is no current connection but re-connection is being attempted. A value of <code>&lt;=0</code> disables the logging of warnings about reconnect attempts.</td></tr></tbody></table><p><strong>backup</strong></p><p>初始化的时候创建第二个连接，快速故障转移</p><p><strong>initialReconnectDelay</strong></p><p>第一次重试延迟</p><p><strong>trackMessages</strong></p><p>设置是否缓存（故障发生时）尚未传送完成的消息，当broker一旦重新连接成功，便将这些缓存中的消息刷新到新连接的代理中，使得消息可以在broker切换前后顺利传送。默认false</p><p><strong>maxCacheSize</strong></p><p>当trackMessage启动时，缓存的最大子字节数</p><p><strong>maxReconnectAttempts</strong></p><p>默认1|0，自5.6版本开始，-1为默认值，代表不限重试次数，0标识从不重试（只尝试连接一次，并不重连），5.6以前的版本，0为默认值，代表不重试，如果设置大于0的数，则代表最大重试次数。</p><p><strong>maxReconnectDelay</strong></p><p>最长重试间隔</p><p><strong>randomize</strong></p><p>使用随机连接，以达到负载均衡的目的，默认true</p><p>只配主备的情况下最好关闭</p><p><strong>startupMaxReconnectAttempts</strong></p><p>初始化时的最大重试次</p><p>“-1”表示在启动时连接尝试的次数是无限的。</p><p>‘ &gt;=0 ‘的值表示在启动时重新连接尝试的次数</p><p>一旦成功连接后续将使用“maxReconnectAttempts”选项</p><p><strong>timeout</strong></p><p>连接超时</p><p><strong>updateURIsSupported</strong></p><p>是否可以动态修改broker uri</p><p><strong>updateURIsURL</strong></p><p>指定动态修改地址的路径</p><p><strong>useExponentialBackOff</strong></p><p>重连时间间隔是否以指数形式增长</p><p><strong>reconnectDelayExponent</strong></p><p>指数增长时的指数</p><p><strong>warnAfterReconnectAttempts</strong></p><p>重连日志记录</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><strong>官方文档</strong></p><p><a href="http://activemq.apache.org/networks-of-brokers.html" target="_blank" rel="noopener">http://activemq.apache.org/networks-of-brokers.html</a></p><h4 id="静态网络配置"><a href="#静态网络配置" class="headerlink" title="静态网络配置"></a>静态网络配置</h4><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/10190bfe-30d7-3021-8bbe-9d7882530083.png" alt="img"></p><p>在broker节点下配置networkConnectors</p><ul><li>networkConnectors（网络连接器）主要用来配置ActiveMQ服务端与服务端之间的通信</li><li>TransportConnector（传输连接器）主要用于配置ActiveMQ服务端和客户端之间的通信方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;networkConnectors&gt;</span><br><span class="line">  &lt;networkConnector duplex&#x3D;&quot;true&quot; name&#x3D;&quot;amq-cluster&quot; uri&#x3D;&quot;static:failover:&#x2F;&#x2F;(nio:&#x2F;&#x2F;localhost:5671,nio:&#x2F;&#x2F;localhost:5672)&quot;  &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;networkConnectors&gt;</span><br></pre></td></tr></table></figure><p>参与的节点都需要修改</p><p>注意如果单机启动多个节点，记得修改端口避免冲突</p><p>启动成功后<code>Connections</code>中会有其他节点</p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200212165236443.png" alt="image-20200212165236443"></p><p><code>Network</code>中也会显示桥接连接</p><p><img src="/2020/07/12/ActiveMQ%E8%AF%A6%E8%A7%A3/image-20200212165658958.png" alt="image-20200212165658958"></p><p>负载均衡的环境下，broker上的消息优先给在本地连接的consumer</p><p>当networkerConnector与remote Broker建立链接之后，那么remote Broker将会向local Broker交付订阅信息，包括remote broker持有的destinations、Consumers、持久订阅者列表等；那么此后local Broker将把remote Broker做一个消息“订阅者”</p><p><strong>Advisory</strong></p><p>ActiveMQ提供了“Advisory”机制，通常ActiveMQ内部将某些事件作为“advisory”在全局广播，比如destination的创建、consumer的加入、DLQ的产生等，这将额外的消耗极小的性能；我们可以在ActiveMQ的监控页面上看到影响的消息，开发者也可以View这些消息(通道名称以“ActiveMQ.Advisory.”开头)。对于分布式网络中的broker，将严重依赖“Advisory”，特别是“dynamic network”，默认已开启</p><p>在一个broker上发生事件，都会以“通知”的方式发送给配置文件中指定的所有networkConnector</p><p><strong>Dynamic networks</strong></p><p>“动态网络”表明当remote Broker持有通道的消费者时，local Broker才会转发相应的消息；此时我们需要开启advisorySupport。当remote broker上有Consumer创建时，Advisory中将会广播消息，消息为ConsumerInfo类型，它将包括consumer所在的broker path，如果local broker与此path建立了networkConnector，那么此后local Broker将会启动响应的消息转发。</p><p><strong>Static networks</strong></p><p>  相对于“动态网络”而言，“静态网络”将不依赖Advisory，在任何时候，即使remote Broker中没有相应的consumer，消息也将转发给remote Broker</p><p>将brokers作为简单代理并转发消息到远端而不管是否有消费者</p><h4 id="可配置属性"><a href="#可配置属性" class="headerlink" title="可配置属性"></a>可配置属性</h4><h5 id="URI的几个属性"><a href="#URI的几个属性" class="headerlink" title="URI的几个属性"></a>URI的几个属性</h5><table><thead><tr><th>property</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>initialReconnectDelay</td><td>1000</td><td>time(ms) to wait before attempting a reconnect (if useExponentialBackOff is false)</td></tr><tr><td>maxReconnectDelay</td><td>30000</td><td>time(ms) to wait before attempting to re-connect</td></tr><tr><td>useExponentialBackOff</td><td>true</td><td>increases time between reconnect for every failure in a reconnect sequence</td></tr><tr><td>backOffMultiplier</td><td>2</td><td>multipler used to increase the wait time if using exponential back off</td></tr></tbody></table><h5 id="NetworkConnector-Properties"><a href="#NetworkConnector-Properties" class="headerlink" title="NetworkConnector Properties"></a>NetworkConnector Properties</h5><table><thead><tr><th>property</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>name</td><td>bridge</td><td>name of the network - for more than one network connector between the same two brokers - use different names</td></tr><tr><td>dynamicOnly</td><td>false</td><td>if true, only activate a networked durable subscription when a corresponding durable subscription reactivates, by default they are activated on startup.</td></tr><tr><td>decreaseNetworkConsumerPriority</td><td>false</td><td>if true, starting at priority -5, decrease the priority for dispatching to a network Queue consumer the further away it is (in network hops) from the producer. When false all network consumers use same default priority(0) as local consumers</td></tr><tr><td>networkTTL</td><td>1</td><td>the number of brokers in the network that messages and subscriptions can pass through (sets both message&amp;consumer -TTL)</td></tr><tr><td>messageTTL</td><td>1</td><td>(version 5.9) the number of brokers in the network that messages can pass through</td></tr><tr><td>consumerTTL</td><td>1</td><td>(version 5.9) the number of brokers in the network that subscriptions can pass through (keep to 1 in a mesh)</td></tr><tr><td>conduitSubscriptions</td><td>true</td><td>multiple consumers subscribing to the same destination are treated as one consumer by the network</td></tr><tr><td>excludedDestinations</td><td>empty</td><td>destinations matching this list won’t be forwarded across the network (this only applies to dynamicallyIncludedDestinations)</td></tr><tr><td>dynamicallyIncludedDestinations</td><td>empty</td><td>destinations that match this list <strong>will</strong> be forwarded across the network <strong>n.b.</strong> an empty list means all destinations not in the exluded list will be forwarded</td></tr><tr><td>useVirtualDestSubs</td><td>false</td><td>if true, the network connection will listen to advisory messages for virtual destination consumers</td></tr><tr><td>staticallyIncludedDestinations</td><td>empty</td><td>destinations that match will always be passed across the network - even if no consumers have ever registered an interest</td></tr><tr><td>duplex</td><td>false</td><td>if true, a network connection will be used to both produce <strong><em>AND\</em></strong> Consume messages. This is useful for hub and spoke scenarios when the hub is behind a firewall etc.</td></tr><tr><td>prefetchSize</td><td>1000</td><td>Sets the <a href="http://activemq.apache.org/what-is-the-prefetch-limit-for" target="_blank" rel="noopener">prefetch size</a> on the network connector’s consumer. It must be &gt; 0 because network consumers do not poll for messages</td></tr><tr><td>suppressDuplicateQueueSubscriptions</td><td>false</td><td>(from 5.3) if true, duplicate subscriptions in the network that arise from network intermediaries will be suppressed. For example, given brokers A,B and C, networked via multicast discovery. A consumer on A will give rise to a networked consumer on B and C. In addition, C will network to B (based on the network consumer from A) and B will network to C. When true, the network bridges between C and B (being duplicates of their existing network subscriptions to A) will be suppressed. Reducing the routing choices in this way provides determinism when producers or consumers migrate across the network as the potential for dead routes (stuck messages) are eliminated. networkTTL needs to match or exceed the broker count to require this intervention.</td></tr><tr><td>bridgeTempDestinations</td><td>true</td><td>Whether to broadcast advisory messages for created temp destinations in the network of brokers or not. Temp destinations are typically created for request-reply messages. Broadcasting the information about temp destinations is turned on by default so that consumers of a request-reply message can be connected to another broker in the network and still send back the reply on the temporary destination specified in the JMSReplyTo header. In an application scenario where most/all messages use request-reply pattern, this will generate additional traffic on the broker network as every message typically sets a unique JMSReplyTo address (which causes a new temp destination to be created and broadcasted via an advisory message in the network of brokers). When disabling this feature such network traffic can be reduced but then producer and consumers of a request-reply message need to be connected to the same broker. Remote consumers (i.e. connected via another broker in your network) won’t be able to send the reply message but instead raise a “temp destination does not exist” exception.</td></tr><tr><td>alwaysSyncSend</td><td>false</td><td>(version 5.6) When true, non persistent messages are sent to the remote broker using request/reply in place of a oneway. This setting treats both persistent and non-persistent messages the same.</td></tr><tr><td>staticBridge</td><td>false</td><td>(version 5.6) If set to true, broker will not dynamically respond to new consumers. It will only use <code>staticallyIncludedDestinations</code> to create demand subscriptions</td></tr><tr><td>userName</td><td>null</td><td>The username to authenticate against the remote broker</td></tr><tr><td>password</td><td>null</td><td>The password for the username to authenticate against the remote broker</td></tr></tbody></table><p><strong>name</strong></p><p>相同的名称会被添加到同一集群中</p><p><strong>dynamicOnly</strong></p><p>是否直接转发，设置成true的话 broker会在没有消费者的时候不去转发消息</p><p><strong>decreaseNetworkConsumerPriority</strong></p><p>如果为true，网络的消费者优先级降低为-5。如果为false，则默认跟本地消费者一样为0.</p><p><strong>networkTTL</strong> <strong>messageTTL</strong> <strong>consumerTTL</strong></p><p>消息和订阅在网络中被broker转发（穿过）的最大次数，消息在网络中每转发一次，都会将TTL-1</p><p><strong>conduitSubscriptions</strong></p><p>多个消费者消费消息被当作一个消费者</p><p><strong>excludedDestinations</strong></p><p>在这个名单中的Destination不会在网络中被转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludedDestinaitons&gt;</span><br><span class="line">        &lt;queue physicalName&#x3D;&quot;include.test.foo&quot;&#x2F;&gt;</span><br><span class="line">        &lt;topic physicalName&#x3D;&quot;include.test.bar&quot;&#x2F;&gt;</span><br><span class="line">　&lt;&#x2F;excludedDestinaitons&gt;</span><br></pre></td></tr></table></figure><p><strong>dynamicallyIncludedDestinations</strong></p><p>通过网络转发的destinations，注意空列表代表所有的都转发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　&lt;dynamicallyIncludeDestinaitons&gt;</span><br><span class="line">&lt;queue physicalName&#x3D;&quot;include.test.foo&quot;&#x2F;&gt;</span><br><span class="line">&lt;topic physicalName&#x3D;&quot;include.test.bar&quot;&#x2F;&gt;</span><br><span class="line">　&lt;&#x2F;dynamicallyIncludeDestinaitons&gt;</span><br></pre></td></tr></table></figure><p><strong>useVirtualDestSubs</strong></p><p>开启此选项会在转发消息时</p><p><strong>staticallyIncludedDestinations</strong></p><p>匹配的目的地将始终通过网络传递——即使没有消费者对此感兴趣 对应静态networks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;staticallyIncludeDestinaitons&gt;</span><br><span class="line">       &lt;queue physicalName&#x3D;&quot;aways.include.queue&quot;&#x2F;&gt;</span><br><span class="line">　&lt;&#x2F;staticallyIncludeDestinaitons&gt;</span><br></pre></td></tr></table></figure><p><strong>duplex</strong></p><p>是否允许双向连接<strong>如果该属性为true，当这个节点使用Network Bridge连接到其它目标节点后，将强制目标也建立Network Bridge进行反向连接</strong></p><p><strong>prefetchSize</strong></p><p>缓冲消息大小，必须大于0，不会主动拉取消息</p><p><strong>suppressDuplicateQueueSubscriptions</strong></p><p>如果为true, 重复的订阅关系一产生即被阻止。</p><p><strong>bridgeTempDestinations</strong></p><p>是否转发临时destination，禁用后再使用request/reply模型的时候客户端需要连接到同一broker，不然会找不到destination</p><p><strong>alwaysSyncSend</strong></p><p>开启后转发非持久化消息会使用request/reply模型</p><p><strong>staticBridge</strong></p><p>如果设置为true，则代理将不会动态响应新的consumer，只能使用staticallyIncludedDestinations中的destination</p><p><strong>userName</strong> <strong>password</strong></p><p>连接broker时的用户名和密码</p><h4 id="动态网络配置"><a href="#动态网络配置" class="headerlink" title="动态网络配置"></a>动态网络配置</h4><p><strong>官方文档</strong></p><p><a href="http://activemq.apache.org/multicast-transport-reference" target="_blank" rel="noopener">http://activemq.apache.org/multicast-transport-reference</a></p><p>使用multicast协议，可以指定组播地址或使用<code>multicast://default</code>（239.255.2.3）</p><p>配置<code>networkConnectors</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;networkConnectors&gt;</span><br><span class="line"> &lt;networkConnector uri&#x3D;&quot;multicast:&#x2F;&#x2F;239.0.0.5&quot; duplex&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;networkConnectors&gt;</span><br></pre></td></tr></table></figure><p>broker启动后会使用udp协议向组播地址发送数据报文以便让其他在这个组播地址的节点感知到自己的存在</p><p>每个UDP数据报中，包含的主要信息包括本节点ActiveMQ的版本信息，以及连接到自己所需要使用的host名字、协议名和端口信息。</p><p>配置<code>transportConnector</code>指明将哪一个连接通过UDP数据报向其他ActiveMQ节点进行公布，就需要在transportConnector标签上使用discoveryUri属性进行标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;auto+nio&quot; uri&#x3D;&quot;auto+nio:&#x2F;&#x2F;localhost:5672&quot; discoveryUri&#x3D;&quot;multicast:&#x2F;&#x2F;239.0.0.5&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="消息回流"><a href="#消息回流" class="headerlink" title="消息回流"></a>消息回流</h3><p>在消息转发的时候，remote broker转发Local broker的消息会消费掉LocalBroker的消息</p><p>那么在转发的过程中，消息在被拉取后和发送给consumer的过程中重启的话会造成消息丢失</p><p><code>replayWhenNoConsumers</code> 选项可以使remote broke上有需要转发的消息但是没有被消费时，把消息回流到它原始的broker.同时把enableAudit设置为false,为了防止消息回流后被当作重复消息而不被分发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　　　 &lt;destinationPolicy&gt;</span><br><span class="line">    &lt;policyMap&gt;</span><br><span class="line">      &lt;policyEntries&gt;</span><br><span class="line">        &lt;policyEntry queue&#x3D;&quot;&gt;&quot; enableAudit&#x3D;&quot;false&quot;&gt;</span><br><span class="line">            &lt;networkBridgeFilterFactory&gt;</span><br><span class="line">                &lt;conditionalNetworkBridgeFilterFactory replayWhenNoConsumers&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;networkBridgeFilterFactory&gt;</span><br><span class="line">        &lt;&#x2F;policyEntry&gt;</span><br><span class="line">      &lt;&#x2F;policyEntries&gt;</span><br><span class="line">    &lt;&#x2F;policyMap&gt;</span><br><span class="line">&lt;&#x2F;destinationPolicy&gt;</span><br></pre></td></tr></table></figure><h3 id="消息副本"><a href="#消息副本" class="headerlink" title="消息副本"></a>消息副本</h3><p><a href="http://activemq.apache.org/replicated-message-store" target="_blank" rel="noopener">http://activemq.apache.org/replicated-message-store</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列，中间件，ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的基本使用</title>
      <link href="/2020/07/04/Spring%20AOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/04/Spring%20AOP%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-AOP介绍与使用"><a href="#Spring-AOP介绍与使用" class="headerlink" title="Spring AOP介绍与使用"></a>Spring AOP介绍与使用</h1><p>AOP：Aspect Oriented Programming  面向切面编程</p><p>OOP：Object Oriented Programming  面向对象编程</p><p>​        面向切面编程：基于OOP基础之上新的编程思想，OOP面向的主要对象是类，而AOP面向的主要对象是切面，在处理日志、安全管理、事务管理等方面有非常重要的作用。AOP是Spring中重要的核心点，虽然IOC容器没有依赖AOP，但是AOP提供了非常强大的功能，用来对IOC做补充。通俗点说的话就是在程序运行期间，将<strong>某段代码动态切入</strong>到<strong>指定方法</strong>的<strong>指定位置</strong>进行运行的这种编程方式。</p><h3 id="1、AOP的概念"><a href="#1、AOP的概念" class="headerlink" title="1、AOP的概念"></a>1、AOP的概念</h3><h5 id="为什么要引入AOP"><a href="#为什么要引入AOP" class="headerlink" title="为什么要引入AOP?"></a>为什么要引入AOP?</h5><p>Calculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.inter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.inter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        MyCalculator myCalculator = <span class="keyword">new</span> MyCalculator();</span><br><span class="line">        System.out.println(myCalculator.add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        此代码非常简单，就是基础的javase的代码实现，此时如果需要添加日志功能应该怎么做呢，只能在每个方法中添加日志输出，同时如果需要修改的话会变得非常麻烦。</p><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.inter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add 方法开始执行，参数为："</span>+i+<span class="string">","</span>+j);</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        System.out.println(<span class="string">"add 方法开始完成结果为："</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sub 方法开始执行，参数为："</span>+i+<span class="string">","</span>+j);</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        System.out.println(<span class="string">"add 方法开始完成结果为："</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mult 方法开始执行，参数为："</span>+i+<span class="string">","</span>+j);</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        System.out.println(<span class="string">"add 方法开始完成结果为："</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"div 方法开始执行，参数为："</span>+i+<span class="string">","</span>+j);</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        System.out.println(<span class="string">"add 方法开始完成结果为："</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        可以考虑将日志的处理抽象出来，变成工具类来进行实现：</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Object ... objects)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"XXX方法开始执行，使用的参数是："</span>+ Arrays.asList(objects));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Object ... objects)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"XXX方法执行结束，结果是："</span>+ Arrays.asList(objects));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.inter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.util.LogUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        LogUtil.start(i,j);</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        LogUtil.stop(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        LogUtil.start(i,j);</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        LogUtil.stop(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        LogUtil.start(i,j);</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        LogUtil.stop(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        LogUtil.start(i,j);</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        LogUtil.stop(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        按照上述方式抽象之后，代码确实简单很多，但是大家应该已经发现在输出的信息中并不包含具体的方法名称，我们更多的是想要在程序运行过程中动态的获取方法的名称及参数、结果等相关信息，此时可以通过使用<strong>动态代理</strong>的方式来进行实现。</p><p>CalculatorProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.inter.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帮助Calculator生成代理对象的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  为传入的参数对象创建一个动态代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> calculator 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> Calculator calculator)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//被代理对象的类加载器</span></span><br><span class="line">        ClassLoader loader = calculator.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//被代理对象的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = calculator.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//方法执行器，执行被代理对象的目标方法</span></span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  执行目标方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象，给jdk使用，任何时候都不要操作此对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 当前将要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 这个方法调用时外界传入的参数值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//利用反射执行目标方法,目标方法执行后的返回值</span></span><br><span class="line"><span class="comment">//                System.out.println("这是动态代理执行的方法");</span></span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(method.getName()+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">                    result = method.invoke(calculator, args);</span><br><span class="line">                    System.out.println(method.getName()+<span class="string">"方法执行完成，结果是："</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(method.getName()+<span class="string">"方法出现异常："</span>+ e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(method.getName()+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将结果返回回去</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我们可以看到这种方式更加灵活，而且不需要在业务方法中添加额外的代码，这才是常用的方式。如果想追求完美的同学，还可以使用上述的日志工具类来完善。</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Method method, Object ... objects)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法开始执行，使用的参数是："+ Arrays.asList(objects));</span></span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(objects));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Method method,Object ... objects)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(objects));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(Method method,Exception e)</span></span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法出现异常："</span>+ e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(Method method)</span></span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CalculatorProxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.inter.Calculator;</span><br><span class="line"><span class="keyword">import</span> com.oi.util.LogUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 帮助Calculator生成代理对象的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  为传入的参数对象创建一个动态代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> calculator 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> Calculator calculator)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//被代理对象的类加载器</span></span><br><span class="line">        ClassLoader loader = calculator.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//被代理对象的接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = calculator.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//方法执行器，执行被代理对象的目标方法</span></span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  执行目标方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象，给jdk使用，任何时候都不要操作此对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 当前将要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 这个方法调用时外界传入的参数值</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//利用反射执行目标方法,目标方法执行后的返回值</span></span><br><span class="line"><span class="comment">//                System.out.println("这是动态代理执行的方法");</span></span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LogUtil.start(method,args);</span><br><span class="line">                    result = method.invoke(calculator, args);</span><br><span class="line">                    LogUtil.stop(method,args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LogUtil.logException(method,e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    LogUtil.end(method);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将结果返回回去</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(loader, interfaces, h);</span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        很多同学看到上述代码之后可能感觉已经非常完美了，但是要说明的是，这种动态代理的实现方式调用的是jdk的基本实现，如果需要代理的目标对象没有实现任何接口，那么是无法为他创建代理对象的，这也是致命的缺陷。而在Spring中我们可以不编写上述如此复杂的代码，只需要利用AOP，就能够轻轻松松实现上述功能，当然，Spring AOP的底层实现也依赖的是动态代理。</p><h5 id="AOP的核心概念及术语"><a href="#AOP的核心概念及术语" class="headerlink" title="AOP的核心概念及术语"></a>AOP的核心概念及术语</h5><ul><li>切面（Aspect）: 指关注点模块化，这个关注点可能会横切多个对象。事务管理是企业级Java应用中有关横切关注点的例子。 在Spring AOP中，切面可以使用通用类基于模式的方式（schema-based approach）或者在普通类中以<code>@Aspect</code>注解（@AspectJ 注解方式）来实现。</li><li>连接点（Join point）: 在程序执行过程中某个特定的点，例如某个方法调用的时间点或者处理异常的时间点。在Spring AOP中，一个连接点总是代表一个方法的执行。</li><li>通知（Advice）: 在切面的某个特定的连接点上执行的动作。通知有多种类型，包括“around”, “before” and “after”等等。通知的类型将在后面的章节进行讨论。 许多AOP框架，包括Spring在内，都是以拦截器做通知模型的，并维护着一个以连接点为中心的拦截器链。</li><li>切点（Pointcut）: 匹配连接点的断言。通知和切点表达式相关联，并在满足这个切点的连接点上运行（例如，当执行某个特定名称的方法时）。切点表达式如何和连接点匹配是AOP的核心：Spring默认使用AspectJ切点语义。</li><li>引入（Introduction）: 声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被通知的对象上。例如，可以使用引入来使bean实现 <code>IsModified</code>接口， 以便简化缓存机制（在AspectJ社区，引入也被称为内部类型声明（inter））。</li><li>目标对象（Target object）: 被一个或者多个切面所通知的对象。也被称作被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，那么这个对象永远是一个被代理（proxied）的对象。</li><li>AOP代理（AOP proxy）:AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理。</li><li>织入（Weaving）: 把切面连接到其它的应用程序类型或者对象上，并创建一个被被通知的对象的过程。这个过程可以在编译时（例如使用AspectJ编译器）、类加载时或运行时中完成。 Spring和其他纯Java AOP框架一样，是在运行时完成织入的。</li></ul><h5 id="AOP的通知类型"><a href="#AOP的通知类型" class="headerlink" title="AOP的通知类型"></a>AOP的通知类型</h5><ul><li>前置通知（Before advice）: 在连接点之前运行但无法阻止执行流程进入连接点的通知（除非它引发异常）。</li><li>后置返回通知（After returning advice）:在连接点正常完成后执行的通知（例如，当方法没有抛出任何异常并正常返回时）。</li><li>后置异常通知（After throwing advice）: 在方法抛出异常退出时执行的通知。</li><li>后置通知（总会执行）（After (finally) advice）: 当连接点退出的时候执行的通知（无论是正常返回还是异常退出）。</li><li>环绕通知（Around Advice）:环绕连接点的通知，例如方法调用。这是最强大的一种通知类型，。环绕通知可以在方法调用前后完成自定义的行为。它可以选择是否继续执行连接点或直接返回自定义的返回值又或抛出异常将执行结束。</li></ul><h5 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h5><ul><li>日志管理</li><li>权限认证</li><li>安全检查</li><li>事务控制</li></ul><h3 id="2、Spring-AOP的简单配置"><a href="#2、Spring-AOP的简单配置" class="headerlink" title="2、Spring AOP的简单配置"></a>2、Spring AOP的简单配置</h3><p>​        在上述代码中我们是通过动态代理的方式实现日志功能的，但是比较麻烦，现在我们将要使用spring aop的功能实现此需求，其实通俗点说的话，就是把LogUtil的工具类换成另外一种实现方式。</p><h5 id="1、添加pom依赖"><a href="#1、添加pom依赖" class="headerlink" title="1、添加pom依赖"></a>1、添加pom依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、编写配置"><a href="#2、编写配置" class="headerlink" title="2、编写配置"></a>2、编写配置</h5><ul><li><p>将目标类和切面类加入到IOC容器中，在对应的类上添加组件注解</p><ul><li><p>给LogUtil添加@Component注解</p></li><li><p>给MyCalculator添加@Service注解</p></li><li><p>添加自动扫描的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--别忘了添加context命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置程序中的切面类</p><ul><li>在LogUtil.java中添加@Aspect注解</li></ul></li><li><p>设置切面类中的方法是什么时候在哪里执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    设置下面方法在什么时候运行</span></span><br><span class="line"><span class="comment">        @Before:在目标方法之前运行：前置通知</span></span><br><span class="line"><span class="comment">        @After:在目标方法之后运行：后置通知</span></span><br><span class="line"><span class="comment">        @AfterReturning:在目标方法正常返回之后：返回通知</span></span><br><span class="line"><span class="comment">        @AfterThrowing:在目标方法抛出异常后开始运行：异常通知</span></span><br><span class="line"><span class="comment">        @Around:环绕：环绕通知</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        当编写完注解之后还需要设置在哪些方法上执行，使用表达式</span></span><br><span class="line"><span class="comment">        execution(访问修饰符  返回值类型 方法全称)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法开始执行，使用的参数是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法开始执行，参数是："+ Arrays.asList(objects));</span></span><br><span class="line">        System.out.println(<span class="string">"方法开始执行，参数是："</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line">        System.out.println(<span class="string">"方法执行完成，结果是："</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法出现异常："+ e.getMessage());</span></span><br><span class="line">        System.out.println(<span class="string">"方法出现异常："</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束了......");</span></span><br><span class="line">        System.out.println(<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启基于注解的aop的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h5><p>  MyTest.java</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> com.oi.inter.Calculator;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">          ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"aop.xml"</span>);</span><br><span class="line">          Calculator bean = context.getBean(Calculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">          bean.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        spring AOP的动态代理方式是jdk自带的方式，容器中保存的组件是代理对象com.sun.proxy.$Proxy对象</p><h5 id="4、通过cglib来创建代理对象"><a href="#4、通过cglib来创建代理对象" class="headerlink" title="4、通过cglib来创建代理对象"></a>4、通过cglib来创建代理对象</h5><p>MyCalculator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.inter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"aop.xml"</span>);</span><br><span class="line">        MyCalculator bean = context.getBean(MyCalculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        bean.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">        System.out.println(bean.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        可以通过cglib的方式来创建代理对象，此时不需要实现任何接口，代理对象是</p><p>class com.oi.inter.MyCalculator$$EnhancerBySpringCGLIB$$1f93b605类型</p><p>​        <strong>综上所述：在spring容器中，如果有接口，那么会使用jdk自带的动态代理，如果没有接口，那么会使用cglib的动态代理。动态代理的实现原理，后续会详细讲。</strong></p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><h6 id="1、切入点表达式"><a href="#1、切入点表达式" class="headerlink" title="1、切入点表达式"></a>1、切入点表达式</h6><p>​        在使用表达式的时候，除了之前的写法之外，还可以使用通配符的方式：</p><p>​        *：</p><p>​        1、匹配一个或者多个字符</p><p>​                execution( public int com.oi.inter.My*alculator.*(int,int))</p><p>​        2、匹配任意一个参数，</p><p>​                execution( public int com.oi.inter.MyCalculator.*(int,*))</p><p>​        3、只能匹配一层路径，如果项目路径下有多层目录，那么*只能匹配一层路径</p><p>​        4、权限位置不能使用*，如果想表示全部权限，那么不写即可</p><p>​                execution( * com.oi.inter.MyCalculator.*(int,*))</p><p>​        ..：</p><p>​        1、匹配多个参数，任意类型参数</p><p>​                execution( * com.oi.inter.MyCalculator.*(..))</p><p>​        2、匹配任意多层路径</p><p>​                execution( * com.oi..MyCalculator.*(..))</p><p>​        在写表达式的时候，可以有N多种写法，但是有一种最偷懒和最精确的方式：</p><p>​                最偷懒的方式：execution(*  *(..))    或者   execution(*  *.*(..))</p><p>​                最精确的方式：execution( public int com.oi.inter.MyCalculator.add(int,int))</p><p>​        除此之外，在表达式中还支持 &amp;&amp;、||、！的方式</p><p>​                &amp;&amp;：两个表达式同时</p><p>​                execution( public int com.oi.inter.MyCalculator.<em>(..)) &amp;&amp; execution(\</em> *.*(int,int) )</p><p>​                ||：任意满足一个表达式即可</p><p>​                execution( public int com.oi.inter.MyCalculator.<em>(..)) &amp;&amp; execution(\</em> *.*(int,int) )</p><p>​                ！：只要不是这个位置都可以进行切入</p><p>​                &amp;&amp;：两个表达式同时</p><p>​                execution( public int com.oi.inter.MyCalculator.*(..))</p><h6 id="2、通知方法的执行顺序"><a href="#2、通知方法的执行顺序" class="headerlink" title="2、通知方法的执行顺序"></a>2、通知方法的执行顺序</h6><p>​            在之前的代码中大家一直对通知的执行顺序有疑问，其实执行的结果并没有错，大家需要注意：</p><p>​            1、正常执行：@Before—&gt;@After—&gt;@AfterReturning</p><p>​            2、异常执行：@Before—&gt;@After—&gt;@AfterThrowing</p><h6 id="3、获取方法的详细信息"><a href="#3、获取方法的详细信息" class="headerlink" title="3、获取方法的详细信息"></a>3、获取方法的详细信息</h6><p>​        在上面的案例中，我们并没有获取Method的详细信息，例如方法名、参数列表等信息，想要获取的话其实非常简单，只需要添加JoinPoint参数即可。</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行完成，结果是："</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法出现异常："</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        刚刚只是获取了方法的信息，但是如果需要获取结果，还需要添加另外一个方法参数，并且告诉spring使用哪个参数来进行结果接收</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">    String name = joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        也可以通过相同的方式来获取异常的信息</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">    String name = joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(name+<span class="string">"方法出现异常："</span>+exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、spring对通过方法的要求"><a href="#4、spring对通过方法的要求" class="headerlink" title="4、spring对通过方法的要求"></a>4、spring对通过方法的要求</h6><p>​        spring对于通知方法的要求并不是很高，你可以任意改变方法的返回值和方法的访问修饰符，但是唯一不能修改的就是方法的参数，会出现参数绑定的错误，原因在于通知方法是spring利用反射调用的，每次方法调用得确定这个方法的参数的值。</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@After</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint,String aa)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束了......");</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="5、表达式的抽取"><a href="#5、表达式的抽取" class="headerlink" title="5、表达式的抽取"></a>5、表达式的抽取</h6><p>如果在实际使用过程中，多个方法的表达式是一致的话，那么可以考虑将切入点表达式抽取出来：</p><p>​        a、随便生命一个没有实现的返回void的空方法</p><p>​        b、给方法上标注@Potintcut注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"myPoint()"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"myPoint()"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法出现异常："</span>+exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6、环绕通知的使用"><a href="#6、环绕通知的使用" class="headerlink" title="6、环绕通知的使用"></a>6、环绕通知的使用</h6><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知是spring中功能最强大的通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        String name = proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕前置通知:"</span>+name+<span class="string">"方法开始，参数是"</span>+Arrays.asList(args));</span><br><span class="line">            <span class="comment">//利用反射调用目标方法，就是method.invoke()</span></span><br><span class="line">            proceed = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">"环绕返回通知:"</span>+name+<span class="string">"方法返回，返回值是"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕异常通知"</span>+name+<span class="string">"方法出现异常，异常信息是："</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕后置通知"</span>+name+<span class="string">"方法结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        总结：环绕通知的执行顺序是优于普通通知的，具体的执行顺序如下：</p><p>环绕前置–&gt;普通前置–&gt;目标方法执行–&gt;环绕正常结束/出现异常–&gt;环绕后置–&gt;普通后置–&gt;普通返回或者异常。</p><p>但是需要注意的是，如果出现了异常，那么环绕通知会处理或者捕获异常，普通异常通知是接收不到的，因此最好的方式是在环绕异常通知中向外抛出异常。</p><h6 id="7、多切面运行的顺序"><a href="#7、多切面运行的顺序" class="headerlink" title="7、多切面运行的顺序"></a>7、多切面运行的顺序</h6><p>​        如果有多个切面要进行执行，那么顺序是什么样的呢？</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法开始执行，使用的参数是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法开始执行，参数是："+ Arrays.asList(objects));</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"myPoint()"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"myPoint()"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法出现异常："+ e.getMessage());</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法出现异常："</span>+exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束了......");</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知是spring中功能最强大的通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Around("myPoint()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        String name = proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕前置通知:"</span>+name+<span class="string">"方法开始，参数是"</span>+Arrays.asList(args));</span><br><span class="line">            <span class="comment">//利用反射调用目标方法，就是method.invoke()</span></span><br><span class="line">            proceed = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">"环绕返回通知:"</span>+name+<span class="string">"方法返回，返回值是"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕异常通知"</span>+name+<span class="string">"方法出现异常，异常信息是："</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕后置通知"</span>+name+<span class="string">"方法结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityAspect.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"com.oi.util.LogUtil.myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"com.oi.util.LogUtil.myPoint()"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"com.oi.util.LogUtil.myPoint()"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法出现异常："</span>+exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"com.oi.util.LogUtil.myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知是spring中功能最强大的通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Around("myPoint()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        String name = proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕前置通知:"</span>+name+<span class="string">"方法开始，参数是"</span>+Arrays.asList(args));</span><br><span class="line">            <span class="comment">//利用反射调用目标方法，就是method.invoke()</span></span><br><span class="line">            proceed = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">"环绕返回通知:"</span>+name+<span class="string">"方法返回，返回值是"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕异常通知"</span>+name+<span class="string">"方法出现异常，异常信息是："</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕后置通知"</span>+name+<span class="string">"方法结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在spring中，默认是按照切面名称的字典顺序进行执行的，但是如果想自己改变具体的执行顺序的话，可以使用@Order注解来解决，数值越小，优先级越高。</p><p>LogUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution( public int com.oi.inter.MyCalculator.*(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法开始执行，使用的参数是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法开始执行，参数是："+ Arrays.asList(objects));</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"myPoint()"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println("XXX方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束，结果是："+ Arrays.asList(objects));</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"myPoint()"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法出现异常："+ e.getMessage());</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法出现异常："</span>+exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(method.getName()+"方法执行结束了......");</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Log:"</span>+name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知是spring中功能最强大的通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Around("myPoint()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        String name = proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕前置通知:"</span>+name+<span class="string">"方法开始，参数是"</span>+Arrays.asList(args));</span><br><span class="line">            <span class="comment">//利用反射调用目标方法，就是method.invoke()</span></span><br><span class="line">            proceed = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">"环绕返回通知:"</span>+name+<span class="string">"方法返回，返回值是"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕异常通知"</span>+name+<span class="string">"方法出现异常，异常信息是："</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕后置通知"</span>+name+<span class="string">"方法结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityAspect.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"com.oi.util.LogUtil.myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法开始执行，参数是："</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"com.oi.util.LogUtil.myPoint()"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法执行完成，结果是："</span>+result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"com.oi.util.LogUtil.myPoint()"</span>,throwing = <span class="string">"exception"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法出现异常："</span>+exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"com.oi.util.LogUtil.myPoint()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"Security:"</span>+name+<span class="string">"方法执行结束了......"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知是spring中功能最强大的通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Around("myPoint()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        String name = proceedingJoinPoint.getSignature().getName();</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕前置通知:"</span>+name+<span class="string">"方法开始，参数是"</span>+Arrays.asList(args));</span><br><span class="line">            <span class="comment">//利用反射调用目标方法，就是method.invoke()</span></span><br><span class="line">            proceed = proceedingJoinPoint.proceed(args);</span><br><span class="line">            System.out.println(<span class="string">"环绕返回通知:"</span>+name+<span class="string">"方法返回，返回值是"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕异常通知"</span>+name+<span class="string">"方法出现异常，异常信息是："</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"环绕后置通知"</span>+name+<span class="string">"方法结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        如果需要添加环绕通知呢，具体的执行顺序又会是什么顺序呢？</p><p>​        因为环绕通知在进行添加的时候，是在切面层引入的，所以在哪个切面添加环绕通知，那么就会在哪个切面执行。</p><h3 id="3、基于xml配置的AOP配置"><a href="#3、基于xml配置的AOP配置" class="headerlink" title="3、基于xml配置的AOP配置"></a>3、基于xml配置的AOP配置</h3><p>​        之前我们讲解了基于注解的AOP配置方式，下面我们开始讲一下基于xml的配置方式，虽然在现在的企业级开发中使用注解的方式比较多，但是你不能不会，因此需要简单的进行配置，注解配置快速简单，配置的方式共呢个完善。</p><p>1、将所有的注解都进行删除</p><p>2、添加配置文件</p><p>aop.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logUtil"</span> <span class="attr">class</span>=<span class="string">"com.oi.util.LogUtil2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityAspect"</span> <span class="attr">class</span>=<span class="string">"com.oi.util.SecurityAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myCalculator"</span> <span class="attr">class</span>=<span class="string">"com.oi.inter.MyCalculator"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"globalPoint"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.oi.inter.MyCalculator.*(int,int))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logUtil"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"mypoint"</span> <span class="attr">expression</span>=<span class="string">"execution(public int com.oi.inter.MyCalculator.*(int,int))"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"start"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"end"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"stop"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">returning</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"logException"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span> <span class="attr">throwing</span>=<span class="string">"exception"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"securityAspect"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"start"</span> <span class="attr">pointcut-ref</span>=<span class="string">"globalPoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"end"</span> <span class="attr">pointcut-ref</span>=<span class="string">"globalPoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"stop"</span> <span class="attr">pointcut-ref</span>=<span class="string">"globalPoint"</span> <span class="attr">returning</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"logException"</span> <span class="attr">pointcut-ref</span>=<span class="string">"globalPoint"</span> <span class="attr">throwing</span>=<span class="string">"exception"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypoint"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL调优</title>
      <link href="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/"/>
      <url>/2020/07/03/MySQL%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL调优"><a href="#MySQL调优" class="headerlink" title="MySQL调优"></a>MySQL调优</h2><h4 id="1-性能监控"><a href="#1-性能监控" class="headerlink" title="1. 性能监控"></a>1. 性能监控</h4><p>show profile</p><p>此工具默认是禁用的，可以通过服务器变量在绘画级别动态的修改</p><p><strong>set profiling=1;</strong></p><p>当设置完成之后，在服务器上执行的所有语句，都会测量其耗费的时间和其他一些查询执行状态变更相关的数据。</p><p><strong>select * from emp;</strong></p><p>在mysql的命令行模式下只能显示两位小数的时间，可以使用如下命令查看具体的执行时间</p><p><strong>show profiles;</strong></p><p>执行如下命令可以查看详细的每个步骤的时间：</p><p><strong>show profile for query 1;</strong></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412073731890.png" alt="image-20200412073731890"></p><p>show profiles 查看执行时间<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412074008668.png" alt="image-20200412074008668"></p><p>只精确到后两位</p><p>show profile 最近执行的sql , 每个步骤多长时间<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412074108964.png" alt="image-20200412074108964"></p><p>show profile for query 2 查第二个<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412074312622.png" alt="image-20200412074312622"></p><p>show profile cpu<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412074403265.png" alt="image-20200412074403265"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412075426618.png" alt="image-20200412075426618"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412075506666.png" alt="image-20200412075506666"></p><p><strong>各连接池性能</strong></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412081803049.png" alt="image-20200412081803049"></p><h4 id="2-表结构优化"><a href="#2-表结构优化" class="headerlink" title="2. 表结构优化"></a>2. 表结构优化</h4><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412082617475.png" alt="image-20200412082617475"></p><p>应该尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少，但是要确保没有低估需要存储的值的范围，如果无法确认哪个数据类型，就选择你认为不会超过范围的最小类型</p><p>案例：</p><p>设计两张表，设计不同的数据类型，查看表的容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db1"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        PreparedStatement pstmt = conn.prepareStatement(<span class="string">"insert into psn2 values(?,?)"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            pstmt.setInt(<span class="number">1</span>,i);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,i+<span class="string">""</span>);</span><br><span class="line">            pstmt.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        pstmt.executeBatch();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412082918434.png" alt="image-20200412082918434"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412083305650.png" alt="image-20200412083305650"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412083622460.png" alt="image-20200412083622460"></p><p>bigint tinyint 占用空间不同  查询时间也不同</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412083557968.png" alt="image-20200412083557968"></p><p>ip地址转数值 INET_ATON/NTOA</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412083813449.png" alt="image-20200412083813449"></p><p>简单数据类型的操作通常需要更少的CPU周期，例如，</p><p>1、整型比字符操作代价更低，因为字符集和校对规则是字符比较比整型比较更复杂，</p><p>2、使用mysql自建类型而不是字符串来存储日期和时间</p><p>3、用整型存储IP地址</p><p>案例：</p><p>创建两张相同的表，改变日期的数据类型，查看SQL语句执行的速度</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412084513504.png" alt="image-20200412084513504"></p><p>如果查询中包含可为NULL的列，对mysql来说很难优化，因为可为null的列使得索引、索引统计和值比较都更加复杂，坦白来说，通常情况下null的列改为not null带来的性能提升比较小，所有没有必要将所有的表的schema进行修改，但是应该尽量避免设计成可为null的列</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412095640260.png" alt="image-20200412095640260"></p><p>可以使用的几种整数类型：TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT分别使用8，16，24，32，64位存储空间。</p><p>尽量使用满足需求的最小数据类型</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412095744196.png" alt="image-20200412095744196"></p><p>1、char长度固定，即每条数据占用等长字节空间；最大长度是255个字符，适合用在身份证号、手机号等定长字符串</p><p>2、varchar可变程度，可以设置最大长度；最大空间是65535个字节，适合用在长度可变的属性</p><p>3、text不设置长度，当不知道属性的最大长度时，适合用text</p><p>按照查询速度：char&gt;varchar&gt;text</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412095833983.png" alt="image-20200412095833983"></p><p>4k对齐</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412100159575.png" alt="image-20200412100159575"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412100534927.png" alt="image-20200412100534927"></p><p>MySQL 把每个 BLOB 和 TEXT 值当作一个独立的对象处理。</p><p>两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储。</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412100615434.png" alt="image-20200412100615434"></p><p>1、不要使用字符串类型来存储日期时间数据</p><p>2、日期时间类型通常比字符串占用的存储空间小</p><p>3、日期时间类型在进行查找过滤时可以利用日期来进行比对</p><p>4、日期时间类型还有着丰富的处理函数，可以方便的对时间类型进行日期计算</p><p>5、使用int存储日期时间不如使用timestamp类型</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412101944180.png" alt="image-20200412101944180"></p><p>有时可以使用枚举类代替常用的字符串类型，mysql存储枚举类型会非常紧凑，会根据列表值的数据压缩到一个或两个字节中，mysql在内部会将每个值在列表中的位置保存为整数，并且在表的.frm文件中保存“数字-字符串”映射关系的查找表</p><p> create table enum_test(e enum(‘fish’,’apple’,’dog’) not null);</p><p> insert into enum_test(e) values(‘fish’),(‘dog’),(‘apple’);</p><p> select e+0 from enum_test;</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412101924672.png" alt="image-20200412101924672"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412102018401.png" alt="image-20200412102018401"></p><p>人们经常使用varchar(15)来存储ip地址，然而，它的本质是32位无符号整数不是字符串，可以使用INET_ATON()和INET_NTOA函数在这两种表示方法之间转换</p><p>案例：</p><p>select inet_aton(‘1.1.1.1’)</p><p>select inet_ntoa(16843009)</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412103739902.png" alt="image-20200412103739902"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412103806772.png" alt="image-20200412103806772"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412103858011.png" alt="image-20200412103858011"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412103937013.png" alt="image-20200412103937013"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104012606.png" alt="image-20200412104012606"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104627017.png" alt="image-20200412104627017"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104731433.png" alt="image-20200412104731433"></p><p>字符集直接决定了数据在MySQL中的存储编码方式，由于同样的内容使用不同字符集表示所占用的空间大小会有较大的差异，所以通过使用合适的字符集，可以帮助我们尽可能减少数据量，进而减少IO操作次数。</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104755130.png" alt="image-20200412104755130"></p><p>存储引擎的对比</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104826553.png" alt="image-20200412104826553"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104905220.png" alt="image-20200412104905220"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412104953485.png" alt="image-20200412104953485"></p><p>当我们的表中存在类似于 TEXT 或者是很大的 VARCHAR类型的大字段的时候，如果我们大部分访问这张表的时候都不需要这个字段，我们就该义无反顾的将其拆分到另外的独立表中，以减少常用数据所占用的存储空间。这样做的一个明显好处就是每个数据块中可以存储的数据条数可以大大增加，既减少物理 IO 次数，也能大大提高内存中的缓存命中率。</p><h4 id="3-执行计划及索引优化"><a href="#3-执行计划及索引优化" class="headerlink" title="3. 执行计划及索引优化"></a>3. 执行计划及索引优化</h4><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412105016620.png" alt="image-20200412105016620"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412105756164.png" alt="image-20200412105756164"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112211639.png" alt="image-20200412112211639"></p><p>想要了解索引的优化方式，必须要对索引的底层原理有所了解</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112234939.png" alt="image-20200412112234939"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112248241.png" alt="image-20200412112248241"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112303993.png" alt="image-20200412112303993"></p><p>主键索引不能为null, 唯一键索引可以为空</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412114724008.png" alt="image-20200412114724008"></p><p>回表: where name = ? 通过非主键索引查到主键之后, 回到主键B+树查整行数据</p><p>覆盖索引: select id from where name = ?, 已经有了, 不用回表, 能用尽量用</p><p>最左匹配: name = ? and age = ?  name = ? age = ?<br>                索引name,age, 只能匹配上name,才能用age<br>                更优解 name,age + age ,age占用小</p><p>索引下推: 必须组合索引, name,age , 查name的时候过滤age, 再放到server层, 减少I/O<br>                老版本去除全部name匹配, 在server层匹配age</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412114626563.png" alt="image-20200412114626563"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112536777.png" alt="image-20200412112536777"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112612390.png" alt="image-20200412112612390"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412113253441.png" alt="image-20200412113253441"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412113426265.png" alt="image-20200412113426265"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412113509952.png" alt="image-20200412113509952"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412114023050.png" alt="image-20200412114023050"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412112303993.png" alt="image-20200412112303993"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span><span class="string">` `</span><span class="keyword">table</span><span class="string">` `</span>staffs(</span><br><span class="line">  <span class="string">``</span><span class="keyword">id</span> <span class="string">``</span><span class="built_in">int</span><span class="string">` `</span>primary<span class="string">` `</span><span class="keyword">key</span><span class="string">` `</span>auto_increment,</span><br><span class="line">  <span class="string">``</span><span class="keyword">name</span><span class="string">` `</span><span class="built_in">varchar</span><span class="string">``</span>(<span class="number">24</span>) <span class="string">``</span><span class="keyword">not</span><span class="string">` `</span><span class="literal">null</span><span class="string">` `</span><span class="keyword">default</span><span class="string">` `</span><span class="string">''</span><span class="string">` `</span><span class="keyword">comment</span> <span class="string">``</span><span class="string">'姓名'</span><span class="string">``</span>,</span><br><span class="line">  <span class="string">``</span>age <span class="string">``</span><span class="built_in">int</span><span class="string">` `</span><span class="keyword">not</span><span class="string">` `</span><span class="literal">null</span><span class="string">` `</span><span class="keyword">default</span><span class="string">` `</span><span class="number">0</span> <span class="keyword">comment</span> <span class="string">``</span><span class="string">'年龄'</span><span class="string">``</span>,</span><br><span class="line">  <span class="string">``</span>pos <span class="string">``</span><span class="built_in">varchar</span><span class="string">``</span>(<span class="number">20</span>) <span class="string">``</span><span class="keyword">not</span><span class="string">` `</span><span class="literal">null</span><span class="string">` `</span><span class="keyword">default</span><span class="string">` `</span><span class="string">''</span><span class="string">` `</span><span class="keyword">comment</span> <span class="string">``</span><span class="string">'职位'</span><span class="string">``</span>,</span><br><span class="line">  <span class="string">``</span>add_time <span class="string">``</span><span class="built_in">timestamp</span><span class="string">` `</span><span class="keyword">not</span><span class="string">` `</span><span class="literal">null</span><span class="string">` `</span><span class="keyword">default</span><span class="string">` `</span><span class="keyword">current_timestamp</span><span class="string">` `</span><span class="keyword">comment</span> <span class="string">``</span><span class="string">'入职时间'</span></span><br><span class="line"> <span class="string">``</span>) <span class="keyword">charset</span> utf8 <span class="keyword">comment</span> <span class="string">``</span><span class="string">'员工记录表'</span><span class="string">``</span>;</span><br></pre></td></tr></table></figure><p>———–<code>alter</code> <code>table</code> <code>staffs ``add</code> <code>index</code> <code>idx_nap(``name``, age, pos);</code></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412122811227.png" alt="image-20200412122811227"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412122909739.png" alt="image-20200412122909739"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412122954509.png" alt="image-20200412122954509"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412123132925.png" alt="image-20200412123132925"></p><p>顺序可变</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412123310351.png" alt="image-20200412123310351"></p><p>只访问索引的查询, 索引覆盖, Extra = Using index</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412123430977.png" alt="image-20200412123430977"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412123618924.png" alt="image-20200412123618924"></p><p>当需要存储大量的URL，并且根据URL进行搜索查找，如果使用B+树，存储的内容就会很大</p><p>select id from url where url=””</p><p>也可以利用将url使用CRC32做哈希，可以使用以下查询方式：</p><p>select id fom url where url=”” and url_crc=CRC32(“”)</p><p>此查询性能较高原因是使用体积很小的索引来完成查找</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412123645897.png" alt="image-20200412123645897"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412124343123.png" alt="image-20200412124343123"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412124438272.png" alt="image-20200412124438272"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412133605454.png" alt="image-20200412133605454"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412133241914.png" alt="image-20200412133241914"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412133756408.png" alt="image-20200412133756408"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412133853963.png" alt="image-20200412133853963"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412134358329.png" alt="image-20200412134358329"></p><p>explain执行计划, 看type : system -&gt; const -&gt; ref -&gt; range -&gt; index -&gt; all</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412134254381.png" alt="image-20200412134254381"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412134421719.png" alt="image-20200412134421719"></p><p>前缀索引, 较少索引占用, 较少磁盘I/O, 提高效率<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412163826959.png" alt="image-20200412163826959"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412163701662.png" alt="image-20200412163701662"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412163947324.png" alt="image-20200412163947324"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412164838168.png" alt="image-20200412164838168"></p><p>Cardinality 近似值596 实际599<br>Cardinality 基数  Hyperloglog算法</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412164524956.png" alt="image-20200412164524956"></p><p>Redis, Kylin , 都用到基数</p><p>使用索引扫描排序 , 使用索引列排序, 默认asc升序</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412165909966.png" alt="image-20200412165909966"></p><p>in, or , union all 比较, 最好用in</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412171044627.png" alt="image-20200412171044627"></p><p>exist</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412171743853.png" alt="image-20200412171743853"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412165211929.png" alt="image-20200412165211929"></p><p>join</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412220944555.png" alt="image-20200412220944555"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412174505199.png" alt="image-20200412174505199"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200412221229021.png" alt="image-20200412221229021"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413062608592.png" alt="image-20200413062608592"></p><h4 id="4-查询优化"><a href="#4-查询优化" class="headerlink" title="4. 查询优化"></a>4. 查询优化</h4><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413063315696.png" alt="image-20200413063315696"></p><p>在编写快速的查询之前，需要清楚一点，真正重要的是响应时间，而且要知道在整个SQL语句的执行过程中每个步骤都花费了多长时间，要知道哪些步骤是拖垮执行效率的关键步骤，想要做到这点，必须要知道查询的生命周期，然后进行优化，不同的应用场景有不同的优化方式，不要一概而论，具体情况具体分析，</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413063524755.png" alt="image-20200413063524755"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413063539648.png" alt="image-20200413063539648"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413063640036.png" alt="image-20200413063640036"></p><p>数据量大, 不会用索引排序, 阈值约30%</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413064517705.png" alt="image-20200413064517705"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413064751910.png" alt="image-20200413064751910"></p><p>我们常常会误以为mysql会只返回需要的数据，实际上mysql却是先返回全部结果再进行计算，在日常的开发习惯中，经常是先用select语句查询大量的结果，然后获取前面的N行后关闭结果集。<br>优化方式是在查询后面添加limit</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413064826769.png" alt="image-20200413064826769"></p><p>select * from actor inner join film_actor using(actor_id) inner join film using(film_id) where film.title=’Academy Dinosaur’;</p><p>select actor.* from actor…;</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413064946925.png" alt="image-20200413064946925"></p><p>在公司的企业需求中，禁止使用select *,虽然这种方式能够简化开发，但是会影响查询的性能，所以尽量不要使用</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413065009204.png" alt="image-20200413065009204"></p><p>如果需要不断的重复执行相同的查询，且每次返回完全相同的数据，因此，基于这样的应用场景，我们可以将这部分数据缓存起来，这样的话能够提高查询效率</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413070428641.png" alt="image-20200413070428641"></p><p><strong>查询缓存:</strong><br>在解析一个查询语句之前，如果查询缓存是打开的，那么mysql会优先检查这个查询是否命中查询缓存中的数据，如果查询恰好命中了查询缓存，那么会在返回结果之前会检查用户权限，如果权限没有问题，那么mysql会跳过所有的阶段，就直接从缓存中拿到结果并返回给客户端</p><p><strong>查询优化处理:</strong><br>mysql查询完缓存之后会经过以下几个步骤：解析SQL、预处理、优化SQL执行计划，这几个步骤出现任何的错误，都可能会终止查询</p><p><strong>语法解析器和预处理:</strong><br>mysql通过关键字将SQL语句进行解析，并生成一颗解析树，mysql解析器将使用mysql语法规则验证和解析查询，例如验证使用使用了错误的关键字或者顺序是否正确等等，预处理器会进一步检查解析树是否合法，例如表名和列名是否存在，是否有歧义，还会验证权限等等</p><p><strong>查询优化器:</strong><br>当语法树没有问题之后，相应的要由优化器将其转成执行计划，一条查询语句可以使用非常多的执行方式，最后都可以得到对应的结果，但是不同的执行方式带来的效率是不同的，优化器的最主要目的就是要选择最有效的执行计划<br>mysql使用的是基于成本的优化器，在优化的时候会尝试预测一个查询使用某种查询计划时候的成本，并选择其中成本最小的一个<br>CBU: 基于成本优化 (MySQL)<br>RBU: 基于规则优化</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413070948481.png" alt="image-20200413070948481"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413071002617.png" alt="image-20200413071002617"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413071029245.png" alt="image-20200413071029245"></p><p>Context 上下文, 某一次会话中, 之前执行的操作对当前SQL语句的影响</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413072014177.png" alt="image-20200413072014177"></p><p>优化limmit10000,5</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413174813937.png" alt="image-20200413174813937"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413073459587.png" alt="image-20200413073459587"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413071113682.png" alt="image-20200413071113682"></p><p>两次传输排序:<br>第一次数据读取是将需要排序的字段读取出来，然后进行排序，第二次是将排好序的结果按照需要去读取数据行。<br>这种方式效率比较低，原因是第二次读取数据的时候因为已经排好序，需要去读取所有记录而此时更多的是随机IO，读取数据成本会比较高<br>两次传输的优势，在排序的时候存储尽可能少的数据，让排序缓冲区可以尽可能多的容纳行数来进行排序操作</p><p>单次传输排序:<br>先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结果，此方式只需要一次顺序IO读取所有的数据，而无须任何的随机IO，问题在于查询的列特别多的时候，会占用大量的存储空间，无法存储大量的数据</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413074455178.png" alt="image-20200413074455178"></p><p>count(1)和count(*)一样</p><p>count(field)不包含字段值为NULL的记录。count(<em>)包含NULL记录。select(</em>)与select(1) 在InnoDB中性能没有任何区别，处理方式相同。官方文档描述如下：InnoDB handles SELECT COUNT(*) and SELECT COUNT(1) operations in the same way. There is no performance difference.</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413175829196.png" alt="image-20200413175829196"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413175910030.png" alt="image-20200413175910030"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413175928842.png" alt="image-20200413175928842"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413180003988.png" alt="image-20200413180003988"></p><p>自定义变量, 加一列排序</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413180538800.png" alt="image-20200413180538800"></p><p>时间变量</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413181235174.png" alt="image-20200413181235174"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413181310576.png" alt="image-20200413181310576"></p><p>用变量, 出错, order by 可能会先与where执行</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413181838016.png" alt="image-20200413181838016"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413180038569.png" alt="image-20200413180038569"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413182856790.png" alt="image-20200413182856790"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413190620431.png" alt="image-20200413190620431"><br>5.5最多分1024ge<br>5.7  8196</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413183316150.png" alt="image-20200413183316150"></p><p>range分区</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413183545258.png" alt="image-20200413183545258"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200413183954569.png" alt="image-20200413183954569"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072046877.png" alt="image-20200414072046877"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072111984.png" alt="image-20200414072111984"></p><h4 id="5-服务器参数优化"><a href="#5-服务器参数优化" class="headerlink" title="5. 服务器参数优化"></a>5. 服务器参数优化</h4><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072233347.png" alt="image-20200414072233347"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072319805.png" alt="image-20200414072319805"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072434007.png" alt="image-20200414072434007"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414073456938.png" alt="image-20200414073456938"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414072507555.png" alt="image-20200414072507555"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414073531928.png" alt="image-20200414073531928"></p><p><strong>Redo log (InnoDB存储引擎中)</strong></p><p>Redo log Undo log 都属于InnoDB<br>Bin log 属于MySQL server<br>四种特性<br>A原子性, undo log<br>C最重要, 一致性是根本追求 通过AID实现<br>I 隔离级别 通过锁实现<br>D 持久性通过redo log<br>Redo log 循环写</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414074327779.png" alt="image-20200414074327779"></p><p>fsync() 系统调用<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414074932501.png" alt="image-20200414074932501"></p><p>DML增删改<br>持久化三种方式<br>第二种最安全<br>性能,安全权衡</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414075057350.png" alt="image-20200414075057350"></p><p><strong>Undo log 实现原子原子性 (InnoDB存储引擎中)</strong></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414080020674.png" alt="image-20200414080020674"></p><p>*<em>Bin log *</em></p><p>MyISAM不支持事务, 只能用bin log</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414080406899.png" alt="image-20200414080406899"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414080806807.png" alt="image-20200414080806807"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414082007433.png" alt="image-20200414082007433"></p><p>数据和日志分开, 保证两个日志数据一致再从内存写到磁盘</p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414082026834.png" alt="image-20200414082026834"></p><p>数据安全问题<br><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200414082906217.png" alt="image-20200414082906217"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200415182856782.png" alt="image-20200415182856782"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image-20200415184934017.png" alt="image-20200415184934017"></p><p><img src="/2020/07/03/MySQL%E8%B0%83%E4%BC%98/image/MySQL%E8%B0%83%E4%BC%98/image-20200415184957598.png" alt="image-20200415184957598"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务常见解决方案;</title>
      <link href="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p><strong>事务（Transaction）</strong>，一般是指要做的或所做的事情，由<strong>事务开始(begin transaction)</strong>和<strong>事务结束(end transaction)</strong>之间执行的全体操作组成。</p><p><strong>简单的讲就是，要么全部被执行，要么就全部失败。</strong></p><p>那<strong>分布式事务</strong>，自然就是运行在分布式系统中的事务，是由<strong>多个不同的机器上的事务组合而成</strong>的。同上，只有分布式系统中所有事务执行了才能是成功，否则失败。</p><p>事务的基本特征ACID：</p><ul><li>原子性（Atomicity）<ul><li>一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li></ul></li><li>一致性<ul><li>指事务执行前和执行后，数据是完整的。</li></ul></li><li>隔离性<ul><li>一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li></ul></li><li>持久性<ul><li>也称为永久性，一个事务一旦提交，它对数据库中数据的改变就应该是永久性的保存下来了。</li></ul></li></ul><hr><p><strong>分布式事务的目标：解决多个独立事务一致性的问题。</strong></p><p>我们遇到的问题：</p><p>分布式事务：一个功能，横跨多个微服务，由于每个微服务不在一个库，没法用数据库事务来保证事务。</p><p>网约车例子：乘客支付订单。支付系统中，支付表更新，订单系统，订单库 订单状态更新为已支付。</p><p>订单，支付表，在不同的库，如何保证两个库之间的事务。</p><p>支付操作：支付修改余额，修改订单状态。</p><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><h3 id="二阶段提交协议"><a href="#二阶段提交协议" class="headerlink" title="二阶段提交协议"></a>二阶段提交协议</h3><p>基于XA协议的，采取强一致性，遵从ACID.</p><p>2PC：（2阶段提交协议），是基于XA/JTA规范。</p><h4 id="XA"><a href="#XA" class="headerlink" title="XA"></a>XA</h4><p>XA是由X/Open组织提出的分布式事务的架构（或者叫协议）。XA架构主要定义了（全局）事务管理器（Transaction Manager）和（局部）资源管理器（Resource Manager）之间的接口。XA接口是双向的系统接口，在事务管理器（Transaction Manager）以及一个或多个资源管理器（Resource Manager）之间形成通信桥梁。也就是说，在基于XA的一个事务中，我们可以针对多个资源进行事务管理，例如一个系统访问多个数据库，或即访问数据库、又访问像消息中间件这样的资源。这样我们就能够实现在多个数据库和消息中间件直接实现全部提交、或全部取消的事务。XA规范不是java的规范，而是一种通用的规范。</p><h4 id="JTA"><a href="#JTA" class="headerlink" title="JTA"></a>JTA</h4><p>JTA(Java Transaction API)，是J2EE的编程接口规范，它是XA协议的JAVA实现。它主要定义了：</p><p>一个事务管理器的接口javax.transaction.TransactionManager，定义了有关事务的开始、提交、撤回等操作。<br>一个满足XA规范的资源定义接口javax.transaction.xa.XAResource，一种资源如果要支持JTA事务，就需要让它的资源实现该XAResource接口，并实现该接口定义的两阶段提交相关的接口。</p><blockquote><p>《二阶段提交协议》<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE.png" alt="二阶段提交协议"></p></blockquote><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.请求阶段（commit-request phase，或称表决阶段，voting phase）</span><br><span class="line">在请求阶段，协调者将通知事务参与者准备提交或取消事务，然后进入表决过程。</span><br><span class="line">在表决过程中，参与者将告知协调者自己的决策：同意（事务参与者本地作业执行成功）或取消（本地作业执行故障）。</span><br><span class="line"></span><br><span class="line">2.提交阶段（commit phase）</span><br><span class="line">在该阶段，协调者将基于第一个阶段的投票结果进行决策：提交或取消。</span><br><span class="line">当且仅当所有的参与者同意提交事务协调者才通知所有的参与者提交事务，否则协调者将通知所有的参与者取消事务。</span><br><span class="line">参与者在接收到协调者发来的消息后将执行响应的操作。</span><br></pre></td></tr></table></figure><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>单点故障</strong>：事务的发起、提交还是取消，均是由老大协调者管理的，只要协调者宕机，那就凉凉了。</li><li><strong>同步阻塞缺点</strong>：从上面介绍以及例子可看出，我们的参与系统中在没收到老大的真正提交还是取消事务指令的时候，就是锁定当前的资源，并不真正的做些事务相关操作，所以，整个分布式系统环境就是阻塞的。</li><li><strong>数据不一致缺点</strong>：就是说在老大协调者向小弟们发送真正提交事务的时候，部分网路故障，造成部分系统没收到真正的指令，那么就会出现部分提交部分没提交，因此，这就会导致数据的不一致。</li></ul><h4 id="无法解决的问题"><a href="#无法解决的问题" class="headerlink" title="无法解决的问题"></a>无法解决的问题</h4><p>当协调者出错，同时参与者也出错时，两阶段无法保证事务执行的完整性。<br>考虑协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。<br>那么即使有了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。知道的人已经被灭口了。</p><h3 id="三阶段提交协议"><a href="#三阶段提交协议" class="headerlink" title="三阶段提交协议"></a>三阶段提交协议</h3><p>采取强一致性，遵从ACID。</p><p>在二阶段上增加了：超时和预提交机制。</p><p>有这三个主阶段，canCommit、preCommit、doCommit这三个阶段</p><blockquote><p>《三阶段提交协议》<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE.png" alt="三阶段提交协议"></p></blockquote><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.CanCommit阶段</span><br><span class="line">3PC的CanCommit阶段其实和2PC的准备阶段很像。</span><br><span class="line">协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</span><br><span class="line"></span><br><span class="line">2.PreCommit阶段</span><br><span class="line">Coordinator根据Cohort的反应情况来决定是否可以继续事务的PreCommit操作。</span><br><span class="line">根据响应情况，有以下两种可能。</span><br><span class="line">A.假如Coordinator从所有的Cohort获得的反馈都是Yes响应，那么就会进行事务的预执行：</span><br><span class="line">发送预提交请求。Coordinator向Cohort发送PreCommit请求，并进入Prepared阶段。</span><br><span class="line">事务预提交。Cohort(一群大兵)接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</span><br><span class="line">响应反馈。如果Cohort成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。</span><br><span class="line"></span><br><span class="line">B.假如有任何一个Cohort向Coordinator发送了No响应，或者等待超时之后，Coordinator都没有接到Cohort的响应，那么就中断事务：</span><br><span class="line">发送中断请求。Coordinator向所有Cohort发送abort请求。</span><br><span class="line">中断事务。Cohort收到来自Coordinator的abort请求之后（或超时之后，仍未收到Cohort的请求），执行事务的中断。</span><br><span class="line"></span><br><span class="line">3.DoCommit阶段</span><br><span class="line"></span><br><span class="line">该阶段进行真正的事务提交，也可以分为以下两种情况:</span><br><span class="line"></span><br><span class="line">执行提交</span><br><span class="line"></span><br><span class="line">A.发送提交请求。Coordinator接收到Cohort发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有Cohort发送doCommit请求。</span><br><span class="line">B.事务提交。Cohort接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</span><br><span class="line">C.响应反馈。事务提交完之后，向Coordinator发送ACK响应。</span><br><span class="line">D.完成事务。Coordinator接收到所有Cohort的ACK响应之后，完成事务。</span><br><span class="line"></span><br><span class="line">中断事务</span><br><span class="line">协调者没有接收到参与者发送的ACK响应，那么就执行中断事务。</span><br><span class="line"></span><br><span class="line">A.发送中断请求</span><br><span class="line">协调者向所有参与者发送abort请求</span><br><span class="line">B.事务回滚</span><br><span class="line">参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</span><br><span class="line">C.反馈结果</span><br><span class="line">参与者完成事务回滚之后，向协调者发送ACK消息</span><br><span class="line">D.中断事务</span><br><span class="line">协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>如果进入PreCommit后，Coordinator发出的是abort请求，假设只有一个Cohort收到并进行了abort操作，<br>而其他对于系统状态未知的Cohort会根据3PC选择继续Commit，此时系统状态发生不一致性。</p><h4 id="2和3-的区别"><a href="#2和3-的区别" class="headerlink" title="2和3 的区别"></a>2和3 的区别</h4><p>加了询问，增大成功概率。</p><p>对于协调者(Coordinator)和参与者(Cohort)都设置了超时机制（在2PC中，只有协调者拥有超时机制，即如果在一定时间内没有收到cohort的消息则默认失败）。协调者挂了，参与者等待超时后，默认提交事务。有一丢进步。</p><p>如果参与者异常了，协调者也异常了，会造成其他参与者提交。</p><p>在2PC的准备阶段和提交阶段之间，插入预提交阶段，使3PC拥有CanCommit、PreCommit、DoCommit三个阶段。<br>PreCommit是一个缓冲，保证了在最后提交阶段之前各参与节点的状态是一致的。</p><h3 id="基于消息的最终一致性形式"><a href="#基于消息的最终一致性形式" class="headerlink" title="基于消息的最终一致性形式"></a>基于消息的最终一致性形式</h3><p>采取最终一致性，遵从BASE理论。</p><p><strong>BASE</strong>：全称是，Basically Avaliable（基本可用），Soft state（软状态），Eventually consistent（最终一致性）三个短语的缩写，来自eBay的架构师提出。</p><ul><li><strong>Basically Avaliable：</strong>就是在分布式系统环境中，允许牺牲掉部分不影响主流程的功能的不可用，将其降级以确保核心服务的正常可用。</li><li><strong>Soft state：</strong>就是指在事务中，我们允许系统存在中间状态，且并不影响我们这个系统。就拿数据库的主从复制来说，是完全允许复制的时候有延时的发生的。</li><li><strong>Eventually consistent：</strong>还是以数据库主从复制为例说，虽然主从复制有小延迟，但是很快最终就数据保持一致了。</li></ul><p>分布式事务不可能100%解决，只能提高成功概率。两阶段之间时间，毫秒级别。</p><p>补救措施：</p><p>定时任务补偿。程序或脚本补偿。</p><p>人工介入。</p><h3 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h3><p>解决方案：TCC（Try、Confirm、Cancel），两阶段补偿型方案。</p><p>从名字可以看出，实现一个事务，需要定义三个API：预先占有资源，确认提交实际操作资源，取消占有=回滚。</p><p>如果后两个环节执行一半失败了，记录日志，补偿处理，通知人工。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2PC：是资源层面的分布式事务，一直会持有资源的锁。</span><br><span class="line">如果跨十几个库，一下锁这么多数据库，会导致，极度浪费资源。降低了吞吐量。</span><br><span class="line">TCC：在业务层面的分布式事务，最终一致性，不会一直持有锁。将锁的粒度变小，每操作完一个库，就释放了锁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">都是相对的：如果每天只有一个请求，用2PC 比 TCC 要性能高。因为tcc多了多次接口调用。而此时的2PC 不怕占用资源，反正就一个调用。高并发场景下TCC 优势要大。</span><br></pre></td></tr></table></figure><p><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2PC%E5%92%8CTCC-1598184426566.png" alt="2PC和TCC"></p><h2 id="消息中间件实现"><a href="#消息中间件实现" class="headerlink" title="消息中间件实现"></a>消息中间件实现</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8161/index.html</span><br><span class="line">admin/admin</span><br></pre></td></tr></table></figure><p>《消息队列柔性事务》<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%9F%94%E6%80%A7%E4%BA%8B%E5%8A%A1.png" alt="消息队列柔性事务"></p><p>service-jms-consumer</p><p>service-jms-produce</p><p>本地事务+定时任务+消息队列+事件表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tbl_order_event` (</span><br><span class="line">  `id` int(16) NOT NULL,</span><br><span class="line">  `order_type` varchar(32) DEFAULT NULL COMMENT <span class="string">'事件类型（支付表支付完成，订单表修改状态）'</span>,</span><br><span class="line">  `process` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT <span class="string">'事件环节（new,published,processed)'</span>,</span><br><span class="line">  `content` varchar(255) DEFAULT NULL COMMENT <span class="string">'事件内容，保存事件发生时需要传递的数据'</span>,</span><br><span class="line">  `create_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  `update_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><h2 id="seata框架"><a href="#seata框架" class="headerlink" title="seata框架"></a>seata框架</h2><p><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">https://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p><p>《seata组件功能示意图》<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/seata%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="seata组件功能示意图"></p><h3 id="链接介绍概念"><a href="#链接介绍概念" class="headerlink" title="链接介绍概念"></a>链接介绍概念</h3><p>启动server：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\github\seata\bin</span><br></pre></td></tr></table></figure><p>地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localhost:8001/<span class="built_in">test</span>/rm1</span><br><span class="line"></span><br><span class="line">localhost:8001/<span class="built_in">test</span>/rm1-update</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>下载seata server。</p></li><li><p>修改file.conf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">  <span class="comment">#transaction service group mapping</span></span><br><span class="line">  <span class="comment">#修改，可不改,my_test_tx_group随便起名字。</span></span><br><span class="line">  vgroup_mapping.my_test_tx_group = <span class="string">"default"</span></span><br><span class="line">  <span class="comment">#only support when registry.type=file, please don't set multiple addresses</span></span><br><span class="line">  <span class="comment"># 此服务的地址</span></span><br><span class="line">  default.grouplist = <span class="string">"127.0.0.1:8091"</span></span><br><span class="line">  <span class="comment">#disable seata</span></span><br><span class="line">  disableGlobalTransaction = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store &#123;</span><br><span class="line">  <span class="comment">## store mode: file、db</span></span><br><span class="line">  <span class="comment"># 修改</span></span><br><span class="line">  mode = <span class="string">"db"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## file store property</span></span><br><span class="line">  file &#123;</span><br><span class="line">    <span class="comment">## store location dir</span></span><br><span class="line">    dir = <span class="string">"sessionStore"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">## database store property</span></span><br><span class="line">  <span class="comment">#db信息修改</span></span><br><span class="line">  db &#123;</span><br><span class="line">    <span class="comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class="line"></span><br><span class="line">    datasource = <span class="string">"druid"</span></span><br><span class="line">    <span class="comment">## mysql/oracle/h2/oceanbase etc.</span></span><br><span class="line">    db-type = <span class="string">"mysql"</span></span><br><span class="line">    driver-class-name = <span class="string">"com.mysql.cj.jdbc.Driver"</span></span><br><span class="line">    url = <span class="string">"jdbc:mysql://127.0.0.1:3306/seata-server?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai"</span></span><br><span class="line">    user = <span class="string">"root"</span></span><br><span class="line">    password = <span class="string">"root"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>registry.conf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  <span class="comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="comment">#修改</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"eureka"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">""</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#修改</span></span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="string">"http://localhost:8761/eureka"</span></span><br><span class="line">    application = <span class="string">"default"</span></span><br><span class="line">    weight = <span class="string">"1"</span></span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost:6379"</span></span><br><span class="line">    db = <span class="string">"0"</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:8500"</span></span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    serverAddr = <span class="string">"http://localhost:2379"</span></span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:9603"</span></span><br><span class="line">    application = <span class="string">"default"</span></span><br><span class="line">    region = <span class="string">"DEFAULT_ZONE"</span></span><br><span class="line">    datacenter = <span class="string">"DefaultDataCenter"</span></span><br><span class="line">    cluster = <span class="string">"default"</span></span><br><span class="line">    group = <span class="string">"SEATA_GROUP"</span></span><br><span class="line">    addressWaitTime = <span class="string">"3000"</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  <span class="comment"># file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">"file"</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">"localhost"</span></span><br><span class="line">    namespace = <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:8500"</span></span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = <span class="string">"seata-server"</span></span><br><span class="line">    apollo.meta = <span class="string">"http://192.168.1.204:8801"</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = <span class="string">"127.0.0.1:2181"</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = <span class="string">"http://localhost:2379"</span></span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="string">"file.conf"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库，并建表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">分支事务表</span><br><span class="line">CREATE TABLE `branch_table` (</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  KEY `idx_xid` (`xid`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">全局事务表</span><br><span class="line">CREATE TABLE `global_table` (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NOT NULL,</span><br><span class="line">  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `timeout` int(11) DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint(20) DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  KEY `idx_gmt_modified_status` (`gmt_modified`,`status`) USING BTREE,</span><br><span class="line">  KEY `idx_transaction_id` (`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">全局锁</span><br><span class="line">CREATE TABLE `lock_table` (</span><br><span class="line">  `row_key` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `xid` varchar(96) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `transaction_id` bigint(20) DEFAULT NULL,</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `table_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `pk` varchar(36) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`row_key`) USING BTREE,</span><br><span class="line">  KEY `idx_branch_id` (`branch_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure><p>表的结构不能错。</p></li><li><p>接着改RM中的数据库。在每个库中增加。用于回滚。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">用于RM回滚的。</span><br><span class="line">CREATE TABLE `undo_log` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `context` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `rollback_info` longblob NOT NULL,</span><br><span class="line">  `log_status` int(11) NOT NULL,</span><br><span class="line">  `log_created` datetime NOT NULL,</span><br><span class="line">  `log_modified` datetime NOT NULL,</span><br><span class="line">  `ext` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure></li><li><p>启动seata-server，（seata-server.bat），去eureka中看效果。</p></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h6 id="1-数据库本地事务"><a href="#1-数据库本地事务" class="headerlink" title="1. 数据库本地事务"></a>1. 数据库本地事务</h6><ol><li>ACID</li><li>Undo Log -&gt; 原子性   Redo Log -&gt; 持久性</li><li>锁 -&gt; 隔离性</li><li>AID -&gt; C<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200721221500066.png" alt="image-20200721221500066" style="zoom: 67%;"></li></ol><h6 id="2-分布式事务"><a href="#2-分布式事务" class="headerlink" title="2. 分布式事务"></a>2. 分布式事务</h6><h6 id="3-两阶段提交"><a href="#3-两阶段提交" class="headerlink" title="3. 两阶段提交"></a>3. 两阶段提交</h6><ol><li><p>一阶段: <strong>提交请求</strong></p><p>协调者 &amp; 参与者</p><ol><li>协调者向所有参与者发送prepare请求与事务内容，询问<strong>是否可以准备事务提交</strong>，并等待参与者的响应。</li><li>参与者<strong>执行事务</strong>中包含的操作，并<strong>记录</strong>undo<strong>日志</strong>（用于回滚）和redo日志（用于重放），但不真正提交。</li><li>参与者向协调者<strong>返回</strong>事务操作的<strong>执行结果</strong>，执行成功返回yes，否则返回no。<img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200721212437967.png" alt="image-20200721212437967" style="zoom: 80%;"></li></ol></li><li><p>二阶段: <strong>提交执行</strong></p><p>成功 / 失败两种情况若所有参与者都返回yes，说明事务可以提交：</p><ul><li>协调者向所有参与者发送commit请求。</li><li>参与者收到commit请求后，将事务<strong>真正地提交</strong>上去，并释放占用的事务资源，并向协调者返回ack。</li><li>协调者收到所有参与者的ack消息，事务成功完成。</li></ul><p>若有参与者返回no或者超时未返回，说明事务中断，需要回滚：</p><ul><li>协调者向所有参与者发送rollback请求。</li><li>参与者收到rollback请求后，根据<strong>undo日志回滚</strong>到事务执行前的状态，释放占用的事务资源，并向协调者返回ack。</li><li>协调者收到所有参与者的ack消息，事务回滚完成。</li></ul><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200721214433122.png" alt="image-20200721214433122" style="zoom:80%;"></li></ol><h6 id="4-三阶段提交-减少资源锁定的时间"><a href="#4-三阶段提交-减少资源锁定的时间" class="headerlink" title="4. 三阶段提交 (减少资源锁定的时间)"></a>4. 三阶段提交 (减少资源锁定的时间)</h6><p>区别于两阶段: 增加超时, 降低不通的可能性, 不能完全避免</p><p>二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个缺点的：</p><p>1、<strong>同步阻塞</strong>问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点<strong>访问公共资源</strong>不得不<strong>处于阻塞状态</strong>。</p><p>2、<strong>单点故障</strong>。由于协调者的重要性，一旦协<strong>调者发生故障</strong>。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于<strong>锁定事务资源</strong>的状态中，而无法继续完成事务操作。（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题）</p><p>3、<strong>数据不一致</strong>。在二阶段提交的阶段二中，当协调者向参与者发送<strong>commit请求之后</strong>，发生了<strong>局部网络异常</strong>或者在发送commit请求过程中协调者发生了故障，这回导致<strong>只有一部分参与者接受到了commit请求</strong>。而在这部分参与者接到commit请求之后就会执行commit操作。但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。</p><p>4、二阶段无法解决的问题：协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</p><p>二阶段提交存在着诸如<strong>同步阻塞、单点问题、脑裂</strong>等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p><ul><li>对于协调者(Coordinator)和参与者(Cohort)都<strong>设置了超时机制</strong>（在2PC中，只有协调者拥有超时机制，即如果在一定时间内没有收到cohort的消息则默认失败）。</li><li>在2PC的准备阶段和提交阶段之间，<strong>插入预提交阶段</strong>，使3PC拥有CanCommit、PreCommit、DoCommit三个阶段。</li><li>PreCommit是一个<strong>缓冲</strong>，<strong>保证</strong>了在最后<strong>提交</strong>阶段<strong>之前</strong>各参与节点的<strong>状态</strong>是<strong>一致</strong>的。</li></ul><blockquote><p><strong>CanCommit阶段</strong></p><p>3PC的CanCommit阶段其实和2PC的准备阶段很像。协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p><p>1.事务询问 协调者向参与者发送CanCommit请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。</p><p>2.响应反馈 参与者接到CanCommit请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应，并进入预备状态。否则反馈No<br><strong>PreCommit阶段</strong> (资源锁定)</p><p>协调者根据参与者的反应情况来决定是否可以记性事务的PreCommit操作。根据响应情况，有以下两种可能。</p><p>假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行。</p><p>1.发送预提交请求 协调者向参与者发送PreCommit请求，并进入Prepared阶段。</p><p>2.事务预提交 参与者接收到PreCommit请求后，会执行事务操作，并将undo和redo信息记录到事务日志中。</p><p>3.响应反馈 如果参与者成功的执行了事务操作，则返回ACK响应，同时开始等待最终指令。<br>假如有任何一个参与者向协调者发送了No响应，或者<strong>等待超时</strong>之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</p><p>1.发送中断请求 协调者向所有参与者发送abort请求。</p><p>2.中断事务 参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</p><p><strong>doCommit阶段</strong></p><p>该阶段进行真正的事务提交，也可以分为以下两种情况。</p><p>执行提交</p><p>1.发送提交请求 协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p><p>2.事务提交 参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p><p>3.响应反馈 事务提交完之后，向协调者发送Ack响应。</p><p>4.完成事务 协调者接收到所有参与者的ack响应之后，完成事务。</p><p>中断事务 协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能<strong>响应超时</strong>），那么就会执行<strong>中断事务</strong>。</p><p>1.发送中断请求 协调者向所有参与者发送abort请求</p><p>2.事务回滚 参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p><p>3.反馈结果 参与者完成事务回滚之后，向协调者发送ACK消息</p><p>4.中断事务 协调者接收到参与者反馈的ACK消息之后，执行事务的中断。<br>在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。（其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，那么协调者产生PreCommit请求的前提条件是他在第二阶段开始之前，收到所有参与者的CanCommit响应都是Yes。（一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了）所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。 ）</p></blockquote><h6 id="5-CAP-理论"><a href="#5-CAP-理论" class="headerlink" title="5. CAP 理论"></a>5. CAP 理论</h6><h6 id="6-BASE-理论"><a href="#6-BASE-理论" class="headerlink" title="6. BASE 理论"></a>6. BASE 理论</h6><h6 id="7-消息队列-事件表-手动实现分布式事务"><a href="#7-消息队列-事件表-手动实现分布式事务" class="headerlink" title="7. 消息队列 + 事件表 手动实现分布式事务"></a>7. 消息队列 + 事件表 手动实现分布式事务</h6><p>不适用大数据量</p><p>双事件表, 双定时</p><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200728214925283.png" alt="image-20200728214925283"><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200728215328574.png" alt="image-20200728215328574" style="zoom:80%;"><h6 id="支付系统"><a href="#支付系统" class="headerlink" title="支付系统"></a>支付系统</h6><p>2-3 发送消息队列失败, 可以集体回滚<br>事件表: 三级等保, 保留6个月数据<br>第三方回调信息: 计算回调成功率</p><p><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200728215805292.png" alt="image-20200728215805292"><br><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200728215855264.png" alt="image-20200728215855264" style="zoom: 80%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TblOrderEventDao tblOrderEventDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"0/5 * * * * ?"</span>) <span class="comment">// 五秒一次</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>) // 有异常就回滚<span class="title">update</span>操作</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">task</span>()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"定时任务开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;TblOrderEvent&gt; tblOrderEvents = tblOrderEventDao.selectByOrderType(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (TblOrderEvent event : tblOrderEvents) &#123;</span><br><span class="line">            <span class="comment">// 修改 oderType 为2</span></span><br><span class="line">            tblOrderEventDao.updateEvent(event.getOrderType());</span><br><span class="line">            System.out.println(<span class="string">"更新完成"</span>);</span><br><span class="line">            <span class="comment">// 序列化成JSON, 发送到队列</span></span><br><span class="line">            jmsMessagingTemplate.convertAndSend(queue,JSONObject.fromObject(event).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="订单系统"><a href="#订单系统" class="headerlink" title="订单系统"></a>订单系统</h6><img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200728220622196.png" alt="image-20200728220622196" style="zoom:80%;">                                      <img src="/2020/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/../../../只要学不死 就往死里学/note/网约车/image/taxi/image-20200728221659332.png" alt="image-20200728221659332" style="zoom: 80%;"><ul><li>3-1 监听 3-2 入库, 成功: 3-3 返回 mq.ack, 失败: 3-2 回滚, 3-3 恢复消息 mq.recovery</li><li>消息事件ID, 解决重复消费问题</li><li>消息队列存 Json 格式的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TblOrderEventDao tblOrderEventDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textMessage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JMSException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 监听消息队列</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"ActiveMQQueue"</span>, containerFactory = <span class="string">"jmsListenerContainerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span> <span class="params">(TextMessage textMessage, Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"收到消息: "</span> + textMessage.getText());</span><br><span class="line">            <span class="comment">// 拿到消息</span></span><br><span class="line">            String msg = textMessage.getText();</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            TblOrderEvent tblOrderEvent = (TblOrderEvent) JSONObject.toBean(JSONObject.fromObject(msg),TblOrderEvent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 插入到事件表, id不能自增, 利用主键冲突防止重复消费</span></span><br><span class="line">            tblOrderEventDao.insert(tblOrderEvent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入成功, 返回 ack</span></span><br><span class="line">            textMessage.acknowledge();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// e.getMessage(); 放到log</span></span><br><span class="line">            System.out.println(<span class="string">"异常"</span>);</span><br><span class="line">            <span class="comment">// 异常了, 恢复消息</span></span><br><span class="line">            session.recover();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 补偿处理: 人工 / 脚本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"DLQ.ActiveMQQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieve2</span> <span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"死信队列: "</span> + text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC原理及JVM调优;</title>
      <link href="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/"/>
      <url>/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="GC-及-JVM-Tuning"><a href="#GC-及-JVM-Tuning" class="headerlink" title="GC 及 JVM Tuning"></a>GC 及 JVM Tuning</h1><h3 id="GC的基础知识"><a href="#GC的基础知识" class="headerlink" title="GC的基础知识"></a>GC的基础知识</h3><h4 id="1-什么是垃圾"><a href="#1-什么是垃圾" class="headerlink" title="1.什么是垃圾"></a>1.什么是垃圾</h4><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514201439482.png" alt="image-20200514201439482" style="zoom: 50%;"><blockquote><p>C语言申请内存：malloc free</p><p>C++： new delete</p><p>c/C++ 手动回收内存，比较精确，开发效率低</p><p>Java: new ？</p><p>自动内存回收，编程上简单，系统不容易出错，手动释放内存，容易出两种类型的问题：</p><ol><li>忘记回收</li><li>多次回收</li></ol></blockquote><p>没有任何引用指向的一个对象或者多个对象（循环引用）</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514201402853.png" alt="image-20200514201402853" style="zoom:50%;"><h4 id="2-如何定位垃圾"><a href="#2-如何定位垃圾" class="headerlink" title="2.如何定位垃圾"></a>2.如何定位垃圾</h4><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514201631482.png" alt="image-20200514201631482" style="zoom: 50%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514201701612.png" alt="image-20200514201701612" style="zoom:50%;"><ol><li><p>引用计数（ReferenceCount）</p><p>不能解决循环引用，可能都是1</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514201758859.png" alt="image-20200514201758859" style="zoom:50%;"></li><li><p>根可达算法(RootSearching)</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514202139228.png" alt="image-20200514202139228" style="zoom:50%;"></li></ol><h4 id="3-常见的垃圾回收算法"><a href="#3-常见的垃圾回收算法" class="headerlink" title="3.常见的垃圾回收算法"></a>3.常见的垃圾回收算法</h4><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514202209712.png" alt="image-20200514202209712" style="zoom:50%;"><ol><li><p>标记清除(mark sweep) - 没用的标记出来，直接清掉，其他不动<br>不适合伊甸区<br>位置不连续，容易产生碎片，效率偏低（两遍扫描：1.找出有用的 2。找出没用的）<br>算法相对简单，存活对象比较多的情况下效率较高</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514202311041.png" alt="image-20200514202311041" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514202408229.png" alt="image-20200514202408229" style="zoom:67%;"></li><li><p>拷贝算法 (copying) - 有用的拷贝过来<br>适合伊甸区<br>浪费空间<br>移动复制对象，需要调整对象引用<br>适用于存活对象较少的情况，只扫描一次，效率提高</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514202909198.png" alt="image-20200514202909198" style="zoom:67%;">![image-20200514202929940](GC原理及JVM调优/image-20200514202929940.png)</li><li><p>标记压缩(mark compact) - 有用的聚到一起，没用的清掉，空间是连续的，慢<br>没有碎片，方便对象分配<br>不会产生内存减半<br>需要移动对象，效率偏低（两遍扫描，指针需要调整）</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514205704893.png" alt="image-20200514205704893" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514205752680.png" alt="image-20200514205752680" style="zoom:67%;"></li></ol><h4 id="4-JVM内存分代模型（用于分代垃圾回收算法）"><a href="#4-JVM内存分代模型（用于分代垃圾回收算法）" class="headerlink" title="4.JVM内存分代模型（用于分代垃圾回收算法）"></a>4.JVM内存分代模型（用于分代垃圾回收算法）</h4><ol><li><p>部分垃圾回收器使用的模型</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514210723893.png" alt="image-20200514210723893" style="zoom:67%;">新生代大量复制，少量存活，采用‘复制’算法老年代存活率高，回收较少，采用‘标记清除’或‘标记压缩’<blockquote><p>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型</p><p>G1是逻辑分代，物理不分代</p><p>除此之外不仅逻辑分代，而且物理分代</p></blockquote></li></ol><p>   逻辑分代：<br>   <img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/image-20200514215248207.png" alt="image-20200514215248207">新生代大量复制，少量存活，采用‘复制’算法<br>   老年代存活率高，回收较少，采用‘标记清除’或‘标记压缩’</p><ol start="2"><li><p>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace</p><ol><li>永久代 元数据 - Class</li><li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>MethodArea逻辑概念 - 永久代、元数据</li></ol></li><li><p>新生代 = Eden + 2个suvivor区<br>默认8:1:1</p><ol><li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li><li>再次YGC，活着的对象eden + s0 -&gt; s1</li><li>再次YGC，eden + s1 -&gt; s0</li><li>年龄足够 -&gt; 老年代 （15 CMS 6）</li><li>s区装不下 -&gt; 老年代</li></ol></li><li><p>老年代</p><ol><li>顽固分子</li><li>老年代满了FGC Full GC</li></ol></li><li><p>GC Tuning (Generation)</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514211954944.png" alt="image-20200514211954944" style="zoom:67%;"><ol><li>尽量减少FGC</li><li>MinorGC = YGC：年轻代空间耗尽时触发</li><li>MajorGC = FullGC：在老年代无法继续分配空间时触发，新生代</li><li>-Xms 最小内存</li><li>-Xmx 最大内存</li></ol></li><li><p>对象分配过程图</p><ol><li>首先尝试栈上分配，分配不下，进入伊甸区</li><li>1次垃圾回收之后，进入survivor幸存区，来回复制</li><li>多次垃圾回收之后，进入old去<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514211600983.png" alt="image-20200514211600983" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514214712694.png" alt="image-20200514214712694"></li></ol></li></ol><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514212726203.png" alt="image-20200514212726203" style="zoom: 80%;"><ol><li>什么情况下，栈上分配（无需人工调整）<ol><li>线程私有的小对象</li><li>无逃逸：只在某一段代码使用，没有被外部引用所引用<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514213900741.png" alt="image-20200514213900741" style="zoom: 67%;"></li><li>支持标量替换：用普通属性代替整个对象</li></ol></li><li>什么情况下，线程本地分配TLAB<ol><li>每个线程在eden取1%的空间，分配对象时，优先往这块空间分配</li></ol></li></ol><h6 id="何时进入老年代"><a href="#何时进入老年代" class="headerlink" title="何时进入老年代"></a>何时进入老年代</h6><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514213945581.png" alt="image-20200514213945581" style="zoom:67%;"><ol><li>Mark word对象头中，GC的Age是4位，最大15，不能调大</li><li>Eden + S1 进入S2，超过S2的50%，年龄最大的放进Old<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514214444383.png" alt="image-20200514214444383" style="zoom: 67%;"></li></ol><p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.png" alt></p><ol><li>动态年龄：（不重要）<br><a href="https://www.jianshu.com/p/989d3b06a49d" target="_blank" rel="noopener">https://www.jianshu.com/p/989d3b06a49d</a></li><li>分配担保：（不重要）<br>YGC期间 survivor区空间不够了 空间担保直接进入老年代<br>参考：<a href="https://cloud.tencent.com/developer/article/1082730" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1082730</a></li></ol><h4 id="5-常见的垃圾回收器"><a href="#5-常见的垃圾回收器" class="headerlink" title="5.常见的垃圾回收器"></a>5.常见的垃圾回收器</h4><p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/image-20200514225853468.png" alt="image-20200514225853468"></p><p>JDK诞生 Serial(单线程)第一个诞生 提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，但是CMS毛病较多，因此目前任何一个JDK版本默认是CMS<br>并发垃圾回收是因为无法忍受STW</p><p>常见组合：这些逻辑上，物理上都分代<br><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514221637508.png" alt="image-20200514221637508" style="zoom: 67%;"></p><p>G1：只在逻辑上分代</p><ol><li><p>Serial(单线程) 年轻代 串行回收：回收时，其他线程都停止(STW)<br>safe point：在安全点上，停止<br>单CPU效率最高<br>停顿时间长<br>用的极少</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514222109594.png" alt="image-20200514222109594" style="zoom:67%;"></li></ol><ol start="2"><li><p>SerialOld ：MS或MC算法</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514222439096.png" alt="image-20200514222439096" style="zoom: 50%;"></li><li><p>(默认PS+PO)Parallel Scavenge 年轻代 并行回收，多线程清理垃圾<br>STW, COPY</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514222721561.png" alt="image-20200514222721561" style="zoom:50%;"></li><li><p>(默认)Parallel Old<br>MC</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514222947737.png" alt="image-20200514222947737" style="zoom:50%;"></li><li><p>ParNew 年轻代 配合CMS的并行回收</p><p>没有不会产生STW的垃圾回收器<br>增强了PS, 配合CMS</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514223309422.png" alt="image-20200514223309422" style="zoom:50%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514223523536.png" alt="image-20200514223523536" style="zoom:67%;"></li><li><p>CMS</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514223553121.png" alt="image-20200514223553121" style="zoom: 67%;">CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，但是CMS毛病较多，因此目前任何一个JDK版本默认是CMS<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514223735412.png" alt="image-20200514223735412" style="zoom: 50%;">垃圾回收线程和其他线程同时执行并发垃圾回收是因为无法忍受STW (内存很大的时候)<ol><li>初始标记：STW很短, 只标记根对象<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514224446760.png" alt="image-20200514224446760" style="zoom:50%;"></li><li>并发标记：并发标记有引用的对象, 时间最长，和应用程序同时运行<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514224502994.png" alt="image-20200514224502994" style="zoom:50%;"></li><li>重新标记：STW很短, 把并发标记时新产生的垃圾取消标记, 重新标记被引用的垃圾对象<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514224540674.png" alt="image-20200514224540674" style="zoom:50%;"></li><li>并发清理：还会产生浮动垃圾<img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514224623029.png" alt="image-20200514224623029" style="zoom:50%;"></li></ol><p>ConcurrentMarkSweep 老年代 并发的， 垃圾回收和应用程序同时运行，降低STW的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配</p><p>对象分配不下的时候，使用SerialOld 进行老年代回收</p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200514225129294.png" alt="image-20200514225129294" style="zoom:50%;"><p>想象一下：<br>PS + PO -&gt; 加内存 换垃圾回收器 -&gt; PN + CMS + SerialOld（几个小时 - 几天的STW）<br>几十个G的内存，单线程回收 -&gt; G1 + FGC 几十个G -&gt; 上T内存的服务器 ZGC<br>算法：三色标记 + Incremental Update</p></li><li><p>G1(10ms)<br>算法：三色标记 + SATB</p></li><li><p>ZGC (1ms) PK C++<br>算法：ColoredPointers + LoadBarrier</p></li><li><p>Shenandoah<br>算法：ColoredPointers + WriteBarrier</p></li><li><p>Eplison</p></li><li><p>PS 和 PN区别的延伸阅读：<br>▪<a href="https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html#GUID-3D0BB91E-9BFF-4EBB-B523-14493A860E73</a></p></li><li><p>垃圾收集器跟内存大小的关系</p><ol><li>Serial 几十兆</li><li>PS 上百兆 - 几个G</li><li>CMS - 20G</li><li>G1 - 上百G</li><li>ZGC - 4T - 16T（JDK13）</li></ol></li></ol><p>1.8默认的垃圾回收：PS + ParallelOld</p><h3 id="常见垃圾回收器组合参数设定：-1-8"><a href="#常见垃圾回收器组合参数设定：-1-8" class="headerlink" title="常见垃圾回收器组合参数设定：(1.8)"></a>常见垃圾回收器组合参数设定：(1.8)</h3><ul><li><p>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old</p><ul><li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li></ul></li><li><p>-XX:+UseParNewGC = ParNew + SerialOld</p><ul><li>这个组合已经很少用（在某些版本中已经废弃）</li><li><a href="https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future" target="_blank" rel="noopener">https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future</a></li></ul></li><li><p>-XX:+UseConc<font color="red">(urrent)</font>MarkSweepGC = ParNew + CMS + Serial Old</p></li><li><p>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</p></li><li><p>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</p></li><li><p>-XX:+UseG1GC = G1</p></li><li><p>Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC </p><ul><li>java +XX:+PrintCommandLineFlags -version</li><li>通过GC的日志来分辨</li></ul></li><li><p>Linux下1.8版本默认的垃圾回收器到底是什么？</p><ul><li>1.8.0_181 默认（看不出来）Copy MarkCompact</li><li>1.8.0_222 默认 PS + PO</li></ul></li></ul><h3 id="JVM调优第一步，了解JVM常用命令行参数"><a href="#JVM调优第一步，了解JVM常用命令行参数" class="headerlink" title="JVM调优第一步，了解JVM常用命令行参数"></a>JVM调优第一步，了解JVM常用命令行参数</h3><ul><li><p>JVM的命令行参数参考：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p>HotSpot参数分类</p><blockquote><p>标准： - 开头，所有的HotSpot都支持</p><p>非标准：-X 开头，特定版本HotSpot支持特定命令</p><p>不稳定：-XX 开头，下个版本可能取消</p></blockquote><p>java -version</p><p>java -X</p></li></ul><p>  试验用程序：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloGC</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"HelloGC!"</span>);</span><br><span class="line">    List list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">      list.add(b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>区分概念：内存泄漏memory leak，内存溢出out of memory</li><li>java -XX:+PrintCommandLineFlags HelloGC</li><li>java -Xmn10M -Xms40M -Xmx60M -XX:+PrintCommandLineFlags -XX:+PrintGC  HelloGC<br>PrintGCDetails PrintGCTimeStamps PrintGCCauses</li><li>java -XX:+UseConcMarkSweepGC -XX:+PrintCommandLineFlags HelloGC</li><li>java -XX:+PrintFlagsInitial 默认参数值</li><li>java -XX:+PrintFlagsFinal 最终参数值</li><li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li><li>java -XX:+PrintFlagsFinal -version |grep GC</li></ol><h3 id="PS-GC日志详解"><a href="#PS-GC日志详解" class="headerlink" title="PS GC日志详解"></a>PS GC日志详解</h3><p>每种垃圾回收器的日志格式是不同的！</p><p>PS日志格式</p><p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/GC%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.png" alt="GC日志详解"></p><p>heap dump部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eden space <span class="number">5632</span>K, <span class="number">94</span>% used [<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ffeb3e28</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">                            后面的内存地址指的是，起始地址，使用空间结束地址，整体空间结束地址</span><br></pre></td></tr></table></figure><p><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/GCHeapDump.png" alt="GCHeapDump"></p><p>total = eden + 1个survivor</p><h3 id="调优前的基础概念："><a href="#调优前的基础概念：" class="headerlink" title="调优前的基础概念："></a>调优前的基础概念：</h3><ol><li>吞吐量：用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li><li>响应时间：STW越短，响应时间越好</li></ol><p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p><p>问题：</p><p>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）</p><p>响应时间：网站 GUI API （1.8 G1）</p><h3 id="什么是调优？"><a href="#什么是调优？" class="headerlink" title="什么是调优？"></a>什么是调优？</h3><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢，卡顿）</li><li>解决JVM运行过程中出现的各种问题(OOM)</li></ol><h3 id="调优，从规划开始"><a href="#调优，从规划开始" class="headerlink" title="调优，从规划开始"></a>调优，从规划开始</h3><ul><li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p></li><li><p>无监控（压力测试，能看到结果），不调优</p></li><li><p>步骤：</p><ol><li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol><li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li><li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li></ol></li><li>选择回收器组合</li><li>计算内存需求（经验值 1.5G 16G）</li><li>选定CPU（越高越好）</li><li>设定年代大小、升级年龄</li><li>设定日志参数<ol><li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li><li>或者每天产生一个日志文件</li></ol></li><li>观察日志情况</li></ol></li><li><p>案例1：垂直电商，最高每日百万订单，处理订单系统需要什么样的服务器配置？</p><blockquote><p>这个问题比较业余，因为很多不同的服务器配置都能支撑(1.5G 16G)</p><p>1小时360000集中时间段， 100个订单/秒，（找一小时内的高峰期，1000订单/秒）</p><p>经验值，</p><p>非要计算：一个订单产生需要多少内存？512K * 1000 500M内存</p><p>专业一点儿问法：要求响应时间100ms</p><p>压测！</p></blockquote></li><li><p>案例2：12306遭遇春节大规模抢票应该如何支撑？</p><blockquote><p>12306应该是中国并发量最大的秒杀网站：</p><p>号称并发量100W最高</p><p>CDN -&gt; LVS -&gt; NGINX -&gt; 业务系统 -&gt; 每台机器1W并发（10K问题） 100台机器</p><p>普通电商订单 -&gt; 下单 -&gt;订单系统（IO）减库存 -&gt;等待用户付款</p><p>12306的一种可能的模型： 下单 -&gt; 减库存 和 订单(redis kafka) 同时异步进行 -&gt;等付款</p><p>减库存最后还会把压力压到一台服务器</p><p>可以做分布式本地库存 + 单独服务器做库存均衡</p><p>大流量的处理方法：分而治之</p></blockquote></li><li><p>怎么得到一个事务会消耗多少内存？</p><blockquote><ol><li><p>弄台机器，看能承受多少TPS？是不是达到目标？扩容或调优，让它达到</p></li><li><p>用压测来确定</p></li></ol></blockquote></li></ul><h3 id="优化环境"><a href="#优化环境" class="headerlink" title="优化环境"></a>优化环境</h3><ol><li>有一个50万PV的资料类网站（从磁盘提取文档到内存）原服务器32位，1.5G<br>的堆，用户反馈网站比较缓慢，因此公司决定升级，新的服务器为64位，16G<br>的堆内存，结果用户反馈卡顿十分严重，反而比以前效率更低了<ol><li>为什么原网站慢?<br>很多用户浏览数据，很多数据load到内存，内存不足，频繁GC，STW长，响应时间变慢</li><li>为什么会更卡顿？<br>内存越大，FGC时间越长</li><li>咋办？<br>PS -&gt; PN + CMS 或者 G1</li></ol></li><li>系统CPU经常100%，如何调优？(面试高频)<br>CPU100%那么一定有线程在占用系统资源，<ol><li>找出哪个进程cpu高（top）</li><li>该进程中的哪个线程cpu高（top -Hp）</li><li>导出该线程的堆栈 (jstack)</li><li>查找哪个方法（栈帧）消耗时间 (jstack)</li><li>工作线程占比高 | 垃圾回收线程占比高</li></ol></li><li>系统内存飙高，如何查找问题？（面试高频）<ol><li>导出堆内存 (jmap)</li><li>分析 (jhat jvisualvm mat jprofiler … )</li></ol></li><li>如何监控JVM<ol><li>jstat jvisualvm jprofiler arthas top…</li></ol></li></ol><h3 id="解决JVM运行中的问题"><a href="#解决JVM运行中的问题" class="headerlink" title="解决JVM运行中的问题"></a>解决JVM运行中的问题</h3><h4 id="一个案例理解常用工具"><a href="#一个案例理解常用工具" class="headerlink" title="一个案例理解常用工具"></a>一个案例理解常用工具</h4><ol><li><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.jvm.gc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中读取信用数据，套用模型，并把结果进行记录和传输</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T15_FullGC_Problem01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CardInfo</span> </span>&#123;</span><br><span class="line">        BigDecimal price = <span class="keyword">new</span> BigDecimal(<span class="number">0.0</span>);</span><br><span class="line">        String name = <span class="string">"张三"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">5</span>;</span><br><span class="line">        Date birthdate = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">50</span>,</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        executor.setMaximumPoolSize(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            modelFit();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modelFit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = getAllCardInfo();</span><br><span class="line">        taskList.forEach(info -&gt; &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">            executor.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">                <span class="comment">//do sth with info</span></span><br><span class="line">                info.m();</span><br><span class="line"></span><br><span class="line">            &#125;, <span class="number">2</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;CardInfo&gt; <span class="title">getAllCardInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            CardInfo ci = <span class="keyword">new</span> CardInfo();</span><br><span class="line">            taskList.add(ci);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> taskList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>java -Xms200M -Xmx200M -XX:+PrintGC com.mashibing.jvm.gc.T15_FullGC_Problem01</p></li><li><p>一般是运维团队首先受到报警信息（CPU Memory）</p></li><li><p>top命令观察到问题：内存不断增长 CPU占用率居高不下</p></li><li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p></li><li><p>jps定位具体java进程<br>jstack 定位线程状况，重点关注：WAITING BLOCKED<br>eg.<br>waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE<br>作业：1：写一个死锁程序，用jstack观察 2 ：写一个程序，一个线程持有锁不释放，其他线程等待</xx></xx></p></li><li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称<br>怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p></li><li><p>jinfo pid </p></li><li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）<br>jstat -gc 4655 500 : 每个500个毫秒打印GC的情况<br>如果面试官问你是怎么定位OOM问题的？如果你回答用图形界面（错误）<br>1：已经上线的系统不用图形界面用什么？（cmdline arthas）<br>2：图形界面到底用在什么地方？测试！测试的时候进行监控！（压测观察）</p></li><li><p>jmap - histo 4655 | head -20，查找有多少对象产生</p></li><li><p>jmap -dump:format=b,file=xxx pid ：</p><p>线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿（电商不适合）<br>1：设定了参数HeapDump，OOM的时候会自动产生堆转储文件<br>2：<font color="red">很多服务器备份（高可用），停掉这台服务器对其他服务器不影响</font><br>3：在线定位(一般小点儿公司用不到)</p></li><li><p>java -Xms20M -Xmx20M -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError com.mashibing.jvm.gc.T15_FullGC_Problem01</p></li><li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br> <a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html" target="_blank" rel="noopener">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a><br>jhat -J-mx512M xxx.dump<br><a href="http://192.168.17.11:7000" target="_blank" rel="noopener">http://192.168.17.11:7000</a><br>拉到最后：找到对应链接<br>可以使用OQL查找特定问题对象</p></li><li><p>找到代码的问题</p></li></ol><h4 id="jconsole远程连接"><a href="#jconsole远程连接" class="headerlink" title="jconsole远程连接"></a>jconsole远程连接</h4><ol><li><p>程序启动加入参数：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=192.168.17.11 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=11111 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false XXX</span><br></pre></td></tr></table></figure></blockquote></li><li><p>如果遭遇 Local host name unknown：XXX的错误，修改/etc/hosts文件，把XXX加入进去</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.17</span><span class="number">.11</span> basic localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure></blockquote></li><li><p>关闭linux防火墙（实战中应该打开对应端口）</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off #永久关闭</span><br></pre></td></tr></table></figure></blockquote></li><li><p>windows上打开 jconsole远程连接 192.168.17.11:11111</p></li></ol><h4 id="jvisualvm远程连接"><a href="#jvisualvm远程连接" class="headerlink" title="jvisualvm远程连接"></a>jvisualvm远程连接</h4><p> <a href="https://www.cnblogs.com/liugh/p/7620336.html" target="_blank" rel="noopener">https://www.cnblogs.com/liugh/p/7620336.html</a> （简单做法）</p><h4 id="jprofiler-收费"><a href="#jprofiler-收费" class="headerlink" title="jprofiler (收费)"></a>jprofiler (收费)</h4><h4 id="arthas在线排查工具"><a href="#arthas在线排查工具" class="headerlink" title="arthas在线排查工具"></a>arthas在线排查工具</h4><ul><li>为什么需要在线排查？<br>在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li><li>jvm观察jvm信息</li><li>thread定位线程问题</li><li>dashboard 观察系统情况</li><li>heapdump + jhat分析</li><li>jad反编译<br>动态代理生成类的问题定位<br>第三方的类（观察代码）<br>版本问题（确定自己最新提交的版本是不是被使用）</li><li>redefine 热替换<br>目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性<br>m() -&gt; mm()</li><li>sc  - search class</li><li>watch  - watch method</li><li>没有包含的功能：jmap</li></ul><h3 id="GC算法的基础概念"><a href="#GC算法的基础概念" class="headerlink" title="GC算法的基础概念"></a>GC算法的基础概念</h3><ul><li>Card Table<br>由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card<br>在结构上，Card Table用BitMap来实现</li></ul><h4 id="G1-垃圾优先-停200ms内-逻辑分代-分而治之的思想"><a href="#G1-垃圾优先-停200ms内-逻辑分代-分而治之的思想" class="headerlink" title="G1: 垃圾优先 (停200ms内, 逻辑分代, 分而治之的思想)"></a>G1: 垃圾优先 (停200ms内, 逻辑分代, 分而治之的思想)</h4><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525205925292.png" alt="image-20200525205925292" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525210259678.png" alt="image-20200525210259678" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525210355804.png" alt="image-20200525210355804" style="zoom:80%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525210539634.png" alt="image-20200525210539634" style="zoom: 67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525210626011.png" alt="image-20200525210626011" style="zoom:67%;"><img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525210709897.png" alt="image-20200525210709897" style="zoom:67%;"><h4 id="CMS-JDK8是Parallel-JDK9是G1-但是CMS开创了并发回收的先河"><a href="#CMS-JDK8是Parallel-JDK9是G1-但是CMS开创了并发回收的先河" class="headerlink" title="CMS  (JDK8是Parallel, JDK9是G1, 但是CMS开创了并发回收的先河)"></a>CMS  (JDK8是Parallel, JDK9是G1, 但是CMS开创了并发回收的先河)</h4><ol><li><p>初始标记: (STW 很短) 通过GCRoot找到根对象</p></li><li><p>并发标记: (最耗时, 没有stw) 找到所有有引用的对象 和工作线程同时工作. 产生浮动垃圾, 因为工作在改变引用</p></li><li><p>重新标记: (STW 很短) 并发标记时, 取消标记产生的新垃圾, 标记重新被引用的垃圾对象</p></li><li><p>并发清理: 清理没有</p></li></ol><p>   <img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/image-20200525203133244.png" alt="image-20200525203133244"></p>   <img src="/2020/06/23/GC%E5%8E%9F%E7%90%86%E5%8F%8AJVM%E8%B0%83%E4%BC%98/../../../只要学不死 就往死里学/note/JVM/image/05_GC and Tuning/image-20200525201039210.png" alt="image-20200525201039210" style="zoom: 67%;"><h4 id="CMS的问题"><a href="#CMS的问题" class="headerlink" title="CMS的问题"></a>CMS的问题</h4><ol><li><p>Memory Fragmentation  内存碎片化 , 所以尽可能避免FGC</p><blockquote><p>-XX:+UseCMSCompactAtFullCollection<br>-XX:CMSFullGCsBeforeCompaction 默认为0 指的是经过多少次FGC才进行压缩</p></blockquote></li><li><p>Floating Garbage  浮动垃圾</p><blockquote><p>Concurrent Mode Failure<br>产生：if the concurrent collector is unable to finish reclaiming the unreachable objects before the tenured generation fills up, or if an allocation cannot be satisfiedwith the available free space blocks in the tenured generation, then theapplication is paused and the collection is completed with all the applicationthreads stopped</p><p>解决方案：降低触发CMS的阈值</p><p>PromotionFailed</p><p>解决方案类似，保持老年代有足够的空间</p><p>–XX:CMSInitiatingOccupancyFraction 92% 可以降低这个值，让CMS保持老年代足够的空间</p></blockquote></li></ol><h4 id="CMS日志分析"><a href="#CMS日志分析" class="headerlink" title="CMS日志分析"></a>CMS日志分析</h4><p>执行命令：java -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC com.mashibing.jvm.gc.T15_FullGC_Problem01</p><p>[GC (Allocation Failure) [ParNew: 6144K-&gt;640K(6144K), 0.0265885 secs] 6585K-&gt;2770K(19840K), 0.0268035 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] </p><blockquote><p>ParNew：年轻代收集器</p><p>6144-&gt;640：收集前后的对比</p><p>（6144）：整个年轻代容量</p><p>6585 -&gt; 2770：整个堆的情况</p><p>（19840）：整个堆大小</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[GC (CMS Initial Mark) [<span class="number">1</span> CMS-initial-mark: <span class="number">8511</span>K(<span class="number">13696</span>K)] <span class="number">9866</span>K(<span class="number">19840</span>K), <span class="number">0.0040321</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="comment">//8511 (13696) : 老年代使用（最大）</span></span><br><span class="line"><span class="comment">//9866 (19840) : 整个堆使用（最大）</span></span><br><span class="line">[CMS-concurrent-mark-start]</span><br><span class="line">[CMS-concurrent-mark: <span class="number">0.018</span>/<span class="number">0.018</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs] </span><br><span class="line"><span class="comment">//这里的时间意义不大，因为是并发执行</span></span><br><span class="line">[CMS-concurrent-preclean-start]</span><br><span class="line">[CMS-concurrent-preclean: <span class="number">0.000</span>/<span class="number">0.000</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="comment">//标记Card为Dirty，也称为Card Marking</span></span><br><span class="line">[GC (CMS Final Remark) [YG occupancy: 1597 K (6144 K)][Rescan (parallel) , 0.0008396 secs][weak refs processing, 0.0000138 secs][class unloading, 0.0005404 secs][scrub symbol table, 0.0006169 secs][scrub string table, 0.0004903 secs][1 CMS-remark: 8511K(13696K)] 10108K(19840K), 0.0039567 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"><span class="comment">//STW阶段，YG occupancy:年轻代占用及容量</span></span><br><span class="line"><span class="comment">//[Rescan (parallel)：STW下的存活对象标记</span></span><br><span class="line"><span class="comment">//weak refs processing: 弱引用处理</span></span><br><span class="line"><span class="comment">//class unloading: 卸载用不到的class</span></span><br><span class="line"><span class="comment">//scrub symbol(string) table: </span></span><br><span class="line"><span class="comment">//cleaning up symbol and string tables which hold class-level metadata and </span></span><br><span class="line"><span class="comment">//internalized string respectively</span></span><br><span class="line"><span class="comment">//CMS-remark: 8511K(13696K): 阶段过后的老年代占用及容量</span></span><br><span class="line"><span class="comment">//10108K(19840K): 阶段过后的堆占用及容量</span></span><br><span class="line"></span><br><span class="line">[CMS-concurrent-sweep-start]</span><br><span class="line">[CMS-concurrent-sweep: <span class="number">0.005</span>/<span class="number">0.005</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line"><span class="comment">//标记已经完成，进行并发清理</span></span><br><span class="line">[CMS-concurrent-reset-start]</span><br><span class="line">[CMS-concurrent-reset: <span class="number">0.000</span>/<span class="number">0.000</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line"><span class="comment">//重置内部结构，为下次GC做准备</span></span><br></pre></td></tr></table></figure><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><ol><li>▪<a href="https://www.oracle.com/technical-resources/articles/java/g1gc.html" target="_blank" rel="noopener">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a></li></ol><h4 id="G1日志详解"><a href="#G1日志详解" class="headerlink" title="G1日志详解"></a>G1日志详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function">GC <span class="title">pause</span> <span class="params">(G1 Evacuation Pause)</span> <span class="params">(young)</span> <span class="params">(initial-mark)</span>, 0.0015790 secs]</span></span><br><span class="line"><span class="function"><span class="comment">//young -&gt; 年轻代 Evacuation-&gt; 复制存活对象 </span></span></span><br><span class="line"><span class="function"><span class="comment">//initial-mark 混合回收的阶段，这里是YGC混合老年代回收</span></span></span><br><span class="line"><span class="function">   [Parallel Time: 1.5 ms, GC Workers: 1] <span class="comment">//一个GC线程</span></span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Start</span> <span class="params">(ms)</span>:  92635.7]</span></span><br><span class="line"><span class="function">      [Ext Root <span class="title">Scanning</span> <span class="params">(ms)</span>:  1.1]</span></span><br><span class="line"><span class="function">      [Update <span class="title">RS</span> <span class="params">(ms)</span>:  0.0]</span></span><br><span class="line"><span class="function">         [Processed Buffers:  1]</span></span><br><span class="line"><span class="function">      [Scan <span class="title">RS</span> <span class="params">(ms)</span>:  0.0]</span></span><br><span class="line"><span class="function">      [Code Root <span class="title">Scanning</span> <span class="params">(ms)</span>:  0.0]</span></span><br><span class="line"><span class="function">      [Object <span class="title">Copy</span> <span class="params">(ms)</span>:  0.1]</span></span><br><span class="line"><span class="function">      [<span class="title">Termination</span> <span class="params">(ms)</span>:  0.0]</span></span><br><span class="line"><span class="function">         [Termination Attempts:  1]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Other</span> <span class="params">(ms)</span>:  0.0]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">Total</span> <span class="params">(ms)</span>:  1.2]</span></span><br><span class="line"><span class="function">      [GC Worker <span class="title">End</span> <span class="params">(ms)</span>:  92636.9]</span></span><br><span class="line"><span class="function">   [Code Root Fixup: 0.0 ms]</span></span><br><span class="line"><span class="function">   [Code Root Purge: 0.0 ms]</span></span><br><span class="line"><span class="function">   [Clear CT: 0.0 ms]</span></span><br><span class="line"><span class="function">   [Other: 0.1 ms]</span></span><br><span class="line"><span class="function">      [Choose CSet: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Ref Proc: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Ref Enq: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Redirty Cards: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Humongous Register: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Humongous Reclaim: 0.0 ms]</span></span><br><span class="line"><span class="function">      [Free CSet: 0.0 ms]</span></span><br><span class="line"><span class="function">   [Eden: 0.0<span class="title">B</span><span class="params">(<span class="number">1024.0</span>K)</span>-&gt;0.0<span class="title">B</span><span class="params">(<span class="number">1024.0</span>K)</span> Survivors: 0.0B-&gt;0.0B Heap: 18.8<span class="title">M</span><span class="params">(<span class="number">20.0</span>M)</span>-&gt;18.8<span class="title">M</span><span class="params">(<span class="number">20.0</span>M)</span>]</span></span><br><span class="line"><span class="function"> [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line"><span class="comment">//以下是混合回收其他阶段</span></span><br><span class="line">[GC concurrent-root-region-scan-start]</span><br><span class="line">[GC concurrent-root-region-scan-end, <span class="number">0.0000078</span> secs]</span><br><span class="line">[GC concurrent-mark-start]</span><br><span class="line"><span class="comment">//无法evacuation，进行FGC</span></span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span>  18M-&gt;18<span class="title">M</span><span class="params">(<span class="number">20</span>M)</span>, 0.0719656 secs]</span></span><br><span class="line"><span class="function">   [Eden: 0.0<span class="title">B</span><span class="params">(<span class="number">1024.0</span>K)</span>-&gt;0.0<span class="title">B</span><span class="params">(<span class="number">1024.0</span>K)</span> Survivors: 0.0B-&gt;0.0B Heap: 18.8<span class="title">M</span><span class="params">(<span class="number">20.0</span>M)</span>-&gt;18.8<span class="title">M</span><span class="params">(<span class="number">20.0</span>M)</span>], [Metaspace: 38</span></span><br><span class="line"><span class="function">76K-&gt;3876<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>] [Times: user</span>=<span class="number">0.07</span> sys=<span class="number">0.00</span>, real=<span class="number">0.07</span> secs]</span><br></pre></td></tr></table></figure><h3 id="案例汇总"><a href="#案例汇总" class="headerlink" title="案例汇总"></a>案例汇总</h3><p>OOM产生的原因多种多样，有些程序未必产生OOM，不断FGC(CPU飙高，但内存回收特别少) （上面案例）</p><ol><li><p>硬件升级系统反而卡顿的问题（见上）</p></li><li><p>线程池不当运用产生OOM问题（见上）<br>不断的往List里加对象（实在太LOW）</p></li><li><p>smile jira问题<br>实际系统不断重启<br>解决问题 加内存 + 更换垃圾回收器 G1<br>真正问题在哪儿？不知道</p></li><li><p>tomcat http-header-size过大问题（Hector）</p></li><li><p>lambda表达式导致方法区溢出问题(MethodArea / Perm Metaspace)<br>LambdaGC.java     -XX:MaxMetaspaceSize=9M -XX:+PrintGCDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe"</span> -XX:MaxMetaspaceSize=<span class="number">9</span>M -XX:+PrintGCDetails <span class="string">"-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\lib\idea_rt.jar=49316:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\bin"</span> -Dfile.encoding=UTF-<span class="number">8</span> -classpath <span class="string">"C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\work\ijprojects\JVM\out\production\JVM;C:\work\ijprojects\ObjectSize\out\artifacts\ObjectSize_jar\ObjectSize.jar"</span> com.mashibing.jvm.gc.LambdaGC</span><br><span class="line">[GC (Metadata GC Threshold) [PSYoungGen: <span class="number">11341</span>K-&gt;<span class="number">1880</span>K(<span class="number">38400</span>K)] <span class="number">11341</span>K-&gt;<span class="number">1888</span>K(<span class="number">125952</span>K), <span class="number">0.0022190</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Metadata GC Threshold)</span> [PSYoungGen: 1880K-&gt;0<span class="title">K</span><span class="params">(<span class="number">38400</span>K)</span>] [ParOldGen: 8K-&gt;1777<span class="title">K</span><span class="params">(<span class="number">35328</span>K)</span>] 1888K-&gt;1777<span class="title">K</span><span class="params">(<span class="number">73728</span>K)</span>, [Metaspace: 8164K-&gt;8164<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0100681 secs] [Times: user</span>=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[GC (Last ditch collection) [PSYoungGen: <span class="number">0</span>K-&gt;<span class="number">0</span>K(<span class="number">38400</span>K)] <span class="number">1777</span>K-&gt;<span class="number">1777</span>K(<span class="number">73728</span>K), <span class="number">0.0005698</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Last ditch collection)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(<span class="number">38400</span>K)</span>] [ParOldGen: 1777K-&gt;1629<span class="title">K</span><span class="params">(<span class="number">67584</span>K)</span>] 1777K-&gt;1629<span class="title">K</span><span class="params">(<span class="number">105984</span>K)</span>, [Metaspace: 8164K-&gt;8156<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0124299 secs] [Times: user</span>=<span class="number">0.06</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:<span class="number">388</span>)</span><br><span class="line">at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:<span class="number">411</span>)</span><br><span class="line">Caused by: java.lang.OutOfMemoryError: Compressed <span class="class"><span class="keyword">class</span> <span class="title">space</span></span></span><br><span class="line"><span class="class"><span class="title">at</span> <span class="title">sun</span>.<span class="title">misc</span>.<span class="title">Unsafe</span>.<span class="title">defineClass</span>(<span class="title">Native</span> <span class="title">Method</span>)</span></span><br><span class="line">at sun.reflect.ClassDefiner.defineClass(ClassDefiner.java:63)</span><br><span class="line">at sun.reflect.MethodAccessorGenerator$<span class="number">1</span>.run(MethodAccessorGenerator.java:<span class="number">399</span>)</span><br><span class="line">at sun.reflect.MethodAccessorGenerator$<span class="number">1</span>.run(MethodAccessorGenerator.java:<span class="number">394</span>)</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">at sun.reflect.MethodAccessorGenerator.generate(MethodAccessorGenerator.java:<span class="number">393</span>)</span><br><span class="line">at sun.reflect.MethodAccessorGenerator.generateSerializationConstructor(MethodAccessorGenerator.java:<span class="number">112</span>)</span><br><span class="line">at sun.reflect.ReflectionFactory.generateConstructor(ReflectionFactory.java:<span class="number">398</span>)</span><br><span class="line">at sun.reflect.ReflectionFactory.newConstructorForSerialization(ReflectionFactory.java:<span class="number">360</span>)</span><br><span class="line">at java.io.ObjectStreamClass.getSerializableConstructor(ObjectStreamClass.java:<span class="number">1574</span>)</span><br><span class="line">at java.io.ObjectStreamClass.access$<span class="number">1500</span>(ObjectStreamClass.java:<span class="number">79</span>)</span><br><span class="line">at java.io.ObjectStreamClass$<span class="number">3</span>.run(ObjectStreamClass.java:<span class="number">519</span>)</span><br><span class="line">at java.io.ObjectStreamClass$<span class="number">3</span>.run(ObjectStreamClass.java:<span class="number">494</span>)</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">at java.io.ObjectStreamClass.&lt;init&gt;(ObjectStreamClass.java:<span class="number">494</span>)</span><br><span class="line">at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:<span class="number">391</span>)</span><br><span class="line">at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:<span class="number">1134</span>)</span><br><span class="line">at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:<span class="number">1548</span>)</span><br><span class="line">at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:<span class="number">1509</span>)</span><br><span class="line">at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:<span class="number">1432</span>)</span><br><span class="line">at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:<span class="number">1178</span>)</span><br><span class="line">at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:<span class="number">348</span>)</span><br><span class="line">at javax.management.remote.rmi.RMIConnectorServer.encodeJRMPStub(RMIConnectorServer.java:<span class="number">727</span>)</span><br><span class="line">at javax.management.remote.rmi.RMIConnectorServer.encodeStub(RMIConnectorServer.java:<span class="number">719</span>)</span><br><span class="line">at javax.management.remote.rmi.RMIConnectorServer.encodeStubInAddress(RMIConnectorServer.java:<span class="number">690</span>)</span><br><span class="line">at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:<span class="number">439</span>)</span><br><span class="line">at sun.management.jmxremote.ConnectorBootstrap.startLocalConnectorServer(ConnectorBootstrap.java:<span class="number">550</span>)</span><br><span class="line">at sun.management.Agent.startLocalManagementAgent(Agent.java:<span class="number">137</span>)</span><br></pre></td></tr></table></figure></li><li><p>直接内存溢出问题（少见）<br>《深入理解Java虚拟机》P59，使用Unsafe分配直接内存，或者使用NIO的问题</p></li><li><p>栈溢出问题<br>-Xss设定太小</p></li><li><p>比较一下这两段程序的异同，分析哪一个是更优的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">    o = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//业务处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写finalize引发频繁GC<br>小米云，HBase同步系统，系统通过nginx访问超时报警，最后排查，C++程序员重写finalize引发频繁GC问题<br>为什么C++程序员会重写finalize？（new delete）<br>finalize耗时比较长（200ms）</p></li><li><p>如果有一个系统，内存一直消耗不超过10%，但是观察GC日志，发现FGC总是频繁产生，会是什么引起的？<br>System.gc() (这个比较Low)</p></li><li><p>Distuptor有个可以设置链的长度，如果过大，然后对象大，消费完不主动释放，会溢出 (来自 死物风情)</p></li><li><p>用jvm都会溢出，mycat用崩过，1.6.5某个临时版本解析sql子查询算法有问题，9个exists的联合sql就导致生成几百万的对象（来自 死物风情）</p></li><li><p>new 大量线程，会产生 native thread OOM，（low）应该用线程池，<br>解决方案：减少堆空间（太TMlow了）,预留更多内存产生native thread<br>JVM内存占物理内存比例 50% - 80%</p></li></ol><h3 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h3><ul><li>-Xmn -Xms -Xmx -Xss<br>年轻代 最小堆 最大堆 栈空间</li><li>-XX:+UseTLAB<br>使用TLAB，默认打开</li><li>-XX:+PrintTLAB<br>打印TLAB的使用情况</li><li>-XX:TLABSize<br>设置TLAB大小</li><li>-XX:+DisableExplictGC<br>System.gc()不管用 ，FGC</li><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintHeapAtGC</li><li>-XX:+PrintGCTimeStamps</li><li>-XX:+PrintGCApplicationConcurrentTime (低)<br>打印应用程序时间</li><li>-XX:+PrintGCApplicationStoppedTime （低）<br>打印暂停时长</li><li>-XX:+PrintReferenceGC （重要性低）<br>记录回收了多少种不同引用类型的引用</li><li>-verbose:class<br>类加载详细过程</li><li>-XX:+PrintVMOptions</li><li>-XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial<br>必须会用</li><li>-Xloggc:opt/log/gc.log</li><li>-XX:MaxTenuringThreshold<br>升代年龄，最大值15</li><li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 …<br>这些不建议设置</li></ul><h3 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h3><ul><li>-XX:SurvivorRatio</li><li>-XX:PreTenureSizeThreshold<br>大对象到底多大</li><li>-XX:MaxTenuringThreshold</li><li>-XX:+ParallelGCThreads<br>并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li><li>-XX:+UseAdaptiveSizePolicy<br>自动选择各区大小比例</li></ul><h3 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h3><ul><li>-XX:+UseConcMarkSweepGC</li><li>-XX:ParallelCMSThreads<br>CMS线程数量</li><li>-XX:CMSInitiatingOccupancyFraction<br>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li><li>-XX:+UseCMSCompactAtFullCollection<br>在FGC时进行压缩</li><li>-XX:CMSFullGCsBeforeCompaction<br>多少次FGC之后进行压缩</li><li>-XX:+CMSClassUnloadingEnabled</li><li>-XX:CMSInitiatingPermOccupancyFraction<br>达到什么比例时进行Perm回收</li><li>GCTimeRatio<br>设置GC时间占用程序运行时间的百分比</li><li>-XX:MaxGCPauseMillis<br>停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li></ul><h3 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h3><ul><li>-XX:+UseG1GC</li><li>-XX:MaxGCPauseMillis<br>建议值，G1会尝试调整Young区的块数来达到这个值</li><li>-XX:GCPauseIntervalMillis<br>？GC的间隔时间</li><li>-XX:+G1HeapRegionSize<br>分区大小，建议逐渐增大该值，1 2 4 8 16 32。<br>随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长<br>ZGC做了改进（动态区块大小）</li><li>G1NewSizePercent<br>新生代最小比例，默认为5%</li><li>G1MaxNewSizePercent<br>新生代最大比例，默认为60%</li><li>GCTimeRatio<br>GC时间建议比例，G1会根据这个值调整堆空间</li><li>ConcGCThreads<br>线程数量</li><li>InitiatingHeapOccupancyPercent<br>启动G1的堆空间占用比例</li></ul><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><ol><li><p>-XX:MaxTenuringThreshold控制的是什么？<br>A: 对象升入老年代的年龄</p><pre><code>B: 老年代触发FGC时的内存垃圾比例</code></pre></li><li><p>生产环境中，倾向于将最大堆内存和最小堆内存设置为：（为什么？）<br>A: 相同 B：不同</p></li><li><p>JDK1.8默认的垃圾回收器是：<br>A: ParNew + CMS</p><pre><code>B: G1C: PS + ParallelOldD: 以上都不是</code></pre></li><li><p>什么是响应时间优先？</p></li><li><p>什么是吞吐量优先？</p></li><li><p>ParNew和PS的区别是什么？</p></li><li><p>ParNew和ParallelOld的区别是什么？（年代不同，算法不同）</p></li><li><p>长时间计算的场景应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>大规模电商网站应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>HotSpot的垃圾收集器最常用有哪些？</p></li><li><p>常见的HotSpot垃圾收集器组合有哪些？</p></li><li><p>JDK1.7 1.8 1.9的默认垃圾回收器是什么？如何查看？</p></li><li><p>所谓调优，到底是在调什么？</p></li><li><p>如果采用PS + ParrallelOld组合，怎么做才能让系统基本不产生FGC</p></li><li><p>如果采用ParNew + CMS组合，怎样做才能够让系统基本不产生FGC</p><p> 1.加大JVM内存</p><p> 2.加大Young的比例</p><p> 3.提高Y-O的年龄</p><p> 4.提高S区比例</p><p> 5.避免代码内存泄漏</p></li><li><p>G1是否分代？G1垃圾回收器会产生FGC吗？</p></li><li><p>如果G1产生FGC，你应该做什么？</p><pre><code>1. 扩内存2. 提高CPU性能（回收的快，业务逻辑产生对象的速度固定，垃圾回收越快，内存空间越大）3. 降低MixedGC触发的阈值，让MixedGC提早发生（默认是45%）</code></pre><ol start="18"><li><p>问：生产环境中能够随随便便的dump吗？<br>小堆影响不大，大堆会有服务暂停或卡顿（加live可以缓解），dump前会有FGC</p></li><li><p>问：常见的OOM问题有哪些？<br>栈 堆 MethodArea 直接内存</p></li></ol></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">https://blogs.oracle.com/</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">jonthecollector</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors" target="_blank" rel="noopener">/our-collectors</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li><li><a href="http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp" target="_blank" rel="noopener">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li><li>JVM调优参考文档：<a href="https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184</a> </li><li><a href="https://www.cnblogs.com/nxlhero/p/11660854.html" target="_blank" rel="noopener">https://www.cnblogs.com/nxlhero/p/11660854.html</a> 在线排查工具</li><li><a href="https://www.jianshu.com/p/507f7e0cc3a3" target="_blank" rel="noopener">https://www.jianshu.com/p/507f7e0cc3a3</a> arthas常用命令</li><li>Arthas手册：<ol><li>启动arthas java -jar arthas-boot.jar</li><li>绑定java进程</li><li>dashboard命令观察系统整体情况</li><li>help 查看帮助</li><li>help xx 查看具体命令帮助</li></ol></li><li>jmap命令参考： <a href="https://www.jianshu.com/p/507f7e0cc3a3" target="_blank" rel="noopener">https://www.jianshu.com/p/507f7e0cc3a3</a> <ol><li>jmap -heap pid</li><li>jmap -histo pid</li><li>jmap -clstats pid</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud简介-Eureka和Actuator基本使用;</title>
      <link href="/2020/06/23/Spring%20Cloud%E7%AE%80%E4%BB%8B-Eureka%E5%92%8CActuator%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/23/Spring%20Cloud%E7%AE%80%E4%BB%8B-Eureka%E5%92%8CActuator%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>Spring Cloud 自 2016 年 1 月发布第一个 Angel.SR5 版本，到目前 2020 年 3 月发布 Hoxton.SR3 版本，已经历经了 4 年时间。这 4 年时间里，Spring Cloud 一共发布了 46 个版本，支持的组件数从 5 个增加到 21 个。Spring Cloud 在 2019 年 12 月对外宣布后续 RoadMap：</p><ul><li>下一个版本 Ilford 版本是一个大版本。这个版本基于 Spring Framework 5.3 &amp; Spring Boot 2.4，会在 2020 Q4 左右发布；</li><li>Ilford 版本会删除处于维护模式的项目。目前处于维护模式的 Netflix 大部分项目都会被删除（spring-cloud-netflix Github 项目已经删除了这些维护模式的项目）；</li><li>简化 Spring Cloud 发布列车。后续 IaasS 厂商对应的 Spring Cloud 项目会移出 Spring Cloud 组织，各自单独维护（spring-cloud-azure 一直都是单独维护，spring-cloud-alibaba 孵化在 Spring Cloud 组织，毕业后单独维护）；</li><li>API 重构，会带来重大的改变（Spring Cloud Hoxton 版本新增了 Spring Cloud Circuit Breaker 用于统一熔断操作的编程模型和 Spring Cloud LoadBalanacer 用于处理客户端负载均衡并代替 Netflix Ribbon）。</li></ul><p>这个 RoadMap 可以说是对 Spring Cloud 有着非常大的变化。</p><h3 id="SpringCloud替代实现"><a href="#SpringCloud替代实现" class="headerlink" title="SpringCloud替代实现"></a>SpringCloud替代实现</h3><p>![img](Spring Cloud简介-Eureka和Actuator基本使用/1)</p><h3 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h3><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p><strong><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a></strong>：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><strong><a href="https://github.com/alibaba/Nacos" target="_blank" rel="noopener">Nacos</a></strong>：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p><strong><a href="https://rocketmq.apache.org/" target="_blank" rel="noopener">RocketMQ</a></strong>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p><strong><a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">Dubbo</a></strong>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p><p><strong><a href="https://github.com/seata/seata" target="_blank" rel="noopener">Seata</a></strong>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p><strong><a href="https://www.aliyun.com/product/acm" target="_blank" rel="noopener">Alibaba Cloud ACM</a></strong>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</p><p><strong><a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p><strong><a href="https://help.aliyun.com/document_detail/43136.html" target="_blank" rel="noopener">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p><strong><a href="https://www.aliyun.com/product/sms" target="_blank" rel="noopener">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h2 id="第一阶段课程Spring-Cloud技术点"><a href="#第一阶段课程Spring-Cloud技术点" class="headerlink" title="第一阶段课程Spring Cloud技术点"></a>第一阶段课程Spring Cloud技术点</h2><p>Eureka：服务注册与发现，用于服务管理。</p><p>Feign： web调用客户端，能够简化HTTP接口的调用。</p><p>Ribbon：基于客户端的负载均衡。</p><p>Hystrix：熔断降级，防止服务雪崩。</p><p>Zuul：网关路由，提供路由转发、请求过滤、限流降级等功能。</p><p>Config：配置中心，分布式配置管理。</p><p>Sleuth：服务链路追踪</p><p>Admin：健康管理</p><h2 id="服务进化概述"><a href="#服务进化概述" class="headerlink" title="服务进化概述"></a>服务进化概述</h2><ol><li><p>传统服务到微服务进化。</p><blockquote><p>《传统到分布式演进》</p></blockquote></li><li><p>单体应用-&gt; SOA -&gt;微服务（下面讲）</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">课外扩展：</span><br><span class="line">持续集成，持续部署，持续交付。</span><br><span class="line">集成:是指软件个人研发的部分向软件整体部分集成，以便尽早发现个人开发部分的问题；</span><br><span class="line">部署: 是代码尽快向可运行的开发&#x2F;测试节交付，以便尽早测试；</span><br><span class="line">交付: 是指研发尽快向客户交付，以便尽早发现生产环境中存在的问题。</span><br><span class="line">   如果说等到所有东西都完成了才向下个环节交付，导致所有的问题只能在最后才爆发出来，解决成本巨大甚至无法解决。而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。使问题不会放大到其他部分和后面的环节。</span><br><span class="line">   这种做法的核心思想在于：既然事实上难以做到事先完全了解完整的、正确的需求，那么就干脆一小块一小块的做，并且加快交付的速度和频率，使得交付物尽早在下个环节得到验证。早发现问题早返工。</span><br><span class="line"></span><br><span class="line">上面的3个持续，也都随着微服务的发展而发展，当架构师的同学，可以参考这种方式。</span><br><span class="line"></span><br><span class="line">持续集成的工具，向大家推荐：https:&#x2F;&#x2F;jenkins.io&#x2F;doc&#x2F;book&#x2F;pipeline&#x2F;</span><br></pre></td></tr></table></figure><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><ol><li><p>概念：所有功能全部打包在一起。应用大部分是一个war包或jar包。我参与网约车最开始架构是：一个乘客项目中有 用户、订单、消息、地图等功能。随着业务发展，功能增多，这个项目会越来越臃肿。</p></li><li><p>好处：容易开发、测试、部署，适合项目初期试错。</p></li><li><p>坏处：</p><p>​    随着项目越来越复杂，团队不断扩大。坏处就显现出来了。</p><ul><li>复杂性高：代码多，十万行，百万行级别。加一个小功能，会带来其他功能的隐患，因为它们在一起。</li><li>技术债务：人员流动，不坏不修，因为不敢修。</li><li>持续部署困难：由于是全量应用，改一个小功能，全部部署，会导致无关的功能暂停使用。编译部署上线耗时长，不敢随便部署，导致部署频率低，进而又导致两次部署之间 功能修改多，越不敢部署，恶性循环。</li><li>可靠性差：某个小问题，比如小功能出现OOM，会导致整个应用崩溃。</li><li>扩展受限：只能整体扩展，无法按照需要进行扩展，  不能根据计算密集型（派单系统）和IO密集型（文件服务） 进行合适的区分。</li><li>阻碍创新：单体应用是以一种技术解决所有问题，不容易引入新技术。但在高速的互联网发展过程中，适应的潮流是：用合适的语言做合适的事情。比如在单体应用中，一个项目用spring MVC，想换成spring boot，切换成本很高，因为有可能10万，百万行代码都要改，而微服务可以轻松切换，因为每个服务，功能简单，代码少。</li></ul></li></ol><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><pre><code>对单体应用的改进：引入SOA（Service-Oriented Architecture）面向服务架构，拆分系统，用服务的流程化来实现业务的灵活性。服务间需要某些方法进行连接，面向接口等，它是一种设计方法，其中包含多个服务， 服务之间通过相互依赖最终提供一系列的功能。一个服务 通常以独立的形式存在于操作系统进程中。各个服务之间 通过网络调用。但是还是需要用些方法来进行服务组合，有可能还是个单体应用。</code></pre><p>所以要引入微服务，是SOA思想的一种具体实践。</p><p>微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想</p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h4 id="微服务概况"><a href="#微服务概况" class="headerlink" title="微服务概况"></a>微服务概况</h4><ul><li>无严格定义。</li><li>微服务是一种架构风格，将单体应用划分为小型的服务单元。</li><li>微服务架构是一种使用一系列粒度较小的服务来开发单个应用的方式；每个服务运行在自己的进程中；服务间采用轻量级的方式进行通信(通常是HTTP API)；这些服务是基于业务逻辑和范围，通过自动化部署的机制来独立部署的，并且服务的集中管理应该是最低限度的，即每个服务可以采用不同的编程语言编写，使用不同的数据存储技术。</li><li>英文定义：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">看这篇文章：</span><br><span class="line">http://www.martinfowler.com/articles/microservices.html</span><br></pre></td></tr></table></figure><ul><li><p>小类比</p><p>合久必分。分开后通信，独立部署，独立存储。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分封制：</span><br><span class="line">服从天子命令：服从服务管理。</span><br><span class="line">有为天子镇守疆土的义务：各自完成各自的一块业务。</span><br><span class="line">随从作战：服务调用。</span><br><span class="line">交纳贡献：分担流量压力。</span><br></pre></td></tr></table></figure><ul><li>段子（中台战略）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q：大师大师，服务拆多了怎么办？</span><br><span class="line">A：那就再合起来。</span><br><span class="line">Q：那太没面子了。</span><br><span class="line">A：那就说跨过了微服务初级阶段，在做中台（自助建站系统）。</span><br></pre></td></tr></table></figure><h4 id="微服务特性"><a href="#微服务特性" class="headerlink" title="微服务特性"></a>微服务特性</h4><p>独立运行在自己进程中。</p><p>一系列独立服务共同构建起整个系统。</p><p>一个服务只关注自己的独立业务。</p><p>轻量的通信机制RESTful API</p><p>使用不同语言开发</p><p>全自动部署机制</p><h4 id="微服务组件介绍"><a href="#微服务组件介绍" class="headerlink" title="微服务组件介绍"></a>微服务组件介绍</h4><p>不局限与具体的微服务实现技术。</p><ul><li><p>服务注册与发现：服务提供方将己方调用地址注册到服务注册中心，让服务调用方能够方便地找到自己；服务调用方从服务注册中心找到自己需要调用的服务的地址。</p></li><li><p>负载均衡：服务提供方一般以多实例的形式提供服务，负载均衡功能能够让服务调用方连接到合适的服务节点。并且，服务节点选择的过程对服务调用方来说是透明的。</p></li><li><p>服务网关：服务网关是服务调用的唯一入口，可以在这个组件中实现用户鉴权、动态路由、灰度发布、A/B测试、负载限流等功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A&#x2F;B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</span><br></pre></td></tr></table></figure></li><li><p>配置中心：将本地化的配置信息(Properties、XML、YAML等形式)注册到配置中心，实现程序包在开发、测试、生产环境中的无差别性，方便程序包的迁移，也是无状态特性。</p></li><li><p>集成框架：微服务组件都以职责单一的程序包对外提供服务，集成框架以配置的形式将所有微服务组件(特别是管理端组件)集成到统一的界面框架下，让用户能够在统一的界面中使用系统。Spring Cloud就是一个集成框架。</p></li><li><p>调用链监控：记录完成一次请求的先后衔接和调用关系，并将这种串行或并行的调用关系展示出来。在系统出错时，可以方便地找到出错点。</p></li><li><p>支撑平台：系统微服务化后，各个业务模块经过拆分变得更加细化，系统的部署、运维、监控等都比单体应用架构更加复杂，这就需要将大部分的工作自动化。现在，Docker等工具可以给微服务架构的部署带来较多的便利，例如持续集成、蓝绿发布、健康检查、性能监控等等。如果没有合适的支撑平台或工具，微服务架构就无法发挥它最大的功效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 蓝绿部署是不停老版本，部署新版本然后进行测试，确认OK，将流量切到新版本，然后老版本同时也升级到新版本。</span><br><span class="line">2. 灰度是选择部分部署新版本，将部分流量引入到新版本，新老版本同时提供服务。等待灰度的版本OK，可全量覆盖老版本。</span><br><span class="line"></span><br><span class="line">灰度是不同版本共存，蓝绿是新旧版本切换，2种模式的出发点不一样。</span><br></pre></td></tr></table></figure></li></ul><h4 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h4><ol><li>独立部署。不依赖其他服务，耦合性低，不用管其他服务的部署对自己的影响。</li><li>易于开发和维护：关注特定业务，所以业务清晰，代码量少，模块变的易开发、易理解、易维护。</li><li>启动块：功能少，代码少，所以启动快，有需要停机维护的服务，不会长时间暂停服务。</li><li>局部修改容易：只需要部署 相应的服务即可，适合敏捷开发。</li><li>技术栈不受限：java，node.js等</li><li>按需伸缩：某个服务受限，可以按需增加内存，cpu等。</li><li>职责专一。专门团队负责专门业务，有利于团队分工。</li><li>代码复用。不需要重复写。底层实现通过接口方式提供。</li><li>便于团队协作：每个团队只需要提供API就行，定义好API后，可以并行开发。</li></ol><h4 id="微服务缺点"><a href="#微服务缺点" class="headerlink" title="微服务缺点"></a>微服务缺点</h4><ol><li><p>分布式固有的复杂性：容错（某个服务宕机），网络延时，调用关系、分布式事务等，都会带来复杂。</p></li><li><p>分布式事务的挑战：每个服务有自己的数据库，有点在于不同服务可以选择适合自身业务的数据库。订单用MySQL，评论用Mongodb等。目前最理想解决方案是：柔性事务的最终一致性。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">刚性事务：遵循ACID原则，强一致性。</span><br><span class="line">柔性事务：遵循BASE理论，最终一致性；与刚性事务不同，柔性事务允许一定时间内，不同节点的数据不一致，但要求最终一致。</span><br><span class="line"></span><br><span class="line">BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足BASE理论的事务，我们称之为“柔性事务”。</span><br></pre></td></tr></table></figure></li><li><p>接口调整成本高：改一个接口，调用方都要改。</p></li><li><p>测试难度提升：一个接口改变，所有调用方都得测。自动化测试就变的重要了。API文档的管理也尤为重要。推荐：yapi。</p></li><li><p>运维要求高：需要维护 几十 上百个服务。监控变的复杂。并且还要关注多个集群，不像原来单体，一个应用正常运行即可。</p></li><li><p>重复工作：比如java的工具类可以在共享common.jar中，但在多语言下行不通，C++无法直接用java的jar包。</p></li></ol><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><p>单一职责原则：关注整个系统功能中单独，有界限的一部分。</p><p>服务自治原则：可以独立开发，测试，构建，部署，运行，与其他服务解耦。</p><p>轻量级通信原则：轻，跨平台，跨语言。REST,AMQP 等。</p><p>粒度把控：与自己实际相结合。 不要追求完美，随业务进化而调整。《淘宝技术这10年》。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ol><li><p>Spring Cloud和dubbo组件比较</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dubbo：zookeeper+dubbo+springmvc/springboot</span><br><span class="line">通信方式：rpc</span><br><span class="line">注册中心：zookeeper，nacos</span><br><span class="line">配置中心：diamond（淘宝开发）</span><br><span class="line"></span><br><span class="line">spring cloud：spring+Netflix</span><br><span class="line">通信方式：http restful</span><br><span class="line">注册中心：eureka，consul，nacos</span><br><span class="line">配置中心：config</span><br><span class="line">断路器：hystrix</span><br><span class="line">网关：zuul，gateway</span><br><span class="line">分布式追踪系统：sleuth+zipkin</span><br></pre></td></tr></table></figure></li><li><p>差别</p><table><thead><tr><th></th><th><strong>dubbo</strong></th><th><strong>spring cloud</strong></th><th></th></tr></thead><tbody><tr><td>背景</td><td>国内影响大</td><td>国外影响大</td><td>平手</td></tr><tr><td>社区活跃度</td><td>低(现在又好了)</td><td>高</td><td>cloud胜出</td></tr><tr><td>架构完整度</td><td>不完善（dubbo有些不提供，需要用第三方，它只关注服务治理）</td><td>比较完善，微服务组件应有尽有。</td><td>cloud胜出</td></tr><tr><td>学习成本</td><td>dubbo需要配套学习</td><td>无缝spring</td><td>cloud胜出</td></tr><tr><td>性能</td><td>高。（基于Netty）</td><td>低。（基于http，每次都要创建）。 此性能的损耗对大部分应用是可以接受的。而HTTP风格的API,是很方便的。用小的性能损耗换来了方便。</td><td>dubbo胜出</td></tr></tbody></table></li></ol><h2 id="Spring-Cloud-1"><a href="#Spring-Cloud-1" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Spring Cloud是实现微服务架构的一系列框架的有机集合。</p><p>是在Spring Boot基础上构建的，用于简化分布式系统构建的工具集。是拥有众多子项目的项目集合。利用Spring Boot的开发便利性，巧妙地简化了分布式系统基础设施（服务注册与发现、熔断机制、网关路由、配置中心、消息总线、负载均衡、链路追踪等）的开发。</p><h3 id="版本演进"><a href="#版本演进" class="headerlink" title="版本演进"></a>版本演进</h3><ol><li><p>版本过程：版本名.版本号。</p></li><li><p>版本名：伦敦地铁字母顺序。</p></li><li><p>版本号：M（milestone）：里程碑，</p><p>​                SR（Service Releases）：稳定版，</p><p>​                RC(Release Candidate)：稳定版的候选版，也就是稳定版的最后一个版本。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">看官网：查询每个cloud版本下面的子模块的版本。</span><br><span class="line">https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-cloud</span><br><span class="line">此网页的最下面，目前最新的SpringCloud最新版本是：Greenwich.SR2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">版本记录</span><br><span class="line">https://github.com/spring-cloud/spring-cloud-release/releases</span><br></pre></td></tr></table></figure><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>![image-20200823173211190](Spring Cloud简介-Eureka和Actuator基本使用/image-20200823173211190.png)</p><p>组成：</p><ol><li><p>服务注册与发现组件：Eureka，Zookeeper，Consul,Nacos等。Eureka基于REST风格的。</p></li><li><p>服务调用组件：Hystrix(熔断降级，在出现依赖服务失效的情况下，通过隔离 系统依赖服务  的方式，防止服务级联失败，同时提供失败回滚机制，使系统能够更快地从异常中恢复)，Ribbon（客户端负载均衡，用于提供客户端的软件负载均衡算法，提供了一系列完善的配置项：连接超时、重试等），OpenFeign（优雅的封装Ribbon，是一个声明式RESTful网络请求客户端，它使编写Web服务客户端变得更加方便和快捷）。</p></li><li><p>网关：路由和过滤。Zuul，Gateway。</p></li><li><p>配置中心：提供了配置集中管理，动态刷新配置的功能；配置通过Git或者其他方式来存储。</p></li><li><p>消息组件：Spring Cloud Stream（对分布式消息进行抽象，包括发布订阅、分组消费等功能，实现了微服务之间的异步通信）和Spring Cloud Bus（主要提供服务间的事件通信，如刷新配置）</p></li><li><p>安全控制组件：Spring Cloud Security 基于OAuth2.0开放网络的安全标准，提供了单点登录、资源授权和令牌管理等功能。</p></li><li><p>链路追踪组件：Spring Cloud Sleuth（收集调用链路上的数据），Zipkin（对Sleuth收集的信息，进行存储，统计，展示）。</p></li></ol><p>   每个点中的内容，后面都会讲到。</p><h2 id="独立微服务编写"><a href="#独立微服务编写" class="headerlink" title="独立微服务编写"></a>独立微服务编写</h2><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>STS</p><p><a href="https://spring.io/tools" target="_blank" rel="noopener">https://spring.io/tools</a></p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>通过这个服务来看eureka注册中心的效果。</p><p>复习Spring Boot。</p><p>减少了大量配置。快速开发。</p><p>用Starter集成一个新框架。比如redis，web等。添加依赖，加配置文件。</p><p>嵌入式服务器，令开发和部署变的方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot介绍：</span><br><span class="line">https:&#x2F;&#x2F;docs.spring.io&#x2F;spring-boot&#x2F;docs&#x2F;2.1.7.RELEASE&#x2F;</span><br></pre></td></tr></table></figure><h3 id="代码步骤"><a href="#代码步骤" class="headerlink" title="代码步骤"></a>代码步骤</h3><ol><li>pom.xml</li><li>application.yml</li><li>java代码</li></ol><p>看代码。</p><h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><h3 id="Eureka-单节点搭建"><a href="#Eureka-单节点搭建" class="headerlink" title="Eureka 单节点搭建"></a>Eureka 单节点搭建</h3><ol><li><p>pom.xml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">有的教程中还引入spring-boot-starter-web，其实不用。因为上面的依赖已经包含了它。在pom中点此依赖进去，一共点4次spring-cloud-netflix-eureka-server，发现web的依赖。</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#是否将自己注册到Eureka Server,默认为true，由于当前就是server，故而设置成false，表明该服务不会向eureka注册自己的信息</span></span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从eureka server获取注册信息，由于单节点，不需要同步其他节点数据，用false</span></span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置服务注册中心的URL，用于client和server端交流</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://localhost:7900/eureka/</span><br></pre></td></tr></table></figure></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否将自己注册到Eureka Server,默认为true，由于当前就是server，故而设置成false，表明该服务不会向eureka注册自己的信息</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#是否从eureka server获取注册信息，由于单节点，不需要同步其他节点数据，用false</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#设置服务注册中心的URL，用于client和server端交流</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:7900/eureka/</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动类上添加此注解标识该服务为配置中心</span><br><span class="line">@EnableEurekaServer</span><br></pre></td></tr></table></figure></li><li><p>PS：Eureka会暴露一些端点。端点用于Eureka Client注册自身，获取注册表，发送心跳。</p></li><li><p>简单看一下eureka server控制台，实例信息区，运行环境信息区，Eureka Server自身信息区。</p></li></ol><h3 id="Eureka-介绍"><a href="#Eureka-介绍" class="headerlink" title="Eureka 介绍"></a>Eureka 介绍</h3><h4 id="整体介绍"><a href="#整体介绍" class="headerlink" title="整体介绍"></a>整体介绍</h4><ol><li>背景：在传统应用中，组件之间的调用，通过有规范的约束的接口来实现，从而实现不同模块间良好的协作。但是被拆分成微服务后，每个微服务实例的网络地址都可能动态变化，数量也会变化，使得原来硬编码的地址失去了作用。需要一个中心化的组件来进行服务的登记和管理。</li><li>概念：实现服务治理，即管理所有的服务信息和状态。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册中心相当于买票乘车，只看有没有票（有没有服务），有就去买票（获取注册列表），然后乘车（调用）。不必关心有多少火车在运行。</span><br></pre></td></tr></table></figure><ol start="3"><li><p>注册中心好处：不用关心有多少提供方。</p></li><li><p>注册中心有哪些:Eureka，Nacos，Consul，Zookeeper等。</p></li><li><p>服务注册与发现包括两部分，一个是服务器端，另一个是客户端。</p><p>Server是一个公共服务，为Client提供服务注册和发现的功能，维护注册到自身的Client的相关信息，同时提供接口给Client获取注册表中其他服务的信息，使得动态变化的Client能够进行服务间的相互调用。</p><p>Client将自己的服务信息通过一定的方式登记到Server上，并在正常范围内维护自己信息一致性，方便其他服务发现自己，同时可以通过Server获取到自己依赖的其他服务信息，完成服务调用，还内置了负载均衡器，用来进行基本的负载均衡。</p></li><li><p>我们课程的Spring Cloud是用Eureka作为服务注册中心。</p></li><li><p>Eureka：是一个RESTful风格的服务，是一个用于服务发现和注册的基础组件，是搭建Spring Cloud微服务的前提之一，它屏蔽了Server和client的交互细节，使得开发者将精力放到业务上。</p></li><li><p>serverA从serverB同步信息，则serverB是serverA的peer。</p></li><li><p>上面例子中如果service-url为空，且register-with-eureka，fetch-registry为true，则会报错，Cannot execute request on any known server，因为server同时也是一个client，他会尝试注册自己，所以要有一个注册中心url去注册。</p></li><li><p>Netflix开源的组件。包括server和client两部分。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Netflix/Eureka</span><br></pre></td></tr></table></figure></li></ol><h4 id="注册中心和微服务间的关系"><a href="#注册中心和微服务间的关系" class="headerlink" title="注册中心和微服务间的关系"></a>注册中心和微服务间的关系</h4><blockquote><p>《服务注册与发现关系图》</p></blockquote><h4 id="client功能"><a href="#client功能" class="headerlink" title="client功能"></a>client功能</h4><ol><li>注册：每个微服务启动时，将自己的网络地址等信息注册到注册中心，注册中心会存储（内存中）这些信息。</li><li>获取服务注册表：服务消费者从注册中心，查询服务提供者的网络地址，并使用该地址调用服务提供者，为了避免每次都查注册表信息，所以client会定时去server拉取注册表信息到缓存到client本地。</li><li>心跳：各个微服务与注册中心通过某种机制（心跳）通信，若注册中心长时间和服务间没有通信，就会注销该实例。</li><li>调用：实际的服务调用，通过注册表，解析服务名和具体地址的对应关系，找到具体服务的地址，进行实际调用。</li></ol><h4 id="server注册中心功能"><a href="#server注册中心功能" class="headerlink" title="server注册中心功能"></a>server注册中心功能</h4><ol><li><p>服务注册表：记录各个微服务信息，例如服务名称，ip，端口等。</p><p>注册表提供 查询API（查询可用的微服务实例）和管理API（用于服务的注册和注销）。</p></li><li><p>服务注册与发现：注册：将微服务信息注册到注册中心。发现：查询可用微服务列表及其网络地址。</p></li><li><p>服务检查：定时检测已注册的服务，如发现某实例长时间无法访问，就从注册表中移除。</p></li></ol><p>组件：Eureka , Consul , ZooKeeper，nacos等。</p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>例子：api-listen-order</p><ol><li>pom.xml</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>application.yml</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心</span></span><br><span class="line">eureka: </span><br><span class="line">  client:</span><br><span class="line">    <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    service-url:                      </span><br><span class="line">      defaultZone: http://root:root@localhost:7900/eureka/</span><br></pre></td></tr></table></figure><p>ps:不想注册，设置成false即可，实例演示结果：注册中心没有实例信息。找控制台204信息也没有找到。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">  cloud:</span><br><span class="line">    service-registry:</span><br><span class="line">      auto-registration:</span><br><span class="line">        enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注册成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiscoveryClient_API-LISTEN-ORDER/api-listen-order:30.136.133.9:port - registration status: 204</span><br></pre></td></tr></table></figure><p>后面源码讲手动注册。</p><p>PS:</p><p>Eureka Server与Eureka Client之间的联系主要通过心跳的方式实现。心跳(Heartbeat)即Eureka Client定时向Eureka Server汇报本服务实例当前的状态，维护本服务实例在注册表中租约的有效性。</p><p>Eureka Client将定时从Eureka Server中拉取注册表中的信息，并将这些信息缓存到本地，用于服务发现。</p><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><h3 id="Eureka高可用"><a href="#Eureka高可用" class="headerlink" title="Eureka高可用"></a>Eureka高可用</h3><p>高可用：可以通过运行多个Eureka server实例并相互注册的方式实现。Server节点之间会彼此增量地同步信息，从而确保节点中数据一致。</p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><h5 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h5><p>准备2个节点部署eureka，也可以单机部署</p><p>修改本机host文件，绑定一个主机名，单机部署时使用ip地址会有问题</p><h5 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h5><p><strong>节点 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#是否将自己注册到其他Eureka Server,默认为true 需要</span><br><span class="line">eureka.client.register-with-eureka&#x3D;true</span><br><span class="line">#是否从eureka server获取注册信息， 需要</span><br><span class="line">eureka.client.fetch-registry&#x3D;true</span><br><span class="line">#设置服务注册中心的URL，用于client和server端交流</span><br><span class="line">#此节点应向其他节点发起请求</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;ek2.com:7902&#x2F;eureka&#x2F;</span><br><span class="line">#主机名，必填</span><br><span class="line">eureka.instance.hostname&#x3D;ek1.com</span><br><span class="line">management.endpoint.shutdown.enabled&#x3D;true</span><br><span class="line">#web端口，服务是由这个端口处理rest请求的</span><br><span class="line">server.port&#x3D;7901</span><br></pre></td></tr></table></figure><p><strong>节点 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#是否将自己注册到其他Eureka Server,默认为true 需要</span><br><span class="line">eureka.client.register-with-eureka&#x3D;true</span><br><span class="line">#是否从eureka server获取注册信息， 需要</span><br><span class="line">eureka.client.fetch-registry&#x3D;true</span><br><span class="line">#设置服务注册中心的URL，用于client和server端交流</span><br><span class="line">#此节点应向其他节点发起请求</span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;ek1.com:7902&#x2F;eureka&#x2F;</span><br><span class="line">#主机名，必填</span><br><span class="line">eureka.instance.hostname&#x3D;ek2.com</span><br><span class="line">management.endpoint.shutdown.enabled&#x3D;true</span><br><span class="line">#web端口，服务是由这个端口处理rest请求的</span><br><span class="line">server.port&#x3D;7902</span><br></pre></td></tr></table></figure><p><strong>节点 1:</strong></p><p>如果有节点3，配置同上 改一下主机名和端口</p><p>略。。。</p><p>两个节点的话，如下图内容 就算成功了</p><p>![image-20200403193147121](Spring Cloud简介-Eureka和Actuator基本使用/image-20200403193147121.png)</p><h2 id="使用Spring-Boot2-x-Actuator监控应用"><a href="#使用Spring-Boot2-x-Actuator监控应用" class="headerlink" title="使用Spring Boot2.x Actuator监控应用"></a>使用Spring Boot2.x Actuator监控应用</h2><h3 id="开启监控"><a href="#开启监控" class="headerlink" title="开启监控"></a>开启监控</h3>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认端点"><a href="#默认端点" class="headerlink" title="默认端点"></a>默认端点</h3><p>Spring Boot 2.0 的Actuator只暴露了health和info端点，提供的监控信息无法满足我们的需求</p><p>在1.x中有n多可供我们监控的节点，官方的回答是为了安全….</p><h3 id="开启所有端点"><a href="#开启所有端点" class="headerlink" title="开启所有端点"></a>开启所有端点</h3><p>在application.yml中加入如下配置信息</p><p>*代表所有节点都加载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>所有端点都开启后的api列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;_links&quot;:&#123;&quot;self&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&quot;,&quot;templated&quot;:false&#125;,&quot;archaius&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;archaius&quot;,&quot;templated&quot;:false&#125;,&quot;beans&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;beans&quot;,&quot;templated&quot;:false&#125;,&quot;caches-cache&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;caches&#x2F;&#123;cache&#125;&quot;,&quot;templated&quot;:true&#125;,&quot;caches&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;caches&quot;,&quot;templated&quot;:false&#125;,&quot;health&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;health&quot;,&quot;templated&quot;:false&#125;,&quot;health-path&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;health&#x2F;&#123;*path&#125;&quot;,&quot;templated&quot;:true&#125;,&quot;info&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;info&quot;,&quot;templated&quot;:false&#125;,&quot;conditions&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;conditions&quot;,&quot;templated&quot;:false&#125;,&quot;configprops&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;configprops&quot;,&quot;templated&quot;:false&#125;,&quot;env&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;env&quot;,&quot;templated&quot;:false&#125;,&quot;env-toMatch&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;env&#x2F;&#123;toMatch&#125;&quot;,&quot;templated&quot;:true&#125;,&quot;loggers&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;loggers&quot;,&quot;templated&quot;:false&#125;,&quot;loggers-name&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;loggers&#x2F;&#123;name&#125;&quot;,&quot;templated&quot;:true&#125;,&quot;heapdump&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;heapdump&quot;,&quot;templated&quot;:false&#125;,&quot;threaddump&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;threaddump&quot;,&quot;templated&quot;:false&#125;,&quot;metrics&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;metrics&quot;,&quot;templated&quot;:false&#125;,&quot;metrics-requiredMetricName&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;metrics&#x2F;&#123;requiredMetricName&#125;&quot;,&quot;templated&quot;:true&#125;,&quot;scheduledtasks&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;scheduledtasks&quot;,&quot;templated&quot;:false&#125;,&quot;mappings&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;mappings&quot;,&quot;templated&quot;:false&#125;,&quot;refresh&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;refresh&quot;,&quot;templated&quot;:false&#125;,&quot;features&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;features&quot;,&quot;templated&quot;:false&#125;,&quot;service-registry&quot;:&#123;&quot;href&quot;:&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;actuator&#x2F;service-registry&quot;,&quot;templated&quot;:false&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="api端点功能"><a href="#api端点功能" class="headerlink" title="api端点功能"></a>api端点功能</h3><h4 id="Health"><a href="#Health" class="headerlink" title="Health"></a>Health</h4><p>会显示系统状态</p><p>{“status”:”UP”}</p><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>用来关闭节点</p><p>开启远程关闭功能</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>使用Post方式请求端点</p><p>{</p><p>  “message”: “Shutting down, bye…”</p><p>}</p><p> autoconfig </p><p>获取应用的自动化配置报告<br> beans </p><p>获取应用上下文中创建的所有Bean </p><h4 id="configprops"><a href="#configprops" class="headerlink" title="configprops"></a>configprops</h4><p>获取应用中配置的属性信息报告 </p><h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><p>获取应用所有可用的环境属性报告 </p><h4 id="Mappings"><a href="#Mappings" class="headerlink" title="Mappings"></a>Mappings</h4><p> 获取应用所有Spring Web的控制器映射关系报告</p><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>获取应用自定义的信息 </p><h4 id="metrics"><a href="#metrics" class="headerlink" title="metrics"></a>metrics</h4><p>返回应用的各类重要度量指标信息 </p><p><strong>Metrics</strong>节点并没有返回全量信息，我们可以通过不同的<strong>key</strong>去加载我们想要的值</p><p> metrics/jvm.memory.max</p><h3 id="Threaddump"><a href="#Threaddump" class="headerlink" title="Threaddump"></a>Threaddump</h3><p>1.x中为<strong>dump</strong></p><p>返回程序运行中的线程信息 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 框架 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的基本使用</title>
      <link href="/2020/06/21/Maven%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/21/Maven%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven的介绍与使用"><a href="#Maven的介绍与使用" class="headerlink" title="Maven的介绍与使用"></a>Maven的介绍与使用</h1><h3 id="1、Maven的简单介绍"><a href="#1、Maven的简单介绍" class="headerlink" title="1、Maven的简单介绍"></a>1、Maven的简单介绍</h3><p>​        Maven是Apache下的项目管理工具，它由纯Java语言开发，可以帮助我们更方便的管理和构建Java项目。</p><p>​        Maven的优点</p><p>​        1、  jar包管理：</p><p>​            a)   从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包；</p><p>​            b)   本地仓库统一管理jar包，使jar包与项目分离，减轻项目体积。</p><p>​        2、  Maven是跨平台的可以在window、linux上使用。</p><p>​        3、  清晰的项目结构；</p><p>​        4、  多工程开发，将模块拆分成若干工程，利于团队协作开发。</p><p>​        5、  一键构建项目：使用命令可以对项目进行一键构建。</p><h3 id="2、Maven的安装"><a href="#2、Maven的安装" class="headerlink" title="2、Maven的安装"></a>2、Maven的安装</h3><p>​    Maven官网：<a href="https://Maven.apache.org/" target="_blank" rel="noopener">https://Maven.apache.org/</a></p><p>​    Maven仓库：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></p><p>​    安装步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、安装jdk</span><br><span class="line">2、从官网中下载对应的版本</span><br><span class="line">3、解压安装，然后配置环境变量，需要配置Maven_HOME,并且将bin目录添加到path路径下</span><br><span class="line">4、在命令行中输入mvn -v,看到版本信息表示安装成功</span><br></pre></td></tr></table></figure><h3 id="3、Maven的基本常识"><a href="#3、Maven的基本常识" class="headerlink" title="3、Maven的基本常识"></a>3、Maven的基本常识</h3><p><strong>Maven如何获取jar包</strong></p><p>​        Maven通过坐标的方式来获取 jar包，坐标组成为：公司/组织（groupId）+项目名（artifactId）+版本（version）组成，可以从互联网，本地等多种仓库源获取jar包</p><p><strong>Maven仓库的分类</strong></p><p>​        本地仓库：本地仓库就是开发者本地已经下载下来的或者自己打包所有jar包的依赖仓库，本地仓库路径配置在Maven对应的conf/settings.xml配置文件。</p><p>​        私有仓库：私有仓库可以理解为自己公司的仓库，也叫Nexus私服</p><p>​        中央仓库：中央仓库即Maven默认下载的仓库地址，是Maven维护的</p><p><strong>Maven的常用仓库</strong></p><p>​        由于网络访问的原因，在国内如果需要下载国外jar包的时候会受限，因此一般在使用过程中需要修改Maven的配置文件，将下载jar包的仓库地址修改为国内的源，常用的是阿里云的mvn仓库，修改配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>aliMaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun Maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://Maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、Maven常用命令"><a href="#4、Maven常用命令" class="headerlink" title="4、Maven常用命令"></a>4、Maven常用命令</h3><ul><li>clean：清理编译后的目录</li><li>compile：编译，只编译main目录，不编译test中的代码</li><li>test-compile：编译test目录下的代码</li><li>test：运行test中的代码</li><li>package：打包，将项目打包成jar包或者war包</li><li>install：发布项目到本地仓库，用在打jar包上，打成的jar包可以被其他项目使用</li><li>deploy：打包后将其安装到pom文件中配置的远程仓库</li><li>site：生成站点目录</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus逆向工程</title>
      <link href="/2020/06/17/Mybatis-plus%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
      <url>/2020/06/17/Mybatis-plus%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus的使用"><a href="#Mybatis-plus的使用" class="headerlink" title="Mybatis-plus的使用"></a>Mybatis-plus的使用</h1><p>​        MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>​        特性：</p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h3 id="1、mybatis-plus环境搭建"><a href="#1、mybatis-plus环境搭建" class="headerlink" title="1、mybatis-plus环境搭建"></a>1、mybatis-plus环境搭建</h3><p>Emp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String eName;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double comm;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">geteName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seteName</span><span class="params">(String eName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eName = eName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Integer mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getComm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComm</span><span class="params">(Double comm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comm = comm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Emp&#123;"</span> +</span><br><span class="line">                <span class="string">"empno="</span> + empno +</span><br><span class="line">                <span class="string">", ename='"</span> + eName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", job='"</span> + job + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mgr="</span> + mgr +</span><br><span class="line">                <span class="string">", hiredate="</span> + hiredate +</span><br><span class="line">                <span class="string">", sal="</span> + sal +</span><br><span class="line">                <span class="string">", comm="</span> + comm +</span><br><span class="line">                <span class="string">", deptno="</span> + deptno +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tbl_emp`</span> (</span><br><span class="line">  <span class="string">`EMPNO`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`E_NAME`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`JOB`</span> <span class="built_in">varchar</span>(<span class="number">9</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`MGR`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`HIREDATE`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`SAL`</span> <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`COMM`</span> <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`DEPTNO`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`EMPNO`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="comment"># MyBatis 日志配置</span></span><br><span class="line"><span class="meta">log4j.logger.com.mashibing</span>=<span class="string">truce</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassname</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://192.168.85.111:3306/demo?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure><p>spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.mashibing.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = context.getBean(<span class="string">"dataSource"</span>, DruidDataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在集成mybatis-plus的时候非常简单，只需要替换mybatis自己的sqlSessionFactoryBean对象即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.mashibing.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、简单的CRUD操作"><a href="#2、简单的CRUD操作" class="headerlink" title="2、简单的CRUD操作"></a>2、简单的CRUD操作</h3><p>​        如果我们下面要实现CRUD的基本操作，那么我们该如何实现呢？</p><p>​        在Mybatis中，我们需要编写对应的Dao接口，并在接口中定义相关的方法，然后提供与该接口相同名称的Dao.xml文件，在文件中填写对应的sql语句，才能完成对应的操作</p><p>​        在Mybatis-plus中，我们只需要定义接口，然后继承BaseMapper<T>类即可，此前做的所有操作都是由Mybatis-plus来帮我们完成，不需要创建sql映射文件</T></p><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis操作的时候，我们需要自己定义接口中实现的方法，并添加与之对应的EmpDao.xml文件，编写对应的sql语句</span></span><br><span class="line"><span class="comment"> * 在mybatis-plus操作的时候，我们只需要继承BaseMapper接口即可，其中的泛型T表示我们要实际操作的实体类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Emp</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、插入操作"><a href="#1、插入操作" class="headerlink" title="1、插入操作"></a>1、插入操作</h4><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao = context.getBean(<span class="string">"empDao"</span>,EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">        emp.seteName(<span class="string">"zhangsan"</span>);</span><br><span class="line">        emp.setJob(<span class="string">"Teacher"</span>);</span><br><span class="line">        emp.setMgr(<span class="number">100</span>);</span><br><span class="line">        emp.setSal(<span class="number">1000.0</span>);</span><br><span class="line">        emp.setComm(<span class="number">500.0</span>);</span><br><span class="line">        emp.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">        emp.setDeptno(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> insert = empDao.insert(emp);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        当运行上述代码的时候，大家发现报错了，原因在于你写的实体类的名称跟表的名称不匹配，因此在实现的是需要添加@TableName注解，指定具体的表的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName</span>(<span class="string">"emp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;<span class="comment">//省略内容&#125;</span></span><br></pre></td></tr></table></figure><p>上述代码运行通过之后，大家会发现结果能够正常的进行插入，但是在控制台会打印一个警告信息，说没有@TableId的注解，原因就在于定义实体类的时候并没有声明其中的主键是哪个列，以及使用什么样的主键生成策略，因此，可以在类的属性上添加如下注解，来消除此警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(value = <span class="string">"empno"</span>,type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String eName;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double comm;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line"><span class="comment">//set、get、tostring方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        但是大家会发现，我们在写属性的时候，实体类属性名称跟表的属性名称并没有一一对应上，那么为什么会完成对应的操作呢？</p><p>​        其实原因就在于mybatis-plus的全局配置</p><hr><p>在进行数据插入的是，如果我们输入的时候用的是全字段，那么sql语句中就会执行如下sql语句：</p><p> INSERT INTO tbl_emp ( e_name, job, mgr, hiredate, sal, comm, deptno ) VALUES ( ?, ?, ?, ?, ?, ?, ? )</p><p>但是如果我们在插入的时候，将对象中的某些属性值设置为空，那么会是什么效果呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">        emp.seteName(<span class="string">"zhangsan"</span>);</span><br><span class="line">        emp.setJob(<span class="string">"Teacher"</span>);</span><br><span class="line">        emp.setMgr(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//        emp.setSal(1000.0);</span></span><br><span class="line"><span class="comment">//        emp.setComm(500.0);</span></span><br><span class="line"><span class="comment">//        emp.setHiredate(new Date());</span></span><br><span class="line"><span class="comment">//        emp.setDeptno(10);</span></span><br><span class="line">        <span class="keyword">int</span> insert = empDao.insert(emp);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">        System.out.println(emp.getEmpno());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> INSERT INTO tbl_emp ( e_name, job, mgr ) VALUES ( ?, ?, ? ) </p><p>大家其实可以看到我们在插入的时候，mybatis-plus会根据我会输入的对象的字段的个数来动态的调整我们的sql语句插入的字段，这是大家需要注意的mybatis-plus比较灵活的地方。</p><h4 id="2、更新操作"><a href="#2、更新操作" class="headerlink" title="2、更新操作"></a>2、更新操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">       emp.setEmpno(<span class="number">1</span>);</span><br><span class="line">       emp.seteName(<span class="string">"lisi"</span>);</span><br><span class="line">       emp.setJob(<span class="string">"student"</span>);</span><br><span class="line">       emp.setMgr(<span class="number">100</span>);</span><br><span class="line">       emp.setSal(<span class="number">1000.0</span>);</span><br><span class="line">       emp.setComm(<span class="number">500.0</span>);</span><br><span class="line">       emp.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">       emp.setDeptno(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">int</span> update = empDao.updateById(emp);</span><br><span class="line">       System.out.println(update);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3、删除操作"><a href="#3、删除操作" class="headerlink" title="3、删除操作"></a>3、删除操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1、根据id删除数据</span></span><br><span class="line"><span class="comment">//        int i = empDao.deleteById(1);</span></span><br><span class="line"><span class="comment">//        System.out.println(i);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、根据一组id删除数据</span></span><br><span class="line"><span class="comment">//        int i = empDao.deleteBatchIds(Arrays.asList(2, 3, 4));</span></span><br><span class="line"><span class="comment">//        System.out.println(i);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、根据条件删除数据</span></span><br><span class="line"><span class="comment">//        QueryWrapper queryWrapper = new QueryWrapper();</span></span><br><span class="line"><span class="comment">//        queryWrapper.in("empno",Arrays.asList(5,6,7));</span></span><br><span class="line"><span class="comment">//        int delete = empDao.delete(queryWrapper);</span></span><br><span class="line"><span class="comment">//        System.out.println(delete);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、条件封装map删除数据</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"empno"</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">int</span> i = empDao.deleteByMap(map);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4、查询操作"><a href="#4、查询操作" class="headerlink" title="4、查询操作"></a>4、查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testselect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、根据id查询对象</span></span><br><span class="line"><span class="comment">//        Emp emp = empDao.selectById(1);</span></span><br><span class="line"><span class="comment">//        System.out.println(emp);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、根据实体包装类查询单个对象，返回的结果集有且仅能有一个对象</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;Emp&gt; emp = new QueryWrapper&lt;Emp&gt;();</span></span><br><span class="line"><span class="comment">//        emp.eq("empno",2).eq("e_name","zhangsan");</span></span><br><span class="line"><span class="comment">//        Emp emp1 = empDao.selectOne(emp);</span></span><br><span class="line"><span class="comment">//        System.out.println(emp1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过多个id值进行查询</span></span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; list = empDao.selectBatchIds(Arrays.asList(1, 2, 3));</span></span><br><span class="line"><span class="comment">//        for (Emp emp : list) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(emp);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、通过map封装进行条件查询</span></span><br><span class="line"><span class="comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//        map.put("e_name","zhangsan");</span></span><br><span class="line"><span class="comment">//        map.put("sal",1000.0);</span></span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; list = empDao.selectByMap(map);</span></span><br><span class="line"><span class="comment">//        for (Emp emp : list) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(emp);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、分页查询,需要添加分页插件</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;property name="plugins"&gt;</span></span><br><span class="line"><span class="comment">         *             &lt;array&gt;</span></span><br><span class="line"><span class="comment">         *                 &lt;bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">         *             &lt;/array&gt;</span></span><br><span class="line"><span class="comment">         *         &lt;/property&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// Page&lt;Emp&gt; empPage = empDao.selectPage(new Page&lt;&gt;(2, 5), null);</span></span><br><span class="line">       <span class="comment">// List&lt;Emp&gt; records = empPage.getRecords();</span></span><br><span class="line">       <span class="comment">// System.out.println(records);</span></span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 6、根据条件返回查询结果总数</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;Emp&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        queryWrapper.eq("e_name","zhangsan");</span></span><br><span class="line"><span class="comment">//        Integer integer = empDao.selectCount(queryWrapper);</span></span><br><span class="line"><span class="comment">//        System.out.println(integer);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、根据条件查询所有结果返回list集合</span></span><br><span class="line"><span class="comment">//        List&lt;Emp&gt; list = empDao.selectList(null);</span></span><br><span class="line"><span class="comment">//        for (Emp emp : list) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(emp);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8、根据条件查询结果封装成map的list结构</span></span><br><span class="line"><span class="comment">//        List&lt;Map&lt;String, Object&gt;&gt; maps = empDao.selectMaps(null);</span></span><br><span class="line"><span class="comment">//        System.out.println(maps);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、Mybatis-plus的相关配置"><a href="#3、Mybatis-plus的相关配置" class="headerlink" title="3、Mybatis-plus的相关配置"></a>3、Mybatis-plus的相关配置</h3><p>​        在mybatis中我们可以在mybatis-config配置文件中可以添加<settings>标签，设置全局的默认策略，在MP中也具备相同的功能，只不过配置方式有所不同，我们可以在spring.xml文件中添加配置。</settings></p><p><a href="https://mp.baomidou.com/config/" target="_blank" rel="noopener">https://mp.baomidou.com/config/</a></p><p>在此链接中包含了非常多的配置项，用户可以按照自己的需求添加需要的配置，配置方式如下：</p><p>spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span> <span class="attr">ref</span>=<span class="string">"configuration"</span>/&gt;</span> <span class="comment">&lt;!--  非必须  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span> <span class="attr">ref</span>=<span class="string">"globalConfig"</span>/&gt;</span> <span class="comment">&lt;!--  非必须  --&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configuration"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.MybatisConfiguration"</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"globalConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span> <span class="attr">ref</span>=<span class="string">"dbConfig"</span>/&gt;</span> <span class="comment">&lt;!--  非必须  --&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig"</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        通过这个配置文件的配置，大家可以进行回想上述问题的出现，mybatis-plus是如何解决这个问题的呢？</p><p>​        在mybatis-plus中会引入写默认的配置，这个选项的默认配置为true，因此可以完成对应的实现。</p><p>我们可以通过如下配置来禁用驼峰标识的操作，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.mashibing.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalConfig"</span> <span class="attr">ref</span>=<span class="string">"globalConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configuration"</span> <span class="attr">ref</span>=<span class="string">"configuration"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.mashibing.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configuration"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.MybatisConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"globalConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span> <span class="attr">ref</span>=<span class="string">"dbConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>1、当添加上述配置之后，大家发现运行过程中报错，</strong></p><p>​        Property ‘configuration’ and ‘configLocation’ can not specified with together</p><p>​        表示这两个标签无法同时使用，因此我们可以选择将configLocation给禁用掉，就是不使用mybatis的配置，此时就能够正常使用了，但是放置属性的时候又报错了，原因就在于我们把驼峰标识给禁用了，重新开启即可。除此之外，我们还可以在属性的上面添加@TableField属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField</span>(value = <span class="string">"e_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String eName;</span><br></pre></td></tr></table></figure><p><strong>2、此时发现日志功能又无法使用了，只需要添加如下配置即可</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"configuration"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.MybatisConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"org.apache.ibatis.logging.log4j.Log4jImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、我们在刚刚插入数据的时候发现每个类可能都需要写主键生成策略，这是比较麻烦的，因此可以选择将主键配置策略设置到全局配置中。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">ref</span>=<span class="string">"idType"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">id</span>=<span class="string">"idType"</span> <span class="attr">static-field</span>=<span class="string">"com.baomidou.mybatisplus.annotation.IdType.AUTO"</span>&gt;</span><span class="tag">&lt;/<span class="name">util:constant</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、如果你的表的名字都具备相同的前缀，那么可以设置默认的前缀配置策略，此时的话可以将实体类上的@TableName标签省略不写</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dbConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idType"</span> <span class="attr">ref</span>=<span class="string">"idType"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tablePrefix"</span> <span class="attr">value</span>=<span class="string">"tbl_"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:constant</span> <span class="attr">id</span>=<span class="string">"idType"</span> <span class="attr">static-field</span>=<span class="string">"com.baomidou.mybatisplus.annotation.IdType.AUTO"</span>&gt;</span><span class="tag">&lt;/<span class="name">util:constant</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5、在mybatis-plus中如果需要获取插入的数据的主键的值，那么直接获取即可，原因就在于配置文件中指定了默认的属性为true</strong></p><h3 id="4、条件构造器Wrapper（看官网即可）"><a href="#4、条件构造器Wrapper（看官网即可）" class="headerlink" title="4、条件构造器Wrapper（看官网即可）"></a>4、条件构造器Wrapper（看官网即可）</h3><h3 id="5、代码生成器"><a href="#5、代码生成器" class="headerlink" title="5、代码生成器"></a>5、代码生成器</h3><p>​        AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p>​        其实在学习mybatis的时候我们就使用过逆向工程，根据我们的数据表来生成的对应的实体类，DAO接口和Mapper映射文件，而MyBatis-plus提供了更加完善的功能，下面来针对两种方式做一个基本的对比</p><p>​        1、MyBatis-plus是根据java代码开生成代码的，而Mybatis是根据XML文件的配置来生成的</p><p>​        2、MyBatis-plus能够生成实体类、Mapper接口、Mapper映射文件，Service层，Controller层，而Mybatis只能生成实体类，Mapper接口，Mapper映射文件</p><h4 id="1、操作步骤："><a href="#1、操作步骤：" class="headerlink" title="1、操作步骤："></a>1、操作步骤：</h4><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><p>添加代码生成器依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 模板引擎 依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎，如果都不满足您的要求，可以采用自定义模板引擎。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、编写生成类"><a href="#2、编写生成类" class="headerlink" title="2、编写生成类"></a>2、编写生成类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//此处默认有两个对应的实现类，大家不要导错包</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//设置全局的配置</span></span><br><span class="line">        globalConfig.setActiveRecord(<span class="keyword">true</span>)<span class="comment">//是否支持AR模式</span></span><br><span class="line">                .setAuthor(<span class="string">"lian"</span>)<span class="comment">//设置作者</span></span><br><span class="line">                .setOutputDir(<span class="string">"e:\\self_project\\mybatisplus_generatorcode\\src\\main\\java"</span>)<span class="comment">//设置生成路径</span></span><br><span class="line">                .setFileOverride(<span class="keyword">true</span>)<span class="comment">//设置文件覆盖</span></span><br><span class="line">                .setIdType(IdType.AUTO) <span class="comment">//设置主键生成策略</span></span><br><span class="line">                .setServiceName(<span class="string">"%sService"</span>)<span class="comment">//设置生成的serivce接口的名字</span></span><br><span class="line">                .setBaseResultMap(<span class="keyword">true</span>) <span class="comment">//设置基本的结果集映射</span></span><br><span class="line">                .setBaseColumnList(<span class="keyword">true</span>);<span class="comment">//设置基本的列集合</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置数据源的配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>)</span><br><span class="line">                .setUrl(<span class="string">"jdbc:mysql://192.168.85.111:3306/mp?serverTimezone=UTC"</span>)</span><br><span class="line">                .setUsername(<span class="string">"root"</span>).setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行策略配置</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setCapitalMode(<span class="keyword">true</span>)<span class="comment">//设置全局大写命名</span></span><br><span class="line">                .setNaming(NamingStrategy.underline_to_camel)<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">                .setTablePrefix(<span class="string">"tbl_"</span>)<span class="comment">//设置表名前缀</span></span><br><span class="line">                .setInclude(<span class="string">"tbl_emp"</span>);<span class="comment">//生成的表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行包名的策略配置</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setParent(<span class="string">"com.mashibing"</span>)</span><br><span class="line">                .setMapper(<span class="string">"mapper"</span>)</span><br><span class="line">                .setService(<span class="string">"service"</span>)</span><br><span class="line">                .setController(<span class="string">"controller"</span>)</span><br><span class="line">                .setEntity(<span class="string">"bean"</span>)</span><br><span class="line">                .setXml(<span class="string">"mapper"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整合配置</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig).setDataSource(dataSourceConfig).setStrategy(strategyConfig)</span><br><span class="line">                .setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        注意，当通过上述代码实现之后，大家发现可以在Controller层可以直接实现调用，这些调用的实现最核心的功能就在于ServiceImpl类，这个类中自动完成mapper的注入，同时提供了一系列CRUD的方法。</p><h3 id="6、插件扩展"><a href="#6、插件扩展" class="headerlink" title="6、插件扩展"></a>6、插件扩展</h3><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><h4 id="1、分页插件"><a href="#1、分页插件" class="headerlink" title="1、分页插件"></a>1、分页插件</h4><p>在spring.xml文件中添加如下配置引入插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page page = <span class="keyword">new</span> Page(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    Page page1 = empDao.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    List records = page1.getRecords();</span><br><span class="line">    <span class="keyword">for</span> (Object record : records) &#123;</span><br><span class="line">        System.out.println(record);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">    System.out.println(<span class="string">"获取总条数："</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">"当前页码："</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">"总页码："</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">"每页显示的条数："</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">"是否有上一页："</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">"是否有下一页："</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、乐观锁插件"><a href="#2、乐观锁插件" class="headerlink" title="2、乐观锁插件"></a>2、乐观锁插件</h4><p>当要更新一条记录的时候，希望这条记录没有被别人更新</p><p>乐观锁实现方式：</p><p>取出记录时，获取当前version<br>更新时，带上这个version<br>执行更新时， set version = newVersion where version = oldVersion<br>如果version不对，就更新失败</p><p>添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改实体类添加version字段并在表中添加version字段</p><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">       emp.setEmpno(<span class="number">22</span>);</span><br><span class="line">       emp.seteName(<span class="string">"zhang"</span>);</span><br><span class="line">       emp.setSal(<span class="number">10000.0</span>);</span><br><span class="line">       emp.setComm(<span class="number">1000.0</span>);</span><br><span class="line">       emp.setVersion(<span class="number">2</span>);</span><br><span class="line">       empDao.updateById(emp);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3、SQL执行分析插件，避免出现全表更新和删除"><a href="#3、SQL执行分析插件，避免出现全表更新和删除" class="headerlink" title="3、SQL执行分析插件，避免出现全表更新和删除"></a>3、SQL执行分析插件，避免出现全表更新和删除</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlParserList"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSqlExplain()&#123;</span><br><span class="line">    int delete &#x3D; empDao.delete(null);</span><br><span class="line">    System.out.println(delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、非法sql检查插件"><a href="#4、非法sql检查插件" class="headerlink" title="4、非法sql检查插件"></a>4、非法sql检查插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.extension.plugins.IllegalSQLInterceptor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSqlIllegal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;Emp&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.or();</span><br><span class="line">    List&lt;Emp&gt; list = empDao.selectList(queryWrapper);</span><br><span class="line">    <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、SQL注入器"><a href="#7、SQL注入器" class="headerlink" title="7、SQL注入器"></a>7、SQL注入器</h3><p>​        全局配置 <code>sqlInjector</code> 用于注入 <code>ISqlInjector</code> 接口的子类，实现自定义方法注入。也就是说我们可以将配置在xml中的文件使用注入的方式注入到全局中，就不需要再编写sql语句</p><p>自定义注入器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.injector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractSqlInjector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInjector</span> <span class="keyword">extends</span>  <span class="title">AbstractSqlInjector</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="keyword">new</span> DeleteAll()).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"globalConfig"</span> <span class="attr">class</span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbConfig"</span> <span class="attr">ref</span>=<span class="string">"dbConfig"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlInjector"</span> <span class="attr">ref</span>=<span class="string">"myinject"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myinject"</span> <span class="attr">class</span>=<span class="string">"com.mashibing.injector.MyInjector"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.injector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.TableInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.SqlSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteAll</span> <span class="keyword">extends</span> <span class="title">AbstractMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappedStatement <span class="title">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        String sql;</span><br><span class="line">        MySqlMethod mySqlMethod = MySqlMethod.DELETE_ALL;</span><br><span class="line">        <span class="keyword">if</span> (tableInfo.isLogicDelete()) &#123;</span><br><span class="line">            sql = String.format(mySqlMethod.getSql(), tableInfo.getTableName(),  tableInfo,</span><br><span class="line">                    sqlWhereEntityWrapper(<span class="keyword">true</span>,tableInfo));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mySqlMethod = MySqlMethod.DELETE_ALL;</span><br><span class="line">            sql = String.format(mySqlMethod.getSql(), tableInfo.getTableName(),</span><br><span class="line">                    sqlWhereEntityWrapper(<span class="keyword">true</span>,tableInfo));</span><br><span class="line">        &#125;</span><br><span class="line">        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);</span><br><span class="line">        <span class="keyword">return</span> addUpdateMappedStatement(mapperClass, modelClass, mySqlMethod.getMethod(), sqlSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.injector;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义全局删除方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> MySqlMethod &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除全部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DELETE_ALL(<span class="string">"deleteAll"</span>, <span class="string">"根据 entity 条件删除记录"</span>, <span class="string">"&lt;script&gt;\nDELETE FROM %s %s\n&lt;/script&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line"></span><br><span class="line">    MySqlMethod(String method, String desc, String sql) &#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        <span class="keyword">this</span>.sql = sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在mybatis操作的时候，我们需要自己定义接口中实现的方法，并添加与之对应的EmpDao.xml文件，编写对应的sql语句</span></span><br><span class="line"><span class="comment"> * 在mybatis-plus操作的时候，我们只需要继承BaseMapper接口即可，其中的泛型T表示我们要实际操作的实体类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Emp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、公共字段填充"><a href="#8、公共字段填充" class="headerlink" title="8、公共字段填充"></a>8、公共字段填充</h3><ul><li><p>实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.MetaObjectHandler</p></li><li><p>注解填充字段 <code>@TableField(.. fill = FieldFill.INSERT)</code> 生成器策略部分也可以配置！</p><p>metaobject:元对象，是mybatis提供的一个用于更加方便，更加优雅的访问对象的属性，给对象的属性设置值的一个对象，还会用于包装对象，支持Object,Map,Collection等对象进行包装。本质上metaobject是给对象的属性设置值，最终还是要通过Reflect获取到属性的对应方法的invoker，最终执行。</p></li></ul><p>编写自定义的公共字段填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.fill;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        this.strictInsertFill(metaObject, "eName", String.class, "lian"); // 起始版本 3.3.0(推荐使用)</span><br><span class="line"><span class="comment">//        this.fillStrategy(metaObject, "createTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug请升级到之后的版本如`3.3.1.8-SNAPSHOT`)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        this.strictUpdateFill(metaObject, "eName", String.class,"lian"); // 起始版本 3.3.0(推荐使用)</span><br><span class="line"><span class="comment">//        this.fillStrategy(metaObject, "updateTime", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug请升级到之后的版本如`3.3.1.8-SNAPSHOT`)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加到对应的配置中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"globalConfig"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.baomidou.mybatisplus.core.config.GlobalConfig"</span>&gt;</span><br><span class="line">      &lt;property name="dbConfig" ref="dbConfig"&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name="metaObjectHandler" ref="myMeta"&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  &lt;bean id="myMeta" class="com.mashibing.fill.MyMetaObjectHandler"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMeta</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> insert = empDao.insert(<span class="keyword">new</span> Emp());</span><br><span class="line">      System.out.println(insert);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis SQL映射文件详解</title>
      <link href="/2020/06/16/Mybatis%20SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/06/16/Mybatis%20SQL%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-SQL映射文件详解"><a href="#Mybatis-SQL映射文件详解" class="headerlink" title="Mybatis SQL映射文件详解"></a>Mybatis SQL映射文件详解</h1><p>​        在映射文件中，可以编写以下的顶级元素标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cache – 该命名空间的缓存配置。</span><br><span class="line">cache-ref – 引用其它命名空间的缓存配置。</span><br><span class="line">resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</span><br><span class="line">parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。</span><br><span class="line">sql – 可被其它语句引用的可重用语句块。</span><br><span class="line">insert – 映射插入语句。</span><br><span class="line">update – 映射更新语句。</span><br><span class="line">delete – 映射删除语句。</span><br><span class="line">select – 映射查询语句。</span><br></pre></td></tr></table></figure><p>​        在每个顶级元素标签中可以添加很多个属性，下面我们开始详细了解下具体的配置。</p><h3 id="1、insert、update、delete元素"><a href="#1、insert、update、delete元素" class="headerlink" title="1、insert、update、delete元素"></a>1、insert、update、delete元素</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="left"><code>parameterMap</code></td><td align="left">用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>keyColumn</code></td><td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>databaseId</code></td><td align="left">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果数据库支持自增可以使用这样的方式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">       insert into user(user_name) values(#&#123;userName&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--如果数据库不支持自增的话，那么可以使用如下的方式进行赋值查询--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser2"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"integer"</span>&gt;</span></span><br><span class="line">           select max(id)+1 from user</span><br><span class="line">       <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">       insert into user(id,user_name) values(#&#123;id&#125;,#&#123;userName&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、select元素"><a href="#2、select元素" class="headerlink" title="2、select元素"></a>2、select元素</h3><h5 id="1、select的参数传递"><a href="#1、select的参数传递" class="headerlink" title="1、select的参数传递"></a>1、select的参数传递</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    当查询语句中包含多个参数的是，如果使用#&#123;属性名称&#125;就无法获取具体的值了，那么应该如何使用呢？</span></span><br><span class="line"><span class="comment">        下面就是mybatis的参数传递方式</span></span><br><span class="line"><span class="comment">        1、如果是单个参数，</span></span><br><span class="line"><span class="comment">            基本类型：使用#&#123;随便写&#125;</span></span><br><span class="line"><span class="comment">            引用类型：使用#&#123;类的属性名称&#125;</span></span><br><span class="line"><span class="comment">        2、多个参数：</span></span><br><span class="line"><span class="comment">            当查询的时候传入多个参数的时候，就无法简单的通过#&#123;参数名&#125;来获取值了，</span></span><br><span class="line"><span class="comment">            只能通过arg0,arg1...或者param1,param2等方式来获取值</span></span><br><span class="line"><span class="comment">            原因就在于，mybatis在传入多个参数的时候，会将这些参数封装到一个map中，此时map中的key就是</span></span><br><span class="line"><span class="comment">            arg0,arg1,param1,param2这些值，但是很明显，这样的传值方式不是很友好，没有办法根据参数的名称来</span></span><br><span class="line"><span class="comment">            获取具体的值，因此可以使用如下的方式来指定参数的key是什么</span></span><br><span class="line"><span class="comment">            Emp selectEmpByNoAndName(@Param("empno") Integer empno, @Param("ename") String ename);</span></span><br><span class="line"><span class="comment">                也就是通过@Param来指定存入map中的key值是什么</span></span><br><span class="line"><span class="comment">        3、使用map来传递参数：</span></span><br><span class="line"><span class="comment">                依然是直接使用#&#123;key&#125;来获取具体的属性值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpByNoAndName"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where empno=#&#123;empno&#125; and ename=#&#123;ename&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpByNoAndName2"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where empno=#&#123;empno&#125; and ename=#&#123;ename&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、参数的取值方式"><a href="#2、参数的取值方式" class="headerlink" title="2、参数的取值方式"></a>2、参数的取值方式</h5><p>​        在xml文件中编写sql语句的时候有两种取值的方式，分别是#{}和${}，下面来看一下他们之间的区别：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       当使用#&#123;&#125;来获取值的时候会发现打印的sql语句如下：</span></span><br><span class="line"><span class="comment">           select * from emp where empno=? and ename=?</span></span><br><span class="line"><span class="comment">       当使用$&#123;&#125;来获取值的时候会发现打印的sql语句如下：</span></span><br><span class="line"><span class="comment">           select * from emp where empno=7369 and ename='SMITH'</span></span><br><span class="line"><span class="comment">       通过刚刚的案例大家已经发现了存在的问题了，</span></span><br><span class="line"><span class="comment">       使用#&#123;&#125;方式进行取值：采用的是参数预编译的方式，参数的位置使用？进行替代，不会出现sql注入的问题</span></span><br><span class="line"><span class="comment">       使用$&#123;&#125;方式进行取值：采用的是直接跟sql语句进行拼接的方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此处大家需要注意，如果我们的sql语句中的某些值不支持参数预编译，那么就必须要使用$&#123;&#125;的方式来取值了</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpByNoAndName"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">       select * from #&#123;t&#125; where empno=$&#123;empno&#125; and ename=$&#123;ename&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、处理集合返回结果"><a href="#3、处理集合返回结果" class="headerlink" title="3、处理集合返回结果"></a>3、处理集合返回结果</h5><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当返回值的结果是集合的时候，返回值的类型依然写的是集合中具体的类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllEmp"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select  * from emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在查询的时候可以设置返回值的类型为map，当mybatis查询完成之后会把列的名称作为key</span></span><br><span class="line"><span class="comment">    列的值作为value，转换到map中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpByEmpReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意，当返回的结果是一个集合对象的是，返回值的类型一定要写集合具体value的类型</span></span><br><span class="line"><span class="comment">    同时在dao的方法上要添加@MapKey的注解，来设置key是什么结果</span></span><br><span class="line"><span class="comment">    @MapKey("empno")</span></span><br><span class="line"><span class="comment">    Map&lt;Integer,Emp&gt; getAllEmpReturnMap();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllEmpReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.MapKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmp</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpByNoAndName</span><span class="params">(@Param(<span class="string">"empno"</span>)</span> Integer empno, @<span class="title">Param</span><span class="params">(<span class="string">"ename"</span>)</span> String ename,@<span class="title">Param</span><span class="params">(<span class="string">"t"</span>)</span> String tablename)</span>;</span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpByNoAndName2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">selectAllEmp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Map&lt;String,Object&gt; <span class="title">selectEmpByEmpReturnMap</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MapKey</span>(<span class="string">"empno"</span>)</span><br><span class="line">    <span class="function">Map&lt;Integer,Emp&gt; <span class="title">getAllEmpReturnMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、自定义结果集—resultMap"><a href="#4、自定义结果集—resultMap" class="headerlink" title="4、自定义结果集—resultMap"></a>4、自定义结果集—resultMap</h5><p>Dog.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dog.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : node01</span></span><br><span class="line"><span class="comment">Source Server Version : 50729</span></span><br><span class="line"><span class="comment">Source Host           : 192.168.85.111:3306</span></span><br><span class="line"><span class="comment">Source Database       : demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50729</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2020-03-24 23:54:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `dog`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`dog`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dog`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`dname`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dage`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dgender`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">4</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of dog</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dog <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'大黄'</span>, <span class="string">'1'</span>, <span class="string">'雄'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dog <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'二黄'</span>, <span class="string">'2'</span>, <span class="string">'雌'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dog <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'三黄'</span>, <span class="string">'3'</span>, <span class="string">'雄'</span>);</span><br></pre></td></tr></table></figure><p>DogDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Dog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DogDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">selectDogById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DogDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.DogDao"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   在使用mybatis进行查询的时候，mybatis默认会帮我们进行结果的封装，但是要求列名跟属性名称一一对应上</span></span><br><span class="line"><span class="comment">   在实际的使用过程中，我们会发现有时候数据库中的列名跟我们类中的属性名并不是一一对应的，此时就需要起别名</span></span><br><span class="line"><span class="comment">   起别名有两种实现方式：</span></span><br><span class="line"><span class="comment">      1、在编写sql语句的时候添加别名</span></span><br><span class="line"><span class="comment">      2、自定义封装结果集</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--根据查询的数据进行结果的封装要使用resultMap属性，表示使用自定义规则--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectDogById"</span> <span class="attr">resultMap</span>=<span class="string">"myDog"</span>&gt;</span></span><br><span class="line">      select * from dog where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--自定义结果集，将每一个列的数据跟javaBean的对象属性对应起来</span></span><br><span class="line"><span class="comment">   type:表示为哪一个javaBean对象进行对应</span></span><br><span class="line"><span class="comment">   id:唯一标识，方便其他属性标签进行引用</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"myDog"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Dog"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      指定主键列的对应规则：</span></span><br><span class="line"><span class="comment">      column：表示表中的主键列</span></span><br><span class="line"><span class="comment">      property:指定javaBean的属性</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--设置其他列的对应关系--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dage"</span> <span class="attr">property</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dgender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--可以在sql语句中写别名--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  &lt;select id="selectDogById" resultType="com.mashibing.bean.Dog"&gt;</span></span><br><span class="line"><span class="comment">      select id id,dname name,dage age,dgender gender from dog where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">   &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--这种方式是查询不到任何结果的，因为属性名跟列名并不是一一对应的--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;select id="selectDogById" resultType="com.mashibing.bean.Dog"&gt;</span></span><br><span class="line"><span class="comment">      select * from dog where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">   &lt;/select&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、联合查询"><a href="#5、联合查询" class="headerlink" title="5、联合查询"></a>5、联合查询</h5><p>emp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double common;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename, String job, Integer mgr, Date hiredate, Double sal, Double common, Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Integer mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getCommon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommon</span><span class="params">(Double common)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Emp&#123;"</span> +</span><br><span class="line">                <span class="string">"empno="</span> + empno +</span><br><span class="line">                <span class="string">", ename='"</span> + ename + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", job='"</span> + job + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mgr="</span> + mgr +</span><br><span class="line">                <span class="string">", hiredate="</span> + hiredate +</span><br><span class="line">                <span class="string">", sal="</span> + sal +</span><br><span class="line">                <span class="string">", common="</span> + common +</span><br><span class="line">                <span class="string">", dept="</span> + dept +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dept.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Integer deptno, String dname, String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"deptno="</span> + deptno +</span><br><span class="line">                <span class="string">", dname='"</span> + dname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", loc='"</span> + loc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:编写接口的全类名，就是告诉要实现该配置文件是哪个接口的具体实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.EmpDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--再做查询的时候，有时候需要关联其他对象，因此需要使用关联查询</span></span><br><span class="line"><span class="comment">    可以通过下面自定义结果集的方式实现</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpAndDept"</span> <span class="attr">resultMap</span>=<span class="string">"empDept"</span>&gt;</span></span><br><span class="line">        select * from emp left join dept on emp.deptno = dept.deptno where empno = #&#123;empno&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empDept"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"empno"</span> <span class="attr">property</span>=<span class="string">"empno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"job"</span> <span class="attr">property</span>=<span class="string">"job"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mgr"</span> <span class="attr">property</span>=<span class="string">"mgr"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"hiredate"</span> <span class="attr">property</span>=<span class="string">"hiredate"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sal"</span> <span class="attr">property</span>=<span class="string">"sal"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"comm"</span> <span class="attr">property</span>=<span class="string">"common"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">property</span>=<span class="string">"dept.deptno"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dept.dname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loc"</span> <span class="attr">property</span>=<span class="string">"dept.loc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在mybatis中还提供了一种简单的形式，使用association标签可以搞定</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empDept"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"empno"</span> <span class="attr">property</span>=<span class="string">"empno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"job"</span> <span class="attr">property</span>=<span class="string">"job"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mgr"</span> <span class="attr">property</span>=<span class="string">"mgr"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"hiredate"</span> <span class="attr">property</span>=<span class="string">"hiredate"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sal"</span> <span class="attr">property</span>=<span class="string">"sal"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"comm"</span> <span class="attr">property</span>=<span class="string">"common"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">javaType</span>=<span class="string">"com.mashibing.bean.Dept"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">property</span>=<span class="string">"deptno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"loc"</span> <span class="attr">property</span>=<span class="string">"loc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库的会话</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Emp emp = mapper.selectEmpAndDept(<span class="number">7369</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、获取集合元素"><a href="#6、获取集合元素" class="headerlink" title="6、获取集合元素"></a>6、获取集合元素</h5><p>Dept.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String loc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Integer deptno, String dname, String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoc</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loc = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">getEmps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmps</span><span class="params">(List&lt;Emp&gt; emps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dept&#123;"</span> +</span><br><span class="line">                <span class="string">"deptno="</span> + deptno +</span><br><span class="line">                <span class="string">", dname='"</span> + dname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", loc='"</span> + loc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", emps="</span> + emps +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Dept;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmps</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.DeptDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义查询集合元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptAndEmps"</span> <span class="attr">resultMap</span>=<span class="string">"deptEmp"</span>&gt;</span></span><br><span class="line">        select * from dept left join emp on dept.deptno = emp.deptno where dept.deptno=#&#123;deptno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptEmp"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"deptno"</span> <span class="attr">column</span>=<span class="string">"deptno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"dname"</span> <span class="attr">column</span>=<span class="string">"dname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"loc"</span> <span class="attr">column</span>=<span class="string">"loc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--封装集合类的元素</span></span><br><span class="line"><span class="comment">            property：指定集合的属性</span></span><br><span class="line"><span class="comment">            ofType:指定集合中的元素类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"empno"</span> <span class="attr">column</span>=<span class="string">"empno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"job"</span> <span class="attr">property</span>=<span class="string">"job"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mgr"</span> <span class="attr">property</span>=<span class="string">"mgr"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"hiredate"</span> <span class="attr">property</span>=<span class="string">"hiredate"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sal"</span> <span class="attr">property</span>=<span class="string">"sal"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"comm"</span> <span class="attr">property</span>=<span class="string">"common"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库的会话</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DeptDao mapper = sqlSession.getMapper(DeptDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Dept deptAndEmps = mapper.getDeptAndEmps(<span class="number">10</span>);</span><br><span class="line">        System.out.println(deptAndEmps);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、分步查询"><a href="#7、分步查询" class="headerlink" title="7、分步查询"></a>7、分步查询</h5><p>​        在上述逻辑的查询中，是由我们自己来完成sql语句的关联查询的，那么，我们能让mybatis帮我们实现自动的关联查询吗?</p><p><strong>关联查询的分步</strong></p><p>DeptDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Dept;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmps</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmpsBySimple</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.MapKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpAndDept</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpAndDeptBySimple</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.DeptDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptAndEmpsBySimple"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Dept"</span>&gt;</span></span><br><span class="line">        select * from dept where deptno = #&#123;deptno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.EmpDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpAndDeptBySimple"</span> <span class="attr">resultMap</span>=<span class="string">"simpleEmpAndDept"</span>&gt;</span></span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"simpleEmpAndDept"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"empno"</span> <span class="attr">property</span>=<span class="string">"empno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"job"</span> <span class="attr">property</span>=<span class="string">"job"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"mgr"</span> <span class="attr">property</span>=<span class="string">"mgr"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"hiredate"</span> <span class="attr">property</span>=<span class="string">"hiredate"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sal"</span> <span class="attr">property</span>=<span class="string">"sal"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"comm"</span> <span class="attr">property</span>=<span class="string">"common"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">select</span>=<span class="string">"com.mashibing.dao.DeptDao.getDeptAndEmpsBySimple"</span> <span class="attr">column</span>=<span class="string">"deptno"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//            Emp emp = mapper.selectEmpAndDept(7369);</span></span><br><span class="line">            Emp emp = mapper.selectEmpAndDeptBySimple(<span class="number">7369</span>);</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>集合的分步查询</strong></p><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.MapKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpAndDeptBySimple</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">    <span class="function">Emp <span class="title">selectEmpByStep</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Dept;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmps</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmpsBySimple</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">getDeptAndEmpsByStep</span><span class="params">(Integer deptno)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.EmpDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectEmpByStep"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where deptno = #&#123;deptno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DeptDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mashibing.dao.DeptDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptAndEmpsByStep"</span> <span class="attr">resultMap</span>=<span class="string">"deptEmpByStep"</span>&gt;</span></span><br><span class="line">        select * from dept where deptno = #&#123;deptno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptEmpByStep"</span> <span class="attr">type</span>=<span class="string">"com.mashibing.bean.Dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"deptno"</span> <span class="attr">column</span>=<span class="string">"deptno"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"dname"</span> <span class="attr">column</span>=<span class="string">"dname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"loc"</span> <span class="attr">column</span>=<span class="string">"loc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--封装集合类的元素</span></span><br><span class="line"><span class="comment">            property：指定集合的属性</span></span><br><span class="line"><span class="comment">            ofType:指定集合中的元素类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.mashibing.bean.Emp"</span> <span class="attr">select</span>=<span class="string">"com.mashibing.dao.EmpDao.selectEmpByStep"</span> <span class="attr">column</span>=<span class="string">"deptno"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DeptDao mapper = sqlSession.getMapper(DeptDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//            Dept deptAndEmps = mapper.getDeptAndEmps(10);</span></span><br><span class="line">            Dept deptAndEmpsByStep = mapper.getDeptAndEmpsByStep(<span class="number">10</span>);</span><br><span class="line">            System.out.println(deptAndEmpsByStep);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="8、延迟查询"><a href="#8、延迟查询" class="headerlink" title="8、延迟查询"></a>8、延迟查询</h5><p>​        当我们在进行表关联的时候，有可能在查询结果的时候不需要关联对象的属性值，那么此时可以通过延迟加载来实现功能。在全局配置文件中添加如下属性</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开启延时加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果设置了全局加载，但是希望在某一个sql语句查询的时候不适用延时策略，可以添加如下属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">select</span>=<span class="string">"com.mashibing.dao.DeptDao.getDeptAndEmpsBySimple"</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、动态sql"><a href="#3、动态sql" class="headerlink" title="3、动态sql"></a>3、动态sql</h3><p>​        动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>​        使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>​        如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h5 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h5><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByCondition"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empno!=null"</span>&gt;</span></span><br><span class="line">            empno &gt; #&#123;empno&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            ename like #&#123;ename&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sal!=null"</span>&gt;</span></span><br><span class="line">            sal &gt; #&#123;sal&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">getEmpByCondition</span><span class="params">(Emp emp)</span></span>;</span><br></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">           emp.setEmpno(<span class="number">6500</span>);</span><br><span class="line">           emp.setEname(<span class="string">"%E%"</span>);</span><br><span class="line">           emp.setSal(<span class="number">500.0</span>);</span><br><span class="line">           List&lt;Emp&gt; empByCondition = mapper.getEmpByCondition(emp);</span><br><span class="line">           <span class="keyword">for</span> (Emp emp1 : empByCondition) &#123;</span><br><span class="line">               System.out.println(emp1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           sqlSession.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        看起来测试是比较正常的，但是大家需要注意的是如果我们传入的参数值有缺失会怎么呢？这个时候拼接的sql语句就会变得有问题，例如不传参数或者丢失最后一个参数，那么语句中就会多一个where或者and的关键字，因此在mybatis中也给出了具体的解决方案：</p><p>​        <em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByCondition"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empno!=null"</span>&gt;</span></span><br><span class="line">                empno &gt; #&#123;empno&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                and ename like #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sal!=null"</span>&gt;</span></span><br><span class="line">                and sal &gt; #&#123;sal&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        现在看起来没有什么问题了，但是我们的条件添加到了拼接sql语句的前后，那么我们该如何处理呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   trim截取字符串：</span></span><br><span class="line"><span class="comment">   prefix：前缀，为sql整体添加一个前缀</span></span><br><span class="line"><span class="comment">   prefixOverrides:去除整体字符串前面多余的字符</span></span><br><span class="line"><span class="comment">   suffixOverrides:去除后面多余的字符串</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByCondition"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">       select * from emp</span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empno!=null"</span>&gt;</span></span><br><span class="line">               empno &gt; #&#123;empno&#125; and</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">               ename like #&#123;ename&#125; and</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sal!=null"</span>&gt;</span></span><br><span class="line">               sal &gt; #&#123;sal&#125; and</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、foreach"><a href="#2、foreach" class="headerlink" title="2、foreach"></a>2、foreach</h5><p>​        动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--foreach是对集合进行遍历</span></span><br><span class="line"><span class="comment">    collection="deptnos"  指定要遍历的集合</span></span><br><span class="line"><span class="comment">    close="" 表示以什么结束</span></span><br><span class="line"><span class="comment">    index="" 给定一个索引值</span></span><br><span class="line"><span class="comment">    item=""  遍历的每一个元素的值</span></span><br><span class="line"><span class="comment">    open=""  表示以什么开始</span></span><br><span class="line"><span class="comment">    separator="" 表示多个元素的分隔符</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByDeptnos"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where deptno in </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"deptnos"</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">index</span>=<span class="string">"idx"</span> <span class="attr">item</span>=<span class="string">"deptno"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3、choose"><a href="#3、choose" class="headerlink" title="3、choose"></a>3、choose</h5><p>​        有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpByConditionChoose"</span> <span class="attr">resultType</span>=<span class="string">"com.mashibing.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"empno!=null"</span>&gt;</span></span><br><span class="line">                    empno &gt; #&#123;empno&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">                    ename like #&#123;ename&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"sal!=null"</span>&gt;</span></span><br><span class="line">                    sal &gt; #&#123;sal&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                    1=1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4、set"><a href="#4、set" class="headerlink" title="4、set"></a>4、set</h5><p>​        用于动态更新语句的类似解决方案叫做 <em>set<em>。</em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmpByEmpno"</span>&gt;</span></span><br><span class="line">    update emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empno!=null"</span>&gt;</span></span><br><span class="line">            empno=#&#123;empno&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null"</span>&gt;</span></span><br><span class="line">            ename = #&#123;ename&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sal!=null"</span>&gt;</span></span><br><span class="line">            sal = #&#123;sal&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、缓存"><a href="#4、缓存" class="headerlink" title="4、缓存"></a>4、缓存</h3><p>​        MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。 为了使它更加强大而且易于配置，我们对 MyBatis 3 中的缓存实现进行了许多改进。</p><p>​        默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>当添加上该标签之后，会有如下效果：</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</li><li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li><li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li><li>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</li></ul><p>在进行配置的时候还会分为一级缓存和二级缓存：</p><p>一级缓存：线程级别的缓存，是本地缓存，sqlSession级别的缓存</p><p>二级缓存：全局范围的缓存，不止局限于当前会话</p><h5 id="1、一级缓存的使用"><a href="#1、一级缓存的使用" class="headerlink" title="1、一级缓存的使用"></a>1、一级缓存的使用</h5><p>​        一级缓存是sqlsession级别的缓存，默认是存在的。在下面的案例中，大家发现我发送了两个相同的请求，但是sql语句仅仅执行了一次，那么就意味着第一次查询的时候已经将结果进行了缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           List&lt;Emp&gt; list = mapper.selectAllEmp();</span><br><span class="line">           <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">               System.out.println(emp);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">           List&lt;Emp&gt; list2 = mapper.selectAllEmp();</span><br><span class="line">           <span class="keyword">for</span> (Emp emp : list2) &#123;</span><br><span class="line">               System.out.println(emp);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           sqlSession.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        在大部分的情况下一级缓存是可以的，但是有几种特殊的情况会造成一级缓存失效：</p><p>1、一级缓存是sqlSession级别的缓存，如果在应用程序中只有开启了多个sqlsession，那么会造成缓存失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Emp&gt; list = mapper.selectAllEmp();</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"================================"</span>);</span><br><span class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper2 = sqlSession2.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Emp&gt; list2 = mapper2.selectAllEmp();</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list2) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        sqlSession2.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、在编写查询的sql语句的时候，一定要注意传递的参数，如果参数不一致，那么也不会缓存结果</p><p>3、如果在发送过程中发生了数据的修改，那么结果就不会缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">       EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno);</span><br><span class="line">       System.out.println(<span class="string">"================================"</span>);</span><br><span class="line">       empByEmpno.setEname(<span class="string">"zhangsan"</span>);</span><br><span class="line">       <span class="keyword">int</span> i = mapper.updateEmp(empByEmpno);</span><br><span class="line">       System.out.println(i);</span><br><span class="line">       System.out.println(<span class="string">"================================"</span>);</span><br><span class="line">       Emp empByEmpno1 = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno1);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4、在两次查询期间，手动去清空缓存，也会让缓存失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">        System.out.println(<span class="string">"================================"</span>);</span><br><span class="line">        System.out.println(<span class="string">"手动清空缓存"</span>);</span><br><span class="line">        sqlSession.clearCache();</span><br><span class="line">        System.out.println(<span class="string">"================================"</span>);</span><br><span class="line">        Emp empByEmpno1 = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">        System.out.println(empByEmpno1);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2、二级缓存"><a href="#2、二级缓存" class="headerlink" title="2、二级缓存"></a>2、二级缓存</h5><p>​        二级缓存是全局作用域缓存，默认是不开启的，需要手动进行配置。</p><p>​        Mybatis提供二级缓存的接口以及实现，缓存实现的时候要求实体类实现Serializable接口，二级缓存在sqlSession关闭或提交之后才会生效。</p><h6 id="1、缓存的使用"><a href="#1、缓存的使用" class="headerlink" title="1、缓存的使用"></a>1、缓存的使用</h6><p>​        步骤：</p><p>​        1、全局配置文件中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​        2、需要在使用二级缓存的映射文件出使用<cache>标签标注</cache></p><p>​        3、实体类必须要实现Serializable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        EmpDao mapper2 = sqlSession2.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        Emp empByEmpno1 = mapper2.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">        System.out.println(empByEmpno1);</span><br><span class="line">        sqlSession2.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2、缓存的属性"><a href="#2、缓存的属性" class="headerlink" title="2、缓存的属性"></a>2、缓存的属性</h6><p>​        eviction:表示缓存回收策略，默认是LRU</p><p>​                LRU：最近最少使用的，移除最长时间不被使用的对象</p><p>​                FIFO：先进先出，按照对象进入缓存的顺序来移除</p><p>​                SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象</p><p>​                WEAK：弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象</p><p>​        flushInternal:刷新间隔，单位毫秒</p><p>​                默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p><p>​        size：引用数目，正整数</p><p>​                代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p><p>​        readonly：只读，true/false</p><p>​                true：只读缓存，会给所有调用这返回缓存对象的相同实例，因此这些对象不能被修改。</p><p>​                false：读写缓存，会返回缓存对象的拷贝（序列化实现），这种方式比较安全，默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以看到会去二级缓存中查找数据，而且二级缓存跟一级缓存中不会同时存在数据，因为二级缓存中的数据是在sqlsession 关闭之后才生效的</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">       EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno);</span><br><span class="line">       sqlSession.close();</span><br><span class="line"></span><br><span class="line">       SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">       EmpDao mapper2 = sqlSession2.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       Emp empByEmpno2 = mapper2.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno2);</span><br><span class="line">       Emp empByEmpno3 = mapper2.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno3);</span><br><span class="line">       sqlSession2.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存查询的顺序是先查询二级缓存再查询一级缓存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">       EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno);</span><br><span class="line">       sqlSession.close();</span><br><span class="line"></span><br><span class="line">       SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">       EmpDao mapper2 = sqlSession2.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       Emp empByEmpno2 = mapper2.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno2);</span><br><span class="line">       Emp empByEmpno3 = mapper2.findEmpByEmpno(<span class="number">1111</span>);</span><br><span class="line">       System.out.println(empByEmpno3);</span><br><span class="line"></span><br><span class="line">       Emp empByEmpno4 = mapper2.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line">       System.out.println(empByEmpno4);</span><br><span class="line">       Emp empByEmpno5 = mapper2.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line">       System.out.println(empByEmpno5);</span><br><span class="line">       sqlSession2.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>3、二级缓存的作用范围：</p><p>​        如果设置了全局的二级缓存配置，那么在使用的时候需要注意，在每一个单独的select语句中，可以设置将查询缓存关闭，以完成特殊的设置</p><p>​        1、在setting中设置，是配置二级缓存开启，一级缓存默认一直开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​        2、select标签的useCache属性：</p><p>​                在每一个select的查询中可以设置当前查询是否要使用二级缓存，只对二级缓存有效</p><p>​        3、sql标签的flushCache属性</p><p>​                增删改操作默认值为true，sql执行之后会清空一级缓存和二级缓存，而查询操作默认是false</p><p>​        4、sqlSession.clearCache()</p><p>​                只是用来清楚一级缓存</p><h5 id="3、整合第三方缓存"><a href="#3、整合第三方缓存" class="headerlink" title="3、整合第三方缓存"></a>3、整合第三方缓存</h5><p>​        在某些情况下我们也可以自定义实现缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为。</p><p>​        1、导入对应的maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.ehcache/ehcache --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        2、导入ehcache配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"D:\ehcache"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">defaultCache</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsInMemory</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">eternal</span>=<span class="string">"false"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">属性说明：</span></span><br><span class="line"><span class="comment">l diskStore：指定数据在磁盘中的存储位置。</span></span><br><span class="line"><span class="comment">l defaultCache：当借助CacheManager.add("demoCache")创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是必须的：</span></span><br><span class="line"><span class="comment">l maxElementsInMemory - 在内存中缓存的element的最大数目 </span></span><br><span class="line"><span class="comment">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span></span><br><span class="line"><span class="comment">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span></span><br><span class="line"><span class="comment">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">以下属性是可选的：</span></span><br><span class="line"><span class="comment">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span></span><br><span class="line"><span class="comment">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span></span><br><span class="line"><span class="comment"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span></span><br><span class="line"><span class="comment">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span></span><br><span class="line"><span class="comment">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span></span><br><span class="line"><span class="comment">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure><p>​        3、在mapper文件中添加自定义缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis的介绍及基本使用</title>
      <link href="/2020/06/16/Mybatis%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/16/Mybatis%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis的介绍和基本使用"><a href="#Mybatis的介绍和基本使用" class="headerlink" title="Mybatis的介绍和基本使用"></a>Mybatis的介绍和基本使用</h1><h3 id="0、数据库操作框架的历程"><a href="#0、数据库操作框架的历程" class="headerlink" title="0、数据库操作框架的历程"></a>0、数据库操作框架的历程</h3><h5 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="(1)    JDBC"></a>(1)    JDBC</h5><p>​        JDBC(Java Data Base Connection,java数据库连接)是一种用于执行SQL语句的Java API,可以为多种关系数据库提供统一访问,它由一组用Java语言编写的类和接口组成.JDBC提供了一种基准,据此可以构建更高级的工具和接口,使数据库开发人员能够编写数据库应用程序</p><ul><li>优点：运行期：快捷、高效</li><li>缺点：编辑期：代码量大、繁琐异常处理、不支持数据库跨平台</li></ul><p><img src="/2020/06/16/Mybatis%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/jdbc.jpg" alt="img"></p><h5 id="2-DBUtils"><a href="#2-DBUtils" class="headerlink" title="(2) DBUtils"></a>(2) DBUtils</h5><p>​        DBUtils是Java编程中的数据库操作实用工具，小巧简单实用。</p><p>​        DBUtils封装了对JDBC的操作，简化了JDBC操作，可以少写代码。</p><p>​        DBUtils三个核心功能介绍</p><p>​            1、QueryRunner中提供对sql语句操作的API</p><p>​            2、ResultSetHandler接口，用于定义select操作后，怎样封装结果集</p><p>​            3、DBUtils类，它就是一个工具类，定义了关闭资源与事务处理的方法</p><h5 id="3-Hibernate"><a href="#3-Hibernate" class="headerlink" title="(3)Hibernate"></a>(3)Hibernate</h5><p>​        Hibernate 是由 Gavin King 于 2001 年创建的开放源代码的对象关系框架。它强大且高效的构建具有关系对象持久性和查询服务的 Java 应用程序。</p><p>​        Hibernate 将 Java 类映射到数据库表中，从 Java 数据类型中映射到 SQL 数据类型中，并把开发人员从 95% 的公共数据持续性编程工作中解放出来。</p><p>​        Hibernate 是传统 Java 对象和数据库服务器之间的桥梁，用来处理基于 O/R 映射机制和模式的那些对象。</p><p><img src="/2020/06/16/Mybatis%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/hibernate.jpg" alt="image"></p><p>​        <strong>Hibernate 优势</strong></p><ul><li><p>Hibernate 使用 XML 文件来处理映射 Java 类别到数据库表格中，并且不用编写任何代码。</p></li><li><p>为在数据库中直接储存和检索 Java 对象提供简单的 APIs。</p></li><li><p>如果在数据库中或任何其它表格中出现变化，那么仅需要改变 XML 文件属性。</p></li><li><p>抽象不熟悉的 SQL 类型，并为我们提供工作中所熟悉的 Java 对象。</p></li><li><p>Hibernate 不需要应用程序服务器来操作。</p></li><li><p>操控你数据库中对象复杂的关联。</p></li><li><p>最小化与访问数据库的智能提取策略。</p></li><li><p>提供简单的数据询问。</p><p><strong>Hibernate劣势</strong></p></li><li><p>hibernate的完全封装导致无法使用数据的一些功能。</p></li><li><p>Hibernate的缓存问题。</p></li><li><p>Hibernate对于代码的耦合度太高。</p></li><li><p>Hibernate寻找bug困难。</p></li><li><p>Hibernate批量数据操作需要大量的内存空间而且执行过程中需要的对象太多</p><h5 id="4-JDBCTemplate"><a href="#4-JDBCTemplate" class="headerlink" title="(4) JDBCTemplate"></a>(4) JDBCTemplate</h5></li></ul><p>​       JdbcTemplate针对数据查询提供了多个重载的模板方法,你可以根据需要选用不同的模板方法.如果你的查询很简单，仅仅是传入相应SQL或者相关参数，然后取得一个单一的结果，那么你可以选择如下一组便利的模板方法。</p><p>​        优点：运行期：高效、内嵌Spring框架中、支持基于AOP的声明式事务<br>​        缺点：必须于Spring框架结合在一起使用、不支持数据库跨平台、默认没有缓存</p><h3 id="1、什么是Mybatis？"><a href="#1、什么是Mybatis？" class="headerlink" title="1、什么是Mybatis？"></a>1、什么是Mybatis？</h3><p>​        MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>​        <strong>优点：</strong></p><p>​        1、与JDBC相比，减少了50%的代码量</p><p>​        2、 最简单的持久化框架，简单易学</p><p>​        3、SQL代码从程序代码中彻底分离出来，可以重用</p><p>​        4、提供XML标签，支持编写动态SQL</p><p>​        5、提供映射标签，支持对象与数据库的ORM字段关系映射</p><p>​        <strong>缺点：</strong></p><p>​        1、SQL语句编写工作量大，熟练度要高</p><p>​        2、数据库移植性比较差，如果需要切换数据库的话，SQL语句会有很大的差异</p><h3 id="2、第一个Mybatis项目"><a href="#2、第一个Mybatis项目" class="headerlink" title="2、第一个Mybatis项目"></a>2、第一个Mybatis项目</h3><p>​        1、创建普通的maven项目</p><p>​        2、导入相关的依赖</p><p>​        pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        3、创建对应的数据表，数据表我们使用之前的demo数据库，脚本文件在群里，大家自行去下载安装</p><p>​        4、创建与表对应的实体类对象</p><p>emp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double common;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename, String job, Integer mgr, Date hiredate, Double sal, Double common, Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Integer mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getCommon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommon</span><span class="params">(Double common)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Emp&#123;"</span> +</span><br><span class="line">                <span class="string">"empno="</span> + empno +</span><br><span class="line">                <span class="string">", ename='"</span> + ename + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", job='"</span> + job + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mgr="</span> + mgr +</span><br><span class="line">                <span class="string">", hiredate="</span> + hiredate +</span><br><span class="line">                <span class="string">", sal="</span> + sal +</span><br><span class="line">                <span class="string">", common="</span> + common +</span><br><span class="line">                <span class="string">", deptno="</span> + deptno +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        5、创建对应的dao类</p><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        6、编写配置文件</p><p>log4j.properties</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/demo?serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入每一个接口对应点xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"EmpDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:编写接口的全类名，就是告诉要实现该配置文件是哪个接口的具体实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.oi.dao.EmpDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    select:表示这个操作是一个查询操作</span></span><br><span class="line"><span class="comment">    id表示的是要匹配的方法的名称</span></span><br><span class="line"><span class="comment">    resultType:表示返回值的类型，查询操作必须要包含返回值的类型</span></span><br><span class="line"><span class="comment">    #&#123;属性名&#125;：表示要传递的参数的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findEmpByEmpno"</span> <span class="attr">resultType</span>=<span class="string">"com.oi.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        7、编写测试类</p><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> com.oi.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据全局配置文件创建出SqlSessionFactory</span></span><br><span class="line">        <span class="comment">// SqlSessionFactory:负责创建SqlSession对象的工厂</span></span><br><span class="line">        <span class="comment">// SqlSession:表示跟数据库建议的一次会话</span></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">// 获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        Emp empByEmpno = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取要调用的接口类</span></span><br><span class="line">            EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用方法开始执行</span></span><br><span class="line">            empByEmpno = mapper.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、增删改查的基本操作"><a href="#3、增删改查的基本操作" class="headerlink" title="3、增删改查的基本操作"></a>3、增删改查的基本操作</h3><p>EmpDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmp</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:编写接口的全类名，就是告诉要实现该配置文件是哪个接口的具体实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.oi.dao.EmpDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    select:表示这个操作是一个查询操作</span></span><br><span class="line"><span class="comment">    id表示的是要匹配的方法的名称</span></span><br><span class="line"><span class="comment">    resultType:表示返回值的类型，查询操作必须要包含返回值的类型</span></span><br><span class="line"><span class="comment">    #&#123;属性名&#125;：表示要传递的参数的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findEmpByEmpno"</span> <span class="attr">resultType</span>=<span class="string">"com.oi.bean.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增删改查操作不需要返回值，增删改返回的是影响的行数，mybatis会自动做判断--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmp"</span>&gt;</span></span><br><span class="line">        insert into emp(empno,ename) values(#&#123;empno&#125;,#&#123;ename&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateEmp"</span>&gt;</span></span><br><span class="line">        update emp set ename=#&#123;ename&#125; where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteEmp"</span>&gt;</span></span><br><span class="line">        delete from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> com.oi.dao.EmpDao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 根据全局配置文件创建出SqlSessionFactory</span></span><br><span class="line">        <span class="comment">// SqlSessionFactory:负责创建SqlSession对象的工厂</span></span><br><span class="line">        <span class="comment">// SqlSession:表示跟数据库建议的一次会话</span></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        Emp empByEmpno = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取要调用的接口类</span></span><br><span class="line">            EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用方法开始执行</span></span><br><span class="line">            empByEmpno = mapper.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.insertEmp(<span class="keyword">new</span> Emp(<span class="number">1111</span>, <span class="string">"zhangsan"</span>));</span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.updateEmp(<span class="keyword">new</span> Emp(<span class="number">1111</span>, <span class="string">"lisi"</span>));</span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.deleteEmp(<span class="number">1111</span>);</span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、配置文件详解"><a href="#4、配置文件详解" class="headerlink" title="4、配置文件详解"></a>4、配置文件详解</h3><p>​        在mybatis的项目中，我们发现了有一个mybatis-config.xml的配置文件，这个配置文件是mybatis的全局配置文件，用来进行相关的全局配置，在任何操作下都生效的配置。下面我们要针对其中的属性做详细的解释，方便大家在后续使用的时候更加熟练。</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部配置文件，类似于Spring中的property-placeholder</span></span><br><span class="line"><span class="comment">    resource:从类路径引入</span></span><br><span class="line"><span class="comment">    url:从磁盘路径或者网络路径引入</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来控制mybatis运行时的行为，是mybatis中的重要配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置列名映射的时候是否是驼峰标识--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--typeAliases表示为我们引用的实体类起别名，默认情况下我们需要写类的完全限定名</span></span><br><span class="line"><span class="comment">    如果在此处做了配置，那么可以直接写类的名称,在type中配置上类的完全限定名，在使用的时候可以忽略大小写</span></span><br><span class="line"><span class="comment">    还可以通过alias属性来表示类的别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type="com.oi.bean.Emp" alias="Emp"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果需要引用多个类，那么给每一个类起别名肯定会很麻烦，因此可以指定对应的包名，那么默认用的是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.oi.bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在实际的开发过程中，我们可能分为开发环境，生产环境，测试环境等等，每个环境的配置可以是不一样的</span></span><br><span class="line"><span class="comment">    environment就用来表示不同环境的细节配置，每一个环境中都需要一个事务管理器以及数据源的配置</span></span><br><span class="line"><span class="comment">    我们在后续的项目开发中几乎都是使用spring中配置的数据源和事务管理器来配置，此处不需要研究</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default:用来选择需要的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id:表示不同环境的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--使用$&#123;&#125;来引入外部变量--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassname&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在不同的数据库中，可能sql语句的写法是不一样的，为了增强移植性，可以提供不同数据库的操作实现</span></span><br><span class="line"><span class="comment">    在编写不同的sql语句的时候，可以指定databaseId属性来标识当前sql语句可以运行在哪个数据库中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"orcl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--将sql的映射文件适用mappers进行映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        指定具体的不同的配置文件</span></span><br><span class="line"><span class="comment">        class:直接引入接口的全类名，可以将xml文件放在dao的同级目录下，并且设置相同的文件名称，同时可以使用注解的方式来进行相关的配置</span></span><br><span class="line"><span class="comment">        url:可以从磁盘或者网络路径查找sql映射文件</span></span><br><span class="line"><span class="comment">        resource:在类路径下寻找sql映射文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource="EmpDao.xml"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;mapper resource="UserDao.xml"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;mapper class="com.oi.dao.EmpDaoAnnotation"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当包含多个配置文件或者配置类的时候，可以使用批量注册的功能，也就是引入对应的包，而不是具体的配置文件或者类</span></span><br><span class="line"><span class="comment">        但是需要注意的是，</span></span><br><span class="line"><span class="comment">        1、如果使用的配置文件的形式，必须要将配置文件跟dao类放在一起，这样才能找到对应的配置文件.</span></span><br><span class="line"><span class="comment">            如果是maven的项目的话，还需要添加以下配置，原因是maven在编译的文件的时候只会编译java文件</span></span><br><span class="line"><span class="comment">                &lt;build&gt;</span></span><br><span class="line"><span class="comment">                    &lt;resources&gt;</span></span><br><span class="line"><span class="comment">                        &lt;resource&gt;</span></span><br><span class="line"><span class="comment">                            &lt;directory&gt;src/main/java&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">                        &lt;includes&gt;</span></span><br><span class="line"><span class="comment">                            &lt;include&gt;**/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                        &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/resources&gt;</span></span><br><span class="line"><span class="comment">                &lt;/build&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2、将配置文件在resources资源路径下创建跟dao相同的包名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.oi.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmpDaoAnnotation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Emp;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDaoAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from emp where empno = #&#123;empno&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update emp set ename=#&#123;ename&#125; where empno = #&#123;empno&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from emp where empno = #&#123;empno&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmp</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into emp(empno,ename) values(#&#123;empno&#125;,#&#123;ename&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的前世今生</title>
      <link href="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis的前世今生"><a href="#Redis的前世今生" class="headerlink" title="Redis的前世今生"></a>Redis的前世今生</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h4 id="数据存储演变过程"><a href="#数据存储演变过程" class="headerlink" title="数据存储演变过程"></a>数据存储演变过程</h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408080531729.png" alt="image-20200408080531729" style="zoom: 80%;"><ol><li><strong>数据存储在文件中：</strong>查找数据造成全量扫描，受限于磁盘IO的瓶颈</li><li><strong>关系型数据库：</strong>关系型数据库是行级存储，会空出来没有数据列，受限于磁盘IO的瓶颈</li><li><strong>数据库放入缓存：</strong>受限于硬件，成本高<img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408115004299.png" alt="image-20200408115004299" style="zoom: 80%;"></li></ol><p><strong>数据的存储方式受限于：</strong></p><ol><li>冯诺依曼体系的硬件制约</li><li>以太网, TCP/IP 的网络</li></ol><p>Redis的特点，对比Memcache , value有类型 , 有类型对应的方法(API) , 计算向数据移动</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408130647248.png" alt="image-20200408130647248" style="zoom:80%;"><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408130854366.png" alt="image-20200408130854366" style="zoom: 80%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">centos 6.x</span><br><span class="line">redis官网5.x</span><br><span class="line">http:&#x2F;&#x2F;download.redis. io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class="line">1 , yum install wget</span><br><span class="line">2,cd ~</span><br><span class="line">3,mkdir soft</span><br><span class="line">4,cd soft</span><br><span class="line">5,wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class="line">6,tar xf redis.. tar.gz</span><br><span class="line">7,cd redis-src</span><br><span class="line">8,看README md</span><br><span class="line">9, make</span><br><span class="line">.. install gcc</span><br><span class="line">..... make distclean</span><br><span class="line">10,make</span><br><span class="line">11,cdsrc .. .生成了可执行程序</span><br><span class="line">12, cd ..</span><br><span class="line">13,make install PREFIX&#x3D;&#x2F;opt&#x2F;mashibing&#x2F;redis5</span><br><span class="line">14,vi &#x2F;etc&#x2F;profile</span><br><span class="line">export REDIS_ _HOME&#x3D; &#x2F;opt&#x2F;mashibing&#x2F;redis5</span><br><span class="line">export PATH&#x3D; $PATH:$REDIS_ _HOME&#x2F;bin</span><br><span class="line">.source &#x2F;etc&#x2F;profile</span><br><span class="line">15,cd utils</span><br><span class="line">16,.&#x2F;install_ server.sh ( 可以执行- -次或多次)</span><br><span class="line">)一个物理机中可以有多个redis实例(进程) ,通过port区分</span><br><span class="line">b)可执行程序就-份在目录,但是内存中未来的多个实例需要各自的配置文件,持久化目录等资源 c) service redis_ 6379 start&#x2F;stop&#x2F;stauts &gt; linux &#x2F;etc&#x2F;init.d&#x2F;***</span><br><span class="line">d)脚本还会帮你启动!</span><br><span class="line">17.ps -fe| grep redis</span><br></pre></td></tr></table></figure><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408153530228.png" alt="image-20200408153530228"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408184618523.png" alt="image-20200408184618523" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408184643012.png" alt="image-20200408184643012" style="zoom: 67%;"><h4 id="BIO-gt-同步非阻塞NIO-gt-多路复用NIO"><a href="#BIO-gt-同步非阻塞NIO-gt-多路复用NIO" class="headerlink" title="BIO-&gt;同步非阻塞NIO-&gt;多路复用NIO"></a><strong>BIO-&gt;同步非阻塞NIO-&gt;多路复用NIO</strong></h4><p>内核不断变化</p><ol><li>BIO阻塞: 读一个socket产生的文件描述符, 如果数据包没到, read命令就不能返回, 在这阻塞着, 抛出一个线程在这阻塞着, 有数据就处理, 下边的代码执行不了, 其他线程无法处理已到达的数据, socket是阻塞的<br>一个线程的成本: 线程栈是独立的, 默认1MB, 线程多了, 调度成本提高. CPU浪费, 占用内存多</li><li>同步非阻塞NIO: 遍历, 取出来处理, 都由自己来完成, 同步非阻塞, 每个连接都要掉一次内核</li><li>多路复用NIO: 内核select(), 允许一个程序监视多个文件描述符, 等待直到一个或多个文件描述符准备好, 就能触发I/O操作了 , 一次系统调用读若干个, 返回有数据的, 减少用户态内核态切换 , 选择有数据的, 直接读</li><li>共享空间: 文件描述符都是累赘, 减少内核区域和用户空间之间传参, 把用户空间和内核空间建立映射, 相当于创建共享空间, 通过mmap系统调用, 红黑树+链表, 进程里有文件描述符就往红黑树里放, 内核可以看到, 把到达的放到链表里, 如果</li></ol><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408155018832.png" alt="image-20200408155018832" style="zoom: 67%;"><p>Redis进程的文件描述符<br>0: 标准输入  1: 标准输出  2: 报错输出  3,4: pipe调用 5: epoll </p><p>kafka: sendfile + mmap<br>零拷贝: sendfile系统调用</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408202046656.png" alt="image-20200408202046656" style="zoom: 50%;"><p>Redis为什么快: epoll :     epoll是    <a href="https://baike.baidu.com/item/Linux内核" target="_blank" rel="noopener">Linux内核</a>    为处理大批量    <a href="https://baike.baidu.com/item/文件描述符/9809582" target="_blank" rel="noopener">文件描述符</a>    而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量    <a href="https://baike.baidu.com/item/并发连接/3763280" target="_blank" rel="noopener">并发连接</a>    中只有少量活跃的情况下的系统    <a href="https://baike.baidu.com/item/CPU/120556" target="_blank" rel="noopener">CPU</a>利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。</p><p>顺序性: 每个连接内的命令顺序<br>内存寻址是ns级, 网卡是ms级, 10万倍差距, 10万连接同时时到达, 可能会产生秒级响应<br>mysql开启缓存, 想模仿redis, 性能反而会低, 多了一次判断过程, 增加了内存空间占用</p><h4 id="类比Nginx"><a href="#类比Nginx" class="headerlink" title="类比Nginx"></a><strong>类比Nginx</strong></h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408204003689.png" alt="image-20200408204003689" style="zoom: 67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200408204441726.png" alt="image-20200408204441726" style="zoom: 67%;"><h3 id="5种数据类型"><a href="#5种数据类型" class="headerlink" title="5种数据类型"></a>5种数据类型</h3><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409061635757.png" alt="image-20200409061635757" style="zoom: 50%;"><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409075037824.png" alt="image-20200409075037824"></p><p>可以根据用户的指令, 看是不是和key里存的type匹配, 不匹配直接返回, 规避异常 </p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409001118398.png" alt="image-20200409001118398" style="zoom: 67%;"><p>nx: 只能新建 分布式锁<br>xx: 只能更新 </p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409113532196.png" alt="image-20200409113532196" style="zoom:67%;"><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409113353283.png" alt="image-20200409113353283"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409003109666.png" alt="image-20200409003109666" style="zoom: 67%;"><p>二进制安全: Redis只取字节流, 一个字符一个字节</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409003158840.png" alt="image-20200409003158840" style="zoom: 80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409003251515.png" alt="image-20200409003251515" style="zoom:80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409003647771.png" alt="image-20200409003647771" style="zoom:80%;"><p>和Xshell设置有关</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409003835955.png" alt="image-20200409003835955" style="zoom:80%;"><p>GETSET减少一次I/O</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409004151835.png" alt="image-20200409004151835" style="zoom:80%;"><p>MSETNX原子性set, k2已经存在, 集体失败</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409004430586.png" alt="image-20200409004430586" style="zoom:80%;"><h5 id="bitmap-活跃度-登录数"><a href="#bitmap-活跃度-登录数" class="headerlink" title="bitmap (活跃度|登录数)"></a>bitmap (活跃度|登录数)</h5><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409055641576.png" alt="image-20200409055641576" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409055518451.png" alt="image-20200409055518451" style="zoom:67%;"><p>按位与</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409060700318.png" alt="image-20200409060700318" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409060858971.png" alt="image-20200409060858971" style="zoom:67%;"><p>bitmap优势, 举例: 统计用户登录, 按位与, 统计365天, key是天<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409070846180.png" alt="image-20200409070846180"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409065325283.png" alt="image-20200409065325283" style="zoom: 80%;"><p>举例: 共计活跃用户数<br>第一天a登录, 第二天ab都登陆, 按位或统计活跃用户数, key是日期, value是用户登录情况</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409071145058.png" alt="image-20200409071145058"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409070205536.png" alt="image-20200409070205536" style="zoom:80%;"><h4 id="list-栈-队列"><a href="#list-栈-队列" class="headerlink" title="list (栈|队列)"></a>list (栈|队列)</h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409124546810.png" alt="image-20200409124546810" style="zoom:67%;"><p>同向操作: 栈<br>反向操作: 队列<br>正反索引</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409134226364.png" alt="image-20200409134226364" style="zoom: 80%;"><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409134757688.png" alt="image-20200409134757688" style="zoom: 80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409134906136.png" alt="image-20200409134906136"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409134757688.png" alt="image-20200409134757688" style="zoom: 80%;">![image-20200409134906136](Redis的前世今生/image-20200409134906136.png)<h4 id="hash-点赞-收藏-详情页"><a href="#hash-点赞-收藏-详情页" class="headerlink" title="hash (点赞|收藏|详情页)"></a>hash (点赞|收藏|详情页)</h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409192807821.png" alt="image-20200409192807821"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184326045.png" alt="image-20200409184326045" style="zoom:80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184434046.png" alt="image-20200409184434046" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184326045.png" alt="image-20200409184326045" style="zoom: 67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184434046.png" alt="image-20200409184434046" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184326045.png" alt="image-20200409184326045" style="zoom: 67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184434046.png" alt="image-20200409184434046" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184434046.png" alt="image-20200409184434046" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184326045.png" alt="image-20200409184326045" style="zoom: 50%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184434046.png" alt="image-20200409184434046" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409184559748.png" alt="image-20200409184559748" style="zoom:67%;"><h4 id="set-交并差集"><a href="#set-交并差集" class="headerlink" title="set (交并差集)"></a>set (交并差集)<img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409204042872.png" alt="image-20200409204042872"></h4><p>取交集</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409185350295.png" alt="image-20200409185350295" style="zoom:67%;"><p>取并集</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409185449005.png" alt="image-20200409185449005" style="zoom:67%;"><p>取外差</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409185516331.png" alt="image-20200409185516331" style="zoom:67%;"><p>取随机, 抽奖, 正数不可重复出现, 负数可重复出现<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409190426588.png" alt="image-20200409190426588" style="zoom: 67%;"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409190555586.png" alt="image-20200409190555586" style="zoom:67%;"><p>spop随机抽</p><h4 id="sorted-set-排行榜"><a href="#sorted-set-排行榜" class="headerlink" title="sorted set (排行榜)"></a>sorted set (排行榜)</h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409203930436.png" alt="image-20200409203930436" style="zoom: 80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409194007602.png" alt="image-20200409194007602" style="zoom:80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409204523505.png" alt="image-20200409204523505" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409203723767.png" alt="image-20200409203723767" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409205031951.png" alt="image-20200409205031951" style="zoom:67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409205031951.png" alt="image-20200409205031951" style="zoom: 67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409205154261.png" alt="image-20200409205154261" style="zoom:67%;"><h5 id="跳表-随机造层"><a href="#跳表-随机造层" class="headerlink" title="跳表 (随机造层)"></a>跳表 (随机造层)</h5><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409210122129.png" alt="image-20200409210122129" style="zoom:80%;"><p>图错了</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409210100570.png" alt="image-20200409210100570" style="zoom: 80%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200409210819329.png" alt="image-20200409210819329" style="zoom:67%;"><h3 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h3><h4 id="管道Pipeline"><a href="#管道Pipeline" class="headerlink" title="管道Pipeline"></a>管道Pipeline</h4><p>客户端连接服务端: </p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410053723804.png" alt="image-20200410053723804" style="zoom:67%;"><p>redis 管道 pipeline 一次多条指令</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410053427849.png" alt="image-20200410053427849" style="zoom:67%;"><h5 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h5><p>订阅发布, 订阅之后才能收到发布的消息</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410054646720.png" alt="image-20200410054646720" style="zoom: 67%;"><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410054710442.png" alt="image-20200410054710442" style="zoom:67%;"><p>客户端读历史消息和实时消息<br>redis实时消息, sorted list 日期排序, </p><h5 id="聊天室-Redis-DB"><a href="#聊天室-Redis-DB" class="headerlink" title="聊天室 : Redis+DB"></a>聊天室 : Redis+DB</h5><p>​    接收消息: </p><ul><li><strong>实时</strong>的消息: 通过<strong>发布订阅</strong></li><li><strong>3天内</strong>: <strong>sorted_set</strong>, 时间作为分值, 消息作为元素</li><li>历史记录: DB</li></ul><p>​    发送消息: </p><ul><li>一份直接发到Redis的发布订阅, 一份通过Kafka写到数据库</li></ul><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410055249924.png" alt="image-20200410055249924" style="zoom: 80%;"><p>第二种方式实现聊天室: 双实例</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410055947169.png" alt="image-20200410055947169" style="zoom: 80%;"><h4 id="Redis事务-无回滚"><a href="#Redis事务-无回滚" class="headerlink" title="Redis事务(无回滚)"></a>Redis事务(<strong>无回滚</strong>)</h4><ul><li>muti: 开启事务, 所有指令按客户端排队</li><li>exec: 执行事务(哪个客户端的exec先来, 先执行谁的所有指令)</li><li>watch: 开启事务之前, 监控某个元素, 发现被更改, 后续相关指令不执行</li><li>DISCARD: 放弃执行事务, 清空事务队列</li></ul><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410060037405.png" alt="image-20200410060037405"></p><h5 id="演示事务"><a href="#演示事务" class="headerlink" title="演示事务"></a>演示事务</h5><p>客户端1: 后开启事务, 删除k1<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410061357607.png" alt="image-20200410061357607" style="zoom: 80%;"></p><p>客户端2: 先开启事务, get不到k1<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200612124145896.png" alt="image-20200612124145896"></p><p>演示watch: k1改了, 事务不执行</p><p>客户端1: 由于k1的值被更改, 相关命令不执行<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410061613062.png" alt="image-20200410061613062" style="zoom: 80%;"></p><p>客户端2:<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410061636588.png" alt="image-20200410061636588" style="zoom:80%;"></p><h5 id="不支持回滚"><a href="#不支持回滚" class="headerlink" title="不支持回滚"></a>不支持回滚</h5><ul><li>Redis 命令只会因为<strong>错误的语法而失败</strong>（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由<strong>编程错误造成</strong>的，而这些错误应该在开发的过程中被发现，而<strong>不应该出现在生产环境</strong>中。</li><li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li></ul><p>有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 <a href="http://redis.cn/commands/incr.html" target="_blank" rel="noopener">INCR</a> 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 <a href="http://redis.cn/commands/incr.html" target="_blank" rel="noopener">INCR</a> ， 回滚是没有办法处理这些情况的。](../image/Redis/image-20200410061754103.png)</p><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><p><strong>启动Redis时, 添加布隆过滤器的扩展库</strong></p><h5 id="通过bitmap二进制位数组-映射函数"><a href="#通过bitmap二进制位数组-映射函数" class="headerlink" title="通过bitmap二进制位数组+映射函数"></a>通过bitmap二进制位数组+映射函数</h5><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410063050476.png" alt="image-20200410063050476"></p><p>三种方式, <strong>最好放在服务端</strong></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200410063202681.png" alt="image-20200410063202681"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411100955789.png" alt="image-20200411100955789" style="zoom:67%;"><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1，访问redis.io</span><br><span class="line">2,modules</span><br><span class="line">3,访问RedisBloom的github</span><br><span class="line">      https:&#x2F;&#x2F;github.com&#x2F;RedisBloom&#x2F;RedisBloom</span><br><span class="line">4，linux中wget  *.zip</span><br><span class="line">5,yum install unzip</span><br><span class="line">6,unzip *.zip</span><br><span class="line">7,make</span><br><span class="line">8,cp bloom.so  &#x2F;opt&#x2F;mashibing&#x2F;redis5&#x2F;</span><br><span class="line">9,redis-server --loadmodule  &#x2F;opt&#x2F;mashibing&#x2F;redis5&#x2F;redisbloom.so</span><br><span class="line"></span><br><span class="line">10 ,redis-cli  </span><br><span class="line">11,bf.add  ooxx  abc</span><br><span class="line">bf.exits   abc</span><br><span class="line">bf.exits  sdfsdf</span><br><span class="line"></span><br><span class="line">12,cf.add   #  布谷鸟过滤器</span><br></pre></td></tr></table></figure><h4 id="Redis作为缓存和数据库的区别"><a href="#Redis作为缓存和数据库的区别" class="headerlink" title="Redis作为缓存和数据库的区别"></a>Redis作为缓存和数据库的区别</h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411103336509.png" alt="image-20200411103336509"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411112353530.png" alt="image-20200411112353530"></p><h4 id="Redis回收策略"><a href="#Redis回收策略" class="headerlink" title="Redis回收策略"></a>Redis回收策略</h4><p>过期判定原理：</p><ol><li>被动访问时判定</li><li>周期轮询判定（增量）</li></ol><p>*，目的，稍微牺牲下内存，但是保住了redis性能为王！！！！</p><h5 id="Maxmemory配置指令"><a href="#Maxmemory配置指令" class="headerlink" title="Maxmemory配置指令"></a>Maxmemory配置指令</h5><p><code>maxmemory</code>配置指令用于配置Redis存储数据时指定限制的内存大小。通过redis.conf可以设置该指令，或者之后使用CONFIG SET命令来进行运行时配置。</p><p>例如为了配置内存限制为100mb，以下的指令可以放在<code>redis.conf</code>文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory 100mb</span><br></pre></td></tr></table></figure><p>当指定的内存限制大小达到时，需要选择不同的行为，也就是<strong>策略</strong>。 </p><h5 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h5><p>当maxmemory限制达到的时候Redis会使用的行为由 Redis的maxmemory-policy配置指令来进行配置。</p><p>以下的策略是可用的:</p><ul><li><strong>noeviction</strong>(默认):返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）</li><li><strong>allkeys-lru</strong>: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</li><li><strong>volatile-lru</strong>: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</li><li><strong>allkeys-random</strong>: 回收随机的键使得新添加的数据有空间存放。</li><li><strong>volatile-random</strong>: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</li><li><strong>volatile-ttl</strong>: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</li></ul><p>如果没有键满足回收的前提条件的话，策略<strong>volatile-lru</strong>, <strong>volatile-random</strong>以及<strong>volatile-ttl</strong>就和noeviction 差不多了。</p><p>一般的经验规则:</p><ul><li>使用<strong>allkeys-lru</strong>策略：当你希望你的请求符合一个幂定律分布，也就是说，你希望部分的子集元素将比其它其它元素被访问的更多。如果你不确定选择什么，这是个很好的选择。.</li><li>使用<strong>allkeys-random</strong>：如果你是循环访问，所有的键被连续的扫描，或者你希望请求分布正常（所有元素被访问的概率都差不多）。</li><li>使用<strong>volatile-ttl</strong>：如果你想要通过创建缓存对象时设置TTL值，来决定哪些对象应该被过期。</li></ul><p><strong>allkeys-lru</strong> 和 <strong>volatile-random</strong>策略对于当你想要单一的实例实现缓存及持久化一些键时很有用。不过一般运行两个实例是解决这个问题的更好方法。</p><p>为了键设置过期时间也是需要消耗内存的，所以使用<strong>allkeys-lru</strong>这种策略更加高效，因为没有必要为键取设置过期时间当内存有压力时。</p><h5 id="回收进程如何工作"><a href="#回收进程如何工作" class="headerlink" title="回收进程如何工作"></a><strong>回收进程如何工作</strong></h5><p>理解回收进程如何工作是非常重要的:</p><ul><li>一个客户端运行了新的命令，添加了新的数据。</li><li>Redi检查内存使用情况，如果大于maxmemory的限制, 则根据设定好的策略进行回收。</li><li>一个新的命令被执行，等等。</li><li>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。</li></ul><p>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><h5 id="近似LRU算法"><a href="#近似LRU算法" class="headerlink" title="近似LRU算法"></a><strong>近似LRU算法</strong></h5><p>Redis的LRU算法并非完整的实现。这意味着Redis并没办法选择最佳候选来进行回收，也就是最久未被访问的键。相反它会尝试运行一个近似LRU的算法，通过对少量keys进行取样，然后回收其中一个最好的key（被访问时间较早的）。</p><p>不过从Redis 3.0算法已经改进为回收键的候选池子。这改善了算法的性能，使得更加近似真是的LRU算法的行为。</p><p>Redis LRU有个很重要的点，你通过调整每次回收时检查的采样数量，以实现<strong>调整</strong>算法的精度。这个参数可以通过以下的配置指令调整:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples 5</span><br></pre></td></tr></table></figure><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411112228687.png" alt="image-20200411112228687"></p><h4 id="Redis持久化-重点"><a href="#Redis持久化-重点" class="headerlink" title="Redis持久化 (重点!!!)"></a>Redis持久化 (重点!!!)</h4><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200625213446538.png" alt="image-20200625213446538" style="zoom: 80%;"><h5 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h5><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411125836850.png" alt="image-20200411125836850" style="zoom:67%;"><h6 id="时点混乱"><a href="#时点混乱" class="headerlink" title="时点混乱"></a>时点混乱</h6><p>持久化的开始后, 还要记录现在修改的值</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411122241429.png" alt="image-20200411122241429"></p><h6 id="管道："><a href="#管道：" class="headerlink" title="管道："></a>管道：</h6><p>Linux管道概念: 前边命令的输出作为后边命令的输入<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200625214137737.png" alt="image-20200625214137737"></p><p>1，衔接，前一个命令的输出作为后一个命令的输入</p><p>2，管道会触发创建【子进程】<br>echo $$ |  more<br>echo $BASHPID | more</p><p>$$ 高于 | </p><ul><li>使用linux的时候：存在父子进程</li><li>父进程的数据，子进程可不可以看得到？</li><li>常规思想，进程是数据隔离的！</li><li>进阶思想，父进程其实可以让子进程看到数据！</li><li>linux中<strong>export的环境变量，子进程的修改不会破坏父进程, 父进程的修改也不会破坏子进程</strong><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411123147116.png" alt="image-20200411123147116"></li></ul><h6 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h6><ul><li><p>copy on write：<strong>内核机制</strong></p></li><li><p>fork(): <strong>系统调用</strong></p></li><li><p>写时复制, 创建子进程并不发生复制</p></li><li><p>创建进程变快了</p></li><li><p>根据经验，不可能父子进程把所有数据都改一遍, 玩的是指针<img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411122355696.png" alt="image-20200411122355696"></p><p>要拷贝, 就是把真实数据的地址拷贝一份到需要持久化的进程中<img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/1187916-20200304064424042-1801115546.png" alt="img" style="zoom: 50%;"></p></li></ul><p>其实持久化进程这个时候只是指向了数据的地址, 内存消耗并不多. 如果这时候, 原来的数据修改了, 怎么办呢?</p><p>redis会开辟一块新的空间, 让写数据的地址指向新的空间<br>这样就不会影响持久化进程需要持久化的数据了<img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/1187916-20200304064625052-1383412525.png" alt="img" style="zoom:50%;"></p><h6 id="创建子进程-fork-实现快照"><a href="#创建子进程-fork-实现快照" class="headerlink" title="创建子进程 fork(), 实现快照"></a>创建子进程 fork(), 实现快照</h6><p>8点创建子进程, 父子进程对数据的修改, 对方看不到</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411124332883.png" alt="image-20200411124332883" style="zoom:80%;"><h6 id="RDB实现方式"><a href="#RDB实现方式" class="headerlink" title="RDB实现方式"></a>RDB实现方式</h6><ul><li><p>时点</p></li><li><p>save</p></li><li><p>bgsave</p></li><li><p>配置文件给出bgsave规则</p></li></ul>  <img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411125836850.png" alt="image-20200411125836850" style="zoom:67%;"><h6 id="RDB优缺点"><a href="#RDB优缺点" class="headerlink" title="RDB优缺点"></a>RDB优缺点</h6><h6 id><a href="#" class="headerlink" title></a><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411131300663.png" alt="image-20200411131300663"></h6><h5 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h5><ul><li>丢失数据少</li><li>4.0以后AOF是一个混合体, 重写的AOF文件的时候, Redis先用RDB写到AOF文件, 加快了重写的过程<br>形成混合体文件 （默认开启）<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200626082350192.png" alt="image-20200626082350192"></li></ul><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411132308192.png" alt="image-20200411132308192"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411133318275.png" alt="image-20200411133318275"></p><p>AOF日志<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411144422698.png" alt="image-20200411144422698"></p><p>bgsave, 执行rdb</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411145209929.png" alt="image-20200411145209929"></p><p>执行bgsave 生成 dump.rdb<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411145222593.png" alt="image-20200411145222593"></p><p>无论是混合模式还是单aof, 执行bgrewriteaof, 都只保留最后的数据, 没有历史记录</p><p>*2 有两个元素<br>$6 描述元素的字符数<br><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411175010233.png" alt="image-20200411175010233"></p><p>开启混合模式 aof-use-rdb-preamble yes<br>执行BGREWRITEAOF<br>vi appendonly.aof, 出现RDB的内容</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411175038779.png" alt="image-20200411175038779"></p><p>误操作后, 只要不执行BGREWRITEAOF, 可以在日志中删除误操作记录<br>执行BGREWRITEAOF后, 日志就会同步成当前清空的状态</p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200626090920441.png" alt="image-20200626090920441" style="zoom: 80%;"><h6 id="开启-修改配置文件"><a href="#开启-修改配置文件" class="headerlink" title="开启, 修改配置文件"></a>开启, 修改配置文件</h6><p>appendonly</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411175528382.png" alt="image-20200411175528382"></p><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411181020297.png" alt="image-20200411181020297"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411181101641.png" alt="image-20200411181101641"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411181123008.png" alt="image-20200411181123008"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411184710813.png" alt="image-20200411184710813"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411184729915.png" alt="image-20200411184729915"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411200355740.png" alt="image-20200411200355740"></p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411201140595.png" alt="image-20200411201140595" style="zoom: 80%;"><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411201313150.png" alt="image-20200411201313150"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411203600461.png" alt="image-20200411203600461"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411203621238.png" alt="image-20200411203621238"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411204905204.png" alt="image-20200411204905204"></p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411205051120.png" alt="image-20200411205051120"></p><h4 id="击穿"><a href="#击穿" class="headerlink" title="击穿"></a>击穿</h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411214604205.png" alt="image-20200411214604205"></p><h4 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a><strong>穿透</strong></h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411214620761.png" alt="image-20200411214620761"></p><h4 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a><strong>雪崩</strong></h4><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411214646499.png" alt="image-20200411214646499"></p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a><strong>分布式锁</strong></h4><p>基于数据库实现分布式锁；<br>基于缓存（Redis等）实现分布式锁；<br>基于Zookeeper实现分布式锁；</p><p><strong>Memcached</strong>：利用 Memcached 的 <code>add</code> 命令。此命令是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>add</code> 成功，也就意味着线程得到了锁。</p><p><strong>Redis</strong>：和 Memcached 的方式类似，利用 Redis 的 <code>setnx</code> 命令。此命令同样是原子性操作，只有在 <code>key</code> 不存在的情况下，才能 <code>set</code> 成功。</p><p><strong>Zookeeper</strong>：利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。Zookeeper 设计的初衷，就是为了实现分布式锁服务的。</p><p><strong>Chubby</strong>：Google 公司实现的粗粒度分布式锁服务，底层利用了 Paxos 一致性算法。</p><p><img src="/2020/06/15/Redis%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/image-20200411215324099.png" alt="image-20200411215324099"></p><h3 id="Spring-data-Redis"><a href="#Spring-data-Redis" class="headerlink" title="Spring data Redis"></a>Spring data Redis</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.host&#x3D;192.168.150.99</span><br><span class="line">spring.redis.port&#x3D;6379</span><br></pre></td></tr></table></figure><p>DemoApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConfigurableApplicationContext ctx = SpringApplication.run(DemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">TestRedis redis = ctx.getBean(TestRedis<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">redis.testRedis();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestRedis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.hash.Jackson2HashMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRedis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate  redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"ooxx"</span>)</span><br><span class="line">    StringRedisTemplate  stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ObjectMapper  objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        stringRedisTemplate.opsForValue().set("hello01","china");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(stringRedisTemplate.opsForValue().get("hello01"));</span></span><br><span class="line"></span><br><span class="line">        RedisConnection conn = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line"></span><br><span class="line">        conn.set(<span class="string">"hello02"</span>.getBytes(),<span class="string">"mashibing"</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(conn.get(<span class="string">"hello02"</span>.getBytes())));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        HashOperations&lt;String, Object, Object&gt; hash = stringRedisTemplate.opsForHash();</span></span><br><span class="line"><span class="comment">//        hash.put("sean","name","zhouzhilei");</span></span><br><span class="line"><span class="comment">//        hash.put("sean","age","22");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(hash.entries("sean"));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">        p.setAge(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        stringRedisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class));</span></span><br><span class="line"></span><br><span class="line">        Jackson2HashMapper jm = <span class="keyword">new</span> Jackson2HashMapper(objectMapper, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(<span class="string">"sean01"</span>,jm.toHash(p));</span><br><span class="line"></span><br><span class="line">        Map map = stringRedisTemplate.opsForHash().entries(<span class="string">"sean01"</span>);</span><br><span class="line"></span><br><span class="line">        Person per = objectMapper.convertValue(map, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(per.getName());</span><br><span class="line"></span><br><span class="line">        stringRedisTemplate.convertAndSend(<span class="string">"ooxx"</span>,<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        RedisConnection cc = stringRedisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        cc.subscribe(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"ooxx"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            stringRedisTemplate.convertAndSend(<span class="string">"ooxx"</span>,<span class="string">"hello  from wo zi ji "</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">ooxx</span><span class="params">(RedisConnectionFactory fc)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringRedisTemplate tp = <span class="keyword">new</span> StringRedisTemplate(fc);</span><br><span class="line"></span><br><span class="line">        tp.setHashValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span>  tp ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis的学习网站："><a href="#Redis的学习网站：" class="headerlink" title="Redis的学习网站："></a>Redis的学习网站：</h3><ol><li>redis.cn</li><li>redis.io</li><li>db-engines.com</li></ol><h3 id="API代码的学习："><a href="#API代码的学习：" class="headerlink" title="API代码的学习："></a>API代码的学习：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  redis.io 的client 中有JAVA语言的客户端：jedis、lettuce等可以分别访问他们的github学习</span><br><span class="line">2.  另外是基于spring的使用，主动通过spring.io官网学习spring.data.redis</span><br><span class="line">3.  spring.io中:   https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-data-redis</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序优化——荷兰国旗与随机快排</title>
      <link href="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/"/>
      <url>/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423062433436.png" alt="image-20200423062433436" style="zoom:67%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423062734100.png" alt="image-20200423062734100" style="zoom: 50%;">小于等于num, 当前数和<=区下一个数交换 大于num, 直接跳下一个 <p>分三段: 荷兰国旗问题<br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423070643055.png" alt="image-20200423070643055" style="zoom:67%;"><br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423063218126.png" alt="image-20200423063218126" style="zoom:50%;"><br>[ i ] == num, i++<br>[ i ] &lt; num, [ i ] 与&lt;区右一个交换, &lt;区右扩1位, i++<br>[ i ] &gt; num, [ i ] 与&gt;区左一个交换, &gt;区左扩1位, i不懂, 这个数还没比较过<p></p><p>荷兰国旗1: 以arr[R] 作为划分值<br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423064734526.png" alt="image-20200423064734526" style="zoom: 50%;"><br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423064753839.png" alt="image-20200423064753839" style="zoom:50%;"><br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/image-20200423065349613.png" alt="image-20200423065349613"></p><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423070703395.png" alt="image-20200423070703395" style="zoom: 80%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423065546159.png" alt="image-20200423065546159" style="zoom:50%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423065659272.png" alt="image-20200423065659272" style="zoom:50%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423065804180.png" alt="image-20200423065804180"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423125703988.png" alt="image-20200423125703988" style="zoom: 80%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423065826323.png" alt="image-20200423065826323" style="zoom:50%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423065942356.png" alt="image-20200423065942356" style="zoom:50%;">![image-20200423070051147](快速排序优化——荷兰国旗与随机快排/image-20200423070051147.png)<p>1.0/2.0 时间复杂度</p><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423125738958.png" alt="image-20200423125738958" style="zoom:80%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423070015988.png" alt="image-20200423070015988" style="zoom: 50%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423125821385.png" alt="image-20200423125821385" style="zoom:80%;"><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423070153215.png" alt="image-20200423070153215" style="zoom: 50%;">![image-20200423070221686](快速排序优化——荷兰国旗与随机快排/image-20200423070221686.png)<p>num在中间, 时间复杂度最低</p><p>概率累加 = O(N * logN)</p><p>差情况随机发生<br><img src="/2020/06/13/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E8%8D%B7%E5%85%B0%E5%9B%BD%E6%97%97%E4%B8%8E%E9%9A%8F%E6%9C%BA%E5%BF%AB%E6%8E%92/../../../只要学不死 就往死里学/note/数据结构与算法/image/数据结构与算法/image-20200423070613686.png" alt="image-20200423070613686" style="zoom:67%;"></p><h3 id><a href="#" class="headerlink" title></a></h3></=区下一个数交换>]]></content>
      
      
      
        <tags>
            
            <tag> 算法，排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引优化案例分析</title>
      <link href="/2020/06/13/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/13/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL之覆盖索引、最左前缀、索引下推案例"><a href="#MySQL之覆盖索引、最左前缀、索引下推案例" class="headerlink" title="MySQL之覆盖索引、最左前缀、索引下推案例"></a>MySQL之覆盖索引、最左前缀、索引下推案例</h1><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>mysql的innodb引擎通过搜索树方式实现索引，索引类型分为主键索引和二级索引（非主键索引），主键索引树中，叶子结点保存着主键即对应行的全部数据；而二级索引树中，叶子结点保存着索引值和主键值，当使用二级索引进行查询时，需要进行回表操作。假如我们现在有如下表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;user_table&#96; (</span><br><span class="line">  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int(11) unsigned Not NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  key (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8</span><br></pre></td></tr></table></figure><p>执行语句(A) select id from user_table where username = ‘lzs’时，因为username索引树的叶子结点上保存有username和id的值，所以通过username索引树查找到id后，我们就已经得到所需的数据了，这时候就不需要再去主键索引上继续查找了。<br>执行语句(B) select password from user_table where username = ‘lzs’时，流程如下</p><blockquote><p>1、username索引树上找到username=lzs对应的主键id<br>2、通过回表在主键索引树上找到满足条件的数据</p></blockquote><p>由上面可知，当sql语句的所求查询字段（select列）和查询条件字段（where子句）全都包含在一个索引中，可以直接使用索引查询而不需要回表。这就是覆盖索引，通过使用覆盖索引，可以减少搜索树的次数，是常用的性能优化手段。<br>例如上面的语句B是一个高频查询的语句，我们可以建立(username,password)的联合索引，这样，查询的时候就不需要再去回表操作了，可以提高查询效率。当然，添加索引是有维护代价的，所以添加时也要权衡一下。</p><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>mysql的b+树索引遵循“最左前缀”原则，继续以上面的例子来说明，为了提高语句B的执行速度，我们添加了一个联合索引（username,password）,特别注意这个联合索引的顺序，如果我们颠倒下顺序改成（password,username),这样查询能使用这个索引吗？答案是不能的！这是最左前缀的第一层含义：<strong>联合索引的多个字段中，只有当查询条件为联合索引的一个字段时，查询才能使用该索引。</strong><br>现在，假设我们有一下三种查询情景：<br>1、查出用户名的第一个字是“张”开头的人的密码。即查询条件子句为”where username like ‘张%’”<br>2、查处用户名中含有“张”字的人的密码。即查询条件子句为”where username like ‘%张%’”<br>3、查出用户名以“张”字结尾的人的密码。即查询条件子句为”where username like ‘%张’”</p><p>以上三种情况下，只有第1种能够使用（username,password）联合索引来加快查询速度。这就是最左前缀的第二层含义：<strong>索引可以用于查询条件字段为索引字段，根据字段值最左若干个字符进行的模糊查询。</strong></p><p>维护索引需要代价，所以有时候我们可以利用“最左前缀”原则减少索引数量，上面的（username,password）索引，也可用于根据username查询age的情况。当然，使用这个索引去查询age的时候是需要进行回表的，当这个需求（根据username查询age）也是高频请求时，我们可以创建（username,password,age）联合索引，这样，我们需要维护的索引数量不变。</p><p>创建索引时，我们也要考虑空间代价，使用较少的空间来创建索引<br>假设我们现在不需要通过username查询password了，相反，经常需要通过username查询age或通过age查询username,这时候，删掉（username,password）索引后，我们需要创建新的索引，我们有两种选择<br>1、（username,age）联合索引+age字段索引<br>2、（age,username）联合索引+username单字段索引<br>一般来说，username字段比age字段大的多，所以，我们应选择第一种，索引占用空间较小。</p><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>对于user_table表，我们现在有（username,age）联合索引<br>如果现在有一个需求，查出名称中以“张”开头且年龄小于等于10的用户信息，语句C如下：”select * from user_table where username like ‘张%’ and age &gt; 10”.<br>语句C有两种执行可能：<br>1、根据（username,age）联合索引查询所有满足名称以“张”开头的索引，然后回表查询出相应的全行数据，然后再筛选出满足年龄小于等于10的用户数据。过程如下图。</p><p><img src="/2020/06/13/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/5148507-1684dba15ec6fb78.png" alt="img"></p><p>2、根据（username,age）联合索引查询所有满足名称以“张”开头的索引，然后直接再筛选出年龄小于等于10的索引，之后再回表查询全行数据。过程如下图。</p><p><img src="/2020/06/13/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/5148507-6179190f8409cf3b.png" alt="img"></p><p>明显的，第二种方式需要回表查询的全行数据比较少，这就是mysql的索引下推。mysql默认启用索引下推，我们也可以通过修改系统变量optimizer_switch的index_condition_pushdown标志来控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET optimizer_switch &#x3D; &#39;index_condition_pushdown&#x3D;off&#39;;</span><br></pre></td></tr></table></figure><ul><li><p>注意点：<br>1、innodb引擎的表，索引下推只能用于二级索引。</p><blockquote><p>就像之前提到的，innodb的主键索引树叶子结点上保存的是全行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。</p></blockquote><p>2、索引下推一般可用于所求查询字段（select列）不是/不全是联合索引的字段，查询条件为多条件查询且查询条件子句（where/order by）字段全是联合索引。</p><blockquote><p>假设表t有联合索引（a,b）,下面语句可以使用索引下推提高效率<br>select * from t where a &gt; 2 and b &gt; 10;</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx与Tengine详解</title>
      <link href="/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Tengine"><a href="#Tengine" class="headerlink" title="Tengine"></a>Tengine</h1><h2 id="Nginx和Tengine"><a href="#Nginx和Tengine" class="headerlink" title="Nginx和Tengine"></a>Nginx和Tengine</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx (“engine x”) 是一个高性能的 <strong>HTTP</strong> 和 <strong>反向代理</strong> 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</p><p>•第一个公开版本0.1.0发布于2004年10月4日。</p><p>  其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名</p><p>  官方测试nginx能够支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定</p><p>2011年6月1日，nginx 1.0.4发布。</p><p>  Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，</p><p>  其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：新浪、网易、腾讯等。</p><p><img src="/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/20200103154530929.png" alt="image-20200103154530929"></p><p>功能：</p><ul><li><p>web服务器</p></li><li><p>web reverse proxy</p></li><li><p>smtp reverse proxy</p></li></ul><h3 id="Nginx和apache的优缺点"><a href="#Nginx和apache的优缺点" class="headerlink" title="Nginx和apache的优缺点"></a>Nginx和apache的优缺点</h3><h4 id="nginx相对于apache的优点："><a href="#nginx相对于apache的优点：" class="headerlink" title="nginx相对于apache的优点："></a>nginx相对于apache的优点：</h4><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源 </li><li>抗并发，nginx 处理请求是异步非阻塞的，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能 </li><li>高度模块化的设计，编写模块相对简单</li><li>社区活跃，各种高性能模块出品迅速</li></ul><h4 id="apache-相对于nginx-的优点："><a href="#apache-相对于nginx-的优点：" class="headerlink" title="apache 相对于nginx 的优点："></a>apache 相对于nginx 的优点：</h4><ul><li>rewrite ，比nginx 的rewrite 强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug ，nginx 的bug 相对较多 </li></ul><p>Nginx 配置简洁, Apache 复杂 </p><p>最核心的区别在于apache是同步多进程模型，一个连接对应一个进程；</p><p>nginx是异步的，多个连接（万级别）可以对应一个进程</p><h2 id="Nginx解决的问题"><a href="#Nginx解决的问题" class="headerlink" title="Nginx解决的问题"></a>Nginx解决的问题</h2><ul><li><p>高并发</p></li><li><p>负载均衡</p></li><li><p>高可用</p></li><li><p>虚拟主机</p></li><li><p>伪静态</p></li><li><p>动静分离</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>最好使用linux操作系统，课上使用VirtualBox或VMware虚拟机搭建centos6.x做实验。</p><p>系统依赖组件 <code>gcc openssl-devel pcre-devel zlib-devel</code></p><p>安装：<code>yum install gcc openssl-devel pcre-devel zlib-devel</code></p><h4 id="Tengine下载和文档"><a href="#Tengine下载和文档" class="headerlink" title="Tengine下载和文档"></a>Tengine下载和文档</h4><p><a href="http://tengine.taobao.org/" target="_blank" rel="noopener">http://tengine.taobao.org/</a></p><h4 id="Nginx官网和文档"><a href="#Nginx官网和文档" class="headerlink" title="Nginx官网和文档"></a>Nginx官网和文档</h4><p><a href="http://nginx.org" target="_blank" rel="noopener">http://nginx.org</a></p><p>上传Nginx压缩包到服务器，一般安装在/usr/local目录下</p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./ configure --prefix=/安装路径</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><h3 id="脚本自启动"><a href="#脚本自启动" class="headerlink" title="脚本自启动"></a>脚本自启动</h3><p>拷贝附件提供的Nginx启动脚本文件内容到<code>/etc/init.d/nginx</code>这个文件中</p><p>目录下如果没有这个文件的话需要手动创建</p><h4 id="修改可执行权限"><a href="#修改可执行权限" class="headerlink" title="修改可执行权限"></a>修改可执行权限</h4><p>chmod 777 nginx</p><h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><p>service Nginx start  启动服务</p><p>service Nginx stop 停止</p><p>service Nginx status 状态</p><p>service Nginx reload 动态重载配置文件</p><h4 id="脚本内容："><a href="#脚本内容：" class="headerlink" title="脚本内容："></a>脚本内容：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx - this script starts and stops the nginx daemon</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig:   - 85 15 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> processname: nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> config:      /etc/sysconfig/nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pidfile:     /var/run/nginx.pid</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Source <span class="keyword">function</span> library.</span></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Check that networking is up.</span></span><br><span class="line">[ "$NETWORKING" = "no" ] &amp;&amp; exit 0</span><br><span class="line"> </span><br><span class="line">nginx="/usr/local/tengine/sbin/nginx"</span><br><span class="line">prog=$(basename $nginx)</span><br><span class="line"> </span><br><span class="line">NGINX_CONF_FILE="/usr/local/tengine/conf/nginx.conf"</span><br><span class="line"> </span><br><span class="line">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx</span><br><span class="line"> </span><br><span class="line">lockfile=/var/lock/subsys/nginx</span><br><span class="line"> </span><br><span class="line">make_dirs() &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> make required directories</span></span><br><span class="line">   user=`nginx -V 2&gt;&amp;1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`</span><br><span class="line">   options=`$nginx -V 2&gt;&amp;1 | grep 'configure arguments:'`</span><br><span class="line">   for opt in $options; do</span><br><span class="line">       if [ `echo $opt | grep '.*-temp-path'` ]; then</span><br><span class="line">           value=`echo $opt | cut -d "=" -f 2`</span><br><span class="line">           if [ ! -d "$value" ]; then</span><br><span class="line">               # echo "creating" $value</span><br><span class="line">               mkdir -p $value &amp;&amp; chown -R $user $value</span><br><span class="line">           fi</span><br><span class="line">       fi</span><br><span class="line">   done</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">start() &#123;</span><br><span class="line">    [ -x $nginx ] || exit 5</span><br><span class="line">    [ -f $NGINX_CONF_FILE ] || exit 6</span><br><span class="line">    make_dirs</span><br><span class="line">    echo -n $"Starting $prog: "</span><br><span class="line">    daemon $nginx -c $NGINX_CONF_FILE</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">stop() &#123;</span><br><span class="line">    echo -n $"Stopping $prog: "</span><br><span class="line">    killproc $prog -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    echo</span><br><span class="line">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</span><br><span class="line">    return $retval</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">restart() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    stop</span><br><span class="line">    sleep 1</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">reload() &#123;</span><br><span class="line">    configtest || return $?</span><br><span class="line">    echo -n $"Reloading $prog: "</span><br><span class="line">    killproc $nginx -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">force_reload() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">configtest() &#123;</span><br><span class="line"><span class="meta">  $</span><span class="bash">nginx -t -c <span class="variable">$NGINX_CONF_FILE</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rh_status() &#123;</span><br><span class="line">    status $prog</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rh_status_q() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">case "$1" in</span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || exit 7</span><br><span class="line">        $1</span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || exit 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span><br><span class="line">        exit 2</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="Nginx配置解析"><a href="#Nginx配置解析" class="headerlink" title="Nginx配置解析"></a>Nginx配置解析</h2><h3 id="定义Nginx运行的用户和用户组"><a href="#定义Nginx运行的用户和用户组" class="headerlink" title="定义Nginx运行的用户和用户组"></a>定义Nginx运行的用户和用户组</h3><p><code>user www www;</code></p><h3 id="进程数"><a href="#进程数" class="headerlink" title="进程数"></a>进程数</h3><p>建议设置为等于CPU总核心数。</p><p><code>worker_processes 8;</code></p><h3 id="全局错误日志"><a href="#全局错误日志" class="headerlink" title="全局错误日志"></a>全局错误日志</h3><p>全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</p><p><code>error_log /var/log/nginx/error.log info;</code></p><h3 id="进程文件"><a href="#进程文件" class="headerlink" title="进程文件"></a>进程文件</h3><p><code>pid /var/run/nginx.pid;</code></p><h3 id="打开的最多文件描述符"><a href="#打开的最多文件描述符" class="headerlink" title="打开的最多文件描述符"></a>打开的最多文件描述符</h3><p>一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</p><p><code>worker_rlimit_nofile 65535;</code></p><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><h4 id="单个进程最大连接数"><a href="#单个进程最大连接数" class="headerlink" title="单个进程最大连接数"></a>单个进程最大连接数</h4><p>并发总数是 worker_processes 和 worker_connections 的乘积</p><p>即 max_clients = worker_processes * worker_connections</p><p>在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么<br>为什么上面反向代理要除以4，应该说是一个经验值根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000worker_connections 值的设置跟物理内存大小有关</p><p>因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">工作模式与连接数上限</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">use epoll;</span><br><span class="line">单个进程最大连接数（最大连接数&#x3D;连接数*进程数）</span><br><span class="line">worker_connections 65535;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以打开的文件句柄数是多少</strong></p><p><code>–$ cat /proc/sys/fs/file-max</code></p><p>输出：<code>97320</code></p><p>并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</p><p>所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置,使得并发总数小于操作系统可以打开的最大文件数目</p><p>–    # 其实质也就是根据主机的物理CPU和内存进行配置</p><p>当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</p><p><strong>查看系统限制</strong> <code>ulimit -a</code></p><h4 id="打开文件句柄数量限制"><a href="#打开文件句柄数量限制" class="headerlink" title="打开文件句柄数量限制"></a>打开文件句柄数量限制</h4><p>是Linux操作系统对一个进程打开的文件句柄数量的限制(也包含打开的SOCKET数量，可影响MySQL的并发连接数目)</p><p>系统总限制： <code>/proc/sys/fs/file-max</code> 当前使用句柄数：<code>/proc/sys/fs/file-nr</code></p><p>修改句柄数：<code>ulimit -SHn 65535</code></p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>include mime.types; #文件扩展名与文件类型映射表</p><p>default_type application/octet-stream; #默认文件类型</p><p>charset utf-8; #默认编码</p><p>client_header_buffer_size 32k; #上传文件大小限制</p><h4 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h4><p>sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</p><p>sendfile()还能够用来在两个文件夹之间移动数据</p><p><code>tcp_nopush</code> 在linux/Unix系统中优化tcp数据传输，仅在sendfile开启时有效</p><p><code>autoindex on;</code>#开启目录列表访问，合适下载服务器，默认关闭。</p><p><code>keepalive_timeout 120;</code>#长连接超时时间，单位是秒</p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p><code>gzip on;</code> 开启gzip压缩输出</p><p><code>gzip_min_length 1k;</code>  设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是0，不管页面多大都压缩。建议设置成大于2k的字节数，小于2k可能会越压越大。  </p><p><code>gzip_buffers 4 16k;</code> 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。    如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</p><p><code>gzip_http_version 1.0;</code>压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</p><p><code>gzip_comp_level 2;</code> 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间  </p><p><code>gzip_types text/plain application/x-javascript text/css application/xml;</code><br>#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</p><p> 默认值: gzip_types text/html (默认不对js/css文件进行压缩) </p><p>压缩类型，匹配MIME类型进行压缩 </p><p>设置哪压缩种文本文件可参考 conf/mime.types</p><p> <code>gzip_disable &quot;MSIE [1-6]\.&quot;;</code>E6及以下禁止压缩</p><p><code>gzip_vary on;</code>给CDN和代理服务器使用，针对相同url，可以根据头信息返回压缩和非压缩副本  </p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>listen       80;</code>  监听端口<br><code>server_name www.mashibing.com mashibing.com;</code> 域名可以有多个，用空格隔开</p><p><code>charset koi8-r;</code> 编码集</p> <figure class="highlight plain"><figcaption><span>logs/host.access.log  main;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日志相关</span><br><span class="line">access_log  &quot;pipe:rollback logs&#x2F;host.access_log interval&#x3D;1d baknum&#x3D;7 maxsize&#x3D;2G&quot;  main;</span><br></pre></td></tr></table></figure><p><code>index index.html index.htm index.jsp;</code> 默认页<br><code>root /data/www/ha97;</code> 主目录</p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的</p><p><img src="/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1562927031929.png" alt="1562927031929"></p><p>通过nginx可以实现虚拟主机的配置，nginx支持三种类型的虚拟主机配置</p><ul><li>基于ip的虚拟主机， （一块主机绑定多个ip地址）</li><li>基于域名的虚拟主机（servername）</li><li>基于端口的虚拟主机（listen如果不写ip端口模式）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">server&#123;</span><br><span class="line">#表示一个虚拟主机</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="location"><a href="#location" class="headerlink" title="location"></a>location</h5><p>映射/虚拟目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location &#x3D; &#x2F; &#123;</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;documents&#x2F; &#123;</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location [ = | ~ | <del>* | ^</del> ] uri { … }</p><p><code>location URI {}</code> 对当前路径及子路径下的所有对象都生效；</p><p><code>location = URI {}</code> 注意URL最好为具体路径。  精确匹配指定的路径，不包括子路径，因此，只对当前资源生效；</p><p><code>location ~ URI {}   location ~* URI {}</code>  模式匹配URI，此处的URI可使用正则表达式，<del>区分字符大小写，</del>*不区分字符大小写；</p><p><code>location ^~ URI {}</code> 禁用正则表达式</p><p><strong>优先级</strong>：= &gt; ^~ &gt; <del>|</del>* &gt;  /|/dir/</p><h6 id="location配置规则"><a href="#location配置规则" class="headerlink" title="location配置规则"></a>location配置规则</h6><p>location 的执行逻辑跟 location 的编辑顺序无关。<br>矫正：这句话不全对，“普通 location ”的匹配规则是“最大前缀”，因此“普通 location ”的确与 location 编辑顺序无关；</p><p>但是“正则 location ”的匹配规则是“顺序匹配，且只要匹配到第一个就停止后面的匹配”；</p><p>“普通location ”与“正则 location ”之间的匹配顺序是？先匹配普通 location ，再“考虑”匹配正则 location 。</p><p>注意这里的“考虑”是“可能”的意思，也就是说匹配完“普通 location ”后，有的时候需要继续匹配“正则 location ”，有的时候则不需要继续匹配“正则 location ”。两种情况下，不需要继续匹配正则 location ：</p><ul><li>（ 1 ）当普通 location 前面指定了“ ^~ ”，特别告诉 Nginx 本条普通 location 一旦匹配上，则不需要继续正则匹配；</li><li>（ 2 ）当普通location 恰好严格匹配上，不是最大前缀匹配，则不再继续匹配正则</li></ul><h3 id="IP访问控制"><a href="#IP访问控制" class="headerlink" title="IP访问控制"></a>IP访问控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location  &#123;</span><br><span class="line">   deny  IP &#x2F;IP段</span><br><span class="line">   deny  192.168.1.109;</span><br><span class="line">   allow 192.168.1.0&#x2F;24;192.168.0.0&#x2F;16;192.0.0.0&#x2F;8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户认证访问"><a href="#用户认证访问" class="headerlink" title="用户认证访问"></a>用户认证访问</h3><p>模块ngx_http_auth_basic_module 允许使用“HTTP基本认证”协议验证用户名和密码来限制对资源的访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ (.*)\.avi$ &#123;</span><br><span class="line">         auth_basic  &quot;closed site&quot;;</span><br><span class="line">         auth_basic_user_file conf&#x2F;users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="httpd-tools"><a href="#httpd-tools" class="headerlink" title="httpd-tools"></a><strong>httpd-tools</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br><span class="line"></span><br><span class="line">htpasswd -c -d &#x2F;usr&#x2F;local&#x2F;users zhangyang</span><br></pre></td></tr></table></figure><h3 id="nginx访问状态监控"><a href="#nginx访问状态监控" class="headerlink" title="nginx访问状态监控"></a>nginx访问状态监控</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;basic_status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。</p><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器</p><p><img src="/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/image-20200103154711795.png" alt="image-20200103154711795"></p><h4 id="经典的反向代理结构"><a href="#经典的反向代理结构" class="headerlink" title="经典的反向代理结构"></a>经典的反向代理结构</h4><p><img src="/2020/06/12/Nginx%E4%B8%8ETengine%E8%AF%A6%E8%A7%A3/image-20200103154652173.png" alt="image-20200103154652173"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy_pass http:&#x2F;&#x2F;192.168.43.152&#x2F;</span><br></pre></td></tr></table></figure><p>301重定向问题</p><h4 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h4><p>反向代理配合upstream使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  upstream httpds &#123;</span><br><span class="line">    server 192.168.43.152:80;</span><br><span class="line">    server 192.168.43.153:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="weight-权重"><a href="#weight-权重" class="headerlink" title="weight(权重)"></a><strong>weight(权重)</strong></h5><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds &#123;</span><br><span class="line">    server 127.0.0.1:8050       weight&#x3D;10 down;</span><br><span class="line">    server 127.0.0.1:8060       weight&#x3D;1;</span><br><span class="line">     server 127.0.0.1:8060      weight&#x3D;1 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>down：表示当前的server暂时不参与负载 </li><li>weight：默认为1.weight越大，负载的权重就越大。 </li><li>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。</li></ul><h5 id="max-conns"><a href="#max-conns" class="headerlink" title="max_conns"></a><strong>max_conns</strong></h5><p>可以根据服务的好坏来设置最大连接数，防止挂掉，比如1000，我们可以设置800</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds &#123;</span><br><span class="line">    server 127.0.0.1:8050    weight&#x3D;5  max_conns&#x3D;800;</span><br><span class="line">    server 127.0.0.1:8060    weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="max-fails、-fail-timeout"><a href="#max-fails、-fail-timeout" class="headerlink" title="max_fails、 fail_timeout"></a><strong>max_fails、 fail_timeout</strong></h5><p>max_fails:失败多少次 认为主机已挂掉则，踢出，公司资源少的话一般设置2~3次，多的话设置1次</p><p>max_fails=3 fail_timeout=30s代表在30秒内请求某一应用失败3次，认为该应用宕机，后等待30秒，这期间内不会再把新请求发送到宕机应用，而是直接发到正常的那一台，时间到后再有请求进来继续尝试连接宕机应用且仅尝试1次，如果还是失败，则继续等待30秒…以此循环，直到恢复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream httpds &#123;</span><br><span class="line">    server 127.0.0.1:8050    weight&#x3D;1  max_fails&#x3D;1  fail_timeout&#x3D;20;</span><br><span class="line">    server 127.0.0.1:8060    weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h5><p><strong>轮询+weight</strong>  <strong>ip_hash</strong> <strong>url_hash</strong> <strong>least_conn</strong> <strong>least_time</strong> </p><h4 id="健康检查模块"><a href="#健康检查模块" class="headerlink" title="健康检查模块"></a>健康检查模块</h4><p>配置一个status的location</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;status &#123;</span><br><span class="line">            check_status;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在upstream配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check interval&#x3D;3000 rise&#x3D;2 fall&#x3D;5 timeout&#x3D;1000 type&#x3D;http;</span><br><span class="line">check_http_send &quot;HEAD &#x2F; HTTP&#x2F;1.0\r\n\r\n&quot;;</span><br><span class="line">check_http_expect_alive http_2xx http_3xx;</span><br></pre></td></tr></table></figure><h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><h4 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><ul><li>安装libevent</li><li>安装memcached</li></ul><p>可以用yum方式安装 <code>yum –y install memcached</code></p><h5 id="启动memcached"><a href="#启动memcached" class="headerlink" title="启动memcached"></a>启动memcached</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">memcached -d -m 128 -u root -l 192.168.43.151 -p 11211 -c 256 -P &#x2F;tmp&#x2F;memcached.pid</span><br><span class="line">memcached-tool 192.168.2.51:11211</span><br><span class="line">参数解释：</span><br><span class="line">-d:后台启动服务</span><br><span class="line">-m:缓存大小</span><br><span class="line">-p：端口</span><br><span class="line">-l:IP</span><br><span class="line">-P:服务器启动后的系统进程ID，存储的文件</span><br><span class="line">-u:服务器启动是以哪个用户名作为管理用户</span><br></pre></td></tr></table></figure><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat&#123;</span><br><span class="line">        server 192.168.2.52:8080;</span><br><span class="line">        server 192.168.2.53:8080;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F;tomcat &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tomcat&#x2F;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h4><p>到tomcat的lib下，jar包见附件</p><p>每个tomcat里面的context.xml中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Manager className&#x3D;&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot; </span><br><span class="line">memcachedNodes&#x3D;&quot;n1:192.168.43.151:11211&quot; </span><br><span class="line">    sticky&#x3D;&quot;false&quot; </span><br><span class="line">    lockingMode&#x3D;&quot;auto&quot;</span><br><span class="line">    sessionBackupAsync&#x3D;&quot;false&quot;</span><br><span class="line">requestUriIgnorePattern&#x3D;&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span><br><span class="line">    sessionBackupTimeout&#x3D;&quot;1000&quot; transcoderFactoryClass&#x3D;&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot; </span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="http-proxy-本地磁盘缓存"><a href="#http-proxy-本地磁盘缓存" class="headerlink" title="http_proxy 本地磁盘缓存"></a>http_proxy 本地磁盘缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path &#x2F;path&#x2F;to&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;my_cache:10m max_size&#x3D;10g inactive&#x3D;60m use_temp_path&#x3D;off;</span><br><span class="line">server &#123;</span><br><span class="line">     set $upstream http:&#x2F;&#x2F;ip:port</span><br><span class="line">          location &#x2F; &#123;</span><br><span class="line">                   proxy_cache my_cache;</span><br><span class="line">                   proxy_pass $upstream;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;path&#x2F;to&#x2F;cache  #本地路径，用来设置Nginx缓存资源的存放地址</span><br><span class="line">levels          #默认所有缓存文件都放在同一个&#x2F;path&#x2F;to&#x2F;cache下，但是会影响缓存的性能，因此通常会在&#x2F;path&#x2F;to&#x2F;cache下面建立子目录用来分别存放不同的文件。假设levels&#x3D;1:2，Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到&#x2F;path&#x2F;to&#x2F;cache&#x2F;0&#x2F;6d目录中</span><br><span class="line">key_zone        #在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key</span><br><span class="line">max_size        #最大cache空间，如果不指定，会使用掉所有disk space，当达到配额后，会删除最少使用的cache文件</span><br><span class="line">inactive        #未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件。inactive默认是10分钟。需要注意的是，inactive和expired配置项的含义是不同的，expired只是缓存过期，但不会被删除，inactive是删除指定时间内未被访问的缓存文件</span><br><span class="line">use_temp_path   #如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，official建议为off，避免文件在不同文件系统中不必要的拷贝</span><br><span class="line">proxy_cache     #启用proxy cache，并指定key_zone。另外，如果proxy_cache off表示关闭掉缓存。</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list</span><br><span class="line">chkconfig --add nginx</span><br><span class="line">chkconfig nginx on</span><br></pre></td></tr></table></figure><h3 id="时间问题"><a href="#时间问题" class="headerlink" title="时间问题"></a>时间问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ntpd status</span><br></pre></td></tr></table></figure><h3 id="虚拟目录"><a href="#虚拟目录" class="headerlink" title="虚拟目录"></a>虚拟目录</h3><pre><code>location /www {     alias  /var/data/www1;     index  index.html index.htm a.html; }</code></pre><h3 id="自动索引"><a href="#自动索引" class="headerlink" title="自动索引"></a>自动索引</h3><pre><code>location /art {     alias  /var/data/www1/;       autoindex on; }</code></pre><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    location &#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;192.168.150.11:803;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|html|htm|css|js)$ &#123;</span><br><span class="line">          root  &#x2F;var&#x2F;data&#x2F;www1&#x2F;;</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程</title>
      <link href="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200331171617504.png" alt="image-20200331171731777" style="zoom: 67%;"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01_02.jpg" alt="01_02"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522121553190.png" alt="image-20200522121553190" style="zoom:67%;"><p>什么是叫一个进程？ 什么叫一个线程？ </p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522121725120.png" alt="image-20200522121725120" style="zoom: 80%;"><ul><li><p>Program app -&gt;QQ.exe</p><p><strong>进程：</strong>做一个简单的解释，你的硬盘上有一个简单的程序，这个程序叫QQ.exe，这是一个程序，这个程序是一个静态的概念，它被扔在硬盘上也没人理他，但是当你双击它，弹出一个界面输入账号密码登录进去了，OK，这个时候叫做一个进程。进程相对于程序来说它是一个动态的概念</p><p><strong>线程：</strong>作为一个进程里面最小的执行单元它就叫一个线程，用简单的话讲一个程序里不同的执行路径就叫做一个线程</p></li></ul><h4 id="启动线程的五种方式"><a href="#启动线程的五种方式" class="headerlink" title="启动线程的五种方式"></a>启动线程的五种方式</h4><p>1: 继承Thread类    2: 实现Runnable    3: 线程池Executors.newCachedThrad</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.juc.c_000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_HowToCreateThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyThread!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyRun!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello MyCall"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动线程的5种方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 继承Thread</span></span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        <span class="comment">// 实现Runable</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRun()).start();</span><br><span class="line">        <span class="comment">// Lambda</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello Lambda!"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"><span class="comment">// 实现Callable</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> MyCall()));</span><br><span class="line">        t.start();</span><br><span class="line"><span class="comment">// 缓存线程池</span></span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">        service.execute(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello ThreadPool"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526060941085.png" alt="image-20200526060941085" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526061909808.png" alt="image-20200526061909808" style="zoom: 80%;"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>wait(), join(), LockSupport() 进入waiting状态; notify(), notifyAll(), LockSupport<br>yield() Running –&gt; Ready<br>等待过得同步代码块的锁, 进入Blocked状态, 获得后, 进入Runnale<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522122259623.png" alt="image-20200522122259623" style="zoom: 50%;"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200331201536720.png" alt="image-20200331201536720"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200526061523926.png" alt></p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.juc.c_000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_Sleep_Yield_Join</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//testSleep();</span></span><br><span class="line"><span class="comment">//testYield();</span></span><br><span class="line">        testJoin();</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/*Sleep,意思就是睡眠，当前线程暂停一段时间让给别的线程去运行。Sleep是怎么复活的？由你的睡眠时间而定，等睡眠到规定的时间自动复活*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*Yield,就是当前线程正在执行的时候停止下来进入等待队列，回到等待队列里在系统的调度算法里头呢还是依然有可能把你刚回去的这个线程拿回来继续执行，当然，更大的可能性是把原来等待的那些拿出一个来执行，所以yield的意思是我让出一下CPU，后面你们能不能抢到那我不管*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testYield</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>) Thread.yield();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"------------B"</span> + i);</span><br><span class="line">                <span class="keyword">if</span>(i%<span class="number">10</span> == <span class="number">0</span>) Thread.yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*join， 意思就是在自己当前线程加入你调用Join的线程（），本线程等待。等调用的线程运行完了，自己再去执行。t1和t2两个线程，在t1的某个点上调用了t2.join,它会跑到t2去运行，t1等待t2运行完毕继续t1运行（自己join自己没有意义） */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    <span class="comment">//TimeUnit.Milliseconds.sleep(500)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200331201905775.png" alt="image-20200331201905775"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331201926560.png" alt="image-20200331201926560" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331202023954.png" alt="image-20200331202023954" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331202137156.png" alt="image-20200331202137156" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331202109191.png" alt="image-20200331202109191" style="zoom: 67%;"><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526063943625.png" alt="image-20200526063943625" style="zoom:50%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526063846222.png" alt="image-20200526063846222" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526064256437.png" alt="image-20200526064256437" style="zoom: 80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526064338898.png" alt="image-20200526064338898" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526064456019.png" alt="image-20200526064456019" style="zoom:80%;"><p>这道题加Synchronized就没必要加volatile, synchronized既保证同步, 有保证线程可见</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526065140791.png" alt="image-20200526065140791" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331202636319.png" alt="image-20200331202636319"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* synchronized关键字</span></span><br><span class="line"><span class="comment"> * 对某个对象加锁</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"> * 面试题：模拟银行账户</span></span><br><span class="line"><span class="comment"> * 对业务写方法加锁</span></span><br><span class="line"><span class="comment"> * 对业务读方法不加锁</span></span><br><span class="line"><span class="comment"> * 这样行不行？</span></span><br><span class="line"><span class="comment"> * 容易产生脏读问题（dirtyRead）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 同步和非同步方法可以同时调用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个    对象的锁，再次申请的时候仍然会得到该对象的锁.也就是说          synchronized获得的锁是可重入的</span></span><br><span class="line"><span class="comment">     举例：子类调用父类的同步方法</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment"> * 程序在执行过程中，如果出现异常，默认情况锁会被释放</span></span><br><span class="line"><span class="comment"> * 所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。</span></span><br><span class="line"><span class="comment"> * 比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适，</span></span><br><span class="line"><span class="comment"> * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。</span></span><br><span class="line"><span class="comment"> * 因此要非常小心的处理同步业务逻辑中的异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">·业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line"><span class="comment">·采用细粒度的锁，可以使线程争用时间变短，从而提高效率</span></span><br><span class="line"><span class="comment">·不要以字符串常量作为锁定对象，比如你用到了一个类库，在该类库中代码锁定了字符串“Hello”，可能发生非常诡异的死锁阻塞</span></span><br><span class="line"><span class="comment">·锁定某对象o，如果o的属性发生改变，不影响锁的使用，但是如果o变成另外一个对象，则锁定的对象发生改变，应该避免将锁定对象的引用变成另外的对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">synchronized的底层实现</span></span><br><span class="line"><span class="comment">JDK早期的 重量级 - OS</span></span><br><span class="line"><span class="comment">后来的改进</span></span><br><span class="line"><span class="comment">锁升级的概念：</span></span><br><span class="line"><span class="comment">    我就是厕所所长 （一 二）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sync (Object)</span></span><br><span class="line"><span class="comment">markword 记录这个线程ID （偏向锁）</span></span><br><span class="line"><span class="comment">如果线程争用：升级为 自旋锁</span></span><br><span class="line"><span class="comment">10次以后，</span></span><br><span class="line"><span class="comment">升级为重量级锁 - OS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行时间短（加锁代码），线程数少，用自旋</span></span><br><span class="line"><span class="comment">执行时间长，线程数多，用系统锁**/</span></span><br></pre></td></tr></table></figure><p>多个线程去访问同一个资源的时候对这个资源上锁。</p><p>访问某一段代码或者某临界资源的时候是需要有一把锁的概念在这儿的。</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01_04.jpg" alt="01_04"></p><p>比如：我们对一个数字做递增，两个程序对它一块儿来做递增，递增就是把一个程序往上加1啊，如果两个线程共同访问的时候，第一个线程一读它是0，然后把它加1，在自己线程内部内存里面算还没有写回去的时候而第二个线程读到了它还是0，加1在写回去，本来加了两次，但还是1，那么我们在对这个数字递增的过程当中就上把锁，就是说第一个线程对这个数字访问的时候是独占的，不允许别的线程来访问，不允许别的线程来对它计算，我必须加完1收释放锁，其他线程才能对它继续加。</p><p>实质上，这把锁并不是对数字进行锁定的， 你可以任意指定，想锁谁就锁谁。</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331202023954.png" alt="image-20200331202023954" style="zoom:67%;"><ol><li>上了把锁之后才能对count进行减减访问，你可以new一个Object，所以这里锁定就是o，当我拿到这把锁的时候才能执行这段代码。是锁定的某一个对象，synchronized有一个锁升级的概念</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*synchronized关键字</span></span><br><span class="line"><span class="comment">*对某个对象加锁</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_001;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(o) &#123; <span class="comment">//任何线程要想执行下面的代码，必须先拿到o的锁</span></span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>synchronized它的一些特性。如果说你每次都定义个一个锁的对象Object o 把它new出来那加锁的时候太麻烦每次都要new一个新的对象出来，所以呢，有一个简单的方式就是<strong>synchronized(this)</strong>锁定当前对象就行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized关键字</span></span><br><span class="line"><span class="comment"> * 对某个对象加锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; ߳</span><br><span class="line">            <span class="comment">//任何线程想要执行那个下面的代码，必须先要拿到this的锁</span></span><br><span class="line">      count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>如果你要是锁定当前对象呢，你也可以写成如下方法。synchronized方法和synchronized(this)执行这段代码它是等值的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.juc.c_003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//等同于在方法的代码执行时要synchronized(this)</span></span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>静态方法static是没有this对象的，你不需要new出一个对象来就能执行这个方法，但如果这个这个上面加一个synchronized的话就代表synchronized(T.class)。这里这个synchronized(T.class)锁的就是T类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.juc.c_004;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">//这里等同于synchronized(T.class)</span></span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(T<span class="class">.<span class="keyword">class</span>) </span>&#123; </span><br><span class="line">            <span class="comment">//考虑一下这里写synchronized(this)是否可以？</span></span><br><span class="line">count --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：T.class是单例的吗？</strong></p><p>一个类 load到内存它是不是单例的，想想看。一般情况下是，如果是在同一个ClassLoader空间那它一定是。不是同一个类加载器就不是了，不同的类加载器互相之间也不能访问。所以说你能访问它，那他一定就是单例</p><ol start="5"><li>下面程序：很有可能读不到别的线程修改过的内容，除了这点之外count减减完了之后下面的count输出和你减完的结果不对，很容易分析：如果有一个线程把它从10减到9了，然后又有一个线程在前面一个线程还没有输出呢进来了把9又减到了8，继续输出的8，而不是9。如果你想修正它，前面第一个是在上面加volatile，改了马上就能得到。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析一下这个程序的输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_005;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="comment">/*volatile*/</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(t, <span class="string">"THREAD"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>另外这个之外还可以加synchronized，加了synchronized就没有必要在加volatile了，因为</li></ol><h4 id="synchronized既保证了原子性，又保证了可见性。"><a href="#synchronized既保证了原子性，又保证了可见性。" class="headerlink" title="synchronized既保证了原子性，又保证了可见性。"></a>synchronized既保证了原子性，又保证了可见性。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比上一个小程序</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_006;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" count = "</span> + count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"><span class="keyword">new</span> Thread(t, <span class="string">"THREAD"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>如下代码：同步方法和非同步方法是否可以同时调用？就是我有一个synchronized的m1方法，我调用m1的时候能不能调用m2，拿大腿想一想这个是肯定可以的，线程里面访问m1的时候需要加锁，可是访问m2的时候我又不需要加锁，所以允许执行m2。</li></ol><p>这些小实验的设计是比较考验功力的，学习线程的时候自己要多动手进行试验，任何一个理论，都可以进行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *同步和非同步方法是否可以同时调用？</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_007;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" m1 start..."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" m1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" m2 "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*new Thread(()-&gt;t.m1(), "t1").start();</span></span><br><span class="line"><span class="comment">new Thread(()-&gt;t.m2(), "t2").start();*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(t::m1, <span class="string">"t1"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(t::m2, <span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//1.8之前的写法</span></span><br><span class="line"><span class="comment">new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void run() &#123;</span></span><br><span class="line"><span class="comment">t.m1();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>我们在来看一个synchronized应用的例子</li></ol><p>我们定义了一个class账户，有名称、余额。写方法给哪个用户设置它多少余额，读方法通过这个名字得到余额值。如果我们给写方法加锁，给读方法不加锁，你的业务允许产生这种问题吗？业务说我中间读到了一些不太好的数据也没关系，如果不允许客户读到中间不好的数据那这个就有问题。正因为我们加了锁的方法和不加锁的方法可以同时运行。</p><p><strong>问题</strong>比如说：张三，给他设置100块钱启动了，睡了1毫秒之后呢去读它的值，然后再睡2秒再去读它的值这个时候你会看到读到的值有问题，原因是在设定的过程中this.name你中间睡了一下，这个过程当中我模拟了一个线程来读，这个时候调用的是getBalance方法，而调用这个方法的时候是不用加锁的，所以说我不需要等你整个过程执行完就可以读到你中间结果产生的内存，这个现象就叫做脏读。这问题的产生就是synchronized方法和非synchronized方法是同时运行的。<strong>解决</strong>就是把getBalance加上synchronized就可以了，如果你的业务允许脏读，就可以不用加锁，加锁之后的效率低下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：模拟银行账户</span></span><br><span class="line"><span class="comment"> * 对业务写方法加锁</span></span><br><span class="line"><span class="comment"> * 对业务读方法不加锁</span></span><br><span class="line"><span class="comment"> * 这样行不行？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 容易产生脏读问题（dirtyRead）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_008;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name, <span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.balance = balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Account a = <span class="keyword">new</span> Account();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;a.set(<span class="string">"zhangsan"</span>, <span class="number">100.0</span>)).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(a.getBalance(<span class="string">"zhangsan"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(a.getBalance(<span class="string">"zhangsan"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Synchronized-是可重入锁"><a href="#Synchronized-是可重入锁" class="headerlink" title="Synchronized 是可重入锁"></a>Synchronized 是可重入锁</h4><p>锁定的是this</p><p>再来看synchronized的另外一个属性：可重入，是synchronized必须了解的一个概念。</p><p>如果是一个同步方法调用另外一个同步方法，有一个方法加了锁，另外一个方法也需要加锁，加的是同一把锁也是同一个线程，那这个时候申请仍然会得到该对象的锁。比如说是synchronized可重入的，有一个方法m1 是synchronized有一个方法m2也是synchrionzed，m1里能不能调m2。我们m1开始的时候这个线程得到了这把锁，然后在m1里面调用m2，如果说这个时候不允许任何线程再来拿这把锁的时候就死锁了。这个时候调m2它发现是同一个线程，因为你m2也需要申请这把锁，它发现是同一个线程申请的这把锁，允许，可以没问题，这就叫可重入锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁。</span></span><br><span class="line"><span class="comment"> * 也就是说synchronized获得锁是可重入的</span></span><br><span class="line"><span class="comment"> * synchronized</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_009;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m1 start"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">m2();</span><br><span class="line">System.out.println(<span class="string">"m1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"m2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> T().m1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟一个父类子类的概念，父类synchronized，子类调用super.m的时候必须得可重入，否则就会出问题（调用父类是同一把锁）。所谓的重入锁就是你拿到这把锁之后不停加锁加锁，加好几道，但锁定的还是同一个对象，去一道就减个1，就是这么个概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.juc.c_010;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"m start"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"m end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> TT().m();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TT</span> <span class="keyword">extends</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"child m start"</span>);</span><br><span class="line"><span class="keyword">super</span>.m();</span><br><span class="line">System.out.println(<span class="string">"child m end"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 程序在执行过程中，如果出现异常，默认情况锁会被释放</span></span><br><span class="line"><span class="comment"> * 所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。</span></span><br><span class="line"><span class="comment"> * 比如，在一个web app处理过程中，多个servlet线程共同访问同一个资源，这时如果异常处理不合适，</span></span><br><span class="line"><span class="comment"> * 在第一个线程中抛出异常，其他线程就会进入同步代码区，有可能会访问到异常产生时的数据。</span></span><br><span class="line"><span class="comment"> * 因此要非常小心的处理同步业务逻辑中的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="synchronized的底层实现"><a href="#synchronized的底层实现" class="headerlink" title="synchronized的底层实现"></a>synchronized的底层实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">synchronized的底层实现</span><br><span class="line">JDK早期的 重量级 - OS</span><br><span class="line">后来的改进</span><br><span class="line">锁升级的概念：</span><br><span class="line">    我就是厕所所长 （一 二）</span><br><span class="line"></span><br><span class="line">sync (Object)</span><br><span class="line">0.无锁: 没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</span><br><span class="line">1.偏向锁: markword 记录这个线程ID 没加锁, 默认不会有线程抢这把锁</span><br><span class="line">2.自旋锁(CAS): 如果线程争用：升级为 自旋锁 默认10次以后，</span><br><span class="line">3.重量级锁: 向操作系统内核申请, 等待时不占用CPU</span><br><span class="line"></span><br><span class="line">执行时间短（加锁代码），线程数少，用自旋</span><br><span class="line">执行时间长，线程数多，用系统锁</span><br></pre></td></tr></table></figure><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/多线程/image-20200526234924652.png" alt="image-20200526234924652" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200526064113021.png" alt="image-20200526064113021" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527055724201.png" alt="image-20200527055724201" style="zoom:67%;"><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527061309216.png" alt="image-20200527061309216" style="zoom: 50%;"><h4 id="保证线程可见性"><a href="#保证线程可见性" class="headerlink" title="保证线程可见性"></a>保证线程可见性</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331210227033.png" alt="image-20200331210227033" style="zoom:67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">volatile 关键字，使一个变量在多个线程间可见</span></span><br><span class="line"><span class="comment">A B线程都用到一个变量，java默认是A线程中保留一份copy，这样如果B线程修改了该变量，则A线程未必知道</span></span><br><span class="line"><span class="comment">使用volatile关键字，会让所有线程都会读到变量的修改值</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">在下面的代码中，running是存在于堆内存的t对象中</span></span><br><span class="line"><span class="comment">当线程t1开始运行的时候，会把running值从内存中读到t1线程的工作区，在运行过程中直接使用这个copy，并不会每次都去</span></span><br><span class="line"><span class="comment">读取堆内存，这样，当主线程修改running的值之后，t1线程感知不到，所以不会停止运行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用volatile，将会强制所有线程都去堆内存中读取running的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以阅读这篇文章进行更深入的理解</span></span><br><span class="line"><span class="comment">http://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">volatile并不能保证多个线程共同修改running变量时所带来的不一致问题，也就是说volatile不能替代synchronized</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*synchronized可以保证可见性和原子性，volatile只能保证可见性</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h4 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h4><p>synchronized+双重检查的单例模式要加volatile，防止指令重排序</p><p>why?</p><p>new对象过程(四条指令)：</p><p>​      1）给instance实例分配内存；</p><p>　　2）初始化instance的构造器；</p><p>　　3）将instance对象指向分配的内存空间（注意到这步时instance就非null了）</p><p>　　如果指令按照顺序执行倒也无妨，但JVM为了优化指令，提高程序运行效率，允许指令重排序。如此，在程序真正运行时以上指令执行顺序可能是这样的：</p><p>　　a）给instance实例分配内存；</p><p>　　b）将instance对象指向分配的内存空间；</p><p>　　c）初始化instance的构造器；</p><p>　　这时候，当线程一执行b）完毕，在执行c）之前，被切换到线程二上，这时候instance判断为非空，此时线程二直接来到return instance语句，拿走instance然后使用，接着就顺理成章地报错（对象尚未初始化）。</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200527062720639.png" alt="image-20200527062720639"></p><p>volatile保证a初始化之后再赋值给变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mgr06</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Mgr06 INSTANCE; <span class="comment">//JIT</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Mgr06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mgr06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//双重检查</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Mgr06<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Mgr06();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527062234223.png" alt="image-20200527062234223" style="zoom:67%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">·volatile 引用类型（包括数组）只能保证引用本身的可见性，不能保证内部字段的可见性</span><br><span class="line">·volatile并不能保证多个线程共同修改变量时，所带来的不一致问题，也就是说volatile不能替代synchronized</span><br><span class="line">·synchronized可以保证可见性和原子性，volatile只能保证可见性</span><br><span class="line"> * 同步代码块中的语句越少越好</span><br></pre></td></tr></table></figure><h4 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchronized优化</span></span><br><span class="line"><span class="comment"> * 同步代码块中的语句越少越好</span></span><br><span class="line"><span class="comment"> * 比较m1和m2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> oi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FineCoarseLock</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do sth need not sync</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">      count ++;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//do sth need not sync</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do sth need not sync</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//业务逻辑中只有下面这句需要sync，这时不应该给整个方法上锁</span></span><br><span class="line">      <span class="comment">//采用细粒度的锁，可以使线程争用时间变短，从而提高效率</span></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">         count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//do sth need not sync</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Synchronized注意事项"><a href="#Synchronized注意事项" class="headerlink" title="Synchronized注意事项"></a>Synchronized注意事项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不要以字符串常量作为锁定对象</span></span><br><span class="line"><span class="comment"> * 在下面的例子中，m1和m2其实锁定的是同一个对象</span></span><br><span class="line"><span class="comment"> * 这种情况还会发生比较诡异的现象，比如你用到了一个类库，在该类库中代码锁定了字符串“Hello”，</span></span><br><span class="line"><span class="comment"> * 但是你读不到源码，所以你在自己的代码中也锁定了"Hello",这时候就有可能发生非常诡异的死锁阻塞，</span></span><br><span class="line"><span class="comment"> * 因为你的程序和你用到的类库不经意间使用了同一把锁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁定某对象o，如果o的属性发生改变，不影响锁的使用</span></span><br><span class="line"><span class="comment"> * 但是如果o变成另外一个对象，则锁定的对象发生改变</span></span><br><span class="line"><span class="comment"> * 应该避免将锁定对象的引用变成另外的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="CAS-Atomic类"><a href="#CAS-Atomic类" class="headerlink" title="CAS / Atomic类"></a>CAS / Atomic类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决同样的问题的更高效的方法，使用AtomXXX类</span></span><br><span class="line"><span class="comment">* AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>CAS是CPU原语支持，判断之后不会被打断</p><p>ABA问题：基本类型不影响，引用类型会产生ABA</p><p>AtomicStampReference 类, 加时间戳解决ABA问题</p><h5 id="CAS调用的是Unsafe"><a href="#CAS调用的是Unsafe" class="headerlink" title="CAS调用的是Unsafe"></a>CAS调用的是Unsafe</h5><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331230925283.png" alt="image-20200331230925283" style="zoom:67%;"><p>JDK11 CompareAndSet 1.8 CompareAndSwap</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200401054224292.png" alt="image-20200401054224292" style="zoom:67%;"><h5 id="CAS是乐观锁"><a href="#CAS是乐观锁" class="headerlink" title="CAS是乐观锁"></a>CAS是乐观锁</h5><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Users\Anarchism\AppData\Roaming\Typora\typora-user-images\image-20200331231024356.png" alt="image-20200331231024356" style="zoom:67%;"><h5 id="ABA问题怎么解决"><a href="#ABA问题怎么解决" class="headerlink" title="ABA问题怎么解决"></a>ABA问题怎么解决</h5><ol><li>AtomicStampedReference：带版本戳的原子引用类型，版本戳为int类型。</li><li>AtomicMarkableReference：带版本戳的原子引用类型，版本戳为boolean类型。(只能降低概率, 不能避免)</li></ol><h5 id="乐观锁（-Optimistic-Locking-）"><a href="#乐观锁（-Optimistic-Locking-）" class="headerlink" title="乐观锁（ Optimistic Locking ）"></a>乐观锁（ Optimistic Locking ）</h5><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。</p><p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p><h5 id="悲观锁（Pessimistic-Lock）"><a href="#悲观锁（Pessimistic-Lock）" class="headerlink" title="悲观锁（Pessimistic Lock）"></a>悲观锁（Pessimistic Lock）</h5><p>当我们要对一个数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）</p><p><strong>悲观锁主要是共享锁或排他锁</strong></p><ul><li>共享锁又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。</li></ul><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。</p><h5 id="三种原子操作对比"><a href="#三种原子操作对比" class="headerlink" title="三种原子操作对比"></a>三种原子操作对比</h5><p>1000线程结果:<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200527124006570.png" alt="image-20200527124006570"></p><h5 id="LongAdder-分段锁-也是CAS操作"><a href="#LongAdder-分段锁-也是CAS操作" class="headerlink" title="LongAdder: 分段锁: 也是CAS操作"></a>LongAdder: 分段锁: 也是CAS操作</h5><p>1000个线程, 分四段锁(250), 最后求和<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527124346716.png" alt="image-20200527124346716" style="zoom:67%;"></p><p>线程数量少，LongAdder不一定有优势</p><p>线程数量少, synchronized反而有优势<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527124231381.png" alt="image-20200527124231381" style="zoom:67%;"></p><h4 id="ReentrantLock-可重入锁"><a href="#ReentrantLock-可重入锁" class="headerlink" title="ReentrantLock : 可重入锁"></a>ReentrantLock : 可重入锁</h4><p>Synchronized加在同一类的不同方法, 相当于synchrnized this, 是同一把锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">reentrantlock(可重入锁)用于替代<span class="keyword">synchronized</span></span><br><span class="line">比<span class="keyword">synchronized</span>功能多</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span>:自动解锁</span><br><span class="line">Reentrantlock:手动解锁, 一定要解锁, 不能影响后边的线程 <span class="keyword">try</span>/<span class="keyword">catch</span>/<span class="keyword">finally</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reentrantlock用于替代synchronized</span></span><br><span class="line"><span class="comment"> * 由于m1锁定this,只有m1执行完毕的时候,m2才能执行</span></span><br><span class="line"><span class="comment"> * 这里是复习synchronized最原始的语义</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用reentrantlock可以完成同样的功能</span></span><br><span class="line"><span class="comment"> * 需要注意的是，必须要必须要必须要手动释放锁（重要的事情说三遍）</span></span><br><span class="line"><span class="comment"> * 使用syn锁定的话如果遇到异常，jvm会自动释放锁，但是lock必须手动释放锁，因此经常在finally中进行锁的释放</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">/* 使用reentrantlock可以进行“尝试锁定”tryLock，这样无法锁定，或者在指定时间内无法锁定，线程可以决定是否继续等待*/</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_ReentrantLock3</span> </span>&#123;</span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用tryLock进行尝试锁定，不管锁定与否，方法都将继续执行</span></span><br><span class="line"><span class="comment"> * 可以根据tryLock的返回值来判定是否锁定</span></span><br><span class="line"><span class="comment"> * 也可以指定tryLock的时间，由于tryLock(time)抛出异常，所以要注意unclock的处理，必须放到finally中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">boolean locked = lock.tryLock();</span></span><br><span class="line"><span class="comment">System.out.println("m2 ..." + locked);</span></span><br><span class="line"><span class="comment">if(locked) lock.unlock();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">locked = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(<span class="string">"m2 ..."</span> + locked);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(locked) lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T03_ReentrantLock3 rl = <span class="keyword">new</span> T03_ReentrantLock3();</span><br><span class="line"><span class="keyword">new</span> Thread(rl::m1).start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Thread(rl::m2).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="lockIntenrrupt打断"><a href="#lockIntenrrupt打断" class="headerlink" title="lockIntenrrupt打断"></a>lockIntenrrupt打断</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用ReentrantLock还可以调用lockInterruptibly方法，可以对线程interrupt方法做出响应，</span></span><br><span class="line"><span class="comment"> * 在一个线程等待锁的过程中，可以被打断*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_ReentrantLock4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">"t1 start"</span>);</span><br><span class="line">TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class="line">System.out.println(<span class="string">"t1 end"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"interrupted!"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//lock.lock();</span></span><br><span class="line">lock.lockInterruptibly(); <span class="comment">//可以对interrupt()方法做出响应</span></span><br><span class="line">System.out.println(<span class="string">"t2 start"</span>);</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"t2 end"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"interrupted!"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">t2.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">t2.interrupt(); <span class="comment">//打断线程2的等待</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ReentrantLock默认是非公平-可设置为公平锁"><a href="#ReentrantLock默认是非公平-可设置为公平锁" class="headerlink" title="ReentrantLock默认是非公平, 可设置为公平锁"></a>ReentrantLock默认是非公平, 可设置为公平锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*ReentrantLock还可以指定为公平锁*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock=<span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>); <span class="comment">//参数为true表示为公平锁，请对比输出结果</span></span><br></pre></td></tr></table></figure><h5 id="ReentrantLock-Vs-Synchronized"><a href="#ReentrantLock-Vs-Synchronized" class="headerlink" title="ReentrantLock Vs Synchronized"></a>ReentrantLock Vs Synchronized</h5><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527130123437.png" alt="image-20200527130123437" style="zoom: 80%;"><h4 id="CountDownLatch-倒数发车"><a href="#CountDownLatch-倒数发车" class="headerlink" title="CountDownLatch : 倒数发车"></a>CountDownLatch : 倒数发车</h4><ul><li>类似 Join : 门闩作用</li><li>CountDownLatch.countDown(); 是原子操作</li><li>latch.await(); 阻塞住  countDown到0的时候, 继续执行</li><li>latch.countDown();  latch数减一</li><li>对比Join: CountDownLatch更灵活</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_TestCountDownLatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        usingJoin();</span><br><span class="line">        usingCountDownLatch();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingCountDownLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启100个线程, latch = 线程数</span></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(threads.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++) result += j;</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end latch"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++) result += j;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threads[i].join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end join"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier-人满发车"><a href="#CyclicBarrier-人满发车" class="headerlink" title="CyclicBarrier : 人满发车"></a>CyclicBarrier : 人满发车</h4><ul><li>自己指定发车的线程数量<img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200401153822854.png" alt="image-20200401153822854" style="zoom: 67%;"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//CyclicBarrier barrier = new CyclicBarrier(20);</span></span><br><span class="line">    CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">20</span>, () -&gt; System.out.println(<span class="string">"满人"</span>));</span><br><span class="line">    <span class="comment">/*CyclicBarrier barrier = new CyclicBarrier(20, new Runnable() &#123;</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void run() &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("满人，发车");</span></span><br><span class="line"><span class="comment">        &#125;&#125;);*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    barrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谷歌开源的组件</p><p>配合Zuul网关<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527132511607.png" alt="image-20200527132511607" style="zoom:67%;"></p><h4 id="Phaser-相位器"><a href="#Phaser-相位器" class="headerlink" title="Phaser: 相位器"></a>Phaser: 相位器</h4><p>婚礼环节举例, 遗传算法, 一个一个的栅栏<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200401153718039.png" alt="image-20200401153718039" style="zoom:50%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarriagePhaser</span> <span class="keyword">extends</span> <span class="title">Phaser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (phase) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">"所有人到齐了！"</span> + registeredParties);</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"所有人吃完了！"</span> + registeredParties);</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">"所有人离开了！"</span> + registeredParties);</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">"婚礼结束！新郎新娘抱抱！"</span> + registeredParties);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReadWriteLock-读写锁-共享锁-读锁-排它锁-写锁"><a href="#ReadWriteLock-读写锁-共享锁-读锁-排它锁-写锁" class="headerlink" title="ReadWriteLock 读写锁 [ 共享锁 (读锁) + 排它锁 (写锁) ]"></a>ReadWriteLock 读写锁 [ 共享锁 (读锁) + 排它锁 (写锁) ]</h4><ul><li>读读共享</li><li>读写共享</li><li>写写排他</li></ul><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527134243634.png" alt="image-20200527134243634" style="zoom:80%;"><p><a href="https://www.jianshu.com/p/9cd5212c8841" target="_blank" rel="noopener">https://www.jianshu.com/p/9cd5212c8841</a></p><ol><li>Java并发库中ReetrantReadWriteLock实现了ReadWriteLock接口并添加了可重入的特性</li><li>ReentrantReadWriteLock读写锁的效率明显高于synchronized关键字</li><li>ReentrantReadWriteLock读写锁的实现中，读锁使用共享模式；写锁使用独占模式，换句话说，读锁可以在没有写锁的时候被多个线程同时持有，写锁是独占的</li><li>ReetrantReadWriteLock读写锁的实现中，需要注意的，当有读锁时，写锁就不能获得；而当有写锁时，除了获得写锁的这个线程可以获得读锁外，其他线程不能获得读锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T10_TestReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Lock lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">"read over!"</span>);</span><br><span class="line">            <span class="comment">//模拟读取操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Lock lock, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            value = v;</span><br><span class="line">            System.out.println(<span class="string">"write over!"</span>);</span><br><span class="line">            <span class="comment">//模拟写操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Runnable readR = ()-&gt; read(lock);</span></span><br><span class="line">        Runnable readR = ()-&gt; read(readLock);</span><br><span class="line">        <span class="comment">//Runnable writeR = ()-&gt;write(lock, new Random().nextInt());</span></span><br><span class="line">        Runnable writeR = ()-&gt;write(writeLock, <span class="keyword">new</span> Random().nextInt());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">18</span>; i++) <span class="keyword">new</span> Thread(readR).start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) <span class="keyword">new</span> Thread(writeR).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphore-限流-默认非公平-可改fair参数"><a href="#Semaphore-限流-默认非公平-可改fair参数" class="headerlink" title="Semaphore: 限流, 默认非公平, 可改fair参数"></a>Semaphore: 限流, 默认非公平, 可改fair参数</h4><p>AbstractQuenedSynchronizer抽象的队列式同步器</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200401163248555.png" alt="image-20200401163248555" style="zoom: 67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Semaphore s = new Semaphore(2);</span></span><br><span class="line">    <span class="comment">//默认非公平</span></span><br><span class="line">    Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//允许一个线程同时执行</span></span><br><span class="line">    <span class="comment">//Semaphore s = new Semaphore(1);</span></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.acquire(); <span class="comment">// 获得许可, 谁得到, 谁执行</span></span><br><span class="line">            System.out.println(<span class="string">"T1 running..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            System.out.println(<span class="string">"T1 running..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            s.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.acquire();</span><br><span class="line">            System.out.println(<span class="string">"T2 running..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            System.out.println(<span class="string">"T2 running..."</span>);</span><br><span class="line">            s.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Exchanger-执行到交换方法后阻塞-然后线程交换数据"><a href="#Exchanger-执行到交换方法后阻塞-然后线程交换数据" class="headerlink" title="Exchanger: 执行到交换方法后阻塞, 然后线程交换数据"></a>Exchanger: 执行到交换方法后阻塞, 然后线程交换数据</h4><p>两个线程之间, 一个线程命令另一个线程阻塞, 交换数据, 继续执行<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200401164647991.png" alt="image-20200401164647991" style="zoom:50%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T12_TestExchanger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">"T1"</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            String s = <span class="string">"T2"</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三道线程通信面试题"><a href="#三道线程通信面试题" class="headerlink" title="三道线程通信面试题"></a>三道线程通信面试题</h4><h5 id="到五停止"><a href="#到五停止" class="headerlink" title="到五停止"></a>到五停止</h5><blockquote><p>实现一个容器，提供两个方法，add，size<br>写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束</p></blockquote><h6 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait / notify"></a>wait / notify</h6><p><strong>notify()不释放锁</strong></p><p><strong>wait()释放锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里使用wait和notify做到，wait会释放锁，而notify不会释放锁</span></span><br><span class="line"><span class="comment"> * 需要注意的是，运用这种方法，必须要保证t2先执行，也就是首先让t2监听才可以</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * notify之后，t1必须释放锁，t2退出后，也必须notify，通知t1继续执行</span></span><br><span class="line"><span class="comment"> * 整个通信过程比较繁琐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_020_01_Interview;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_NotifyFreeLock</span> </span>&#123;</span><br><span class="line"><span class="comment">//添加volatile，使t2能够得到通知</span></span><br><span class="line"><span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">lists.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lists.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T04_NotifyFreeLock c = <span class="keyword">new</span> T04_NotifyFreeLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">System.out.println(<span class="string">"t2启动"</span>);</span><br><span class="line"><span class="keyword">if</span>(c.size() != <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line"><span class="comment">//通知t1继续执行</span></span><br><span class="line">lock.notify();</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"t1启动"</span>);</span><br><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">c.add(<span class="keyword">new</span> Object());</span><br><span class="line">System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">lock.notify();</span><br><span class="line"><span class="comment">//释放锁，让t2得以执行</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用Latch（门闩）替代wait notify来进行通知</span></span><br><span class="line"><span class="comment"> * 好处是通信方式简单，同时也可以指定等待时间</span></span><br><span class="line"><span class="comment"> * 使用await和countdown方法替代wait和notify</span></span><br><span class="line"><span class="comment"> * CountDownLatch不涉及锁定，当count的值为零时当前线程继续运行</span></span><br><span class="line"><span class="comment"> * 当不涉及同步，只是涉及线程通信的时候，用synchronized + wait/notify就显得太重了</span></span><br><span class="line"><span class="comment"> * 这时应该考虑countdownlatch/cyclicbarrier/semaphore</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_CountDownLatch</span> </span>&#123;</span><br><span class="line"><span class="comment">// 添加volatile，使t2能够得到通知</span></span><br><span class="line"><span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">lists.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lists.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T05_CountDownLatch c = <span class="keyword">new</span> T05_CountDownLatch();</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"t2启动"</span>);</span><br><span class="line"><span class="keyword">if</span> (c.size() != <span class="number">5</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">latch.await();</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以指定等待时间</span></span><br><span class="line"><span class="comment">//latch.await(5000, TimeUnit.MILLISECONDS);</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"t1启动"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">c.add(<span class="keyword">new</span> Object());</span><br><span class="line">System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line"><span class="keyword">if</span> (c.size() == <span class="number">5</span>) &#123;</span><br><span class="line"><span class="comment">// 打开门闩，让t2得以执行</span></span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_LockSupport_WithoutSleep</span> </span>&#123;</span><br><span class="line"><span class="comment">// 添加volatile，使t2能够得到通知</span></span><br><span class="line"><span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">lists.add(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lists.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T07_LockSupport_WithoutSleep c = <span class="keyword">new</span> T07_LockSupport_WithoutSleep();</span><br><span class="line"></span><br><span class="line">t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"t1启动"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">c.add(<span class="keyword">new</span> Object());</span><br><span class="line">System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c.size() == <span class="number">5</span>) &#123;</span><br><span class="line">LockSupport.unpark(t2);</span><br><span class="line">LockSupport.park();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">LockSupport.park();</span><br><span class="line">System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line">LockSupport.unpark(t1);</span><br><span class="line">&#125;, <span class="string">"t2"</span>);</span><br><span class="line">t2.start();</span><br><span class="line">t1.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Semaphore-join"><a href="#Semaphore-join" class="headerlink" title="Semaphore + join"></a>Semaphore + join</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T08_Semaphore</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加volatile，使t2能够得到通知</span></span><br><span class="line">    <span class="keyword">volatile</span> List lists = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T08_Semaphore c = <span class="keyword">new</span> T08_Semaphore();</span><br><span class="line">        Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    c.add(<span class="keyword">new</span> Object());</span><br><span class="line">                    System.out.println(<span class="string">"add "</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.start();</span><br><span class="line">                t2.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(i);</span><br><span class="line">                &#125;</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line">                System.out.println(<span class="string">"t2 结束"</span>);</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">//t2.start();</span></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产消费"><a href="#生产消费" class="headerlink" title="生产消费"></a>生产消费</h5><blockquote><p>面试题：写一个固定容量同步容器，拥有put和get方法，以及getCount方法，<br>能够支持2个生产者线程以及10个消费者线程的阻塞调用</p></blockquote><h6 id="wait-notify-1"><a href="#wait-notify-1" class="headerlink" title="wait / notify"></a>wait / notify</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer1</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>; <span class="comment">//最多10个元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 醒了还要判断是不是满了</span></span><br><span class="line">        <span class="keyword">while</span>(lists.size() == MAX) &#123; <span class="comment">//想想为什么用while而不是用if？</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait(); <span class="comment">//effective java</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lists.add(t);</span><br><span class="line">++count;</span><br><span class="line"><span class="keyword">this</span>.notifyAll(); <span class="comment">// 叫醒所有等待线程, 不能指定叫醒消费线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(lists.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">t = lists.removeFirst();</span><br><span class="line">count --;</span><br><span class="line"><span class="keyword">this</span>.notifyAll(); <span class="comment">//通知生产者进行生产</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyContainer1&lt;String&gt; c = <span class="keyword">new</span> MyContainer1&lt;&gt;();</span><br><span class="line"><span class="comment">//启动消费者线程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) System.out.println(c.get());</span><br><span class="line">&#125;, <span class="string">"c"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动生产者线程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">25</span>; j++) c.put(Thread.currentThread().getName() + <span class="string">" "</span> + j);</span><br><span class="line">&#125;, <span class="string">"p"</span> + i).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ReentrantLock-Condition-背过"><a href="#ReentrantLock-Condition-背过" class="headerlink" title="ReentrantLock + Condition (背过)"></a>ReentrantLock + Condition (背过)</h6><p>精确叫醒生产 / 消费线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContainer2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>; <span class="comment">//最多10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition producer = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition consumer = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (lists.size() == MAX) &#123; <span class="comment">//想想为什么用while而不是用if？</span></span><br><span class="line">                producer.await();</span><br><span class="line">            &#125;</span><br><span class="line">            lists.add(t);</span><br><span class="line">            ++count;</span><br><span class="line">            consumer.signalAll(); <span class="comment">//通知消费者线程进行消费</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (lists.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                consumer.await();</span><br><span class="line">            &#125;</span><br><span class="line">            t = lists.removeFirst();</span><br><span class="line">            count--;</span><br><span class="line">            producer.signalAll(); <span class="comment">//通知生产者进行生产</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyContainer2&lt;String&gt; c = <span class="keyword">new</span> MyContainer2&lt;&gt;();</span><br><span class="line">        <span class="comment">//启动消费者线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) System.out.println(c.get());</span><br><span class="line">            &#125;, <span class="string">"c"</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动生产者线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) c.put(Thread.currentThread().getName() + <span class="string">" "</span> + j);</span><br><span class="line">            &#125;, <span class="string">"p"</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="交替打印"><a href="#交替打印" class="headerlink" title="交替打印"></a>交替打印</h5><h6 id="常用方法1-LockSupport的park-unpark"><a href="#常用方法1-LockSupport的park-unpark" class="headerlink" title="常用方法1: LockSupport的park/unpark"></a>常用方法1: LockSupport的park/unpark</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Locksupport park 当前线程阻塞（停止）</span></span><br><span class="line"><span class="comment">//unpark(Thread t)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_00_LockSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] aI = <span class="string">"1234567"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] aC = <span class="string">"ABCDEFG"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : aI) &#123;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    LockSupport.unpark(t2); <span class="comment">//叫醒T2</span></span><br><span class="line">                    LockSupport.park(); <span class="comment">//T1阻塞</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c : aC) &#123;</span><br><span class="line">                LockSupport.park(); <span class="comment">//t2阻塞 放在打印前,可以保证先打印1</span></span><br><span class="line">                System.out.print(c);</span><br><span class="line">                LockSupport.unpark(t1); <span class="comment">//叫醒t1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="常用方法2-synchronized的wait-notify"><a href="#常用方法2-synchronized的wait-notify" class="headerlink" title="常用方法2: synchronized的wait/notify"></a>常用方法2: synchronized的wait/notify</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_00_sync_wait_notify</span> </span>&#123;</span><br><span class="line"><span class="comment">// 标记, 保证t1先打印</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> t2Started = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// CountDownLatch也可以实现</span></span><br><span class="line">    <span class="comment">//private static CountDownLatch latch = new C(1);</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] aI = <span class="string">"1234567"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] aC = <span class="string">"ABCDEFG"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//latch.await();</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line"><span class="comment">// 保证第一个线程先运行</span></span><br><span class="line">                <span class="keyword">while</span>(!t2Started) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        o.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : aI) &#123;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        o.notify();</span><br><span class="line">                        o.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                o.notify(); <span class="comment">// 第一个线程最终必须要唤醒t2, 不然程序结束不了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>).start();</span><br><span class="line"><span class="comment">// t2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : aC) &#123;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    <span class="comment">//latch.countDown()</span></span><br><span class="line">                    t2Started = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        o.notify();</span><br><span class="line">                        o.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                o.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="方法3-ReentrantLock-的-condition-的-signal-await"><a href="#方法3-ReentrantLock-的-condition-的-signal-await" class="headerlink" title="方法3: ReentrantLock 的 condition 的 signal/await"></a>方法3: ReentrantLock 的 condition 的 signal/await</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T09_00_lock_condition</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] aI = <span class="string">"1234567"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] aC = <span class="string">"ABCDEFG"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="comment">// 两个等待队列</span></span><br><span class="line">        Condition conditionT1 = lock.newCondition();</span><br><span class="line">        Condition conditionT2 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : aI) &#123;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    conditionT2.signal();</span><br><span class="line">                    conditionT1.await();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                conditionT2.signal();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : aC) &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    conditionT1.signal();</span><br><span class="line">                    conditionT2.await();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                conditionT1.signal();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AQS-所有锁的心"><a href="#AQS-所有锁的心" class="headerlink" title="AQS (所有锁的心)"></a>AQS (所有锁的心)</h4><h5 id="ReentrantLock源码-lock"><a href="#ReentrantLock源码-lock" class="headerlink" title="ReentrantLock源码 lock( )"></a>ReentrantLock源码 lock( )</h5><p>通过模板方法, (回调函数, 钩子函数)</p><p>调用父类方法, 子类去实现</p><p>ReentrantLock.lock( ) -&gt; Sync.acquire( ) -&gt; AQS.tryAcquire( ) -&gt; ReentrantLock.nonfairTryAcquire( ) -&gt; AQS.getState( )<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527204622726.png" alt="image-20200527204622726" style="zoom:80%;"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402065727531.png" alt="image-20200402065727531" style="zoom:50%;"><ol><li><p>node里装的是thread线程</p></li><li><p>state 是 volatile 修饰的, 设置state的方法    </p></li></ol><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402065940538.png" alt="image-20200402065940538" style="zoom:50%;"><p>AQS添加节点: 不用给整个链表加锁, 只观测tail节点, 通过CAS, 提高效率</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200527224948564.png" alt="image-20200527224948564"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527230919030.png" alt="image-20200527230919030" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527231134651.png" alt="image-20200527231134651" style="zoom:80%;"><p>头节点先获得, 第二个一直尝试</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200527231438271.png" alt="image-20200527231438271"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527232418283.png" alt="image-20200527232418283" style="zoom:80%;"><p><strong>AQS使用了模板方法模式，自定义同步器时需要重写下面几个AQS提供的模板方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isHeldExclusively()   <span class="comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。 </span></span><br><span class="line">tryAcquire(<span class="keyword">int</span>)      <span class="comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。 </span></span><br><span class="line">tryRelease(<span class="keyword">int</span>)     <span class="comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。 </span></span><br><span class="line">tryAcquireShared(<span class="keyword">int</span>)    <span class="comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。 </span></span><br><span class="line">tryReleaseShared(<span class="keyword">int</span>)   <span class="comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false</span></span><br></pre></td></tr></table></figure><p>AQS类中的其他方法都是final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。</p><p>以 <strong>ReentrantLock</strong> 为例，<strong>state初始化为0</strong>，表示未锁定状态。A线程<strong>lock()时</strong>，会调用tryAcquire()独占该锁并将<strong>state+1</strong>。此后，其他线程再tryAcquire()时就会失败，直到A线程<strong>unlock()到state=0</strong>（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><p>再以<strong>CountDownLatch</strong>以例，任务分为<strong>N个子线</strong>程去执行，<strong>state</strong>也<strong>初始化为N</strong>（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，<strong>state会CAS(Compare and Swap)减1</strong>。等到<strong>所有子线程都执行完后(即state=0)</strong>，会<strong>unpark()主调用线程</strong>，然后主调用线程就会<strong>从await()函数返回</strong>，继续后余动作。</p><p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现<code>tryAcquire-tryRelease</code>、<code>tryAcquireShared-tryReleaseShared</code>中的一种即可。但AQS也支持自定义同步器同时<strong>实现独占和共享两种方式</strong>，如 <strong>ReentrantReadWriteLock</strong>。</p><h5 id="AQS的数据结构是双向链表-原理CAS-volatile"><a href="#AQS的数据结构是双向链表-原理CAS-volatile" class="headerlink" title="AQS的数据结构是双向链表  原理CAS + volatile"></a>AQS的数据结构是双向链表  原理CAS + volatile</h5><ol><li>核心是int类型的state</li><li>state 被 volatile 修饰</li><li>AQS 拥有 boolean compareAndSetState(int expect, int update) 方法, <strong>往队尾加节点</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">** 源码 **</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Head of the wait queue, lazily initialized.  Except for</span></span><br><span class="line"><span class="comment">     * initialization, it is modified only via method setHead.  Note:</span></span><br><span class="line"><span class="comment">     * If head exists, its waitStatus is guaranteed not to be</span></span><br><span class="line"><span class="comment">     * CANCELLED.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tail of the wait queue, lazily initialized.  Modified only via</span></span><br><span class="line"><span class="comment">     * method enq to add new wait node.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The synchronization state.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the current value of synchronization state.</span></span><br><span class="line"><span class="comment">     * This operation has memory semantics of a &#123;<span class="doctag">@code</span> volatile&#125; read.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current state value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the value of synchronization state.</span></span><br><span class="line"><span class="comment">     * This operation has memory semantics of a &#123;<span class="doctag">@code</span> volatile&#125; write.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newState the new state value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">        state = newState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets synchronization state to the given updated</span></span><br><span class="line"><span class="comment">     * value if the current state value equals the expected value.</span></span><br><span class="line"><span class="comment">     * This operation has memory semantics of a &#123;<span class="doctag">@code</span> volatile&#125; read</span></span><br><span class="line"><span class="comment">     * and write.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that the actual</span></span><br><span class="line"><span class="comment">     *         value was not equal to the expected value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="AQS面试题"><a href="#AQS面试题" class="headerlink" title="AQS面试题"></a>AQS面试题</h5><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200527213938929.png" alt="image-20200527213938929"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200402065631929.png" alt="image-20200402065631929" style="zoom:50%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/image-20200402063557639.png" alt="image-20200402063557639" style="zoom:50%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528235029593.png" alt="image-20200528235029593" style="zoom:67%;"><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>ThreadLocal是解决线程安全问题一个很好的思路，它通过为每个线程提供一个独立的变量副本解决了变量并发访问的冲突问题。在很多情况下，ThreadLocal比直接使用synchronized同步机制解决线程安全问题更简单，更方便，且结果程序拥有更高的并发性。</p><p>设到<strong>当前线程的map</strong><br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527234707313.png" alt="image-20200527234707313" style="zoom:67%;"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200527234813608.png" alt="image-20200527234813608" style="zoom: 67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadLocal线程局部变量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ThreadLocal是使用空间换时间，synchronized是使用时间换空间</span></span><br><span class="line"><span class="comment"> * 比如在hibernate中session就存在与ThreadLocal中，避免synchronized的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 运行下面的程序，理解ThreadLocal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_022_RefTypeAndThreadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal2</span> </span>&#123;</span><br><span class="line"><span class="comment">//volatile static Person p = new Person();</span></span><br><span class="line"><span class="keyword">static</span> ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(tl.get());</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">tl.set(<span class="keyword">new</span> Person());</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">String name = <span class="string">"zhangsan"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强软弱虚四种引用"><a href="#强软弱虚四种引用" class="headerlink" title="强软弱虚四种引用"></a>强软弱虚四种引用</h5><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200528125043817.png" alt="image-20200528125043817"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402113830722.png" alt="image-20200402113830722" style="zoom: 80%;"><h5 id="强引用-new-出来的-不回收"><a href="#强引用-new-出来的-不回收" class="headerlink" title="强引用: new 出来的, 不回收"></a>强引用: new 出来的, 不回收</h5><p>当<strong>内存空间不足</strong>时，<code>Java</code>虚拟机宁愿抛出<code>OutOfMemoryError</code>错误，使程序<strong>异常终止</strong>，也不会靠随意<strong>回收</strong>具有<strong>强引用</strong>的<strong>对象</strong>来解决内存不足的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M m = <span class="keyword">new</span> M();</span><br><span class="line">m = <span class="keyword">null</span>;</span><br><span class="line">System.gc(); <span class="comment">//DisableExplicitGC , 有引用 , M就不会被回收</span></span><br><span class="line">System.in.read(); <span class="comment">// 阻塞住线程 , 观察效果</span></span><br></pre></td></tr></table></figure><h5 id="软引用-满则回收"><a href="#软引用-满则回收" class="headerlink" title="软引用: 满则回收"></a>软引用: 满则回收</h5><ul><li>软引用是用来描述一些还有用但并非必须的对象。</li><li>对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行第二次回收。</li><li>如果这次回收还没有足够的内存，才会抛出内存溢出异常。</li><li>如果一个对象只具有<strong>软引用</strong>，则<strong>内存空间充足</strong>时，<strong>垃圾回收器</strong>就<strong>不会</strong>回收它；如果<strong>内存空间不足</strong>了，就会<strong>回收</strong>这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 软引用</span></span><br><span class="line"><span class="comment"> * 软引用是用来描述一些还有用但并非必须的对象。</span></span><br><span class="line"><span class="comment"> * 对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行第二次回收。</span></span><br><span class="line"><span class="comment"> * 如果这次回收还没有足够的内存，才会抛出内存溢出异常。</span></span><br><span class="line"><span class="comment"> * -Xmx20M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.oi.juc.c_022_RefTypeAndThreadLocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_SoftReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; m = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>]);</span><br><span class="line">        <span class="comment">//m = null;</span></span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再分配一个数组，heap将装不下，这时候系统会垃圾回收，先回收一次，如果不够，会把软引用干掉</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">15</span>];</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//软引用非常适合缓存使用</span></span><br></pre></td></tr></table></figure><h5 id="弱引用：一般用在容器里ThreadLocal-lt-gt-WeakHashMap"><a href="#弱引用：一般用在容器里ThreadLocal-lt-gt-WeakHashMap" class="headerlink" title="弱引用：一般用在容器里ThreadLocal&lt;&gt;(), WeakHashMap"></a>弱引用：一般用在容器里ThreadLocal&lt;&gt;(), WeakHashMap</h5><p>作用: 有强引用指向它的时候, 一旦强引用消失, 就不用再管他了</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528124442712.png" alt="image-20200528124442712" style="zoom:50%;"><p><code>JVM</code>首先将<strong>软引用</strong>中的<strong>对象</strong>引用置为<code>null</code>，然后通知<strong>垃圾回收器</strong>进行回收：</p><p><code>WeakReference</code>对象的生命周期基本由<strong>垃圾回收器</strong>决定，一旦垃圾回收线程发现了<strong>弱引用对象</strong>，在下一次<code>GC</code>过程中就会对其进行回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弱引用遭到gc就会回收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_WeakReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;M&gt; m = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> M());</span><br><span class="line"></span><br><span class="line">        System.out.println(m.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(m.get());</span><br><span class="line"></span><br><span class="line">        ThreadLocal&lt;M&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">        tl.set(<span class="keyword">new</span> M());</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tl 指向ThreadLocal 是强引用</p><p>ThreadLocalMap 的 key 是弱引用</p><p>使用ThreadLocal , 不用的对象, 务必remove() 掉, 因为key如果为空了, value永远访问不到, 导致内存泄漏</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402120531506.png" alt="image-20200402120531506" style="zoom: 80%;"><p>ThreadLocal的set() 方法 调用了getMap() , key: threadlocal对象, value: </p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528125305588.png" alt="image-20200528125305588" style="zoom:80%;"><p>key一个弱引用指向threadlocal</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528125402186.png" alt="image-20200528125402186" style="zoom:67%;"><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><p>垃圾回收时候直接干掉</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528131123856.png" alt="image-20200528131123856" style="zoom: 50%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402124801164.png" alt="image-20200402124801164" style="zoom:50%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402172620123.png" alt="image-20200402172620123" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200402172209626.png" alt="image-20200402172209626" style="zoom: 80%;"><h3 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h3><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528134414349.png" alt="image-20200528134414349" style="zoom:80%;"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200528220820441.png" alt="image-20200528220820441"></p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200528220924869.png" alt="image-20200528220924869"></p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200528221154743.png" alt="image-20200528221154743"></p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200528221314448.png" alt="image-20200528221314448"></p><p>同步容器类</p><p>总结：<br>1：对于map/set的选择使用<br>HashMap<br>TreeMap<br>LinkedHashMap</p><p>Hashtable<br>Collections.sychronizedXXX</p><p>ConcurrentHashMap<br>ConcurrentSkipListMap </p><p>2：队列<br>ArrayList<br>LinkedList<br>Collections.synchronizedXXX<br>CopyOnWriteList<br>Queue<br>    CocurrentLinkedQueue //concurrentArrayQueue<br>    BlockingQueue<br>        LinkedBQ<br>        ArrayBQ<br>        TransferQueue<br>        SynchronusQueue<br>    DelayQueue执行定时任务</p><p>1：Vector Hashtable ：早期使用synchronized实现<br>2：ArrayList HashSet ：未考虑多线程安全（未实现同步）<br>3：HashSet vs Hashtable StringBuilder vs StringBuffer<br>4：Collections.synchronized***工厂方法使用的也是synchronized</p><p>使用早期的同步容器以及Collections.synchronized***方法的不足之处，请阅读：<br><a href="http://blog.csdn.net/itm_hadf/article/details/7506529" target="_blank" rel="noopener">http://blog.csdn.net/itm_hadf/article/details/7506529</a></p><p>使用新的并发容器<br><a href="http://xuganggogo.iteye.com/blog/321630" target="_blank" rel="noopener">http://xuganggogo.iteye.com/blog/321630</a></p><h4 id="Map的发展历程"><a href="#Map的发展历程" class="headerlink" title="Map的发展历程"></a>Map的发展历程</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528222832446.png" alt="image-20200528222832446" style="zoom:67%;"><p>hashTable –&gt; hashMap –&gt; synchronizedHashMap –&gt; concurrentHashMap</p><ol><li><p>hashTable 整体加锁, 所有方法加synchronized</p></li><li><p>hashmap 没有锁, 并发场景数据不一致</p></li><li><p>synchronizedHashMap 在 hashMap 的基础上使用了细粒度锁</p></li><li><p>concurrentHashMap 使用了CAS, 插入效率一般, 读取效率特别高</p></li></ol><h4 id="从Vector-gt-List-gt-Queue-解决超卖问题"><a href="#从Vector-gt-List-gt-Queue-解决超卖问题" class="headerlink" title="从Vector -&gt; List -&gt; Queue ( 解决超卖问题 )"></a>从Vector -&gt; List -&gt; Queue ( 解决超卖问题 )</h4><p>Vector: 古老的同步容器, 方法都是synchronized,  但是两个同步方法之间的业务逻辑不是原子性的, 还是会发生超卖问题, 因此需要再外层再加synchronized</p><p>ConcurrentLinkedQueue: CAS实现, 适合代码执行时间短</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有N张火车票，每张票都有一个编号</span></span><br><span class="line"><span class="comment"> * 同时有10个窗口对外售票</span></span><br><span class="line"><span class="comment"> * 请写一个模拟程序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 分析下面的程序可能会产生哪些问题？</span></span><br><span class="line"><span class="comment"> * 重复销售？超量销售？</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用Vector或者Collections.synchronizedXXX</span></span><br><span class="line"><span class="comment"> * 分析一下，这样能解决问题吗？</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 就算操作A和B都是同步的，但A和B组成的复合操作也未必是同步的，仍然需要自己进行同步</span></span><br><span class="line"><span class="comment"> * 就像这个程序，判断size和进行remove必须是一整个的原子操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketSeller3</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> List&lt;String&gt; tickets = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) tickets.add(<span class="string">"票 编号："</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(tickets) &#123;</span><br><span class="line"><span class="keyword">if</span>(tickets.size() &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"销售了--"</span> + tickets.remove(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 使用ConcurrentLinkedQueue提高并发性 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketSeller4</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Queue&lt;String&gt; tickets = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) tickets.add(<span class="string">"票 编号："</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">String s = tickets.poll();</span><br><span class="line"><span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> System.out.println(<span class="string">"销售了--"</span> + s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Synchronized-Vs-CAS"><a href="#Synchronized-Vs-CAS" class="headerlink" title="Synchronized Vs CAS"></a>Synchronized Vs CAS</h4><p>要看并发量高低, 并发量不高, 代码执行时间长, 用Synchronized</p><h4 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h4><h5 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h5><p>跳表比链表查找快, 比treeMap的cas操作容易</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200528230935451.png" alt="image-20200528230935451" style="zoom:67%;"><h4 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h4><h5 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h5><h5 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h5><p>往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><p>CopyOnWriteArraySet内部维护着一个CopyOnWriteArrayList</p><p>写时排他锁, 读时共享锁, 适合读特别多, 写特别少</p><h4 id="LinkedBlockingQueue-天生的生产者-消费者模型"><a href="#LinkedBlockingQueue-天生的生产者-消费者模型" class="headerlink" title="LinkedBlockingQueue: 天生的生产者/消费者模型"></a>LinkedBlockingQueue: 天生的生产者/消费者模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            strs.put(<span class="string">"a"</span> + i); <span class="comment">//如果满了，就会等待</span></span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;, <span class="string">"p1"</span>).start();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" take -"</span> + strs.take()); <span class="comment">//如果空了，就会等待</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, <span class="string">"c"</span> + i).start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">strs.put(<span class="string">"a"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//strs.put("aaa"); // 满了就会等待，程序阻塞</span></span><br><span class="line"><span class="comment">//strs.add("aaa"); // 满了报错</span></span><br><span class="line"><span class="comment">//strs.offer("aaa"); // 满了结束, 用返回值判断</span></span><br><span class="line">strs.offer(<span class="string">"aaa"</span>, <span class="number">1</span>, TimeUnit.SECONDS); <span class="comment">// 满了等一秒, 加不进去, 返回</span></span><br><span class="line"></span><br><span class="line">System.out.println(strs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Queue和List的区别"><a href="#Queue和List的区别" class="headerlink" title="Queue和List的区别"></a>Queue和List的区别</h5><p>Queue多了很多线程友好的方法, 或者阻塞, 或者时间等待<br>offer()<br>peek()<br>poll()<br>put()<br>take()</p><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue:"></a>DelayQueue:</h4><p>按时间进行任务调度, 等待多长时间后执行</p><p>本质是PriorityQueue, 需要指定一种排序方式, 例如等待时间短的先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_DelayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BlockingQueue&lt;MyTask&gt; tasks = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">long</span> runningTime;</span><br><span class="line"></span><br><span class="line">MyTask(String name, <span class="keyword">long</span> rt) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.runningTime = rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS))</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> unit.convert(runningTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">" "</span> + runningTime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">MyTask t1 = <span class="keyword">new</span> MyTask(<span class="string">"t1"</span>, now + <span class="number">1000</span>);</span><br><span class="line">MyTask t2 = <span class="keyword">new</span> MyTask(<span class="string">"t2"</span>, now + <span class="number">2000</span>);</span><br><span class="line">MyTask t3 = <span class="keyword">new</span> MyTask(<span class="string">"t3"</span>, now + <span class="number">1500</span>);</span><br><span class="line">MyTask t4 = <span class="keyword">new</span> MyTask(<span class="string">"t4"</span>, now + <span class="number">2500</span>);</span><br><span class="line">MyTask t5 = <span class="keyword">new</span> MyTask(<span class="string">"t5"</span>, now + <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">tasks.put(t1);</span><br><span class="line">tasks.put(t2);</span><br><span class="line">tasks.put(t3);</span><br><span class="line">tasks.put(t4);</span><br><span class="line">tasks.put(t5);</span><br><span class="line"></span><br><span class="line">System.out.println(tasks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(tasks.take());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h5><p>内部是一个红黑树<br>可自定义compareTo<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529064306360.png" alt="image-20200529064306360" style="zoom: 67%;"></p><h4 id="SynchronousQueue-用处最大-任务调度"><a href="#SynchronousQueue-用处最大-任务调度" class="headerlink" title="SynchronousQueue 用处最大, 任务调度"></a>SynchronousQueue 用处最大, 任务调度</h4><p><strong>容量为0</strong>, 只能用put()阻塞 , 用来<strong>手递手</strong>给另一个线程数据<br>类似Exchanger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">BlockingQueue&lt;String&gt; strs = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(strs.take());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">strs.put(<span class="string">"aaa"</span>); <span class="comment">//阻塞等待消费者消费</span></span><br><span class="line"><span class="comment">//strs.put("bbb");</span></span><br><span class="line"><span class="comment">//strs.add("aaa");</span></span><br><span class="line">System.out.println(strs.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TransferQueue-amp-LinkedTransferQueue"><a href="#TransferQueue-amp-LinkedTransferQueue" class="headerlink" title="TransferQueue &amp; LinkedTransferQueue"></a>TransferQueue &amp; LinkedTransferQueue</h4><p>transfer(), <strong>装完等着, 等其他线程取走</strong><br>用于订单提交后, 确认有人处理订单, 再返回<br>收钱, 确认收到, 返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">LinkedTransferQueue&lt;String&gt; strs = <span class="keyword">new</span> LinkedTransferQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(strs.take());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">strs.transfer(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//strs.put("aaa");</span></span><br><span class="line"><span class="comment">/*new Thread(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">System.out.println(strs.take());</span></span><br><span class="line"><span class="comment">&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;).start();*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程任务"><a href="#线程任务" class="headerlink" title="线程任务"></a>线程任务</h3><h4 id="Excutor"><a href="#Excutor" class="headerlink" title="Excutor"></a>Excutor</h4><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200522221235180.png" alt="image-20200522221235180" style="zoom: 80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403195118211.png" alt="image-20200403195118211" style="zoom:80%;"><br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200531072858642.png" alt="image-20200531072858642"></p><h4 id="ExcutorService-方法"><a href="#ExcutorService-方法" class="headerlink" title="ExcutorService 方法"></a>ExcutorService 方法</h4><p>主要是submint和shutdown和shutdownnow</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529125814455.png" alt="image-20200529125814455" style="zoom: 80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403201506150.png" alt="image-20200403201506150" style="zoom:67%;"><h4 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h4><p>类似Runnable, 相当于Runnable + return 一个<Future></Future></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_Callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Callable&lt;String&gt; c = <span class="keyword">new</span> Callable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Hello Callable"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">        Future&lt;String&gt; future = service.submit(c); <span class="comment">//异步</span></span><br><span class="line"></span><br><span class="line">        System.out.println(future.get());<span class="comment">//阻塞</span></span><br><span class="line"></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><p>存储执行的任务将来才会产生的结果<br>ExcutorService.submit(task, result) 返回值是Future</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200529125137980.png" alt="image-20200529125137980"></p><h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><p>更灵活, <strong>既是一个Runnable又可以存结果</strong><br>Future + Runnable<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529130051594.png" alt="image-20200529130051594" style="zoom:67%;"><br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529130142044.png" alt="image-20200529130142044" style="zoom:67%;"></p><p>FutureTask对比Callable</p><p>Callable执行完, 需要另外的Future进行存储<br>FutureTask执行完, 结果保存在自己这<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529130307731.png" alt="image-20200529130307731" style="zoom:50%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_00_Future</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;</span><br><span class="line">         TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">      &#125;); <span class="comment">//new Callable () &#123; Integer call();&#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">      </span><br><span class="line">      System.out.println(task.get()); <span class="comment">//阻塞</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CompletableFutrue"><a href="#CompletableFutrue" class="headerlink" title="CompletableFutrue"></a>CompletableFutrue</h4><p>方便各种任务的管理, 同时管理多个Future</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Double&gt; futureTM = CompletableFuture.supplyAsync(()-&gt;priceOfTM());</span><br><span class="line">        CompletableFuture&lt;Double&gt; futureTB = CompletableFuture.supplyAsync(()-&gt;priceOfTB());</span><br><span class="line">        CompletableFuture&lt;Double&gt; futureJD = CompletableFuture.supplyAsync(()-&gt;priceOfJD());</span><br><span class="line"></span><br><span class="line">        CompletableFuture.allOf(futureTM, futureTB, futureJD).join();</span><br><span class="line"></span><br><span class="line">        CompletableFuture.supplyAsync(()-&gt;priceOfTM())</span><br><span class="line">                .thenApply(String::valueOf)</span><br><span class="line">                .thenApply(str-&gt; <span class="string">"price "</span> + str)</span><br><span class="line">                .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>线程池 ： 线程集合hashset + 任务集合</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403203015066.png" alt="image-20200403203015066" style="zoom: 67%;"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403195118211.png" alt="image-20200403195118211" style="zoom:80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403201544155.png" alt="image-20200403201544155" style="zoom:67%;"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522120920520.png" alt="image-20200522120920520" style="zoom: 50%;"><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522120855575.png" alt="image-20200522120855575" style="zoom: 67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200522121506135.png" alt="image-20200522121506135" style="zoom:67%;"><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522120956504.png" alt="image-20200522120956504" style="zoom: 67%;"><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200530071412193.png" alt="image-20200530071412193"></p><p>Running状态的线程, 调用ShutDown() 进入ShutDown状态;  调用ShutDownNow(), 进入Stop状态</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200522121038785.png" alt="image-20200522121038785" style="zoom: 50%;"><h4 id="七个参数"><a href="#七个参数" class="headerlink" title="七个参数"></a>七个参数</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200522121055638.png" alt="image-20200522121055638" style="zoom: 67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/SE笔记/image-20200522121106590.png" alt="image-20200522121106590" style="zoom:67%;"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200529132654110.png" alt="image-20200529132654110"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/md/image/image-20200403190747668.png" alt="image-20200403190747668" style="zoom: 67%;"><h5 id="拒绝策略-1-任务队列满-2-线程池满"><a href="#拒绝策略-1-任务队列满-2-线程池满" class="headerlink" title="拒绝策略: 1.任务队列满 2.线程池满"></a><strong>拒绝策略: 1.任务队列满 2.线程池满</strong></h5><p>JDK默认提供四种</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529133742585.png" alt="image-20200529133742585" style="zoom:80%;"><p>阿里规约<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529133303945.png" alt="image-20200529133303945" style="zoom: 67%;"></p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200529133426122.png" alt="image-20200529133426122" style="zoom:67%;"><h4 id="submit与execute区别"><a href="#submit与execute区别" class="headerlink" title="submit与execute区别"></a>submit与execute区别</h4><h5 id="（1）可以接受的任务类型"><a href="#（1）可以接受的任务类型" class="headerlink" title="（1）可以接受的任务类型"></a><strong>（1）可以接受的任务类型</strong></h5><p>​        submit：</p><p>​        <img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/20151202163536892" alt="img"></p><p>​       execute：</p><p>​       <img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/20151202163634814" alt="img"></p><p>​       可以看出：</p><p>​            execute只能接受Runnable类型的任务</p><p>​            submit不管是Runnable还是Callable类型的任务都可以接受，但是Runnable返回值均为void，所以使用Future的get()获得的还是null</p><p><strong>（2）返回值</strong></p><p>​        由Callable和Runnable的区别可知：</p><p>​        execute没有返回值</p><p>​        submit有返回值，所以需要返回值的时候必须使用submit</p><p><strong>（3）异常</strong></p><p>​        <strong>1.execute中抛出异常</strong></p><p>​          <strong>execute中的是Runnable接口的实现</strong>，所以<strong>只能使用try、catch</strong>来捕获CheckedException，通过实现UncaughtExceptionHande接口处理UncheckedException</p><p>​          即和普通线程的处理方式完全一致</p><p>​        <strong>2.submit中抛出异常</strong></p><p>​          <strong>不管提交的是Runnable还是Callable类型的任务，如果不对返回值Future调用get()方法，都会吃掉异常</strong></p><h4 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h4><p>线程池的工厂, 工具类</p><h4 id="JDK自带线程池"><a href="#JDK自带线程池" class="headerlink" title="JDK自带线程池"></a>JDK自带线程池</h4><h5 id="SingleThreadPool"><a href="#SingleThreadPool" class="headerlink" title="SingleThreadPool"></a>SingleThreadPool</h5><ul><li>意义在于: 任务队列不用自己维护, 线程的生命周期不自己管理</li><li>核心和最大都是1</li><li>任务队列是阻塞队列</li><li>阻塞队列最大Integer.MAX</li><li>使用单个工作线程来执行一个无边界的队列。（注意，如果单个线程在执行过程中因为某些错误中止，新的线程会替代它执行后续线程）。它可以保证认为是按顺序执行的，任何时候都不会有多于一个的任务处于活动状态。和 <strong>newFixedThreadPool(1)</strong> 的区别在于，如果线程遇到错误中止，它是无法使用替代线程的。<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200530065410475.png" alt="image-20200530065410475"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService service = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> j = i;</span><br><span class="line"><span class="comment">// 没有线程, 阻塞住</span></span><br><span class="line">service.execute(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(j + <span class="string">" "</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h5><ul><li>核心线程数0, 最大线程数Integer.MAX_VALUE (<strong>线程数几乎达不到,区别于阻塞队列的MAX</strong>)</li><li>空闲线程存活时间60S</li><li>任务队列是同步队列</li><li>特点: <strong>来了就进入任务队列</strong>, 任务队列SynchronousQueue是<strong>手递手</strong>的, 容量为0<br>来一个任务, 必须马上执行, 没有线程执行, 马上new一个</li><li>优势: <strong>大量短生命周期的异步任务时</strong>, 不会堆积, 不会启动特别多的线程时使用</li><li>调用 <strong>execute</strong> 时，<strong>重用空闲线程</strong>，如果不存在空闲线程，那么会重新创建一个新的线程。如果线程<strong>超过 60 秒</strong>还未被使用，就会被中止并从缓存中<strong>移除</strong>。因此，<strong>线程池在长时间空闲后不会消耗任何资源</strong>。<br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200530065629729.png" alt="image-20200530065629729"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">System.out.println(service);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">service.execute(() -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(service);</span><br><span class="line"></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(service);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h5><ul><li><strong>固定线程数量</strong></li><li><strong>所有线程都是核心线程,</strong> 因此<strong>没有回收</strong>, 空闲回收时间是0</li><li>任务队列是<strong>阻塞队列</strong>, 最大<strong>Integer.MAX_VALUE</strong></li><li>复用 <strong>固定数量的线程</strong> 处理一个 <strong>共享的无边界队列</strong> 。任何时间点，最多有 nThreads 个线程会处于活动状态执行任务。如果当所有线程都是活动时，有多的任务被提交过来，那么它会一致在队列中等待直到有线程可用。如果任何线程在执行过程中因为错误而中止，新的线程会替代它的位置来执行后续的任务。<strong>所有线程都会一致存于线程池中，直到执行 ExecutorService.shutdown() 关闭。</strong><br><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200530073303210.png" alt="image-20200530073303210"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4核CPU, 4个线程, 并行执行任务, 计算0-20000的质数</span></span><br><span class="line"><span class="comment">// 单线程2.8秒, 四线程不到1秒</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> cpuCoreNum = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(cpuCoreNum);</span><br><span class="line"></span><br><span class="line">MyTask t1 = <span class="keyword">new</span> MyTask(<span class="number">1</span>, <span class="number">80000</span>); <span class="comment">//1-5 5-10 10-15 15-20</span></span><br><span class="line">MyTask t2 = <span class="keyword">new</span> MyTask(<span class="number">80001</span>, <span class="number">130000</span>);</span><br><span class="line">MyTask t3 = <span class="keyword">new</span> MyTask(<span class="number">130001</span>, <span class="number">170000</span>);</span><br><span class="line">MyTask t4 = <span class="keyword">new</span> MyTask(<span class="number">170001</span>, <span class="number">200000</span>);</span><br><span class="line"></span><br><span class="line">Future&lt;List&lt;Integer&gt;&gt; f1 = service.submit(t1);</span><br><span class="line">Future&lt;List&lt;Integer&gt;&gt; f2 = service.submit(t2);</span><br><span class="line">Future&lt;List&lt;Integer&gt;&gt; f3 = service.submit(t3);</span><br><span class="line">Future&lt;List&lt;Integer&gt;&gt; f4 = service.submit(t4);</span><br><span class="line"></span><br><span class="line">start = System.currentTimeMillis();</span><br><span class="line">f1.get();</span><br><span class="line">f2.get();</span><br><span class="line">f3.get();</span><br><span class="line">f4.get();</span><br><span class="line">end = System.currentTimeMillis();</span><br><span class="line">System.out.println(end - start);</span><br></pre></td></tr></table></figure><h6 id="并发-amp-并行"><a href="#并发-amp-并行" class="headerlink" title="并发 &amp; 并行"></a>并发 &amp; 并行</h6><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530075537742.png" alt="image-20200530075537742" style="zoom:67%;"><h5 id="CachedThreadPool和FixedThreadPool选择"><a href="#CachedThreadPool和FixedThreadPool选择" class="headerlink" title="CachedThreadPool和FixedThreadPool选择"></a>CachedThreadPool和FixedThreadPool选择</h5><p>任务量忽大忽小, 用Cached<br>任务量比较平稳, 用Fixed</p><h5 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h5><ul><li><p>定时任务线程池</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530075137625.png" alt="image-20200530075137625" style="zoom:80%;"></li></ul><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530074810921.png" alt="image-20200530074810921" style="zoom:80%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">4</span>);</span><br><span class="line">service.scheduleAtFixedRate(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;, <span class="number">0</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WorkStealingPool"><a href="#WorkStealingPool" class="headerlink" title="WorkStealingPool"></a>WorkStealingPool</h5><ul><li><p>每个线程维护一个自己的任务队列</p></li><li><p>空闲的线程从其他线程的队列中偷一个任务执行</p></li><li><p>new了一个ForkJoinPool</p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530093103697.png" alt="image-20200530093103697" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530092942647.png" alt="image-20200530092942647" style="zoom:67%;"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ExecutorService service = Executors.newWorkStealingPool();</span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">service.execute(<span class="keyword">new</span> R(<span class="number">1000</span>));</span><br><span class="line">service.execute(<span class="keyword">new</span> R(<span class="number">2000</span>));</span><br><span class="line">service.execute(<span class="keyword">new</span> R(<span class="number">2000</span>));</span><br><span class="line">service.execute(<span class="keyword">new</span> R(<span class="number">2000</span>)); <span class="comment">//daemon</span></span><br><span class="line">service.execute(<span class="keyword">new</span> R(<span class="number">2000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于产生的是精灵线程（守护线程、后台线程），主线程不阻塞的话，看不到输出</span></span><br><span class="line">System.in.read(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> time;</span><br><span class="line">R(<span class="keyword">int</span> t) &#123;</span><br><span class="line"><span class="keyword">this</span>.time = t;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(time);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">System.out.println(time  + <span class="string">" "</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h5><ul><li>父任务分成小任务, 最后结果汇总<img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530093324219.png" alt="image-20200530093324219" style="zoom:67%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530093513702.png" alt="image-20200530093513702" style="zoom: 80%;"><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530093851923.png" alt="image-20200530093851923" style="zoom: 80%;"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T12_ForkJoinPool</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_NUM = <span class="number">50000</span>;</span><br><span class="line"><span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">nums[i] = r.nextInt(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"---"</span> + Arrays.stream(nums).sum()); <span class="comment">//stream api</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不带返回值的</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTask</span> <span class="keyword">extends</span> <span class="title">RecursiveAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> start, end;</span><br><span class="line"></span><br><span class="line">AddTask(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123;</span><br><span class="line">start = s;</span><br><span class="line">end = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(end-start &lt;= MAX_NUM) &#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;end; i++) sum += nums[i];</span><br><span class="line">System.out.println(<span class="string">"from:"</span> + start + <span class="string">" to:"</span> + end + <span class="string">" = "</span> + sum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> middle = start + (end-start)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">AddTask subTask1 = <span class="keyword">new</span> AddTask(start, middle);</span><br><span class="line">AddTask subTask2 = <span class="keyword">new</span> AddTask(middle, end);</span><br><span class="line">subTask1.fork();</span><br><span class="line">subTask2.fork();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带返回值的</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTaskRet</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">int</span> start, end;</span><br><span class="line">AddTaskRet(<span class="keyword">int</span> s, <span class="keyword">int</span> e) &#123;</span><br><span class="line">start = s;</span><br><span class="line">end = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 达到可执行数量</span></span><br><span class="line"><span class="keyword">if</span>(end-start &lt;= MAX_NUM) &#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;end; i++) sum += nums[i];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 没达到数量, 继续拆分</span></span><br><span class="line"><span class="keyword">int</span> middle = start + (end-start)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">AddTaskRet subTask1 = <span class="keyword">new</span> AddTaskRet(start, middle);</span><br><span class="line">AddTaskRet subTask2 = <span class="keyword">new</span> AddTaskRet(middle, end);</span><br><span class="line">subTask1.fork();</span><br><span class="line">subTask2.fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> subTask1.join() + subTask2.join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*ForkJoinPool fjp = new ForkJoinPool();</span></span><br><span class="line"><span class="comment">AddTask task = new AddTask(0, nums.length);</span></span><br><span class="line"><span class="comment">fjp.execute(task);*/</span></span><br><span class="line"></span><br><span class="line">T12_ForkJoinPool temp = <span class="keyword">new</span> T12_ForkJoinPool();</span><br><span class="line"></span><br><span class="line">ForkJoinPool fjp = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">AddTaskRet task = <span class="keyword">new</span> AddTaskRet(<span class="number">0</span>, nums.length);</span><br><span class="line">fjp.execute(task);</span><br><span class="line"><span class="keyword">long</span> result = task.join();</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.in.read();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ParallelStreamAPI-并行流式API"><a href="#ParallelStreamAPI-并行流式API" class="headerlink" title="ParallelStreamAPI 并行流式API"></a>ParallelStreamAPI 并行流式API</h5><p>并行流式API， <strong>效率高于foreach</strong>, <strong>底层是ForkJoinPool</strong>, <strong>快四倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   Random r = <span class="keyword">new</span> Random();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) nums.add(<span class="number">1000000</span> + r.nextInt(<span class="number">1000000</span>));</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//System.out.println(nums);</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">   nums.forEach(v-&gt;isPrime(v));</span><br><span class="line">   <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">   System.out.println(end - start); <span class="comment">// 1916</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 并行流</span></span><br><span class="line">   start = System.currentTimeMillis();</span><br><span class="line">   nums.parallelStream().forEach(T13_ParallelStreamAPI::isPrime);</span><br><span class="line">   end = System.currentTimeMillis();</span><br><span class="line">   </span><br><span class="line">   System.out.println(end - start); <span class="comment">// 514</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=num/<span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义拒绝策略"><a href="#自定义拒绝策略" class="headerlink" title="自定义拒绝策略"></a>自定义拒绝策略</h4><p>MyHandler implements RejectedExecutionHandler</p><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20200530090527305.png" alt="image-20200530090527305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService service = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">0</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">6</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> MyHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//log("r rejected")</span></span><br><span class="line">            <span class="comment">//save r kafka mysql redis</span></span><br><span class="line">            <span class="comment">//try 3 times</span></span><br><span class="line">            <span class="keyword">if</span>(executor.getQueue().size() &lt; <span class="number">10000</span>) &#123;</span><br><span class="line">                <span class="comment">//try put again();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="线程池源码"><a href="#线程池源码" class="headerlink" title="线程池源码"></a>线程池源码</h4><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/../../../只要学不死 就往死里学/note/JUC/image/笔记/image-20200530092516213.png" alt="image-20200530092516213" style="zoom:67%;"><p><img src="/2020/05/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image/%E7%AC%94%E8%AE%B0/image-20200730134028335.png" alt="image-20200730134028335"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java SE </tag>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC基本使用</title>
      <link href="/2020/05/22/Spring%20IOC%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/22/Spring%20IOC%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IOC基本使用"><a href="#Spring-IOC基本使用" class="headerlink" title="Spring IOC基本使用"></a>Spring IOC基本使用</h1><h3 id="1、spring-helloworld"><a href="#1、spring-helloworld" class="headerlink" title="1、spring_helloworld"></a>1、spring_helloworld</h3><h5 id="1-使用手动加载jar包的方式实现，分为三个步骤，现在几乎不用"><a href="#1-使用手动加载jar包的方式实现，分为三个步骤，现在几乎不用" class="headerlink" title="(1)使用手动加载jar包的方式实现，分为三个步骤，现在几乎不用"></a><strong>(1)使用手动加载jar包的方式实现，分为三个步骤，现在几乎不用</strong></h5><ul><li><p><strong>导包：导入这五个包即可</strong></p><p>commons-logging-1.2.jar<br>spring-beans-5.2.3.RELEASE.jar<br>spring-context-5.2.3.RELEASE.jar<br>spring-core-5.2.3.RELEASE.jar<br>spring-expression-5.2.3.RELEASE.jar</p></li><li><p><strong>写配置</strong></p><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册一个对象，spring回自动创建这个对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    一个bean标签就表示一个对象</span></span><br><span class="line"><span class="comment">    id:这个对象的唯一标识</span></span><br><span class="line"><span class="comment">    class:注册对象的完全限定名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property标签给对象的属性赋值</span></span><br><span class="line"><span class="comment">        name:表示属性的名称</span></span><br><span class="line"><span class="comment">        value：表示属性的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p></li></ul><p>SpringDemoTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ApplicationContext:表示ioc容器</span></span><br><span class="line">        <span class="comment">//ClassPathXmlApplicationContext:表示从当前classpath路径中获取xml文件的配置</span></span><br><span class="line">        <span class="comment">//根据spring的配置文件来获取ioc容器对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc.xml"</span>);</span><br><span class="line">        Person person = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用maven的方式来构建项目"><a href="#2-使用maven的方式来构建项目" class="headerlink" title="(2)使用maven的方式来构建项目"></a><strong>(2)使用maven的方式来构建项目</strong></h5><ul><li><p><strong>创建maven项目</strong></p><p>定义项目的groupId、artifactId</p></li><li><p><strong>添加对应的pom依赖</strong></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写代码</strong></p><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><p>MyTest.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc.xml"</span>);</span><br><span class="line">        Person person = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>​        以上两种方式创建spring的项目都是可以的，但是在现在的企业开发环境中使用更多的还是maven这样的方式，无须自己处理jar之间的依赖关系，也无须提前下载jar包，只需要配置相关的pom即可，因此推荐大家使用maven的方式，具体的maven操作大家可以看maven的详细操作文档。</p><p>​        <strong>搭建spring项目需要注意的点：</strong></p><p>​        1、一定要将配置文件添加到类路径中，使用idea创建项目的时候要放在resource目录下</p><p>​        2、导包的时候别忘了commons-logging-1.2.jar包</p><p>​        <strong>细节点：</strong></p><p>​        1、ApplicationContext就是IOC容器的接口，可以通过此对象获取容器中创建的对象</p><p>​        2、对象在Spring容器创建完成的时候就已经创建完成，不是需要用的时候才创建</p><p>​        3、对象在IOC容器中存储的时候都是单例的，如果需要多例需要修改属性</p><p>​        4、创建对象给属性赋值的时候是通过setter方法实现的</p><p>​        5、对象的属性是由setter/getter方法决定的，而不是定义的成员属性</p><h3 id="2、spring对象的获取及属性赋值方式"><a href="#2、spring对象的获取及属性赋值方式" class="headerlink" title="2、spring对象的获取及属性赋值方式"></a>2、spring对象的获取及属性赋值方式</h3><h5 id="1、通过bean的id获取IOC容器中的对象（上面已经用过）"><a href="#1、通过bean的id获取IOC容器中的对象（上面已经用过）" class="headerlink" title="1、通过bean的id获取IOC容器中的对象（上面已经用过）"></a><strong>1、通过bean的id获取IOC容器中的对象（上面已经用过）</strong></h5><h5 id="2、通过bean的类型获取对象"><a href="#2、通过bean的类型获取对象" class="headerlink" title="2、通过bean的类型获取对象"></a><strong>2、通过bean的类型获取对象</strong></h5><p>​        MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc.xml"</span>);</span><br><span class="line">        Person bean = context.getBean(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：通过bean的类型在查找对象的时候，在配置文件中不能存在两个类型一致的bean对象，如果有的话，可以通过如下方法</p><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc.xml"</span>);</span><br><span class="line">        Person person = context.getBean(<span class="string">"person"</span>, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、通过构造器给bean对象赋值"><a href="#3、通过构造器给bean对象赋值" class="headerlink" title="3、通过构造器给bean对象赋值"></a><strong>3、通过构造器给bean对象赋值</strong></h5><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--给person类添加构造方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在使用构造器赋值的时候可以省略name属性，但是此时就要求必须严格按照构造器参数的顺序来填写了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person3"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果想不按照顺序来添加参数值，那么可以搭配index属性来使用--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person4"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"lisi"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"20"</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当有多个参数个数相同，不同类型的构造器的时候，可以通过type来强制类型--&gt;</span></span><br><span class="line">将person的age类型设置为Integer类型</span><br><span class="line">public Person(int id, String name, Integer age) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.name = name;</span><br><span class="line">       this.age = age;</span><br><span class="line">       System.out.println("Age");</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public Person(int id, String name, String gender) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.name = name;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">       System.out.println("gender");</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person5"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"20"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果不修改为integer类型，那么需要type跟index组合使用--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person5"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"20"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4、通过命名空间为bean赋值，简化配置文件中属性声明的写法"><a href="#4、通过命名空间为bean赋值，简化配置文件中属性声明的写法" class="headerlink" title="4、通过命名空间为bean赋值，简化配置文件中属性声明的写法"></a><strong>4、通过命名空间为bean赋值，简化配置文件中属性声明的写法</strong></h5><p>​        1、导入命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        2、添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person6"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">p:id</span>=<span class="string">"3"</span> <span class="attr">p:name</span>=<span class="string">"wangwu"</span> <span class="attr">p:age</span>=<span class="string">"22"</span> <span class="attr">p:gender</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、为复杂类型进行赋值操作"><a href="#5、为复杂类型进行赋值操作" class="headerlink" title="5、为复杂类型进行赋值操作"></a><strong>5、为复杂类型进行赋值操作</strong></h5><p>​        在之前的测试代码中，我们都是给最基本的属性进行赋值操作，在正常的企业级开发中还会遇到给各种复杂类型赋值，如集合、数组、其他对象等。</p><p>​        Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"dahuang"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] hobbies;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; sets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"Age"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        System.out.println(<span class="string">"gender"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(List&lt;Book&gt; books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(String[] hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Integer&gt; <span class="title">getSets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;Integer&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address="</span> + address +</span><br><span class="line">                <span class="string">", hobbies="</span> + Arrays.toString(hobbies) +</span><br><span class="line">                <span class="string">", books="</span> + books +</span><br><span class="line">                <span class="string">", sets="</span> + sets +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", properties="</span> + properties +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Book.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name, String author, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price="</span> + price +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String province, String city, String town)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.town = town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTown</span><span class="params">(String town)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.town = town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Address&#123;"</span> +</span><br><span class="line">                <span class="string">"province='"</span> + province + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", town='"</span> + town + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--给复杂类型的赋值都在property标签内进行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--赋空值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过ref引用其他对象，引用外部bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用内部bean--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;property name="address"&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class="com.oi.bean.Address"&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="province" value="北京"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="city" value="北京"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="town" value="西城区"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">            &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为list赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Book"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"多线程与高并发"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"马士兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--外部bean--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"book2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给map赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maps"</span> <span class="attr">ref</span>=<span class="string">"myMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给property赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"aaa"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"bbb"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给数组赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>book<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>movie<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>game<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给set赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sets"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">value</span>=<span class="string">"河北"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"邯郸"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"town"</span> <span class="attr">value</span>=<span class="string">"武安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Book"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"JVM"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"马士兵"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"1200"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address.province"</span> <span class="attr">value</span>=<span class="string">"北京"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--util名称空间创建集合类型的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key2"</span> <span class="attr">value-ref</span>=<span class="string">"book2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key03"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Book"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"西游记"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"吴承恩"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"100"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6、继承关系bean的配置"><a href="#6、继承关系bean的配置" class="headerlink" title="6、继承关系bean的配置"></a>6、继承关系bean的配置</h5><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--parent:指定bean的配置信息继承于哪个bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">parent</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想实现Java文件的抽象类，不需要将当前bean实例化的话，可以使用abstract属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--parent:指定bean的配置信息继承于哪个bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">parent</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7、bean对象创建的依赖关系"><a href="#7、bean对象创建的依赖关系" class="headerlink" title="7、bean对象创建的依赖关系"></a>7、bean对象创建的依赖关系</h5><p>​        bean对象在创建的时候是按照bean在配置文件的顺序决定的，也可以使用depend-on标签来决定顺序</p><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Book"</span> <span class="attr">depends-on</span>=<span class="string">"person,address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="8、bean的作用域控制，是否是单例"><a href="#8、bean的作用域控制，是否是单例" class="headerlink" title="8、bean的作用域控制，是否是单例"></a>8、bean的作用域控制，是否是单例</h5><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">bean的作用域：singleton、prototype、request、session</span></span><br><span class="line"><span class="comment">默认情况下是单例的</span></span><br><span class="line"><span class="comment">prototype：多实例的</span></span><br><span class="line"><span class="comment">    容器启动的时候不会创建多实例bean，只有在获取对象的时候才会创建该对象</span></span><br><span class="line"><span class="comment">    每次创建都是一个新的对象</span></span><br><span class="line"><span class="comment">singleton：默认的单例对象</span></span><br><span class="line"><span class="comment">    在容器启动完成之前就已经创建好对象</span></span><br><span class="line"><span class="comment">    获取的所有对象都是同一个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person4"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9、利用工厂模式创建bean对象"><a href="#9、利用工厂模式创建bean对象" class="headerlink" title="9、利用工厂模式创建bean对象"></a>9、利用工厂模式创建bean对象</h5><p>​        在之前的案例中，所有bean对象的创建都是通过反射得到对应的bean实例，其实在spring中还包含另外一种创建bean实例的方式，就是通过工厂模式进行对象的创建</p><p>​        在利用工厂模式创建bean实例的时候有两种方式，分别是静态工厂和实例工厂。</p><p>​        静态工厂：工厂本身不需要创建对象，但是可以通过静态方法调用，对象=工厂类.静态工厂方法名（）；</p><p>​        实例工厂：工厂本身需要创建对象，工厂类 工厂对象=new 工厂类；工厂对象.get对象名（）；</p><p>PersonStaticFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonStaticFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(name);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">静态工厂的使用：</span></span><br><span class="line"><span class="comment">class:指定静态工厂类</span></span><br><span class="line"><span class="comment">factory-method:指定哪个方法是工厂方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person5"</span> <span class="attr">class</span>=<span class="string">"com.oi.factory.PersonStaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPerson"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--constructor-arg：可以为方法指定参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PersonInstanceFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setId(<span class="number">1</span>);</span><br><span class="line">        person.setName(name);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--实例工厂使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建实例工厂类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personInstanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.oi.factory.PersonInstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">factory-bean:指定使用哪个工厂实例</span></span><br><span class="line"><span class="comment">factory-method:指定使用哪个工厂实例的方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person6"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">factory-bean</span>=<span class="string">"personInstanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getPerson"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"wangwu"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="10、继承FactoryBean来创建对象"><a href="#10、继承FactoryBean来创建对象" class="headerlink" title="10、继承FactoryBean来创建对象"></a>10、继承FactoryBean来创建对象</h5><p>​        FactoryBean是Spring规定的一个接口，当前接口的实现类，Spring都会将其作为一个工厂，但是在ioc容器启动的时候不会创建实例，只有在使用的时候才会创建对象</p><p>MyFactoryBean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现了FactoryBean接口的类是Spring中可以识别的工厂类，spring会自动调用工厂方法创建实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工厂方法，返回需要创建的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"maliu"</span>);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回创建对象的类型,spring会自动调用该方法返回对象的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建的对象是否是单例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myfactorybean"</span> <span class="attr">class</span>=<span class="string">"com.oi.factory.MyFactoryBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="11、bean对象的初始化和销毁方法"><a href="#11、bean对象的初始化和销毁方法" class="headerlink" title="11、bean对象的初始化和销毁方法"></a>11、bean对象的初始化和销毁方法</h5><p>​        在创建对象的时候，我们可以根据需要调用初始化和销毁的方法</p><p>Address.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"address被创建了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String province, String city, String town)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.town = town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProvince</span><span class="params">(String province)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTown</span><span class="params">(String town)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.town = town;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象被初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象被销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Address&#123;"</span> +</span><br><span class="line">                <span class="string">"province='"</span> + province + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", town='"</span> + town + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean生命周期表示bean的创建到销毁</span></span><br><span class="line"><span class="comment">        如果bean是单例，容器在启动的时候会创建好，关闭的时候会销毁创建的bean</span></span><br><span class="line"><span class="comment">        如果bean是多礼，获取的时候创建对象，销毁的时候不会有任何的调用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Address"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.bean.Address;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc2.xml"</span>);</span><br><span class="line">        Address address = context.getBean(<span class="string">"address"</span>, Address<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">        <span class="comment">//applicationContext没有close方法，需要使用具体的子类</span></span><br><span class="line">        ((ClassPathXmlApplicationContext)context).close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12、配置bean对象初始化方法的前后处理方法"><a href="#12、配置bean对象初始化方法的前后处理方法" class="headerlink" title="12、配置bean对象初始化方法的前后处理方法"></a>12、配置bean对象初始化方法的前后处理方法</h5><p>​        spring中包含一个BeanPostProcessor的接口，可以在bean的初始化方法的前后调用该方法，如果配置了初始化方法的前置和后置处理器，无论是否包含初始化方法，都会进行调用</p><p>MyBeanPostProcessor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在初始化方法调用之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean  初始化的bean对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName  xml配置文件中的bean的id属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessBeforeInitialization:"</span>+beanName+<span class="string">"调用初始化前置方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在初始化方法调用之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postProcessAfterInitialization:"</span>+beanName+<span class="string">"调用初始化后缀方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、spring创建第三方bean对象"><a href="#3、spring创建第三方bean对象" class="headerlink" title="3、spring创建第三方bean对象"></a>3、spring创建第三方bean对象</h3><p>​        在Spring中，很多对象都是单实例的，在日常的开发中，我们经常需要使用某些外部的单实例对象，例如数据库连接池，下面我们来讲解下如何在spring中创建第三方bean实例。</p><p>​        1、导入数据库连接池的pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        2、编写配置文件</p><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        3、编写测试文件</p><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Address;</span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ioc3.xml"</span>);</span><br><span class="line">        DruidDataSource dataSource = context.getBean(<span class="string">"dataSource"</span>, DruidDataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、spring引用外部配置文件"><a href="#4、spring引用外部配置文件" class="headerlink" title="4、spring引用外部配置文件"></a>4、spring引用外部配置文件</h3><p>在resource中添加dbconfig.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载外部配置文件</span></span><br><span class="line"><span class="comment">在加载外部依赖文件的时候需要context命名空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、spring基于xml文件的自动装配"><a href="#5、spring基于xml文件的自动装配" class="headerlink" title="5、spring基于xml文件的自动装配"></a>5、spring基于xml文件的自动装配</h3><p>​        当一个对象中需要引用另外一个对象的时候，在之前的配置中我们都是通过property标签来进行手动配置的，其实在spring中还提供了一个非常强大的功能就是自动装配，可以按照我们指定的规则进行配置，配置的方式有以下几种：</p><p>​        default/no：不自动装配</p><p>​        byName：按照名字进行装配，以属性名作为id去容器中查找组件，进行赋值，如果找不到则装配null</p><p>​        byType：按照类型进行装配,以属性的类型作为查找依据去容器中找到这个组件，如果有多个类型相同的bean对象，那么会报异常，如果找不到则装配null</p><p>​        constructor：按照构造器进行装配，先按照有参构造器参数的类型进行装配，没有就直接装配null；如果按照类型找到了多个，那么就使用参数名作为id继续匹配，找到就装配，找不到就装配null</p><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">value</span>=<span class="string">"河北"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">value</span>=<span class="string">"邯郸"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"town"</span> <span class="attr">value</span>=<span class="string">"武安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person3"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span> <span class="attr">autowire</span>=<span class="string">"constructor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、SpEL的使用"><a href="#6、SpEL的使用" class="headerlink" title="6、SpEL的使用"></a>6、SpEL的使用</h3><p>​        SpEL:Spring Expression Language,spring的表达式语言，支持运行时查询操作对象</p><p>​        使用#{…}作为语法规则，所有的大括号中的字符都认为是SpEL.</p><p>ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person4"</span> <span class="attr">class</span>=<span class="string">"com.oi.bean.Person"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持任何运算符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#&#123;12*2&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以引用其他bean的某个属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;address.province&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用其他bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"#&#123;address&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--调用静态方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"#&#123;T(java.util.UUID).randomUUID().toString().substring(0,4)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--调用非静态方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"#&#123;address.getCity()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406103106651.png" alt="image-20200406103106651"></p><p>离CPU越近, 速度越快, 空间越小</p><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406103208497.png" alt="image-20200406103208497"></p><p>数据不一致问题</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406103255933.png" alt="image-20200406103255933" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406103528554.png" alt="image-20200406103528554" style="zoom:50%;"><p>缓存锁</p><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406103638477.png" alt="image-20200406103638477"></p><p>和主存内容比较<br>Modified改过, 再加载  Exclusive独享  Shared我读的时候别人也在读  Invalid读时被别的CPU改过</p><p>现代CPU的数据一致性实现 = 缓存锁(MESI …) + 总线锁读取缓存以cache line为基本单位，目前64bytes</p><p>位于同一缓存行的两个不同数据，被两个不同CPU锁定，产生互相影响的伪共享问题</p><p>伪共享问题：JUC/c_028_FalseSharing</p><p>使用缓存行的对齐能够提高效率</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406105854481.png" alt="image-20200406105854481" style="zoom:67%;"><p>乱序问题</p><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406105951702.png" alt="image-20200406105951702"></p><p>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系</p><p>写操作也可以进行合并</p><p>乱序执行的证明：JVM/jmm/Disorder.java</p><h2 id="如何保证特定情况下不乱序"><a href="#如何保证特定情况下不乱序" class="headerlink" title="如何保证特定情况下不乱序"></a>如何保证特定情况下不乱序</h2><p>硬件内存屏障 X86</p><blockquote><p> sfence:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。<br> lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。<br> mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</p></blockquote><blockquote><p>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</p></blockquote><p>JVM级别如何规范（JSR133）</p><blockquote><p>LoadLoad屏障：<br>    对于这样的语句Load1; LoadLoad; Load2， </p><pre><code>在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</code></pre><p>StoreStore屏障：</p><pre><code>对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</code></pre><p>LoadStore屏障：</p><pre><code>对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</code></pre><p>StoreLoad屏障：<br>    对于这样的语句Store1; StoreLoad; Load2，</p><p>​     在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</p></blockquote><p>volatile的实现细节</p><ol><li><p>字节码层面<br>ACC_VOLATILE</p></li><li><p>JVM层面<br>volatile内存区的读写 都加屏障</p><blockquote><p>StoreStoreBarrier</p><p>volatile 写操作</p><p>StoreLoadBarrier</p></blockquote><blockquote><p>LoadLoadBarrier</p><p>volatile 读操作</p><p>LoadStoreBarrier</p></blockquote><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406133643178.png" alt="image-20200406133643178" style="zoom:50%;"></li><li><p>OS和硬件层面<br><a href="https://blog.csdn.net/qq_26222859/article/details/52235930" target="_blank" rel="noopener">https://blog.csdn.net/qq_26222859/article/details/52235930</a><br>hsdis - HotSpot Dis Assembler<br>windows lock 指令实现 | MESI实现</p></li></ol><p>synchronized实现细节</p><ol><li>字节码层面<br>ACC_SYNCHRONIZED<br>monitorenter monitorexit</li><li>JVM层面<br>C C++ 调用了操作系统提供的同步机制</li><li>OS和硬件层面<br>X86 : lock cmpxchg / xxx<br><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">https</a><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">://blog.csdn.net/21aspnet/article/details/</a>[88571740</li></ol><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406141008614.png" alt="image-20200406141008614" style="zoom: 67%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406141654051.png" alt="image-20200406141654051" style="zoom: 67%;"><h3 id="观察虚拟机配置"><a href="#观察虚拟机配置" class="headerlink" title="观察虚拟机配置"></a>观察虚拟机配置</h3><p>java -XX:+PrintCommandLineFlags -version</p><h3 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h3><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/NHM%5DW@6V4YDG05XD1M%5DB%60LR-1587785829438.png" alt="img"></p><ol><li>对象头：markword  8</li><li>ClassPointer指针：-XX:+UseCompressedClassPointers 为4字节 不开启为8字节</li><li>实例数据<ol><li>引用类型：-XX:+UseCompressedOops 为4字节 不开启为8字节<br>Oops Ordinary Object Pointers</li></ol></li><li>Padding对齐，8的倍数</li></ol><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><ol><li>对象头：markword 8</li><li>ClassPointer指针同上</li><li>数组长度：4字节</li><li>数组数据</li><li>对齐 8的倍数</li></ol><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406143814461.png" alt="image-20200406143814461"></p><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200423213522378.png" alt="image-20200423213522378"></p><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406144658888.png" alt="image-20200406144658888"></p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406144920389.png" alt="image-20200406144920389" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145146864.png" alt="image-20200406145146864" style="zoom: 50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145223522.png" alt="image-20200406145223522" style="zoom:67%;"><p>Heap</p><p>Method Area</p><ol><li>Perm Space (&lt;1.8)<br>字符串常量位于PermSpace<br>FGC不会清理<br>大小启动的时候指定，不能变</li><li>Meta Space (&gt;=1.8)<br>字符串常量位于堆<br>会触发FGC清理<br>不设定的话，最大就是物理内存</li></ol><p>Runtime Constant Pool</p><p>Native Method Stack</p><p>Direct Memory</p><blockquote><p>JVM可以直接访问的内核空间的内存 (OS 管理的内存)</p><p>NIO ， 提高效率，实现zero copy</p></blockquote><p>思考：</p><blockquote><p>如何证明1.7字符串常量位于Perm，而1.8位于Heap？</p><p>提示：结合GC， 一直创建字符串常量，观察堆，和Metaspace</p></blockquote><p>PC 程序计数器</p><blockquote><p>存放指令位置</p><p>虚拟机的运行，类似于这样的循环：</p><p>while( not end ) {</p><p>​    取PC中的位置，找到对应位置的指令；</p><p>​    执行该指令；</p><p>​    PC ++;</p><p>}</p></blockquote><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145829843.png" alt="image-20200406145829843" style="zoom: 50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145851489.png" alt="image-20200406145851489" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145909798.png" alt="image-20200406145909798" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406145932389.png" alt="image-20200406145932389" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406150110246.png" alt="image-20200406150110246" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406150136039.png" alt="image-20200406150136039" style="zoom: 67%;"><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406150235919.png" alt="image-20200406150235919"></p><p>局部变量+操作数栈+</p><p>JVM Stack</p><ol><li>Frame - 每个方法对应一个栈帧<ol><li>Local Variable Table</li><li>Operand Stack<br>对于long的处理（store and load），多数虚拟机的实现都是原子的<br>jls 17.7，没必要加volatile</li><li>Dynamic Linking<br><a href="https://blog.csdn.net/qq_41813060/article/details/88379473" target="_blank" rel="noopener">https://blog.csdn.net/qq_41813060/article/details/88379473</a><br>jvms 2.6.3</li><li>return address<br>a() -&gt; b()，方法a调用了方法b, b方法的返回值放在什么地方</li></ol></li></ol><p>int i = 8;</p><p>i++;</p><p>sout(i)</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406151240108.png" alt="image-20200406151240108" style="zoom: 50%;"><p>(右 i = i++) 相当于先把值放在内存, 再赋值给寄存器中</p><p>1: 先把8压栈,</p><p>2: 把8弹到局部变量表为1的位置 (完成int i = 8)</p><p>3: 把局部变量表为1位置上的8压栈 (用到 i)</p><p>4: 把局部变量表为1位置上的数+1 (完成 i++)</p><p>5: 把8弹到局部变量表为1的位置 (完成 i = i++)</p><p>i = ++i : 先+1再压栈</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406154012469.png" alt="image-20200406154012469" style="zoom: 50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406154223054.png" alt="image-20200406154223054" style="zoom:50%;"><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406154316228.png" alt="image-20200406154316228" style="zoom: 50%;"><p>一个方法对应一个栈针</p><p>非静态方法, 第0个位置是this</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406154753619.png" alt="image-20200406154753619" style="zoom:50%;"><p>3,4已经出栈, 7压栈, load压栈, store弹栈</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406155009054.png" alt="image-20200406155009054" style="zoom:50%;"><p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20200406155405751.png" alt="image-20200406155405751"></p><p>第二个: 100放在main方法栈顶, 直接弹出, 结束</p><p>第三个: 100弹到局部变量表2位置(args是0,h是1, i是2), 结束</p><p>递归调用: 三个栈</p><img src="/2020/05/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/../../../只要学不死 就往死里学/note/JVM/image/JMM/image-20200406160115950.png" alt="image-20200406160115950" style="zoom:50%;"><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><p>store</p><p>load</p><p>pop</p><p>mul</p><p>sub</p><p>invoke</p><ol><li>InvokeStatic</li><li>InvokeVirtual</li><li>InvokeInterface</li><li>InovkeSpecial<br>可以直接定位，不需要多态的方法<br>private 方法 ， 构造方法</li><li>InvokeDynamic<br>JVM最难的指令<br>lambda表达式或者反射或者其他动态语言scala kotlin，或者CGLib ASM，动态产生的class，会用到的指令</li></ol><h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><h2 id="硬件层数据一致性"><a href="#硬件层数据一致性" class="headerlink" title="硬件层数据一致性"></a>硬件层数据一致性</h2><p>协议很多</p><p>intel 用MESI</p><p><a href="https://www.cnblogs.com/z00377750/p/9180644.html" target="_blank" rel="noopener">https://www.cnblogs.com/z00377750/p/9180644.html</a></p><p>现代CPU的数据一致性实现 = 缓存锁(MESI …) + 总线锁</p><p>读取缓存以cache line为基本单位，目前64bytes</p><p>位于同一缓存行的两个不同数据，被两个不同CPU锁定，产生互相影响的伪共享问题</p><p>伪共享问题：JUC/c_028_FalseSharing</p><p>使用缓存行的对齐能够提高效率</p><h2 id="乱序问题"><a href="#乱序问题" class="headerlink" title="乱序问题"></a>乱序问题</h2><p>CPU为了提高指令执行效率，会在一条指令执行过程中（比如去内存读数据（慢100倍）），去同时执行另一条指令，前提是，两条指令没有依赖关系</p><p><a href="https://www.cnblogs.com/liushaodong/p/4777308.html" target="_blank" rel="noopener">https://www.cnblogs.com/liushaodong/p/4777308.html</a></p><p>写操作也可以进行合并</p><p><a href="https://www.cnblogs.com/liushaodong/p/4777308.html" target="_blank" rel="noopener">https://www.cnblogs.com/liushaodong/p/4777308.html</a></p><p>JUC/029_WriteCombining</p><p>乱序执行的证明：JVM/jmm/Disorder.java</p><p>原始参考：<a href="https://preshing.com/20120515/memory-reordering-caught-in-the-act/" target="_blank" rel="noopener">https://preshing.com/20120515/memory-reordering-caught-in-the-act/</a></p><h2 id="如何保证特定情况下不乱序-1"><a href="#如何保证特定情况下不乱序-1" class="headerlink" title="如何保证特定情况下不乱序"></a>如何保证特定情况下不乱序</h2><p>硬件内存屏障 X86</p><blockquote><p> sfence:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。<br> lfence：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。<br> mfence：modify/mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</p></blockquote><blockquote><p>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</p></blockquote><p>JVM级别如何规范（JSR133）</p><blockquote><p>LoadLoad屏障：<br>    对于这样的语句Load1; LoadLoad; Load2， </p><pre><code>在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</code></pre><p>StoreStore屏障：</p><pre><code>对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</code></pre><p>LoadStore屏障：</p><pre><code>对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</code></pre><p>StoreLoad屏障：<br>    对于这样的语句Store1; StoreLoad; Load2，</p><p>​     在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</p></blockquote><p>volatile的实现细节</p><ol><li><p>字节码层面<br>ACC_VOLATILE</p></li><li><p>JVM层面<br>volatile内存区的读写 都加屏障</p><blockquote><p>StoreStoreBarrier</p><p>volatile 写操作</p><p>StoreLoadBarrier</p></blockquote><blockquote><p>LoadLoadBarrier</p><p>volatile 读操作</p><p>LoadStoreBarrier</p></blockquote></li><li><p>OS和硬件层面<br><a href="https://blog.csdn.net/qq_26222859/article/details/52235930" target="_blank" rel="noopener">https://blog.csdn.net/qq_26222859/article/details/52235930</a><br>hsdis - HotSpot Dis Assembler<br>windows lock 指令实现 | MESI实现</p></li></ol><p>synchronized实现细节</p><ol><li>字节码层面<br>ACC_SYNCHRONIZED<br>monitorenter monitorexit</li><li>JVM层面<br>C C++ 调用了操作系统提供的同步机制</li><li>OS和硬件层面<br>X86 : lock cmpxchg / xxx<br><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">https</a><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">://blog.csdn.net/21aspnet/article/details/</a><a href="https://blog.csdn.net/21aspnet/article/details/88571740" target="_blank" rel="noopener">88571740</a></li></ol><h1 id="使用JavaAgent测试Object的大小"><a href="#使用JavaAgent测试Object的大小" class="headerlink" title="使用JavaAgent测试Object的大小"></a>使用JavaAgent测试Object的大小</h1><p>作者：马士兵 <a href="http://www.mashibing.com" target="_blank" rel="noopener">http://www.mashibing.com</a></p><h2 id="对象大小（64位机）"><a href="#对象大小（64位机）" class="headerlink" title="对象大小（64位机）"></a>对象大小（64位机）</h2><h3 id="观察虚拟机配置-1"><a href="#观察虚拟机配置-1" class="headerlink" title="观察虚拟机配置"></a>观察虚拟机配置</h3><p>java -XX:+PrintCommandLineFlags -version</p><h3 id="普通对象-1"><a href="#普通对象-1" class="headerlink" title="普通对象"></a>普通对象</h3><ol><li>对象头：markword  8</li><li>ClassPointer指针：-XX:+UseCompressedClassPointers 为4字节 不开启为8字节</li><li>实例数据<ol><li>引用类型：-XX:+UseCompressedOops 为4字节 不开启为8字节<br>Oops Ordinary Object Pointers</li></ol></li><li>Padding对齐，8的倍数</li></ol><h3 id="数组对象-1"><a href="#数组对象-1" class="headerlink" title="数组对象"></a>数组对象</h3><ol><li>对象头：markword 8</li><li>ClassPointer指针同上</li><li>数组长度：4字节</li><li>数组数据</li><li>对齐 8的倍数</li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li><p>新建项目ObjectSize （1.8）</p></li><li><p>创建文件ObjectSizeAgent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.jvm.agent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSizeAgent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Instrumentation inst;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation _inst)</span> </span>&#123;</span><br><span class="line">        inst = _inst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sizeOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inst.getObjectSize(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src目录下创建META-INF/MANIFEST.MF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Created-By: mashibing.com</span><br><span class="line">Premain-Class: com.mashibing.jvm.agent.ObjectSizeAgent</span><br></pre></td></tr></table></figure><p>注意Premain-Class这行必须是新的一行（回车 + 换行），确认idea不能有任何错误提示</p></li><li><p>打包jar文件</p></li><li><p>在需要使用该Agent Jar的项目中引入该Jar包<br>project structure - project settings - library 添加该jar包</p></li><li><p>运行时需要该Agent Jar的类，加入参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:C:\work\ijprojects\ObjectSize\out\artifacts\ObjectSize_jar\ObjectSize.jar</span><br></pre></td></tr></table></figure></li><li><p>如何使用该类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">​```java</span><br><span class="line">   <span class="keyword">package</span> com.mashibing.jvm.c3_jmm;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">import</span> com.mashibing.jvm.agent.ObjectSizeAgent;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_SizeOfAnObject</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           System.out.println(ObjectSizeAgent.sizeOf(<span class="keyword">new</span> Object()));</span><br><span class="line">           System.out.println(ObjectSizeAgent.sizeOf(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;));</span><br><span class="line">           System.out.println(ObjectSizeAgent.sizeOf(<span class="keyword">new</span> P()));</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">                           <span class="comment">//8 _markword</span></span><br><span class="line">                           <span class="comment">//4 _oop指针</span></span><br><span class="line">           <span class="keyword">int</span> id;         <span class="comment">//4</span></span><br><span class="line">           String name;    <span class="comment">//4</span></span><br><span class="line">           <span class="keyword">int</span> age;        <span class="comment">//4</span></span><br><span class="line">   </span><br><span class="line">           <span class="keyword">byte</span> b1;        <span class="comment">//1</span></span><br><span class="line">           <span class="keyword">byte</span> b2;        <span class="comment">//1</span></span><br><span class="line">   </span><br><span class="line">           Object o;       <span class="comment">//4</span></span><br><span class="line">           <span class="keyword">byte</span> b3;        <span class="comment">//1</span></span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hotspot开启内存压缩的规则（64位机）"><a href="#Hotspot开启内存压缩的规则（64位机）" class="headerlink" title="Hotspot开启内存压缩的规则（64位机）"></a>Hotspot开启内存压缩的规则（64位机）</h2><ol><li>4G以下，直接砍掉高32位</li><li>4G - 32G，默认开启内存压缩 ClassPointers Oops</li><li>32G，压缩无效，使用64位<br>内存并不是越大越好（^-^）</li></ol><h2 id="IdentityHashCode的问题"><a href="#IdentityHashCode的问题" class="headerlink" title="IdentityHashCode的问题"></a>IdentityHashCode的问题</h2><p>回答白马非马的问题：</p><p>当一个对象计算过identityHashCode之后，不能进入偏向锁状态</p><p><a href="https://cloud.tencent.com/developer/article/1480590" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1480590</a><br> <a href="https://cloud.tencent.com/developer/article/1484167" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1484167</a></p><p><a href="https://cloud.tencent.com/developer/article/1485795" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1485795</a></p><p><a href="https://cloud.tencent.com/developer/article/1482500" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1482500</a></p><h2 id="对象定位"><a href="#对象定位" class="headerlink" title="对象定位"></a>对象定位</h2><p>•<a href="https://blog.csdn.net/clover_lily/article/details/80095580" target="_blank" rel="noopener">https://blog.csdn.net/clover_lily/article/details/80095580</a></p><ol><li>句柄池</li><li>直接指针</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务测试用例</title>
      <link href="/2020/05/03/MySQL%E4%BA%8B%E5%8A%A1%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
      <url>/2020/05/03/MySQL%E4%BA%8B%E5%8A%A1%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql事务测试"><a href="#mysql事务测试" class="headerlink" title="mysql事务测试"></a>mysql事务测试</h1><p>1、打开mysql的命令行，将自动提交事务给关闭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看是否是自动提交 1表示开启，0表示关闭</span></span><br><span class="line"><span class="keyword">select</span> @@autocommit;</span><br><span class="line"><span class="comment">--设置关闭</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>2、数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> tran;</span><br><span class="line"><span class="comment">--切换数据库 两个窗口都执行</span></span><br><span class="line"><span class="keyword">use</span> tran;</span><br><span class="line"><span class="comment">--准备数据</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> psn(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>)) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'lisi'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'wangwu'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>3、测试事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--事务包含四个隔离级别：从上往下，隔离级别越来越高，意味着数据越来越安全</span></span><br><span class="line">read uncommitted; <span class="comment">--读未提交</span></span><br><span class="line">read commited;<span class="comment">--读已提交</span></span><br><span class="line">repeatable read;<span class="comment">--可重复读</span></span><br><span class="line">(seariable)<span class="comment">--序列化执行，串行执行</span></span><br><span class="line"><span class="comment">--产生数据不一致的情况：</span></span><br><span class="line">脏读</span><br><span class="line">不可重复读</span><br><span class="line">幻读</span><br></pre></td></tr></table></figure><table><thead><tr><th>隔离级别</th><th>异常情况</th><th></th><th>异常情况</th></tr></thead><tbody><tr><td>读未提交</td><td>脏读</td><td>不可重复读</td><td>幻读</td></tr><tr><td>读已提交</td><td></td><td>不可重复读</td><td>幻读</td></tr><tr><td>可重复读</td><td></td><td></td><td>幻读</td></tr><tr><td>序列化</td><td></td><td></td><td></td></tr></tbody></table><p>4、测试1：脏读 read uncommitted</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line">A:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line">B:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line">A:<span class="keyword">update</span> psn <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'msb'</span>;</span><br><span class="line">A:selecet * from psn</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;  <span class="comment">--读取的结果msb。产生脏读，因为A事务并没有commit，读取到了不存在的数据</span></span><br><span class="line">A:<span class="keyword">commit</span>;</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn; <span class="comment">--读取的数据是msb,因为A事务已经commit，数据永久的被修改</span></span><br></pre></td></tr></table></figure><p>5、测试2：当使用read committed的时候，就不会出现脏读的情况了，当时会出现不可重复读的问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;</span><br><span class="line">A:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line">B:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line"><span class="comment">--执行到此处的时候发现，两个窗口读取的数据是一致的</span></span><br><span class="line">A:<span class="keyword">update</span> psn <span class="keyword">set</span> <span class="keyword">name</span> =<span class="string">'zhangsan'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line"><span class="comment">--执行到此处发现两个窗口读取的数据不一致，B窗口中读取不到更新的数据</span></span><br><span class="line">A:<span class="keyword">commit</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;<span class="comment">--读取到更新的数据</span></span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;<span class="comment">--也读取到更新的数据</span></span><br><span class="line"><span class="comment">--发现同一个事务中多次读取数据出现不一致的情况</span></span><br></pre></td></tr></table></figure><p>6、测试3：当使用repeatable read的时候(按照上面的步骤操作)，就不会出现不可重复读的问题，但是会出现幻读的问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line">A:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line">B:<span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line"><span class="comment">--此时两个窗口读取的数据是一致的</span></span><br><span class="line">A:<span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'sisi'</span>);</span><br><span class="line">A:<span class="keyword">commit</span>;</span><br><span class="line">A:<span class="keyword">select</span> * <span class="keyword">from</span> psn;<span class="comment">--读取到添加的数据</span></span><br><span class="line">B:<span class="keyword">select</span> * <span class="keyword">from</span> psn;<span class="comment">--读取不到添加的数据</span></span><br><span class="line">B:<span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'sisi'</span>);<span class="comment">--报错，无法插入数据</span></span><br><span class="line"><span class="comment">--此时发现读取不到数据，但是在插入的时候不允许插入，出现了幻读，设置更高级别的隔离级别即可解决</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Spring</title>
      <link href="/2020/04/05/%E5%88%9D%E8%AF%86Spring/"/>
      <url>/2020/04/05/%E5%88%9D%E8%AF%86Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring初识"><a href="#Spring初识" class="headerlink" title="Spring初识"></a>Spring初识</h1><h3 id="1、框架"><a href="#1、框架" class="headerlink" title="1、框架"></a>1、框架</h3><p>​        框架就是一些类和接口的集合，通过这些类和接口协调来完成一系列的程序实现。JAVA框架可以分为三层：表示层，业务层和物理层。框架又叫做开发中的半成品，它不能提供整个WEB应用程序的所有东西，但是有了框架，我们就可以集中精力进行业务逻辑的开发而不用去关心它的技术实现以及一些辅助的业务逻辑。大家熟知的Structs和Spring就是表示层和业务层框架的强力代表。（官方）</p><p>​        白话：</p><p>​        框架就是某些个人或者组织定义了一系列的类或者接口，提前定义好了一些实现，用户可以在这些类和接口的基础之上，使用这些类来迅速的形成某个领域或者某个行业的解决方案，简化开发的过程，提高开发的效率。就好比：你要盖一座房子，先把柱子，房梁等先建设好，然后只需要向房子中填充就可以了，可以按照自己的需求进行设计，其实我们做的项目、系统都是类似的方式，如果所有的代码全部都需要自己实现，那么这个工程就太庞大了，所以可以先创建出一些基础的模板框架，开发人员只需要按照自己的需求向架子中填充内容，完成自己独特需求即可，这就是框架存在的意义。其实我们之前定义的简单的工具类这些东西也是类似的原理，只不过比较单一简单而已，因此，在现在的很多项目系统开发的过程中都是利用框架进行开发。</p><h3 id="2、spring（春天）"><a href="#2、spring（春天）" class="headerlink" title="2、spring（春天）"></a>2、spring（春天）</h3><p><strong>架构设计</strong></p><p>​        随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/dubbo-architecture-roadmap-1596445585761.jpg" alt="image"></p><p>​        单一应用架构</p><p>​        当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p>​        垂直应用架构</p><p>​        当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p>​        分布式服务架构</p><p>​        当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p>​        流动计算架构</p><p>​        当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><p><strong>Java主流框架演变之路</strong></p><p>​        1、JSP+Servlet+JavaBean</p><p>​        2、MVC三层架构</p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/mvc-1596445585762.png" alt="mvc"></p><p>​        3、使用EJB进行应用的开发，但是EJB是重量级框架（在使用的时候，过多的接口和依赖，侵入性强），在使用上比较麻烦</p><p>​        4、Struts1/Struts2+Hibernate+Spring</p><p>​        5、SpringMVC+Mybatis+Spring</p><p>​        6、SpringBoot开发，约定大于配置</p><p><strong>Spring官网</strong></p><p>官网地址：<a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-framework#overview</a></p><p>压缩包下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p>源码地址：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Spring makes it easy to create Java enterprise applications. It provides everything you need to embrace the Java language in an enterprise environment, with support for Groovy and Kotlin as alternative languages on the JVM, and with the flexibility to create many kinds of architectures depending on an application’s needs. As of Spring Framework 5.1, Spring requires JDK 8+ (Java SE 8+) and provides out-of-the-box support for JDK 11 LTS. Java SE 8 update 60 is suggested as the minimum patch release for Java 8, but it is generally recommended to use a recent patch release.</span><br><span class="line"></span><br><span class="line">Spring supports a wide range of application scenarios. In a large enterprise, applications often exist for a long time and have to run on a JDK and application server whose upgrade cycle is beyond developer control. Others may run as a single jar with the server embedded, possibly in a cloud environment. Yet others may be standalone applications (such as batch or integration workloads) that do not need a server.</span><br><span class="line"></span><br><span class="line">Spring is open source. It has a large and active community that provides continuous feedback based on a diverse range of real-world use cases. This has helped Spring to successfully evolve over a very long time.</span><br><span class="line"></span><br><span class="line">Spring 使创建 Java 企业应用程序变得更加容易。它提供了在企业环境中接受 Java 语言所需的一切,，并支持 Groovy 和 Kotlin 作为 JVM 上的替代语言，并可根据应用程序的需要灵活地创建多种体系结构。 从 Spring Framework 5.0 开始，Spring 需要 JDK 8(Java SE 8+)，并且已经为 JDK 9 提供了现成的支持。</span><br><span class="line"></span><br><span class="line">Spring支持各种应用场景， 在大型企业中, 应用程序通常需要运行很长时间，而且必须运行在 jdk 和应用服务器上，这种场景开发人员无法控制其升级周期。 其他可能作为一个单独的jar嵌入到服务器去运行，也有可能在云环境中。还有一些可能是不需要服务器的独立应用程序(如批处理或集成的工作任务)。</span><br><span class="line"></span><br><span class="line">Spring 是开源的。它拥有一个庞大而且活跃的社区，提供不同范围的，真实用户的持续反馈。这也帮助Spring不断地改进,不断发展。</span><br></pre></td></tr></table></figure><p><strong>核心解释</strong></p><p>​        spring是一个开源框架。</p><p>​        spring是为了简化企业开发而生的，使得开发变得更加优雅和简洁。</p><p>​        spring是一个<strong>IOC</strong>和<strong>AOP</strong>的容器框架。</p><p>​                IOC：控制反转</p><p>​                AOP：面向切面编程</p><p>​                容器：包含并管理应用对象的生命周期，就好比用桶装水一样，spring就是桶，而对象就是水</p><p><strong>使用spring的优点</strong></p><p>​        1、Spring通过DI、AOP和消除样板式代码来简化企业级Java开发</p><p>​        2、Spring框架之外还存在一个构建在核心框架之上的庞大生态圈，它将Spring扩展到不同的领域，如Web服务、REST、移动开发以及NoSQL</p><p>​        3、低侵入式设计，代码的污染极低</p><p>​        4、独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺</p><p>​        5、Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦</p><p>​        6、Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式处理，从而提供了更好的复用</p><p>​        7、Spring的ORM和DAO提供了与第三方持久层框架的的良好整合，并简化了底层的数据库访问</p><p>​        8、Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部</p><p><strong>如何简化开发</strong></p><p>​        基于POJO的轻量级和最小侵入性编程</p><p>​        通过依赖注入和面向接口实现松耦合</p><p>​        基于切面和惯例进行声明式编程</p><p>​        通过切面和模板减少样板式代码</p><p><strong>spring的模块划分图</strong></p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/spring-overview-1596445585762.png" alt="overview"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模块解释：</span><br><span class="line">Test:Spring的单元测试模块</span><br><span class="line">Core Container:核心容器模块</span><br><span class="line">AOP+Aspects:面向切面编程模块</span><br><span class="line">Instrumentation:提供了class instrumentation支持和类加载器的实现来在特定的应用服务器上使用,几乎不用</span><br><span class="line">Messaging:包括一系列的用来映射消息到方法的注解,几乎不用</span><br><span class="line">Data Access&#x2F;Integration:数据的获取&#x2F;整合模块，包括了JDBC,ORM,OXM,JMS和事务模块</span><br><span class="line">Web:提供面向web整合特性</span><br></pre></td></tr></table></figure><h3 id="3、IOC（Inversion-of-Control）-控制反转"><a href="#3、IOC（Inversion-of-Control）-控制反转" class="headerlink" title="3、IOC（Inversion of Control）:控制反转"></a>3、IOC（Inversion of Control）:控制反转</h3><p><strong>为什么要引入IOC</strong></p><p>创建一个普通的java项目，完成下述功能</p><p>UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span>  <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoMysqlImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringDemoTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.impl.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">       service.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前的代码编写过程中，我们都是这么完成我们的功能的，但是如果增加一个UserDao的实现类呢？</p><p>UserDaoMysqlImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mysql"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要使用mysql的话，那么就必须要修改UserServiceImpl.java的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoMysqlImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们再增加一个oracle的类呢？</p><p>UserDaoOracleImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoOracleImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"oracle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时UserService还是要继续修改，很显然这样的方式已经不适用于我们的需求了，那么怎么解决呢，可以使用如下的方式</p><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类SpringDemoTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mashibing.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoMysqlImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.dao.impl.UserDaoOracleImpl;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.mashibing.service.impl.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoMysqlImpl());</span><br><span class="line">        userService.getUser();</span><br><span class="line"></span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoOracleImpl());</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实从刚刚的代码中，大家应该能体会解耦的重要性了，下面我们就开始学习Spring的IOC。</p><p><strong>IOC初始</strong></p><p>​        想要搞明白IOC，那么需要搞清楚如下几个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、谁控制谁</span><br><span class="line">2、控制什么</span><br><span class="line">3、什么是反转</span><br><span class="line">4、哪些方面被反转</span><br></pre></td></tr></table></figure><p><strong>基本概念</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IoC is also known as dependency injection (DI). It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.</span><br><span class="line">IOC与大家熟知的依赖注入同理，. 这是一个通过依赖注入对象的过程 也就是说，它们所使用的对象，是通过构造函数参数，工厂方法的参数或这是从工厂方法的构造函数或返回值的对象实例设置的属性，然后容器在创建bean时注入这些需要的依赖。 这个过程相对普通创建对象的过程是反向的（因此称之为IoC），bean本身通过直接构造类来控制依赖关系的实例化或位置，或提供诸如服务定位器模式之类的机制。</span><br></pre></td></tr></table></figure><p>如果这个过程比较难理解的话，那么可以想象自己找女朋友和婚介公司找女朋友的过程。如果这个过程能够想明白的话，那么我们现在回答上面的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、谁控制谁：在之前的编码过程中，都是需要什么对象自己去创建什么对象，有程序员自己来控制对象，而有了IOC容器之后，就会变成由IOC容器来控制对象，</span><br><span class="line">2、控制什么：在实现过程中所需要的对象及需要依赖的对象</span><br><span class="line">3、什么是反转：在没有IOC容器之前我们都是在对象中主动去创建依赖的对象，这是正转的，而有了IOC之后，依赖的对象直接由IOC容器创建后注入到对象中，由主动创建变成了被动接受，这是反转</span><br><span class="line">4、哪些方面被反转：依赖的对象</span><br></pre></td></tr></table></figure><p><strong>DI与IOC</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很多人把IOC和DI说成一个东西，笼统来说的话是没有问题的，但是本质上还是有所区别的,希望大家能够严谨一点，IOC和DI是从不同的角度描述的同一件事，IOC是从容器的角度描述，而DI是从应用程序的角度来描述，也可以这样说，IOC是设计思想，而DI是具体的实现方式</span><br></pre></td></tr></table></figure><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>​        总结一下Spring主要做的两件事：</p><p>​        <strong>1、解耦</strong></p><p>​        在面向对象设计的软件系统中，底层的实现都是由N个对象组成的，所有的对象通过彼此的合作，最终实现系统的业务逻辑。</p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/%E8%80%A6%E5%90%88%E5%AF%B9%E8%B1%A1-1596445585763.jpg" alt></p><p>​        需要注意的是，在这样的组合关系中，一旦某一个对象出现了问题，那么其他对象肯定回有所影响，这就是耦合性太高的缘故，但是对象的耦合关系是无法避免的，也是必要的。随着应用程序越来越庞大，对象的耦合关系可能越来越复杂，经常需要多重依赖关系，因此，无论是架构师还是程序员，在面临这样的场景的时候，都需要减少这些对象的耦合性。</p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/2011052709390013-1596445585763.jpg" alt></p><p>​        耦合的关系不仅仅是对象与对象之间，也会出现在软件系统的各个模块之间，是我们需要重点解决的问题。而为了解决对象之间的耦合度过高的问题，我们就可以通过IOC来实现对象之间的解耦，spring框架就是IOC理论最最广泛的应用。</p><p><img src="/2020/04/05/%E5%88%9D%E8%AF%86Spring/ioc-1596445585763.jpg" alt></p><p>​        从上图中可以看到，当引入了第三方的容器之后，几个对象之间就没有了耦合关系，全部对象都交由容器来控制，这个容器就相当于粘合剂，将系统的对象粘合在一起发挥作用。</p><p>​        <strong>2、生态</strong></p><p>​        任何一个语言或者任何一个框架想要立于不败之地，那么很重要的就是它的生态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC的注解使用</title>
      <link href="/2020/04/03/Spring%20IOC%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/03/Spring%20IOC%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IOC的注解使用"><a href="#Spring-IOC的注解使用" class="headerlink" title="Spring IOC的注解使用"></a>Spring IOC的注解使用</h1><p>​        在之前的项目中，我们都是通过xml文件进行bean或者某些属性的赋值，其实还有另外一种注解的方式，在企业开发中使用的很多，在bean上添加注解，可以快速的将bean注册到ioc容器。</p><h3 id="1、使用注解的方式注册bean到IOC容器中"><a href="#1、使用注解的方式注册bean到IOC容器中" class="headerlink" title="1、使用注解的方式注册bean到IOC容器中"></a>1、使用注解的方式注册bean到IOC容器中</h3><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    如果想要将自定义的bean对象添加到IOC容器中，需要在类上添加某些注解</span></span><br><span class="line"><span class="comment">    Spring中包含4个主要的组件添加注解：</span></span><br><span class="line"><span class="comment">    @Controller:控制器，推荐给controller层添加此注解</span></span><br><span class="line"><span class="comment">    @Service:业务逻辑，推荐给业务逻辑层添加此注解</span></span><br><span class="line"><span class="comment">    @Repository:仓库管理，推荐给数据访问层添加此注解</span></span><br><span class="line"><span class="comment">    @Component:给不属于以上基层的组件添加此注解</span></span><br><span class="line"><span class="comment">    注意：我们虽然人为的给不同的层添加不同的注解，但是在spring看来，可以在任意层添加任意注解</span></span><br><span class="line"><span class="comment">           spring底层是不会给具体的层次验证注解，这样写的目的只是为了提高可读性，最偷懒的方式</span></span><br><span class="line"><span class="comment">           就是给所有想交由IOC容器管理的bean对象添加component注解</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用注解需要如下步骤：</span></span><br><span class="line"><span class="comment">    1、添加上述四个注解中的任意一个</span></span><br><span class="line"><span class="comment">    2、添加自动扫描注解的组件，此操作需要依赖context命名空间</span></span><br><span class="line"><span class="comment">    3、添加自动扫描的标签context:component-scan</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：当使用注解注册组件和使用配置文件注册组件是一样的，但是要注意：</span></span><br><span class="line"><span class="comment">1、组件的id默认就是组件的类名首字符小写，如果非要改名字的话，直接在注解中添加即可</span></span><br><span class="line"><span class="comment">2、组件默认情况下都是单例的,如果需要配置多例模式的话，可以在注解下添加@Scope注解</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    定义自动扫描的基础包:</span></span><br><span class="line"><span class="comment">    base-package:指定扫描的基础包，spring在启动的时候会将基础包及子包下所有加了注解的类都自动</span></span><br><span class="line"><span class="comment">                扫描进IOC容器</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"personDao"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、定义扫描包时要包含的类和不要包含的类"><a href="#2、定义扫描包时要包含的类和不要包含的类" class="headerlink" title="2、定义扫描包时要包含的类和不要包含的类"></a>2、定义扫描包时要包含的类和不要包含的类</h3><p>​        当定义好基础的扫描包后，在某些情况下可能要有选择性的配置是否要注册bean到IOC容器中，此时可以通过如下的方式进行配置。</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.oi"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当定义好基础扫描的包之后，可以排除包中的某些类，使用如下的方式:</span></span><br><span class="line"><span class="comment">        type:表示指定过滤的规则</span></span><br><span class="line"><span class="comment">            annotation：按照注解进行排除，标注了指定注解的组件不要,expression表示要过滤的注解</span></span><br><span class="line"><span class="comment">            assignable：指定排除某个具体的类，按照类排除，expression表示不注册的具体类名</span></span><br><span class="line"><span class="comment">            aspectj：后面讲aop的时候说明要使用的aspectj表达式，不用</span></span><br><span class="line"><span class="comment">            custom：定义一个typeFilter,自己写代码决定哪些类被过滤掉，不用</span></span><br><span class="line"><span class="comment">            regex：使用正则表达式过滤，不用</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定只扫描哪些组件，默认情况下是全部扫描的，所以此时要配置的话需要在component-scan标签中添加 use-default-filters="false"--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"assignable"</span> <span class="attr">expression</span>=<span class="string">"com.oi.service.PersonService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、使用-AutoWired进行自动注入"><a href="#3、使用-AutoWired进行自动注入" class="headerlink" title="3、使用@AutoWired进行自动注入"></a>3、使用@AutoWired进行自动注入</h3><p>​        使用注解的方式实现自动注入需要使用@AutoWired注解。</p><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService personService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personService.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.PersonDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personDao.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PersonDao:getPerson"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：当使用AutoWired注解的时候，自动装配的时候是根据类型实现的。</p><p>​        1、如果只找到一个，则直接进行赋值，</p><p>​        2、如果没有找到，则直接抛出异常，</p><p>​        3、如果找到多个，那么会按照变量名作为id继续匹配,</p><p>​                1、匹配上直接进行装配</p><p>​                2、如果匹配不上则直接报异常</p><p>PersonServiceExt.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.PersonDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceExt</span> <span class="keyword">extends</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"PersonServiceExt......"</span>);</span><br><span class="line">        personDao.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService personServiceExt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personServiceExt.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        还可以使用@Qualifier注解来指定id的名称，让spring不要使用变量名,当使用@Qualifier注解的时候也会有两种情况：</p><p>​        1、找到，则直接装配</p><p>​        2、找不到，就会报错</p><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"personService"</span>)</span><br><span class="line">    <span class="keyword">private</span> PersonService personServiceExt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        personServiceExt2.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过上述的代码我们能够发现，使用@AutoWired肯定是能够装配上的，如果装配不上就会报错。</p><h3 id="4、-AutoWired可以进行定义在方法上"><a href="#4、-AutoWired可以进行定义在方法上" class="headerlink" title="4、@AutoWired可以进行定义在方法上"></a>4、@AutoWired可以进行定义在方法上</h3><p>​        当我们查看@AutoWired注解的源码的时候发现，此注解不仅可以使用在成员变量上，也可以使用在方法上。</p><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.PersonDao;</span><br><span class="line"><span class="keyword">import</span> com.oi.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"personService"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService personServiceExt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"personController..."</span>+personServiceExt2);</span><br><span class="line"><span class="comment">//        personServiceExt2.getPerson();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当方法上有<span class="doctag">@AutoWired</span>注解时：</span></span><br><span class="line"><span class="comment">     *  1、此方法在bean创建的时候会自动调用</span></span><br><span class="line"><span class="comment">     *  2、这个方法的每一个参数都会自动注入值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> personDao</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(PersonDao personDao)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"此方法被调用:"</span>+personDao);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Qualifier</span>注解也可以作用在属性上，用来被当作id去匹配容器中的对象，如果没有</span></span><br><span class="line"><span class="comment">     * 此注解，那么直接按照类型进行匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> personService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(@Qualifier(<span class="string">"personServiceExt"</span>)</span> PersonService personService)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"此方法被调用："</span>+personService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、自动装配的注解-AutoWired，-Resource"><a href="#5、自动装配的注解-AutoWired，-Resource" class="headerlink" title="5、自动装配的注解@AutoWired，@Resource"></a>5、自动装配的注解@AutoWired，@Resource</h3><p>​        在使用自动装配的时候，出了可以使用@AutoWired注解之外，还可以使用@Resource注解，大家需要知道这两个注解的区别。</p><p>​        1、@AutoWired:是spring中提供的注解，@Resource:是jdk中定义的注解，依靠的是java的标准</p><p>​        2、@AutoWired默认是按照类型进行装配，默认情况下要求依赖的对象必须存在，@Resource默认是按照名字进行匹配的，同时可以指定name属性。</p><p>​        3、@AutoWired只适合spring框架，而@Resource扩展性更好</p><p>PersonController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.PersonDao;</span><br><span class="line"><span class="keyword">import</span> com.oi.service.PersonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"personService"</span>)</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PersonService personServiceExt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"personController..."</span>+personServiceExt2);</span><br><span class="line">        personServiceExt2.getPerson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当方法上有<span class="doctag">@AutoWired</span>注解时：</span></span><br><span class="line"><span class="comment">     *  1、此方法在bean创建的时候会自动调用</span></span><br><span class="line"><span class="comment">     *  2、这个方法的每一个参数都会自动注入值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> personDao</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(PersonDao personDao)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"此方法被调用:"</span>+personDao);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Qualifier</span>注解也可以作用在属性上，用来被当作id去匹配容器中的对象，如果没有</span></span><br><span class="line"><span class="comment">     * 此注解，那么直接按照类型进行匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> personService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(@Qualifier(<span class="string">"personServiceExt"</span>)</span> PersonService personService)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"此方法被调用："</span>+personService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、泛型依赖注入"><a href="#6、泛型依赖注入" class="headerlink" title="6、泛型依赖注入"></a>6、泛型依赖注入</h3><p>​        为了讲解泛型依赖注入，首先我们需要先写一个基本的案例，按照我们之前学习的知识：</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Teacher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BaseDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存学生"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Teacher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Teacher</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存老师"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        studentDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.TeacherDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherDao teacherDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        teacherDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.oi.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> com.oi.service.TeacherService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        StudentService studentService = context.getBean(<span class="string">"studentService"</span>,StudentService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        studentService.save();</span><br><span class="line"></span><br><span class="line">        TeacherService teacherService = context.getBean(<span class="string">"teacherService"</span>,TeacherService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        teacherService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        上述代码是我们之前的可以完成的功能，但是可以思考，Service层的代码是否能够改写：</p><p>BaseService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BaseDao&lt;T&gt; baseDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自动注入的对象："</span>+baseDao);</span><br><span class="line">        baseDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.oi.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TeacherService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oi.bean.Teacher;</span><br><span class="line"><span class="keyword">import</span> com.oi.dao.TeacherDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Teacher</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
